mkdir abc{1..6}
echo {a..z}
echo {0..10}
echo {0..1000..5}
mkdir abc{1..10}
ls abc[12345]
rm -rf abc{1..10}
cat > test  and CTRL+d to save to the input to file
head -n 5 filename
head -n -5 filename
tail -n 5 filename
wc -l filename //lines
wc -w filename //words
wc -c filename //characters
diff -y file1 file2 //
diff -w file1 file2 //ignore whitespaces 
mkdir -p bbb/aaa/ccc //auto create non-exist parent dir
mkdir -m 777 foldname //set access
chmod u+s filename //setuid, user can execute the filename with user right
chmod g+s filename //setgid, user can execute the filename with group right
sort test
sort -u testnum //remove duplicate lines
sort -n testnum //sort as numbers
sort -r testnum //reverse order
sort -t ',' -k2n,2 testn2 //multiple column sort
sort -t ',' -k2nr,2 testn2 //multiple column sort, reverse order
uniq test //remove duplicate lines
uniq -c test //show duplicate num of different line
uniq -d test //only show all duplicate lines for once
uniq -D test //show all duplicate lines
echo test | tr a-z A-Z //replace characters with upper case
echo "{test}" | tr '{}' '()' //change {} to ()
echo "This is a TEST" | tr -d a-z //remove all lower case characters
grep -w 123 test //only match 123
grep -w 123 -c test //show the match number
grep -n 123 test //show the matched line number
grep -v 123 test //show the unmatched line
grep --color 123 test //with color
id username //show user info, uid, gid, groups
dd if=/dev/zero of=./testfile bs=1024 count=1024 //create a file
dd if=/dev/sda of=./MBR.image bs=512 count=1
tar -tzvf filename.tar.gz //list files without unzip it
$BASH
$HOME
$IFS
$OSTYPE
$SECONDS
$TMOUT
$UID
$* => 所有位置参数，用IFS隔开
$@ => 所有位置参数，空格隔开， "$@"，可用于for循环
$# => 位置参数个数
$? => 最近一次前台执行shell命令执行结果， 0为正确，非0为错误。
$！ => 最近一次执行的后台命令的进程号
$_ => 前次执行的最后一个参数
$$ => 当前shell进程号
set one two three => $1 $2 $3赋值
declare => 声明变量和修改变量属性 -r 只读, -a 数组, unset可以消除数组或者某个数组变量
nohup command .... & => 后台执行命令， 并不随着ssh session退出而终止
exit code => 以code(0-255)码退出， 正常为0

===========脚本调试==================
bash -x shell_script //调试模式运行脚本
bash -v shell_script //激活详细输出模式
bash -xv shell_script

$PS4可以增加调试信息   //PS1 - shell prompt, PS2 - prompt for too long line, PS3 - for bash select, PS4 - for bash trace
export PS4='+{$LINENO:${FUNCNAME[0]}}'

set -x => 打开调试代码段
uname -a
set +x => 关闭调试代码段

test -d "$HOME"; echo $? //test if there is $HOME folder, -f => file, -S => socket, -p => pipe
-eq相等, -ne不等, -le小于等于, -ge大于等于, -lt小于, -gt大于 => 比较大小
if condition; then commands; fi

if condition; then
   commands
fi

if condition
then
   commands
fi

grep "^jamema" /etc/passwd && "jamema found" || "jamema not found" ///第一个命令成功执行&&后的第二个命令，否则执行||后的第三个命令

if [ -n $var && -e $var]   //存在var变量且var变量的文件名存在
then
...
fi
getopt f:vl -vl -f bbvar dddd
getopt f:vl -vlf bbvar dddd
command > /dev/null   #redirect all standard output to null
command &> /dev/null  command >& /dev/null  command > /dev/null 2>&1  #redirect all standard output/error log to null
command 2> /tmp/error.log
command 2> /dev/null 
du -s /home/* | sort -rn > usage.txt
command &> filename  ##redirect all standard output and error to file
command >& filename ##redirect all standard output and error to file
command > filename 2>&1 ##redirect all standard output and error to file
command 2>&1 > filename ##redirect all standard output and error to file
exec 3< filename #use fd 3 to open filename to read
cat <& 3  #copy fd 3 as standard input
exec 3<&-   #close fd 3

exec 4> /tmp/output.txt #use fd 4 to open filename to write
date >&4
uname -a >&4
exec 4>&-

exec 4<> /tmp/inputoutput.txt #use fd 4 to open filename to read and write

command > filename #connect command and file to output
command1 | command2 #use pipe to connect: output of command1 is input of command2
tar czvf - /home/jamema | ssh root@remotehost "cat > /home/remoteuser/backup.tgz"
tar czf - /home/jamema | ssh remote_host "( cd /backup; tar xzf - )"
tr -dc A-Za-z0-9_ </dev/urandom | head -c7 | xargs
cat test | tr '\n' ' ' | xargs #列变行
awk, cut, grep, tar, head, paste, sed, sort, split, strings, tac, tail, tee, tr, uniq, wc ##用于管道过滤器
awk -F: '{print $1}' /etc/passwd | sort #以:分割，取第一列排序显示
history | awk '{print $2}' | sort | uniq -c | sort -rn | head 
grep "/bin/bash" /etc/passwd | cut -d: -f1,6
cat /proc/cpuinfo | grep name | cut -d: -f2 | uniq
ls -l | cut -c 1 | grep d | wc -l #当前目录下子目录个数
ls -l | grep "^d" | wc -l #当前目录下子目录个数
rpm -qa | grep kernel
ls /usr/bin | head # list the first 10 line
cat file1 | paste -d, - file2  #合并file1,file2，列间以,隔开
echo front | sed 's/front/back/'
cat -n test | sed '3,10d' #显示除3-10行外的部分
cat -n test | sed -n '3,10p' #只显示3-10行
sudo dd if=/dev/mem bs=1k skip=768 count=256 2>/dev/null | strings -n 32 | less #打印BIOS中信息，需root权限
tar czv - backup | split -b 5m - backup.tar.gz #压缩并按照5M大小拆分文件
ls /etc | tee /tmp/ls.outputi ls1.output #显示到屏幕，同时输出到另外一个或者两个文件, tee -a 追加
echo abc | tee - - - #三次重复复制到标准输出
tr [:space:] '\t'
tr -d [:digit:]      tr -d '0-9'    tr [:lower:] [:upper:]    tr 'a-z' 'A-Z'

sleep 30 &
jobs -l  #列出当前shell下所有作业
disown %1 #从当前shell作业表中删除
jobs -l  #确认删除
ps -ef | grep sleep #作业后台运行中
echo $$ #当前shell进程号


ps -o pid,ppid,cmd,stat

ps -ef #Standard format

ps aux #BSD format

pstree pid #show pstree of one pid
pstree pid -p #show individual pid
pstree jamema #show pstree of user jamema
pgrep -u jamema,redis #list pid of user jamema,redis

kill -l #list all signals

kill #by default, SIGTERM is sent

kill -9 pid # send SIGKILL to pid

killall firefox #kill all firefox processes

###pkill

move pid to nohup state
CTRL+Z   #move to background
disown %num  #remove from own job list
kill -SIGCONT pid  #let process continue

(command1;command2;command3;...)  #will start a new shell

$BASH_SUBSHELL #shell的嵌套层数

FILE=`mktemp -u /tmp/testtrap.$$.XXXX`  #create temp file, but not actually create the file
echo $FILE
trap "echo this is a test" ERR  #set trap command
rm $FILE    #trigger teh error signal



