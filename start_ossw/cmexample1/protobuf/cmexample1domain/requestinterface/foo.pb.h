// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/cmexample1domain/requestinterface/foo.proto

#ifndef PROTOBUF_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cmexample1domain {
namespace requestinterface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto();
void protobuf_AssignDesc_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto();
void protobuf_ShutdownFile_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto();

class Foo;

// ===================================================================

class Foo : public ::google::protobuf::Message {
 public:
  Foo();
  virtual ~Foo();

  Foo(const Foo& from);

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Foo& default_instance();

  void Swap(Foo* other);

  // implements Message ----------------------------------------------

  Foo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // repeated string value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const char* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:cmexample1domain.requestinterface.Foo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto();

  void InitAsDefaultInstance();
  static Foo* default_instance_;
};
// ===================================================================


// ===================================================================

// Foo

// optional int32 id = 1;
inline bool Foo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Foo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Foo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Foo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Foo::id() const {
  // @@protoc_insertion_point(field_get:cmexample1domain.requestinterface.Foo.id)
  return id_;
}
inline void Foo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cmexample1domain.requestinterface.Foo.id)
}

// optional string description = 2;
inline bool Foo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Foo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Foo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Foo::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Foo::description() const {
  // @@protoc_insertion_point(field_get:cmexample1domain.requestinterface.Foo.description)
  return *description_;
}
inline void Foo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:cmexample1domain.requestinterface.Foo.description)
}
inline void Foo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:cmexample1domain.requestinterface.Foo.description)
}
inline void Foo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmexample1domain.requestinterface.Foo.description)
}
inline ::std::string* Foo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cmexample1domain.requestinterface.Foo.description)
  return description_;
}
inline ::std::string* Foo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Foo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cmexample1domain.requestinterface.Foo.description)
}

// repeated string value = 3;
inline int Foo::value_size() const {
  return value_.size();
}
inline void Foo::clear_value() {
  value_.Clear();
}
inline const ::std::string& Foo::value(int index) const {
  // @@protoc_insertion_point(field_get:cmexample1domain.requestinterface.Foo.value)
  return value_.Get(index);
}
inline ::std::string* Foo::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:cmexample1domain.requestinterface.Foo.value)
  return value_.Mutable(index);
}
inline void Foo::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmexample1domain.requestinterface.Foo.value)
  value_.Mutable(index)->assign(value);
}
inline void Foo::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmexample1domain.requestinterface.Foo.value)
}
inline void Foo::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmexample1domain.requestinterface.Foo.value)
}
inline ::std::string* Foo::add_value() {
  return value_.Add();
}
inline void Foo::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmexample1domain.requestinterface.Foo.value)
}
inline void Foo::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmexample1domain.requestinterface.Foo.value)
}
inline void Foo::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmexample1domain.requestinterface.Foo.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Foo::value() const {
  // @@protoc_insertion_point(field_list:cmexample1domain.requestinterface.Foo.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Foo::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:cmexample1domain.requestinterface.Foo.value)
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace requestinterface
}  // namespace cmexample1domain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fcmexample1domain_2frequestinterface_2ffoo_2eproto__INCLUDED
