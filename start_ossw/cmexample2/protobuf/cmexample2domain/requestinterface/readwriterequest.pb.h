// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/cmexample2domain/requestinterface/readwriterequest.proto

#ifndef PROTOBUF_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/cmexample2domain/requestinterface/addbuildingrequest.pb.h"
#include "protobuf/cmexample2domain/requestinterface/deletebuildingrequest.pb.h"
#include "protobuf/cmexample2domain/requestinterface/addcitizenrequest.pb.h"
#include "protobuf/cmexample2domain/requestinterface/deletecitizenrequest.pb.h"
#include "protobuf/cmexample2domain/requestinterface/clearallrequest.pb.h"
// @@protoc_insertion_point(includes)

namespace cmexample2domain {
namespace requestinterface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto();
void protobuf_AssignDesc_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto();
void protobuf_ShutdownFile_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto();

class ReadWriteRequest;

// ===================================================================

class ReadWriteRequest : public ::google::protobuf::Message {
 public:
  ReadWriteRequest();
  virtual ~ReadWriteRequest();

  ReadWriteRequest(const ReadWriteRequest& from);

  inline ReadWriteRequest& operator=(const ReadWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteRequest& default_instance();

  enum ReadWriteRequestCase {
    kAddBuildingRequest = 1,
    kDeleteBuildingRequest = 2,
    kAddCitizenRequest = 3,
    kDeleteCitizenRequest = 4,
    kClearAllRequest = 5,
    READWRITEREQUEST_NOT_SET = 0,
  };

  void Swap(ReadWriteRequest* other);

  // implements Message ----------------------------------------------

  ReadWriteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteRequest& from);
  void MergeFrom(const ReadWriteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cmexample2domain.requestinterface.AddBuildingRequest addBuildingRequest = 1;
  inline bool has_addbuildingrequest() const;
  inline void clear_addbuildingrequest();
  static const int kAddBuildingRequestFieldNumber = 1;
  inline const ::cmexample2domain::requestinterface::AddBuildingRequest& addbuildingrequest() const;
  inline ::cmexample2domain::requestinterface::AddBuildingRequest* mutable_addbuildingrequest();
  inline ::cmexample2domain::requestinterface::AddBuildingRequest* release_addbuildingrequest();
  inline void set_allocated_addbuildingrequest(::cmexample2domain::requestinterface::AddBuildingRequest* addbuildingrequest);

  // optional .cmexample2domain.requestinterface.DeleteBuildingRequest deleteBuildingRequest = 2;
  inline bool has_deletebuildingrequest() const;
  inline void clear_deletebuildingrequest();
  static const int kDeleteBuildingRequestFieldNumber = 2;
  inline const ::cmexample2domain::requestinterface::DeleteBuildingRequest& deletebuildingrequest() const;
  inline ::cmexample2domain::requestinterface::DeleteBuildingRequest* mutable_deletebuildingrequest();
  inline ::cmexample2domain::requestinterface::DeleteBuildingRequest* release_deletebuildingrequest();
  inline void set_allocated_deletebuildingrequest(::cmexample2domain::requestinterface::DeleteBuildingRequest* deletebuildingrequest);

  // optional .cmexample2domain.requestinterface.AddCitizenRequest addCitizenRequest = 3;
  inline bool has_addcitizenrequest() const;
  inline void clear_addcitizenrequest();
  static const int kAddCitizenRequestFieldNumber = 3;
  inline const ::cmexample2domain::requestinterface::AddCitizenRequest& addcitizenrequest() const;
  inline ::cmexample2domain::requestinterface::AddCitizenRequest* mutable_addcitizenrequest();
  inline ::cmexample2domain::requestinterface::AddCitizenRequest* release_addcitizenrequest();
  inline void set_allocated_addcitizenrequest(::cmexample2domain::requestinterface::AddCitizenRequest* addcitizenrequest);

  // optional .cmexample2domain.requestinterface.DeleteCitizenRequest deleteCitizenRequest = 4;
  inline bool has_deletecitizenrequest() const;
  inline void clear_deletecitizenrequest();
  static const int kDeleteCitizenRequestFieldNumber = 4;
  inline const ::cmexample2domain::requestinterface::DeleteCitizenRequest& deletecitizenrequest() const;
  inline ::cmexample2domain::requestinterface::DeleteCitizenRequest* mutable_deletecitizenrequest();
  inline ::cmexample2domain::requestinterface::DeleteCitizenRequest* release_deletecitizenrequest();
  inline void set_allocated_deletecitizenrequest(::cmexample2domain::requestinterface::DeleteCitizenRequest* deletecitizenrequest);

  // optional .cmexample2domain.requestinterface.ClearAllRequest clearAllRequest = 5;
  inline bool has_clearallrequest() const;
  inline void clear_clearallrequest();
  static const int kClearAllRequestFieldNumber = 5;
  inline const ::cmexample2domain::requestinterface::ClearAllRequest& clearallrequest() const;
  inline ::cmexample2domain::requestinterface::ClearAllRequest* mutable_clearallrequest();
  inline ::cmexample2domain::requestinterface::ClearAllRequest* release_clearallrequest();
  inline void set_allocated_clearallrequest(::cmexample2domain::requestinterface::ClearAllRequest* clearallrequest);

  inline ReadWriteRequestCase readWriteRequest_case() const;
  // @@protoc_insertion_point(class_scope:cmexample2domain.requestinterface.ReadWriteRequest)
 private:
  inline void set_has_addbuildingrequest();
  inline void set_has_deletebuildingrequest();
  inline void set_has_addcitizenrequest();
  inline void set_has_deletecitizenrequest();
  inline void set_has_clearallrequest();

  inline bool has_readWriteRequest();
  void clear_readWriteRequest();
  inline void clear_has_readWriteRequest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ReadWriteRequestUnion {
    ::cmexample2domain::requestinterface::AddBuildingRequest* addbuildingrequest_;
    ::cmexample2domain::requestinterface::DeleteBuildingRequest* deletebuildingrequest_;
    ::cmexample2domain::requestinterface::AddCitizenRequest* addcitizenrequest_;
    ::cmexample2domain::requestinterface::DeleteCitizenRequest* deletecitizenrequest_;
    ::cmexample2domain::requestinterface::ClearAllRequest* clearallrequest_;
  } readWriteRequest_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ReadWriteRequest

// optional .cmexample2domain.requestinterface.AddBuildingRequest addBuildingRequest = 1;
inline bool ReadWriteRequest::has_addbuildingrequest() const {
  return readWriteRequest_case() == kAddBuildingRequest;
}
inline void ReadWriteRequest::set_has_addbuildingrequest() {
  _oneof_case_[0] = kAddBuildingRequest;
}
inline void ReadWriteRequest::clear_addbuildingrequest() {
  if (has_addbuildingrequest()) {
    delete readWriteRequest_.addbuildingrequest_;
    clear_has_readWriteRequest();
  }
}
inline const ::cmexample2domain::requestinterface::AddBuildingRequest& ReadWriteRequest::addbuildingrequest() const {
  return has_addbuildingrequest() ? *readWriteRequest_.addbuildingrequest_
                      : ::cmexample2domain::requestinterface::AddBuildingRequest::default_instance();
}
inline ::cmexample2domain::requestinterface::AddBuildingRequest* ReadWriteRequest::mutable_addbuildingrequest() {
  if (!has_addbuildingrequest()) {
    clear_readWriteRequest();
    set_has_addbuildingrequest();
    readWriteRequest_.addbuildingrequest_ = new ::cmexample2domain::requestinterface::AddBuildingRequest;
  }
  return readWriteRequest_.addbuildingrequest_;
}
inline ::cmexample2domain::requestinterface::AddBuildingRequest* ReadWriteRequest::release_addbuildingrequest() {
  if (has_addbuildingrequest()) {
    clear_has_readWriteRequest();
    ::cmexample2domain::requestinterface::AddBuildingRequest* temp = readWriteRequest_.addbuildingrequest_;
    readWriteRequest_.addbuildingrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadWriteRequest::set_allocated_addbuildingrequest(::cmexample2domain::requestinterface::AddBuildingRequest* addbuildingrequest) {
  clear_readWriteRequest();
  if (addbuildingrequest) {
    set_has_addbuildingrequest();
    readWriteRequest_.addbuildingrequest_ = addbuildingrequest;
  }
}

// optional .cmexample2domain.requestinterface.DeleteBuildingRequest deleteBuildingRequest = 2;
inline bool ReadWriteRequest::has_deletebuildingrequest() const {
  return readWriteRequest_case() == kDeleteBuildingRequest;
}
inline void ReadWriteRequest::set_has_deletebuildingrequest() {
  _oneof_case_[0] = kDeleteBuildingRequest;
}
inline void ReadWriteRequest::clear_deletebuildingrequest() {
  if (has_deletebuildingrequest()) {
    delete readWriteRequest_.deletebuildingrequest_;
    clear_has_readWriteRequest();
  }
}
inline const ::cmexample2domain::requestinterface::DeleteBuildingRequest& ReadWriteRequest::deletebuildingrequest() const {
  return has_deletebuildingrequest() ? *readWriteRequest_.deletebuildingrequest_
                      : ::cmexample2domain::requestinterface::DeleteBuildingRequest::default_instance();
}
inline ::cmexample2domain::requestinterface::DeleteBuildingRequest* ReadWriteRequest::mutable_deletebuildingrequest() {
  if (!has_deletebuildingrequest()) {
    clear_readWriteRequest();
    set_has_deletebuildingrequest();
    readWriteRequest_.deletebuildingrequest_ = new ::cmexample2domain::requestinterface::DeleteBuildingRequest;
  }
  return readWriteRequest_.deletebuildingrequest_;
}
inline ::cmexample2domain::requestinterface::DeleteBuildingRequest* ReadWriteRequest::release_deletebuildingrequest() {
  if (has_deletebuildingrequest()) {
    clear_has_readWriteRequest();
    ::cmexample2domain::requestinterface::DeleteBuildingRequest* temp = readWriteRequest_.deletebuildingrequest_;
    readWriteRequest_.deletebuildingrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadWriteRequest::set_allocated_deletebuildingrequest(::cmexample2domain::requestinterface::DeleteBuildingRequest* deletebuildingrequest) {
  clear_readWriteRequest();
  if (deletebuildingrequest) {
    set_has_deletebuildingrequest();
    readWriteRequest_.deletebuildingrequest_ = deletebuildingrequest;
  }
}

// optional .cmexample2domain.requestinterface.AddCitizenRequest addCitizenRequest = 3;
inline bool ReadWriteRequest::has_addcitizenrequest() const {
  return readWriteRequest_case() == kAddCitizenRequest;
}
inline void ReadWriteRequest::set_has_addcitizenrequest() {
  _oneof_case_[0] = kAddCitizenRequest;
}
inline void ReadWriteRequest::clear_addcitizenrequest() {
  if (has_addcitizenrequest()) {
    delete readWriteRequest_.addcitizenrequest_;
    clear_has_readWriteRequest();
  }
}
inline const ::cmexample2domain::requestinterface::AddCitizenRequest& ReadWriteRequest::addcitizenrequest() const {
  return has_addcitizenrequest() ? *readWriteRequest_.addcitizenrequest_
                      : ::cmexample2domain::requestinterface::AddCitizenRequest::default_instance();
}
inline ::cmexample2domain::requestinterface::AddCitizenRequest* ReadWriteRequest::mutable_addcitizenrequest() {
  if (!has_addcitizenrequest()) {
    clear_readWriteRequest();
    set_has_addcitizenrequest();
    readWriteRequest_.addcitizenrequest_ = new ::cmexample2domain::requestinterface::AddCitizenRequest;
  }
  return readWriteRequest_.addcitizenrequest_;
}
inline ::cmexample2domain::requestinterface::AddCitizenRequest* ReadWriteRequest::release_addcitizenrequest() {
  if (has_addcitizenrequest()) {
    clear_has_readWriteRequest();
    ::cmexample2domain::requestinterface::AddCitizenRequest* temp = readWriteRequest_.addcitizenrequest_;
    readWriteRequest_.addcitizenrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadWriteRequest::set_allocated_addcitizenrequest(::cmexample2domain::requestinterface::AddCitizenRequest* addcitizenrequest) {
  clear_readWriteRequest();
  if (addcitizenrequest) {
    set_has_addcitizenrequest();
    readWriteRequest_.addcitizenrequest_ = addcitizenrequest;
  }
}

// optional .cmexample2domain.requestinterface.DeleteCitizenRequest deleteCitizenRequest = 4;
inline bool ReadWriteRequest::has_deletecitizenrequest() const {
  return readWriteRequest_case() == kDeleteCitizenRequest;
}
inline void ReadWriteRequest::set_has_deletecitizenrequest() {
  _oneof_case_[0] = kDeleteCitizenRequest;
}
inline void ReadWriteRequest::clear_deletecitizenrequest() {
  if (has_deletecitizenrequest()) {
    delete readWriteRequest_.deletecitizenrequest_;
    clear_has_readWriteRequest();
  }
}
inline const ::cmexample2domain::requestinterface::DeleteCitizenRequest& ReadWriteRequest::deletecitizenrequest() const {
  return has_deletecitizenrequest() ? *readWriteRequest_.deletecitizenrequest_
                      : ::cmexample2domain::requestinterface::DeleteCitizenRequest::default_instance();
}
inline ::cmexample2domain::requestinterface::DeleteCitizenRequest* ReadWriteRequest::mutable_deletecitizenrequest() {
  if (!has_deletecitizenrequest()) {
    clear_readWriteRequest();
    set_has_deletecitizenrequest();
    readWriteRequest_.deletecitizenrequest_ = new ::cmexample2domain::requestinterface::DeleteCitizenRequest;
  }
  return readWriteRequest_.deletecitizenrequest_;
}
inline ::cmexample2domain::requestinterface::DeleteCitizenRequest* ReadWriteRequest::release_deletecitizenrequest() {
  if (has_deletecitizenrequest()) {
    clear_has_readWriteRequest();
    ::cmexample2domain::requestinterface::DeleteCitizenRequest* temp = readWriteRequest_.deletecitizenrequest_;
    readWriteRequest_.deletecitizenrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadWriteRequest::set_allocated_deletecitizenrequest(::cmexample2domain::requestinterface::DeleteCitizenRequest* deletecitizenrequest) {
  clear_readWriteRequest();
  if (deletecitizenrequest) {
    set_has_deletecitizenrequest();
    readWriteRequest_.deletecitizenrequest_ = deletecitizenrequest;
  }
}

// optional .cmexample2domain.requestinterface.ClearAllRequest clearAllRequest = 5;
inline bool ReadWriteRequest::has_clearallrequest() const {
  return readWriteRequest_case() == kClearAllRequest;
}
inline void ReadWriteRequest::set_has_clearallrequest() {
  _oneof_case_[0] = kClearAllRequest;
}
inline void ReadWriteRequest::clear_clearallrequest() {
  if (has_clearallrequest()) {
    delete readWriteRequest_.clearallrequest_;
    clear_has_readWriteRequest();
  }
}
inline const ::cmexample2domain::requestinterface::ClearAllRequest& ReadWriteRequest::clearallrequest() const {
  return has_clearallrequest() ? *readWriteRequest_.clearallrequest_
                      : ::cmexample2domain::requestinterface::ClearAllRequest::default_instance();
}
inline ::cmexample2domain::requestinterface::ClearAllRequest* ReadWriteRequest::mutable_clearallrequest() {
  if (!has_clearallrequest()) {
    clear_readWriteRequest();
    set_has_clearallrequest();
    readWriteRequest_.clearallrequest_ = new ::cmexample2domain::requestinterface::ClearAllRequest;
  }
  return readWriteRequest_.clearallrequest_;
}
inline ::cmexample2domain::requestinterface::ClearAllRequest* ReadWriteRequest::release_clearallrequest() {
  if (has_clearallrequest()) {
    clear_has_readWriteRequest();
    ::cmexample2domain::requestinterface::ClearAllRequest* temp = readWriteRequest_.clearallrequest_;
    readWriteRequest_.clearallrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ReadWriteRequest::set_allocated_clearallrequest(::cmexample2domain::requestinterface::ClearAllRequest* clearallrequest) {
  clear_readWriteRequest();
  if (clearallrequest) {
    set_has_clearallrequest();
    readWriteRequest_.clearallrequest_ = clearallrequest;
  }
}

inline bool ReadWriteRequest::has_readWriteRequest() {
  return readWriteRequest_case() != READWRITEREQUEST_NOT_SET;
}
inline void ReadWriteRequest::clear_has_readWriteRequest() {
  _oneof_case_[0] = READWRITEREQUEST_NOT_SET;
}
inline ReadWriteRequest::ReadWriteRequestCase ReadWriteRequest::readWriteRequest_case() const {
  return ReadWriteRequest::ReadWriteRequestCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace requestinterface
}  // namespace cmexample2domain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fcmexample2domain_2frequestinterface_2freadwriterequest_2eproto__INCLUDED
