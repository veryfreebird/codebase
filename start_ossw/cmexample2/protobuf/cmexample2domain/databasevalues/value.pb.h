// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/cmexample2domain/databasevalues/value.proto

#ifndef PROTOBUF_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/cmexample2domain/databasevalues/infrastructure.pb.h"
#include "protobuf/cmexample2domain/databasevalues/citizen.pb.h"
// @@protoc_insertion_point(includes)

namespace cmexample2domain {
namespace databasevalues {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto();
void protobuf_AssignDesc_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto();
void protobuf_ShutdownFile_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto();

class Value;

// ===================================================================

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  enum ValueCase {
    kInfrastructure = 1,
    kCitizen = 2,
    VALUE_NOT_SET = 0,
  };

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cmexample2domain.databasevalues.Infrastructure infrastructure = 1;
  inline bool has_infrastructure() const;
  inline void clear_infrastructure();
  static const int kInfrastructureFieldNumber = 1;
  inline const ::cmexample2domain::databasevalues::Infrastructure& infrastructure() const;
  inline ::cmexample2domain::databasevalues::Infrastructure* mutable_infrastructure();
  inline ::cmexample2domain::databasevalues::Infrastructure* release_infrastructure();
  inline void set_allocated_infrastructure(::cmexample2domain::databasevalues::Infrastructure* infrastructure);

  // optional .cmexample2domain.databasevalues.Citizen citizen = 2;
  inline bool has_citizen() const;
  inline void clear_citizen();
  static const int kCitizenFieldNumber = 2;
  inline const ::cmexample2domain::databasevalues::Citizen& citizen() const;
  inline ::cmexample2domain::databasevalues::Citizen* mutable_citizen();
  inline ::cmexample2domain::databasevalues::Citizen* release_citizen();
  inline void set_allocated_citizen(::cmexample2domain::databasevalues::Citizen* citizen);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cmexample2domain.databasevalues.Value)
 private:
  inline void set_has_infrastructure();
  inline void set_has_citizen();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ValueUnion {
    ::cmexample2domain::databasevalues::Infrastructure* infrastructure_;
    ::cmexample2domain::databasevalues::Citizen* citizen_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// ===================================================================


// ===================================================================

// Value

// optional .cmexample2domain.databasevalues.Infrastructure infrastructure = 1;
inline bool Value::has_infrastructure() const {
  return value_case() == kInfrastructure;
}
inline void Value::set_has_infrastructure() {
  _oneof_case_[0] = kInfrastructure;
}
inline void Value::clear_infrastructure() {
  if (has_infrastructure()) {
    delete value_.infrastructure_;
    clear_has_value();
  }
}
inline const ::cmexample2domain::databasevalues::Infrastructure& Value::infrastructure() const {
  return has_infrastructure() ? *value_.infrastructure_
                      : ::cmexample2domain::databasevalues::Infrastructure::default_instance();
}
inline ::cmexample2domain::databasevalues::Infrastructure* Value::mutable_infrastructure() {
  if (!has_infrastructure()) {
    clear_value();
    set_has_infrastructure();
    value_.infrastructure_ = new ::cmexample2domain::databasevalues::Infrastructure;
  }
  return value_.infrastructure_;
}
inline ::cmexample2domain::databasevalues::Infrastructure* Value::release_infrastructure() {
  if (has_infrastructure()) {
    clear_has_value();
    ::cmexample2domain::databasevalues::Infrastructure* temp = value_.infrastructure_;
    value_.infrastructure_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_infrastructure(::cmexample2domain::databasevalues::Infrastructure* infrastructure) {
  clear_value();
  if (infrastructure) {
    set_has_infrastructure();
    value_.infrastructure_ = infrastructure;
  }
}

// optional .cmexample2domain.databasevalues.Citizen citizen = 2;
inline bool Value::has_citizen() const {
  return value_case() == kCitizen;
}
inline void Value::set_has_citizen() {
  _oneof_case_[0] = kCitizen;
}
inline void Value::clear_citizen() {
  if (has_citizen()) {
    delete value_.citizen_;
    clear_has_value();
  }
}
inline const ::cmexample2domain::databasevalues::Citizen& Value::citizen() const {
  return has_citizen() ? *value_.citizen_
                      : ::cmexample2domain::databasevalues::Citizen::default_instance();
}
inline ::cmexample2domain::databasevalues::Citizen* Value::mutable_citizen() {
  if (!has_citizen()) {
    clear_value();
    set_has_citizen();
    value_.citizen_ = new ::cmexample2domain::databasevalues::Citizen;
  }
  return value_.citizen_;
}
inline ::cmexample2domain::databasevalues::Citizen* Value::release_citizen() {
  if (has_citizen()) {
    clear_has_value();
    ::cmexample2domain::databasevalues::Citizen* temp = value_.citizen_;
    value_.citizen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_citizen(::cmexample2domain::databasevalues::Citizen* citizen) {
  clear_value();
  if (citizen) {
    set_has_citizen();
    value_.citizen_ = citizen;
  }
}

inline bool Value::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace databasevalues
}  // namespace cmexample2domain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fcmexample2domain_2fdatabasevalues_2fvalue_2eproto__INCLUDED
