cscope 15 $HOME/src/codebase               0002042981
	@cksum/testcksum.c

1 
	~<°dio.h
>

3 
	gd©a0
[]={0,0x1234,0xFFFF,0,0,0x0000};

4 
	gd©a1
[]={0,0x1234,0xFFFF,0,0,0xFFFF};

5 
	$checksum
 (*
buf„r
,
size
)

7 
cksum
=0;

8 
size
>1)

10 
cksum
 +=*
buf„r
++;

11 
size
 -=();

13 i‡(
size
)

15 
cksum
 +=*(*Ë
buf„r
;

17 
cksum
>>16)

18 
cksum
 = (cksum>>16) + (cksum & 0xffff);

19  (Ë(~
cksum
);

20 
	}
}

24 
	$maö
()

26 
size
 = (
d©a0
);

27 
d©a0
[0] = 
	`checksum
(d©a0, 
size
);

28 
	`¥ötf
("d©a0 checksum = %x\n", 
d©a0
[0]);

29 
	`¥ötf
("d©a0 vÆid©i⁄ = %x\n", 
	`checksum
(
d©a0
, 
size
));

30 
d©a1
[0] = 
	`checksum
(d©a1, 
size
);

31 
	`¥ötf
("d©a1 checksum = %x\n", 
d©a1
[0]);

32 
	`¥ötf
("d©a1 vÆid©i⁄ = %x\n", 
	`checksum
(
d©a1
, 
size
));

34 
	}
}

	@endian/endian.c

1 
	~<¨∑/öë.h
>

2 
	~<°dio.h
>

4 
	$maö
()

6 
a
 = 16, 
b
;

7 
b
 = 
	`ht⁄s
 (
a
);

8 
	`¥ötf
("%x:%x\n", 
a
, 
b
);

10 
	}
}

	@euler/misc.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~<mÆloc.h
>

5 
	~<°dlib.h
>

7 
	~"misc.h
"

9 
boﬁ
 
	$föd_num_ö_s‹ãd_li°
(
n
, *
li°
, 
Àngth
)

11 
i
=0;

12 
i
=0; i< 
Àngth
; i++)

14 if(
n
 =
li°
[
i
])

15  
TRUE
;

16 if(
n
< 
li°
[
i
])

17  
FALSE
;

19  
FALSE
;

21 
	}
}

23 
boﬁ
 
	$föd_num_ö_s‹ãd_li°_1
(
n
, *
li°
, 
Àngth
)

25 
i
=0;

26 
i
=0; i< 
Àngth
; i++)

28 if(
n
 =
li°
[
i
])

29  
TRUE
;

30 if(
n
< 
li°
[
i
])

31  
FALSE
;

33  
FALSE
;

35 
	}
}

38 
	$ouçut_l⁄g_num
(*
a
)

40 
i
;

41 
	`E_PRINTF
("%d:", 
a
[0]);

42 
i
=
a
[0];i>=1;i--)

44 
	`¥ötf
("%d",
a
[
i
]);

46 
	`¥ötf
("\n");

47 
	}
}

49 
	gãmp
[
N
][N]={0};

51 
	$f‹m©_l⁄g_num
(
n
, *
num
)

53 
i
=0;

54 
	`mem£t
(
num
, 0, 
N
*());

57 if(
n
 == 0)

61 
i
++;

62 
num
[
i
]=
n
 % 10;

63 
n
 =Ç /10;

66 
num
[0] = 
i
;

67 
	}
}

68 
	$f‹m©_l⁄g_l⁄g_num
(
n
, *
num
)

70 
i
=0;

71 
	`mem£t
(
num
, 0, 
N
*());

74 if(
n
 == 0)

78 
i
++;

79 
num
[
i
]=
n
 % 10;

80 
n
 =Ç /10;

83 
num
[0] = 
i
;

84 
	}
}

86 
	$ˇl_l⁄g_num
(*
nums
)

88 
i
, 
sum
 = 0;

89 
i
=
nums
[0];i>0;i--)

90 
sum
 = sum *10 + 
nums
[
i
];

91  
sum
;

92 
	}
}

95 
	$sum_l⁄g_num_digôs
(*
num
)

97 
i
,
sum
=0;

98 
i
=0;i<
num
[0];i++)

100 
sum
 +
num
[
i
+1];

102  
sum
;

103 
	}
}

106 
boﬁ
 
	$is_∑lödromic_l⁄g_num
(*
num
)

108 
i
;

109 
boﬁ
 
m©ched
 = 
TRUE
;

110 
i
=0;i<
num
[0];i++)

112 if(
num
[
i
+1] !=Çum[num[0]-i])

114 
m©ched
 = 
FALSE
;

117  
m©ched
;

118 
	}
}

120 
	$ªvî£_l⁄g_num
(*
num
, *
out
)

122 
i
;

123 
i
=0;i<
num
[0];i++)

125 
out
[
i
+1] = 
num
[num[0]-i];

127 
i
=
num
[0];i>=1;i--)

128 if(
out
[
i
] !=0)

130 
out
[0] = 
i
;

131 
	}
}

134 
	$cut_l⁄g_num
(
n
, *
num
)

136 if(
num
[0] <
n
)

139 
num
[0] = 
n
;

140 
	`mem£t
(&
num
[
n
+1], 0, (
N
-n-1)*());

143 
	}
}

145 
	$mul_l⁄g_nums
(*
ö_a
, *
ö_b
, *
out_c
)

147 *
t1
, *
t2
, 
ovîÊow
 =0, 
tmp
;

148 
i
,
j
, 
m
;

149 
	`mem£t
(
ãmp
, 0, 
N
*N*());

150 
	`mem£t
(
out_c
,0,
N
*());

151 if(
ö_a
[0] > 
ö_b
[0]){
t1
 = in_a; 
t2
 = in_b;}

152 {
t1
=
ö_b
; 
t2
=
ö_a
;}

154 
i
=1;i<=
t2
[0];i++)

156 
ovîÊow
 = 0;

157 
j
=1;j<=
t1
[0];j++)

159 
tmp
 = 
t1
[
j
]*
t2
[
i
]+
ovîÊow
;

160 if(
tmp
 >10Ë
ovîÊow
 =Åmp /10;

161 
ovîÊow
 = 0;

162 
ãmp
[
i
][
j
] = 
tmp
 % 10;

164 if(
ovîÊow
>0Ë{
ãmp
[
i
][0]=
t1
[0]+1;temp[i][temp[i][0]]=overflow;}

165 {
ãmp
[
i
][0]=
t1
[0];}

166 if(
i
 > 1)

168 
j
=
ãmp
[
i
][0]+i-1;j>i-1;j--)

169 
ãmp
[
i
][
j
] =Åemp[i][j-i+1];

170 
j
=
i
-1;j>0;j--)

171 
ãmp
[
i
][
j
] = 0;

172 
ãmp
[
i
][0] =temp[i][0]+i-1;

176 
i
=2;i<=
t2
[0];i++)

178 
ovîÊow
 = 0;

179 
m
 = (
ãmp
[1][0] >Åemp[
i
][0])?Åemp[1][0]:Åemp[i][0];

180 
j
=1;j<=
m
;j++)

182 
tmp
 = 
ãmp
[1][
j
]+ãmp[
i
][j]+
ovîÊow
;

183 if(
tmp
>=10Ë
ovîÊow
 =Åmp/10;

184 
ovîÊow
 =0;

185 
ãmp
[1][
j
] = 
tmp
 %10;

187 if(
ovîÊow
>0Ë{
ãmp
[1][0]=
m
+1;temp[1][temp[1][0]]=overflow;}

188 {
ãmp
[1][0]=
m
;}

191 
	`mem˝y
(
out_c
, 
ãmp
[1], 
N
*());

193 
	}
}

195 
	$sum_l⁄g_nums
(*
ö_a
, *
ö_b
, *
out_c
)

197 *
t1
, *
t2
, 
ovîÊow
 =0, 
tmp
;

198 
i
,
j
, 
m
;

199 
	`mem£t
(
out_c
, 0, 
N
*());

201 if(
ö_a
[0] > 
ö_b
[0]){
t1
 = in_a; 
t2
 = in_b;}

202 {
t1
=
ö_b
; 
t2
=
ö_a
;}

204 
i
=1;i<=
t1
[0];i++)

206 if(
i
<=
t2
[0])

207 
tmp
 = 
t1
[
i
]+
t2
[i]+
ovîÊow
;

209 
tmp
 = 
t1
[
i
]+
ovîÊow
;

210 if(
tmp
 >10Ë
ovîÊow
 =Åmp /10;

211 
ovîÊow
 = 0;

212 
out_c
[
i
] = 
tmp
 % 10;

214 if(
ovîÊow
>0Ë{
out_c
[0]=
t1
[0]+1;out_c[out_c[0]]=overflow;}

215 {
out_c
[0]=
t1
[0];}

217 
	}
}

219 
	$s‹t_li°
(*
li°
, 
Àn
)

221 
i
,
l
,
tmp
;

222 
i
=0;i<=
Àn
-2;i++)

223 
l
=
i
+1;l<=
Àn
-1;l++)

224 if(
li°
[
i
] >Üi°[
l
])

226 
tmp
 = 
li°
[
i
];

227 
li°
[
i
] =Üi°[
l
];

228 
li°
[
l
] = 
tmp
;

230 
	}
}

232 
	$com∑ª_l⁄g_nums
(*
ö_a
, *
ö_b
)

234 
m
;

235 if(
ö_a
[0] > 
ö_b
[0])

237 if(
ö_a
[0] < 
ö_b
[0])

239 
m
=
ö_a
[0];m>0;m--)

241 if(
ö_a
[
m
] > 
ö_b
[m])

243 if(
ö_a
[
m
] < 
ö_b
[m])

247 
	}
}

249 
	$mul_vÆue
(*
ö
, *
out
, 
mul_num
, 
Àn
)

251 
i
, 
tmp
, 
ovîÊow
=0;

252 
i
=0;i<
Àn
;i++)

254 
tmp
 = 
ö
[
i
]*
mul_num
 + 
ovîÊow
;

255 
out
[
i
] = 
tmp
 % 10;

256 if(
tmp
 >10Ë
ovîÊow
 =Åmp/10;

257 
ovîÊow
 = 0;

259 
	`E_PRINTF
("%d ", 
out
[
i
]);

261 
	}
}

263 
	$check_£q_Àngth
(
num
)

265 
Àngth
=0;

268 
Àngth
++;

269 if(
num
 == 1)

271 
	`E_PRINTF
("%ŒdÅŸÆ:%d\n",
num
,
Àngth
);

275 
	`E_PRINTF
("%Œd->",
num
);

276 if(
num
%2 ==0)Çum=num/2;

277 
num
=3*num+1;

279  
Àngth
;

280 
	}
}

282 
	$check_Á˘‹_˙t
(
num
)

285 
i
,
˙t
=0;

286 
	`E_PRINTF
("%Œd: ",
num
);

288 
i
=1;i<
num
/2+1; i++)

290 if(
num
 % 
i
 ==0)

292 
˙t
++;

293 
	`E_PRINTF
("%4Œd ", 
i
);

296 
	`E_PRINTF
("%4Œd =%Œd=\n",
num
, 
˙t
+1);

297  
˙t
+1;

298 
	}
}

300 
	$check_Á˘‹_sum
(
num
)

303 
i
,
˙t
=0, 
sum
=0;

304 
	`E_PRINTF
("%Œd: ",
num
);

306 
i
=1;i<
num
/2+1; i++)

308 if(
num
 % 
i
 ==0)

310 
˙t
++;

311 
sum
 +
i
;

312 
	`E_PRINTF
("%4Œd ", 
i
);

315 
	`E_PRINTF
("%4Œd =%Œd=%Œd\n",
num
, 
˙t
+1,
sum
);

316  
sum
;

317 
	}
}

320 
	$sum_100_dec
(*
num1
, *
num2
, *
sum
)

322 
⁄e_sum
, 
ovîÊow
=0, 
i
;

323 
i
=99;i>=0;i--)

325 
⁄e_sum
 = 
num1
[
i
] + 
num2
[i] + 
ovîÊow
;

326 
sum
[
i
] = 
⁄e_sum
 % 10;

327 if(
⁄e_sum
 >10Ë
ovîÊow
 = 1;

328 
ovîÊow
 =0;

331 
	}
}

333 *
	g¥ime_ßm∂es
 = 
NULL
;

334 
	g¥ime_Àngth
 = 0;

335 
	g¥ime_check_num
 = 0;

336 
	gmax_num_to_check
 = 0;

338 
boﬁ
 
	$is_¥ime
(
num
)

340 
i
, 
ãmp
;

342 if(
num
 == 1)

343  
FALSE
;

344 if(
num
 == 2 ||Çum ==5)

345  
TRUE
;

346 
ãmp
 = 
num
 % 10;

347 if(
ãmp
 == 1 ||Åemp == 3 ||Åemp == 7 ||Åemp == 9)

349 
i
=2;i<()
	`sqπ
(
num
)+2;i++)

351 if(
num
 % 
i
 == 0)

352  
FALSE
;

354  
TRUE
;

357  
FALSE
;

358 
	}
}

360 
boﬁ
 
	$c⁄°rcut_¥ime_check
(
max_num
)

362 
i
;

363 
¥ime_check_num
 = 
	`sqπ
(
max_num
)+1;

364 
max_num_to_check
 = 
max_num
;

365 
¥ime_ßm∂es
 = 
	`mÆloc
(
¥ime_check_num
*());

366 if(
¥ime_ßm∂es
 =
NULL
)

367  
FALSE
;

368 
i
=1;i<
¥ime_check_num
;i++)

370 if(
	`is_¥ime
(
i
))

372 
¥ime_ßm∂es
[
¥ime_Àngth
++]=
i
;

375  
TRUE
;

377 
	}
}

382 
boﬁ
 
	$is_¥ime_Á°
(
num
, *
¥ime_ßm∂es
, 
ßm∂e_Àngth
, 
max_ßm∂e
)

385 
i
;

386 if(
¥ime_ßm∂es
 =
NULL
)

388 
	`¥ötf
("Wrong sampleÖointer\n");

389 
	`exô
(-1);

392 if(
num
 <
max_ßm∂e
)

393 
	`¥ötf
("Eº‹ i≈uàa†num %d <max sam∂ê%d", 
num
, 
max_ßm∂e
);

394 
i
=0; i< 
ßm∂e_Àngth
; i++)

396 if(
num
 % 
¥ime_ßm∂es
[
i
] == 0)

397  
FALSE
;

399  
TRUE
;

400 
	}
}

402 
boﬁ
 
	$check_¥ime_wôh_ßm∂es
(
num
)

405 if(
num
 <
¥ime_check_num
)

406  
	`is_¥ime
(
num
);

408  
	`is_¥ime_Á°
(
num
, 
¥ime_ßm∂es
, 
¥ime_Àngth
,Örime_samples[prime_length-1]);

410 
	}
}

412 
boﬁ
 
	$dec⁄°ru˘_¥ime_check
()

414 if(
¥ime_ßm∂es
 !
NULL
Ë
	`‰ì
(prime_samples);

415 
¥ime_ßm∂es
 = 
NULL
;

416 
¥ime_Àngth
 = 0;

417 
¥ime_check_num
 = 0;

418 
max_num_to_check
 = 0;

420  
TRUE
;

422 
	}
}

424 *
	g¥ime_ßm∂es_l⁄g
 = 
NULL
;

425 
	g¥ime_Àngth_l⁄g
 = 0;

426 
	g¥ime_check_num_l⁄g
 = 0;

427 
	gmax_num_to_check_l⁄g
 = 0;

430 
boﬁ
 
	$c⁄°rcut_¥ime_check_l⁄g
(
max_num
)

432 
i
;

433 
¥ime_check_num_l⁄g
 = 
	`sqπ
(
max_num
)+1;

434 
max_num_to_check_l⁄g
 = 
max_num
;

435 
¥ime_ßm∂es_l⁄g
 = 
	`mÆloc
(
¥ime_check_num_l⁄g
*());

436 if(
¥ime_ßm∂es_l⁄g
 =
NULL
)

437  
FALSE
;

438 
i
=1;i<
¥ime_check_num_l⁄g
;i++)

440 if(
	`is_¥ime
(()
i
))

442 
¥ime_ßm∂es_l⁄g
[
¥ime_Àngth_l⁄g
++]=
i
;

445  
TRUE
;

447 
	}
}

448 
boﬁ
 
	$dec⁄°ru˘_¥ime_check_l⁄g
 ()

450 if(
¥ime_ßm∂es_l⁄g
 !
NULL
Ë
	`‰ì
(prime_samples_long );

451 
¥ime_ßm∂es_l⁄g
 = 
NULL
;

452 
¥ime_Àngth_l⁄g
 = 0;

453 
¥ime_check_num_l⁄g
 = 0;

454 
max_num_to_check_l⁄g
 = 0;

456  
TRUE
;

458 
	}
}

460 
boﬁ
 
	$is_¥ime_Á°_l⁄g
(
num
, *
¥ime_ßm∂es
, 
ßm∂e_Àngth
, 
max_ßm∂e
)

463 
i
;

464 if(
¥ime_ßm∂es_l⁄g
 =
NULL
)

466 
	`¥ötf
("Wrong sampleÖointer\n");

467 
	`exô
(-1);

470 if(
num
 <
max_ßm∂e
)

471 
	`¥ötf
("Eº‹ i≈uàa†num %Œd <max sam∂ê%Œd", 
num
, 
max_ßm∂e
);

472 
i
=0; i< 
ßm∂e_Àngth
; i++)

474 if(
num
 % 
¥ime_ßm∂es
[
i
] == 0)

475  
FALSE
;

477  
TRUE
;

478 
	}
}

480 
boﬁ
 
	$check_¥ime_wôh_ßm∂es_l⁄g
(
num
)

483 if(
num
 <
¥ime_check_num_l⁄g
)

484  
	`is_¥ime
(()
num
);

486  
	`is_¥ime_Á°_l⁄g
(
num
, 
¥ime_ßm∂es_l⁄g
, 
¥ime_Àngth_l⁄g
,Örime_samples_long[prime_length_long-1]);

488 
	}
}

491 
	$sum_¥ime_ßm∂es
(*
¥ime_ßm∂es
, 
ßm∂e_Àngth
)

494 
i
,
sum
 =0;

495 
i
=0; i< 
ßm∂e_Àngth
; i++)

497 
sum
 +
¥ime_ßm∂es
[
i
];

499  
sum
;

500 
	}
}

502 
boﬁ
 
	$is_∑lödromic_num
(
num
, 
ba£
)

504 
ãmp
 = 
num
, 
√w_num
 = 0;

507 if(
ãmp
 ==0)

510 
√w_num
 =Çew_num*
ba£
 + (
ãmp
 % base);

511 
ãmp
 =Åem∞/
ba£
;

513 if(
num
 =
√w_num
)

514  
TRUE
;

516  
FALSE
;

517 
	}
}

519 
	$check_Àngth
(
num
)

521 
i
=0; 
tmp
=
num
;

524 if(
tmp
 == 0)

526 
tmp
 =Åmp /10;

527 
i
++;

529  
i
;

531 
	}
}

533 
	$√xt_cúcuœr_num
(
num
, 
Àn
)

535 
ba£
 = 
	`pow
(10,
Àn
-1);

537  (
num
/
ba£
+ (num % base)*10);

538 
	}
}

540 
	$åunˇt_num_‰om_À·
(
num
, 
Àngth
)

542 
ba£
 = 
	`pow
(10, 
Àngth
-1);

543  (
num
 % 
ba£
);

544 
	}
}

546 
	$åunˇt_num_‰om_right
(
num
)

548  (
num
/10);

549 
	}
}

550 
	$ˇt_öt_num
(
num1
, 
num2
)

552  
num1
*(
	`pow
(10, 
	`check_Àngth
(
num2
)))+num2;

554 
	}
}

555 
boﬁ
 
	$is_n_∑ndigôÆ_num
(
¬
, 
num
)

557 
m¨k
[9] = {0}; 
n
,
j
;

558 if(
	`check_Àngth
(
num
Ë!
¬
Ë 
FALSE
;

560 
j
 = 
num
;

563 if(
j
==0);

566 
n
 = 
j
 %10;

567 if(
n
 =0 ||Ç > 
¬
 || 
m¨k
[n-1] == 1)

568  
FALSE
;

570 
m¨k
[
n
-1] = 1;

571 
j
 = j / 10;

575  
TRUE
;

577 
	}
}

578 
	$check_l⁄g_Àngth
(
num
)

580 
i
=0; 
tmp
=
num
;

583 if(
tmp
 == 0)

585 
tmp
 =Åmp /10;

586 
i
++;

588  
i
;

590 
	}
}

592 
boﬁ
 
	$is_n_∑ndigôÆ_num_1
(
¬
, 
num
)

594 
m¨k
[10] = {0}; 
n
; 
j
;

596 if(
	`check_l⁄g_Àngth
(
num
Ë!
¬
)

598 
	`E_PRINTF
("À¡h: checked:%d - i≈ut: %d\n", 
	`check_l⁄g_Àngth
(
num
), 
¬
);

599  
FALSE
;

602 
j
 = 
num
;

605 if(
j
==0);

608 
n
 = 
j
 %10;

609 if(
n
 >
¬
 || 
m¨k
[n] == 1)

610  
FALSE
;

612 
m¨k
[
n
] = 1;

613 
j
 = j / 10;

617  
TRUE
;

619 
	}
}

626 
boﬁ
 
	$föd_√xt_≥rm
(
n
, *
m
, *
num
)

628 
i
, 
k
; 
tmp
; 
l
;

629 
boﬁ
 
found
 = 
FALSE
;

630 
i
=
n
-1;i>0;i--)

631 if(
m
[
i
-1] < m[i])

633 
found
 = 
TRUE
;

634 
k
 = 
i
-1;

637 if(!
found
)

638  
FALSE
;

640 
tmp
 = 
n
;

641 
i
=
k
+1;i<=
n
-1;i++)

642 if(
m
[
i
] > m[
k
] && m[i] - m[k] < 
tmp
)

644 
l
 = 
i
;

645 
tmp
 = 
m
[
i
] - m[
k
];

649 
tmp
 = 
m
[
k
];

650 
m
[
k
] = m[
l
];

651 
m
[
l
] = 
tmp
;

653 
	`mem˝y
(
num
, 
m
, 
n
);

655 
i
=
k
+1;i<=
n
-2;i++)

656 
l
=
i
+1;l<=
n
-1;l++)

657 if(
num
[
i
] >Çum[
l
])

659 
tmp
 = 
num
[
i
];

660 
num
[
i
] =Çum[
l
];

661 
num
[
l
] = 
tmp
;

663 
i
=0;i<
n
;i++)

664 
	`E_PRINTF
("%d ", 
num
[
i
]);

665 
	`E_PRINTF
("\n");

666  
TRUE
;

667 
	}
}

669 
	$ˇl_≥rm_num
(
n
, *
nums
)

671 
sum
 = 0;

672 
i
;

673 
i
=0;i<
n
;i++)

674 
sum
 = sum *10 + 
nums
[
i
];

675  
sum
;

676 
	}
}

678 
	$ˇl_≥¡ag⁄Æ_num
(
n
)

680 
m
 = 
n
*(3*n-1)/2;

681  
m
;

682 
	}
}

683 
boﬁ
 
	$is_≥¡ag⁄Æ_num
(
num
)

685 
m
;

686 
m
 = 
	`sqπ
(1+24*
num
);

688 if(
m
>=5 && ((m+1Ë% 6 =0Ë&& (m*m =(1+24*
num
)))

689  
TRUE
;

691  
FALSE
;

692 
	}
}

694 
	$ˇl_åüngÀ_num
(
n
)

696 
m
 = 
n
*(n+1)/2;

697  
m
;

698 
	}
}

700 
boﬁ
 
	$is_hexag⁄Æ_num
(
num
)

702 
m
;

703 
m
 = 
	`sqπ
(1+8*
num
);

705 if(
m
>=3 && ((m+1Ë% 4 =0Ë&& (m*m =(1+8*
num
)))

706  
TRUE
;

708  
FALSE
;

709 
	}
}

	@euler/misc.h

1 #i‚de‡
__MISC__H


2 
	#__MISC__H


	)

4 #ifde‡
PRINT_LOG


5 
	#E_PRINTF
 
¥ötf


	)

7 
	#E_PRINTF


	)

11 
	#TRUE
 1

	)

12 
	#FALSE
 0

	)

14 
	tboﬁ
;

16 #i‚de‡
N


17 
	#N
 1100

	)

	@euler/test0.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

4 #unde‡
MAX_NUM


5 
	#MAX_NUM
 6

	)

7 
	$maö
()

9 
mm
[
MAX_NUM
] = {1,2,3,4,5,6};

10 
¬
[
MAX_NUM
] = {1,2,3,4,5,6};

11 
num
;

14 { 
num
 = 
	`ˇl_≥rm_num
(
MAX_NUM
, 
¬
);

15 
	`¥ötf
("%Œu\n", 
num
);

16 
	`mem˝y
(
mm
,
¬
,
MAX_NUM
);

17 }
	`föd_√xt_≥rm
(
MAX_NUM
, 
mm
, 
¬
));

20 
	}
}

	@euler/test10.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~"misc.h
"

6 
	$maö
()

8 
num
 = 2000000, 
i
;
sum
=0;

9 
˙t
 = 0, 
¥ime_Àngth
 = 0;

10 if(!
	`c⁄°rcut_¥ime_check
(
num
))

13 
i
=1;i<
num
;i++)

15 if(
	`check_¥ime_wôh_ßm∂es
(
i
))

17 
˙t
 ++;

18 
sum
 +
i
;

22 
	`dec⁄°ru˘_¥ime_check
();

24 
	`¥ötf
("\¡ŸÆ %d, sum %Œd\n", 
˙t
, 
sum
);

25 
	}
}

	@euler/test11.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~"misc.h
"

5 
	gßm∂es
[20][20]=

29 
	$maö
()

31 
vÆue
=0, 
a
, 
b
, 
c
, 
d
;

32 
i
,
j
=02;

33 
i
=0;i<20;i++)

35 
j
=0;j<20;j++)

37 if((
j
+3)<20 && 
ßm∂es
[
i
][j]*ßm∂es[i][j+1]*ßm∂es[i][j+2]*ßm∂es[i][j+3] > 
vÆue
)

39 
vÆue
 = 
ßm∂es
[
i
][
j
]*samples[i+1][j+1]*samples[i+2][j+2]*samples[i+3][j+3];

40 
a
 = 
ßm∂es
[
i
][
j
];

41 
b
 = 
ßm∂es
[
i
][
j
+1];

42 
c
 = 
ßm∂es
[
i
][
j
+2];

43 
d
 = 
ßm∂es
[
i
][
j
+3];

45 if((
i
+3)<20 && 
ßm∂es
[i][
j
]*ßm∂es[i+1][j]*ßm∂es[i+2][j]*ßm∂es[i+3][j] > 
vÆue
)

47 
vÆue
 = 
ßm∂es
[
i
][
j
]*samples[i+1][j]*samples[i+2][j]*samples[i+3][j] > value;

48 
a
 = 
ßm∂es
[
i
][
j
];

49 
b
 = 
ßm∂es
[
i
+1][
j
];

50 
c
 = 
ßm∂es
[
i
+2][
j
];

51 
d
 = 
ßm∂es
[
i
+3][
j
];

53 if((
i
+3)<20 && (
j
+3)<20 && 
ßm∂es
[i][j]*ßm∂es[i+1][j+1]*ßm∂es[i+2][j+2]*ßm∂es[i+3][j+3] > 
vÆue
)

55 
vÆue
 = 
ßm∂es
[
i
][
j
]*samples[i+1][j+1]*samples[i+2][j+2]*samples[i+3][j+3];

56 
a
 = 
ßm∂es
[
i
][
j
];

57 
b
 = 
ßm∂es
[
i
+1][
j
+1];

58 
c
 = 
ßm∂es
[
i
+2][
j
+2];

59 
d
 = 
ßm∂es
[
i
+3][
j
+3];

61 if((
i
-3)>=0 && (
j
+3)<20 && 
ßm∂es
[i][j]*ßm∂es[i-1][j+1]*ßm∂es[i-2][j+2]*ßm∂es[i-3][j+3] > 
vÆue
)

63 
vÆue
 = 
ßm∂es
[
i
][
j
]*samples[i-1][j+1]*samples[i-2][j+2]*samples[i-3][j+3];

64 
a
 = 
ßm∂es
[
i
][
j
];

65 
b
 = 
ßm∂es
[
i
-1][
j
+1];

66 
c
 = 
ßm∂es
[
i
-2][
j
+2];

67 
d
 = 
ßm∂es
[
i
-3][
j
+3];

69 
	`¥ötf
("%02d ", 
ßm∂es
[
i
][
j
]);

71 
	`¥ötf
("\n");

74 
	`¥ötf
("ªsu…:%dá %02d b %02d c %02d d%02d\n",
vÆue
, 
a
, 
b
, 
c
, 
d
);

75 
	}
}

	@euler/test12.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

7 
	#MAX_SAMPLE_LENGTH
 20000

	)

8 
	gÁ˘‹_˙t
[
MAX_SAMPLE_LENGTH
+2]={0};

10 
	#MAX_NUM
 500

	)

12 
	$maö
()

14 
i
=0, 
m
, 
n
;

15 
i
=0;i<
MAX_SAMPLE_LENGTH
+2;i++)

17 
Á˘‹_˙t
[
i
]=
	`check_Á˘‹_˙t
(i+1);

20 
i
=1;i<
MAX_SAMPLE_LENGTH
/2;i++)

22 if(
Á˘‹_˙t
[2*
i
-1-1]*Á˘‹_˙t[i-1] >=
MAX_NUM
)

24 
	`¥ötf
("föd %Œd, %Œd", (2*
i
-1)*i, 2*i-1);

27 if(
Á˘‹_˙t
[
i
-1]*Á˘‹_˙t[2*i] >=
MAX_NUM
)

29 
	`¥ötf
("föd %Œd, %Œd",
i
*(2*i+1), 2*i);

37 
	}
}

	@euler/test13.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 
	gnumbîs
[100][100] =

110 
	$maö
()

112 
i
, 
j
, 
m
, 
n
;

113 
sum_Æl
[100]={0};

114 
i
=0;i<100;i++)

116 
	`mem˝y
(&
numbîs
[
i
][50], &numbers[i][0], 50*());

117 
	`mem£t
(&
numbîs
[
i
][0], 0, 50*());

118 
j
=0;j<100;j++)

119 
	`¥ötf
("%d", 
numbîs
[
i
][
j
]);

120 
	`¥ötf
("\n");

124 
i
=0;i<100;i++)

125 
	`sum_100_dec
(
numbîs
[
i
],
sum_Æl
,sum_all);

127 
	`¥ötf
("sum_all\n");

128 
i
=0;i<100;i++)

129 
	`¥ötf
("%d", 
sum_Æl
[
i
]);

131 
	`¥ötf
("\n");

136 
	}
}

	@euler/test14.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 
	#MAX_NUM
 1000000LL

	)

7 
	$maö
()

9 
i
,
ßve
; 
Àn
=0,
tmp_Àn
=0;

10 
i
=1;i<
MAX_NUM
;i++)

12 
tmp_Àn
 = 
	`check_£q_Àngth
(
i
);

13 if(
tmp_Àn
>
Àn
Ë{ÀnÒmp_Àn; 
ßve
=
i
;}

15 
	`¥ötf
("\ƒesu…: %Œd,Üí: %d\n", 
ßve
, 
Àn
);

20 
	}
}

	@euler/test15.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

23 
	$föd_√xt_∑sˇl_num
(
⁄e_num
, 
n
)

26 
√xt_num
;

27 
√xt_num
 = 
⁄e_num
*(4*
n
-2)/(n);

28 
	`E_PRINTF
("%d: %Œd\n",
n
, 
√xt_num
);

29  
√xt_num
;

30 
	}
}

31 
	$maö
()

33 
‹g
1,
i
;

35 
i
=1;i<21;i++)

36 
‹g
 = 
	`föd_√xt_∑sˇl_num
(‹g, 
i
);

40 
	}
}

	@euler/test16.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 
	#MAX_RESULT
 1000

	)

8 
	gªsu…
[
MAX_RESULT
]={0};

10 
	#MAX_NUM
 1000

	)

12 
	$maö
()

14 
i
, 
sumÆl
=0;

15 
ªsu…
[0]=1;

16 
i
=0;i<
MAX_NUM
;i++)

18 
	`mul_vÆue
(
ªsu…
,Ñesu…, 2, 
MAX_RESULT
);

19 
	`E_PRINTF
("\n");

21 
i
=0;i<
MAX_RESULT
;i++)

23 
	`¥ötf
("%d ", 
ªsu…
[
i
]);

24 
sumÆl
 +
ªsu…
[
i
];

27 
	`¥ötf
("\nTŸÆ sum: %d\n", 
sumÆl
);

31 
	}
}

	@euler/test17.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

7 
	gnum1
[9][10]={

12 
	gnum2
[10][10]={

18 
	gnum3
[8][10]={

22 
	gHundªd
[20] = "Hundred";

24 
	gAnd
[10]="And";

26 
	$c⁄vît_öãgî
(
num
, *
°r
)

28 
tmp
[100]="\0";

29 if(
num
>=100)

31 
	`°rˇt
(
tmp
, 
num1
[
num
/100-1]);

32 
	`°rˇt
(
tmp
, 
Hundªd
);

34 if(
num
%100 != 0)

36 if(
num
>100)

37 
	`°rˇt
(
tmp
, 
And
);

39 if(
num
%100 <10)

41 
	`°rˇt
(
tmp
, 
num1
[
num
%100-1]);

44 if(
num
%100 <20)

46 
	`°rˇt
(
tmp
, 
num2
[
num
%100-10]);

50 
	`°rˇt
(
tmp
, 
num3
[(
num
%100)/10-2]);

51 if(
num
%10 !=0)

52 
	`°rˇt
(
tmp
, 
num1
[
num
%10-1]);

56 
	`°r˝y
(
°r
, 
tmp
);

57  
	`°æí
(
°r
);

58 
	}
}

60 
	$maö
()

62 
i
,
˙t
,
sum
=0;

63 
numbî
[100]="\0";

64 
i
=1;i<1000;i++)

66 
numbî
[0]=0;

67 
˙t
 = 
	`c⁄vît_öãgî
(
i
, 
numbî
);

68 
	`¥ötf
("%4d: %†%d\n",
i
, 
numbî
, 
˙t
);

69 
sum
 +=
˙t
;

71 
	`¥ötf
("1000: O√Thoußnd %d\n",
i
, 
numbî
, 
	`°æí
("onethousand"));

72 
	`¥ötf
("TŸÆ: %d\n", 
sum
+
	`°æí
("onethousand"));

76 
	}
}

	@euler/test18.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 #ifde‡
TEST


7 
	#MAX_X
 4

	)

8 
	#MAX_Y
 4

	)

9 
	gnumbîs
[
MAX_X
][
MAX_Y
] = {

16 
	#MAX_X
 15

	)

17 
	#MAX_Y
 15

	)

18 
	gnumbîs
[
MAX_X
][
MAX_Y
] = {

36 
	gcuºít_max
 = 0;

37 
	g∑th
[
MAX_X
] = {0};

38 
	g∑th_ßve
[
MAX_X
] = {0};

39 
	gtŸÆ_˙t
 = 0;

40 
boﬁ
 
	$£¨ch_∑th
(
i
, 
j
, 
cuºít
, 
idx
 )

42 
∑th
[
idx
++] = 
numbîs
[
i
][
j
];

43 
cuºít
 +
numbîs
[
i
][
j
];

44 if(
i
 =
MAX_X
-1)

46 
tŸÆ_˙t
 ++;

47 
	`E_PRINTF
("%d ",
cuºít
);

48 if(
cuºít
 > 
cuºít_max
)

50 
cuºít_max
 = 
cuºít
;

51 
	`mem˝y
(
∑th_ßve
, 
∑th
, 
MAX_X
);

53  
TRUE
;

55 if(
	`£¨ch_∑th
(
i
+1, 
j
, 
cuºít
,
idx
))

57  
	`£¨ch_∑th
(
i
+1, 
j
+1, 
cuºít
,
idx
);

59 
	}
}

61 
	$maö
()

63 
i
,
j
,
cuºít
=0, 
sum
 = 0;

64 
	`£¨ch_∑th
(0,0,
cuºít
,0);

65 
	`¥ötf
("\nMAX vÆue: %d,ÅŸÆÖ©h c¡: %d\n", 
cuºít_max
, 
tŸÆ_˙t
);

66 
i
=0;i<
MAX_X
;i++)

68 
sum
 +=
∑th_ßve
[
i
];

69 if(
i
<
MAX_X
-1)

70 
	`¥ötf
("%d->", 
∑th_ßve
[
i
]);

72 
	`¥ötf
("%d", 
∑th_ßve
[
i
]);

74 
	`¥ötf
("\nMAX vÆue: %d\n", 
sum
);

76 
	}
}

	@euler/test19.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 
	gwìkday
 = 7;

7 
	gyór
 = 1900;

8 
	gm⁄th
 = 1;

9 
	gday
 = 1;

11 
boﬁ
 
	$À≠yór
(
yór
)

13 if(
yór
%400 ==0 ||(year%100 !=0 && year%4==0))

14  
TRUE
;

16  
FALSE
;

17 
	}
}

19 
	gdays_n‹mÆ
[12]=

24 
	gdays_À≠
[12]=

29 
	gdays_of_n‹mÆ
 = 365;

30 
	gdays_of_À≠
 = 366;

32 
	$ˇl_days
(
yór
, 
m⁄th
, 
day
)

34 
i
, 
days
 = 0; 
boﬁ
 
is_À≠yór
;

35 
i
=1900; i<
yór
;i++)

36 if(
	`À≠yór
(
i
))

37 
days
 +=366;

39 
days
 +=365;

40 
is_À≠yór
 = 
	`À≠yór
(
yór
);

41 
i
=0;i<
m⁄th
-1;i++)

42 if(
is_À≠yór
)

43 
days
 +
days_À≠
[
i
];

45 
days
 +
days_n‹mÆ
[
i
];

47 
days
 +
day
;

48  
days
;

49 
	}
}

51 
	$maö
()

53 
	`¥ötf
("%d ",
	`ˇl_days
(2000,1,1) % 7);

55 
i
, 
j
, 
˙t
=0;

56 
i
=1901;i<2001;i++)

57 
j
=1;j<13;j++)

59 if((
	`ˇl_days
(
i
,
j
,1)) % 7 ==0)

61 
˙t
++;

62 
	`¥ötf
("%d-%02d-01\n", 
i
, 
j
);

65 
	`¥ötf
("TŸÆ c¡: %d", 
˙t
);

68 
	}
}

	@euler/test20.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 
	gØ
[
N
],
	gbb
[N];

7 
	$maö
()

9 
i
, 
sum
=0;

10 
Ø
[0]=1;

11 
Ø
[1]=1;

13 
i
=1;i<=100;i++)

15 if(
i
<10)

17 
bb
[0] = 1;

18 
bb
[1] = 
i
;

21 if(
i
<100)

23 
bb
[0] = 2;

24 
bb
[1] = 
i
%10;

25 
bb
[2] = 
i
/10;

29 
bb
[0] = 3;

30 
bb
[1] = 0;

31 
bb
[2] = 0;

32 
bb
[3] = 1;

34 
	`mul_l⁄g_nums
(
Ø
,
bb
,aa);

37 
	`¥ötf
("Àngth:%d\n", 
Ø
[0]);

39 
	`ouçut_l⁄g_num
(
Ø
);

40 
i
=
Ø
[0];i>=1;i--)

42 
sum
 +
Ø
[
i
];

44 
	`¥ötf
("TŸÆ sum: %d\n", 
sum
);

45 
	}
}

	@euler/test21.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

6 
	$maö
()

9 
i
; 
tmp
, 
sum
=0;

10 
i
=2;i<10000;i++)

12 
tmp
 = 
	`check_Á˘‹_sum
(()
i
);

13 if(
tmp
 !
i
 && 
	`check_Á˘‹_sum
(tmp) == i)

15 
	`¥ötf
("%Œd - %Œd\n", 
i
, 
tmp
);

16 
sum
 +
i
;

19 
	`¥ötf
("Sum: %Œd\n", 
sum
);

21 
	}
}

	@euler/test22.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

5 
	~"misc.h
"

7 
	#MAX_NAME_NUM
 10000

	)

8 
	g«mes
[
MAX_NAME_NUM
][20] = {0};

10 
	g˙t
 = 0;

11 
	$ö£π
(*
«me
)

13 
i
, 
j
;

14 
i
=0;i<
˙t
;i++)

16 if(
	`°rcmp
(
«mes
[
i
], 
«me
)>0)

18 
j
 = 
MAX_NAME_NUM
-1; j > 
i
; j--)

20 
	`°r˝y
(
«mes
[
j
],Çames[j-1]);

22 
	`°r˝y
(
«mes
[
i
], 
«me
);

23 
˙t
++;

27 
	`°r˝y
(
«mes
[
˙t
++], 
«me
);

28 
	}
}

31 
	$ˇl_vÆue
(*
«me
, 
n
)

33 
i
,
j
; 
sum
=0;

34 
i
 = 
	`°æí
(
«me
);

35 
j
=0; j<
i
; j++)

37 
sum
 +
«me
[
j
]-'A'+1;

39  
sum
*
n
;

40 
	}
}

42 
	$maö
()

44 
FILE
 *
°ªam
; 
ch
; 
n
;

45 
tmp
[20],
tmp1
; 
sum
=0;

46 
°ªam
 = 
	`f›í
("./files/names.txt","r");

47 if(
°ªam
 =
NULL
)

49 
	`¥ötf
("file openÉrror\n");

52 
	`f£ek
(
°ªam
, 0, 
SEEK_SET
);

53 
n
 = 0;

54 
tmp
[0]='\0';

56 
ch
 = 
	`fgëc
 (
°ªam
);

57 i‡(
ch
=44 || ch=
EOF
)

59 
tmp
[
n
]='\0';

60 
	`ö£π
(
tmp
);

61 
n
=0;

62 
tmp
[0]='\0';

64 i‡(
ch
 != 34)

66 
tmp
[
n
++] = ()
ch
;

69 } 
ch
 !
EOF
);

71 
n
=0;Ç<
˙t
;n++)

73 
sum
 +=
	`ˇl_vÆue
(
«mes
[
n
],n+1);

76 
	`¥ötf
("TŸÆ sum: %Œd\n", 
sum
);

78 
	`f˛o£
(
°ªam
);

80 
	}
}

	@euler/test23.c

1 
	~<°dio.h
>

3 
	~"misc.h
"

5 #i‚de‡
TEST


6 
	#MAX_NUM
 28123

	)

8 
	#MAX_NUM
 30

	)

11 
	gßm∂es
[7000] =

14 
boﬁ
 
	gis_≥r„˘_num
[
MAX_NUM
+1] = {
FALSE
};

16 
	$maö
()

18 
sum
=0, 
sum_of_≥r„˘_nums
 = 0, 
i
, 
j
, 
≥r„˘_num
 = 0;

19 
˙t
=0;

20 
i
=1;i<=
MAX_NUM
;i++)

22 if(
	`check_Á˘‹_sum
(
i
) > i)

24 
ßm∂es
[
˙t
] = 
i
;

25 
˙t
++;

30 
i
=0;i<
˙t
;i++)

31 
j
=0;j<
˙t
;j++)

33 if(
ßm∂es
[
i
] + sam∂es[
j
] <
MAX_NUM
)

35 
is_≥r„˘_num
[
ßm∂es
[
i
] + sam∂es[
j
]] = 
TRUE
;

40 
i
=0;i<=
MAX_NUM
;i++)

42 if(
is_≥r„˘_num
[
i
])

45 
sum_of_≥r„˘_nums
 +
i
;

49 
sum
 = (
MAX_NUM
+1)*MAX_NUM/2 - 
sum_of_≥r„˘_nums
 ;

50 
	`¥ötf
("TŸÆ sum: %Œd\n", 
sum
);

53 
	}
}

	@euler/test24.c

1 
	~<°dio.h
>

3 
	~"misc.h
"

6 
	#MAX_NUM
 10

	)

8 
	#TEST_NUM
 1000000

	)

10 
	gnum
[
MAX_NUM
]={0};

12 
	g˙t
=0;

15 
	$maö
()

17 
i
[
MAX_NUM
];

19 
i
[0]=0;i[0]<
MAX_NUM
;i[0]++)

21 
num
[0] = 
i
[0];

22 
i
[1]=0;i[1]<
MAX_NUM
;i[1]++)

24 if(
i
[1] !=
num
[0])

26 
num
[1] = 
i
[1];

27 
i
[2]=0;i[2]<
MAX_NUM
;i[2]++)

29 if(
i
[2] !=
num
[0] && i[2] !=num[1])

31 
num
[2] = 
i
[2];

32 
i
[3]=0;i[3]<
MAX_NUM
;i[3]++)

34 if(
i
[3] !=
num
[0] && i[3] !=num[1] && i[3] !=num[2])

36 
num
[3] = 
i
[3];

37 
i
[4]=0;i[4]<
MAX_NUM
;i[4]++)

39 if(
i
[4] !=
num
[0] && i[4] !=num[1] && i[4] !=num[2] && i[4] !=num[3])

41 
num
[4] = 
i
[4];

42 
i
[5]=0;i[5]<
MAX_NUM
;i[5]++)

44 if(
i
[5] !=
num
[0] && i[5] !=num[1] && i[5] !=num[2] && i[5] !=num[3] && i[5] !=num[4])

46 
num
[5] = 
i
[5];

47 
i
[6]=0;i[6]<
MAX_NUM
;i[6]++)

49 if(
i
[6] !=
num
[0] && i[6]!=num[1] && i[6] !=num[2] && i[6] !=num[3] && i[6] !=num[4] && i[6] !=num[5])

51 
num
[6] = 
i
[6];

52 
i
[7]=0;i[7]<
MAX_NUM
;i[7]++)

54 if(
i
[7] !=
num
[0] && i[7]!=num[1] && i[7] !=num[2] && i[7] !=num[3] && i[7] !=num[4]

55 && 
i
[7] !=
num
[5] && i[7] !=num[5] && i[7] !=num[6])

57 
num
[7] = 
i
[7];

58 
i
[8]=0;i[8]<
MAX_NUM
;i[8]++)

60 if(
i
[8] !=
num
[0] && i[8]!=num[1] && i[8] !=num[2] && i[8] !=num[3] && i[8] !=num[4]

61 && 
i
[8] !=
num
[5] && i[8] !=num[5] && i[8] !=num[6] && i[8] !=num[7])

63 
num
[8] = 
i
[8];

64 
i
[9]=0;i[9]<
MAX_NUM
;i[9]++)

66 if(
i
[9] !=
num
[0] && i[9]!=num[1] && i[9] !=num[2] && i[9] !=num[3] && i[9] !=num[4]

67 && 
i
[9] !=
num
[5] && i[9] !=num[5] && i[9] !=num[6] && i[9] !=num[7] && i[9] !=num[8])

69 
num
[9] = 
i
[9];

70 
˙t
++;

71 if(
˙t
 =
TEST_NUM
)

73 
	`¥ötf
("%7d: %d%d%d%d%d%d%d%d%d%d\n", 
˙t
, 
num
[0],Çum[1],Çum[2],Çum[3],Çum[4],Çum[5],

74 
num
[6],Çum[7],Çum[8],Çum[9]);

99 
	}
}

	@euler/test25.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

5 
	~"misc.h
"

7 
	gn1
[
N
], 
	gn2
[N], 
	gn3
[N];

8 
	$maö
()

10 
i
;

11 
n1
[0]=1;n1[1]=1;

12 
n2
[0]=1;n2[1]=1;

14 
i
=3;;i++)

16 
	`sum_l⁄g_nums
(
n1
,
n2
,
n3
);

17 if(
n3
[0] =1000Ë{
	`¥ötf
("\nThê%dthÇum\n",
i
);;}

18 
	`mem˝y
(
n1
, 
n2
, 
N
*());

19 
	`mem˝y
(
n2
, 
n3
, 
N
*());

21 
	}
}

	@euler/test26.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

5 
	#MAX_LEN
 10000

	)

7 
	#START
 5000

	)

9 
	$check_‰a˘i⁄
(
n
, *
vÆues
, *
Àn
)

11 
num
 = 10, 
i
=0;

12 
	`mem£t
(
vÆues
, 0, 
MAX_LEN
);

15 if(
num
 < 
n
)

17 
num
 =Çum *10;

18 
vÆues
[
i
++] = 0;

21 if(
num
 % 
n
 == 0)

23 
vÆues
[
i
] = 
num
 / 
n
;

24 *
Àn
 = 
i
 + 1;

29 
vÆues
[
i
++] = 
num
 / 
n
;

30 
num
 = (num % 
n
) * 10;

32 if(
i
 >
MAX_LEN
)

34 *
Àn
 = 
MAX_LEN
;

38 
	}
}

40 
	$check_ª≥©
(*
vÆues
, *
ª≥©_nums
)

42 
tocheck
[5], 
i
,
j
;

43 
tocheck
[0] = 
vÆues
[
START
];

44 
tocheck
[1] = 
vÆues
[
START
+1];

45 
tocheck
[2] = 
vÆues
[
START
+2];

46 
tocheck
[3] = 
vÆues
[
START
+3];

47 
tocheck
[4] = 
vÆues
[
START
+4];

49 
i
=1;i<
MAX_LEN
;i++)

51 if(
vÆues
[
START
+
i
] =
tocheck
[0] &&

52 
vÆues
[
START
+1+
i
] =
tocheck
[1] &&

53 
vÆues
[
START
+2+
i
] =
tocheck
[2] &&

54 
vÆues
[
START
+3+
i
] =
tocheck
[3] &&

55 
vÆues
[
START
+4+
i
] =
tocheck
[4])

57 
j
=0;j<
i
;j++)

58 
ª≥©_nums
[
j
] =
vÆues
[
START
+j];

59 
	`¥ötf
("\n");

60  
i
;

65 
	}
}

67 
	$¥öèŒ
(*
vÆues
, 
Àn
)

69 
i
;

70 
i
=0;i<
Àn
;i++)

71 
	`¥ötf
("%d",
vÆues
[
i
]);

72 
	`¥ötf
("\n");

73 
	}
}

75 
	$maö
()

77 
vÆues
[
MAX_LEN
], 
ªsu…
[MAX_LEN], 
ª≥©_nums
[MAX_LEN],
ßve_ª≥©
[MAX_LEN];

78 
i
;

79 *
±r
;

80 
Àn
, 
ª≥©
,
max_ª≥©
 = 0, 
max_num
;

81 
i
=2;i<1000;i++)

83 
	`check_‰a˘i⁄
(
i
,
vÆues
,&
Àn
);

84 if(
Àn
 =
MAX_LEN
)

86 
	`¥ötf
("check:%d\n",
i
);

87 
ª≥©
 = 
	`check_ª≥©
(
vÆues
,
ª≥©_nums
);

88 if(
ª≥©
 > 
max_ª≥©
)

90 
max_ª≥©
 = 
ª≥©
;

91 
max_num
 = 
i
;

92 
	`mem˝y
(
ªsu…
, 
vÆues
, 
MAX_LEN
);

93 
	`mem˝y
(
ßve_ª≥©
, 
ª≥©_nums
, 
MAX_LEN
);

97 
	`¥ötf
("1/%d=\n", 
max_num
);

98 
	`¥öèŒ
(
ªsu…
, 
Àn
);

100 
	`¥ötf
("\nMAX REPEAT:%d\n", 
max_ª≥©
);

101 
	`¥öèŒ
(
ßve_ª≥©
, 
max_ª≥©
);

102 
±r
 = 
	`mÆloc
(11);

103 
±r
[10]=0xa;

104 
	`‰ì
(
±r
);

106 
	}
}

	@euler/test27.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

5 
	~"misc.h
"

7 
	#MAX_NUM1
 1000

	)

8 
	#MAX_NUM2
 1000

	)

10 
	$maö
()

12 
a
,
b
,
i
;

13 
ßm∂e
;

14 
a
=1;a<
MAX_NUM1
;a++)

15 
b
=0;b<
MAX_NUM2
;b++)

17 
i
=0;i<
a
;i++)

19 
ßm∂e
 = 
i
*ò+ 
a
*ò+ 
b
;

20 if(
ßm∂e
 <=0 || 
	`is_¥ime
(ßm∂eË=
FALSE
)

23 if(
i
==
a
)

24 
	`E_PRINTF
("%d %d\n", 
a
, 
b
);

26 
i
=0;i<
a
;i++)

28 
ßm∂e
 = 
i
*ò- 
a
*ò+ 
b
;

29 if(
ßm∂e
 <=0 || 
	`is_¥ime
(ßm∂eË=
FALSE
)

32 if(
i
==
a
)

33 
	`E_PRINTF
("%d %d\n", -
a
, 
b
);

35 
i
=0;i<
a
;i++)

37 
ßm∂e
 = 
i
*ò+ 
a
*ò- 
b
;

38 if(
ßm∂e
 <=0 || 
	`is_¥ime
(ßm∂eË=
FALSE
)

41 if(
i
==
a
)

42 
	`E_PRINTF
("%d %d\n", 
a
, -
b
);

44 
i
=0;i<
a
;i++)

46 
ßm∂e
 = 
i
*ò- 
a
*ò- 
b
;

47 if(
ßm∂e
 <=0 || 
	`is_¥ime
(ßm∂eË=
FALSE
)

50 if(
i
==
a
)

51 
	`E_PRINTF
("%d %d\n", -
a
, -
b
);

54 
	}
}

	@euler/test28.c

1 
	~<°dio.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 1001

	)

6 
	$maö
()

8 
i
, 
j
, 
sum
 = 1, 
num
;

9 
	`E_PRINTF
("%d ", 1);

10 
i
=3;i<=
MAX_NUM
;i+=2)

12 
j
=0;j<4;j++)

14 
num
 = (
i
-2)*(i-1)+1+(i-1)*
j
;

15 
sum
 +
num
;

16 
	`E_PRINTF
("%d ", 
num
);

19 
	`¥ötf
("\nSum: %d\n", 
sum
);

20 
	}
}

	@euler/test29.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 100

	)

7 
	#MAX_NUMS
 
MAX_NUM
*MAX_NUM+1

	)

9 
	gidx
 = 0;

10 *
	gnums
[
MAX_NUMS
] = {
NULL
};

12 
	$ö£π_l⁄g_num
(*
num
)

14 
i
;

15 if(
idx
 >
MAX_NUMS
)

17 
	`¥ötf
("NoÉnough storage forÜongÇums\n");

20 
i
=0;i<
idx
;i++)

22 if((
nums
[
i
][0] =
num
[0]Ë&& (
	`memcmp
(nums[i],Çum, (num[0]+1)*()) == 0))

26 if(
i
 =
idx
)

28 
	`mem˝y
(
nums
[
idx
], 
num
, 
N
*());

29 
idx
++;

31 
	}
}

35 
	$maö
()

37 
i
,
j
;

38 
a
[
N
],
b
[N],
c
[N],
d
[N];

39 
i
=0;i<
MAX_NUMS
;i++)

41 
nums
[
i
] = 
	`mÆloc
(
N
*());

42 if(
nums
[
i
] =
NULL
 )

44 
	`¥ötf
("NoÉnough mem\n");

48 
	`mem£t
(
nums
[
i
], 0, 
N
*());

51 
i
=2;i<=
MAX_NUM
;i++)

53 
	`f‹m©_l⁄g_num
(
i
,
a
);

54 
	`mem˝y
(
c
,
a
,
N
*());

55 
j
=2;j<=
MAX_NUM
;j++)

57 
	`mul_l⁄g_nums
(
c
,
a
,
d
);

58 
	`ö£π_l⁄g_num
(
d
);

59 
	`mem˝y
(
c
,
d
,
N
*());

64 
	`¥ötf
("TŸÆÇum: %d\n", 
idx
);

66 
i
=0;i<
idx
;i++)

68 
	`ouçut_l⁄g_num
(
nums
[
i
]);

72 
i
=0;i<
MAX_NUMS
;i++);

74 if(
nums
[
i
] !
NULL
)

75 
	`‰ì
(
nums
[
i
]);

79 
	}
}

	@euler/test30.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 6

	)

6 
	#MAX_NUM1
 5

	)

9 
boﬁ
 
	$check_num
(
num
, 
Àn
)

11 
i
, 
sum
=0, 
ãmp
;

12 
ãmp
 = 
num
;

13 
i
=0;i<
Àn
;i++)

15 
sum
 +
	`pow
(
ãmp
 %10, 
MAX_NUM1
);

17 
ãmp
 =Åemp / 10;

19 if(
sum
 =
num
)

21  
TRUE
;

24  
FALSE
;

25 
	}
}

28 
	$maö
()

30 
i
, 
j
, 
sum
 = 0, 
num
;

31 
i
=2;i<
	`pow
(10,
MAX_NUM
);i++)

33 if(
	`check_num
(
i
, 
MAX_NUM
))

35 
	`E_PRINTF
("%4d\n", 
i
);

36 
sum
 +
i
;

40 
	`¥ötf
("\nSum: %d\n", 
sum
);

41 
	}
}

	@euler/test31.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 200

	)

7 
	gßm∂es
[] ={1, 2, 5, 10, 20, 50, 100, 200};

8 
	gsums
[7];

10 
	$maö
()

12 
lo›
[8] = {0}, 
i
, 
sum
, 
˙t
=0;

14 
	`E_PRINTF
("%3d %3d %3d %3d %3d %3d %3d %3d \n", 
ßm∂es
[0],samples[1],samples[2],samples[3],samples[4],samples[5],samples[6],samples[7]);

15 
lo›
[7]=0;lo›[7]<
MAX_NUM
/
ßm∂es
[7]+1;loop[7]++)

17 
sums
[7] = 
lo›
[7]*
ßm∂es
[7];

18 
lo›
[6]=0;lo›[6]<(
MAX_NUM
-
sums
[7])/
ßm∂es
[6]+1;loop[6]++)

20 
sums
[6] =sums[7]+ 
lo›
[6]*
ßm∂es
[6];

21 
lo›
[5]=0;lo›[5]<(
MAX_NUM
-
sums
[6])/
ßm∂es
[5]+1;loop[5]++)

23 
sums
[5] = sums[6]+ 
lo›
[5]*
ßm∂es
[5];

24 
lo›
[4]=0;lo›[4]<(
MAX_NUM
-
sums
[5])/
ßm∂es
[4]+1;loop[4]++)

26 
sums
[4] =sums[5] + 
lo›
[4]*
ßm∂es
[4];

27 
lo›
[3]=0;lo›[3]<(
MAX_NUM
-
sums
[4])/
ßm∂es
[3]+1;loop[3]++)

29 
sums
[3]=sums[4] + 
lo›
[3]*
ßm∂es
[3];

30 
lo›
[2]=0;lo›[2]<(
MAX_NUM
-
sums
[3])/
ßm∂es
[2]+1;loop[2]++)

32 
sums
[2] = sums[3] + 
lo›
[2]*
ßm∂es
[2];

33 
lo›
[1]=0;lo›[1]<(
MAX_NUM
-
sums
[2])/
ßm∂es
[1]+1;loop[1]++)

35 
sums
[1] = sums[2]+ 
lo›
[1]*
ßm∂es
[1];

36 
lo›
[0]=0;lo›[0]<(
MAX_NUM
-
sums
[1])/
ßm∂es
[0]+1;loop[0]++)

38 
sums
[0] = sums[1] + 
lo›
[0]*
ßm∂es
[0];

39 if(
sums
[0] =
MAX_NUM
)

41 
	`E_PRINTF
("%3d %3d %3d %3d %3d %3d %3d %3d \n", 
lo›
[0],loop[1],loop[2],loop[3],loop[4],loop[5],loop[6],loop[7]);

42 
˙t
 ++;

52 
	`¥ötf
("TŸÆ c¡: %d", 
˙t
);

53 
	}
}

	@euler/test32.c

1 
	~<°dio.h
>

3 
	~"misc.h
"

6 
	#MAX_NUM
 9

	)

8 
	#TEST_NUM
 1000000

	)

10 
	gnum
[
MAX_NUM
]={0};

12 
	g˙t
=0;

13 
	gföd_nums
[20]={0};

14 
	$check_num
(*
num
)

16 
i
,
j
,
m
,
n
,
a
,
b
,
c
,
k
;

17 
i
=1;i<
MAX_NUM
-2;i++)

18 
j
=1;j<
MAX_NUM
-
i
;j++)

20 
a
 = 0; 
b
 = 0; 
c
 = 0;

21 
m
=0;m<
i
;m++)

23 
a
 =á * 10 + 
num
[
m
];

25 
n
=
i
;n<i+
j
;n++)

27 
b
 = b * 10 + 
num
[
n
];

29 
n
=
i
+
j
;n<
MAX_NUM
;n++)

31 
c
 = c * 10 + 
num
[
n
];

34 if(
a
*
b
==
c
)

36 
	`E_PRINTF
("%d %d %d\n",
a
, 
b
, 
c
);

37 
k
=0;k<20;k++)

39 if(
föd_nums
[
k
]==
c
)

41 if(
föd_nums
[
k
]==0)

43 
föd_nums
[
k
]=
c
;

49 
	}
}

51 
	$maö
()

53 
i
[
MAX_NUM
]={0};

54 
k
,
sum
=0;

56 
i
[0]=1;i[0]<=
MAX_NUM
;i[0]++)

58 
num
[0] = 
i
[0];

59 
i
[1]=1;i[1]<=
MAX_NUM
;i[1]++)

61 if(
i
[1] !=
num
[0])

63 
num
[1] = 
i
[1];

64 
i
[2]=1;i[2]<=
MAX_NUM
;i[2]++)

66 if(
i
[2] !=
num
[0] && i[2] !=num[1])

68 
num
[2] = 
i
[2];

69 
i
[3]=1;i[3]<=
MAX_NUM
;i[3]++)

71 if(
i
[3] !=
num
[0] && i[3] !=num[1] && i[3] !=num[2])

73 
num
[3] = 
i
[3];

74 
i
[4]=1;i[4]<=
MAX_NUM
;i[4]++)

76 if(
i
[4] !=
num
[0] && i[4] !=num[1] && i[4] !=num[2] && i[4] !=num[3])

78 
num
[4] = 
i
[4];

79 
i
[5]=1;i[5]<=
MAX_NUM
;i[5]++)

81 if(
i
[5] !=
num
[0] && i[5] !=num[1] && i[5] !=num[2] && i[5] !=num[3] && i[5] !=num[4])

83 
num
[5] = 
i
[5];

84 
i
[6]=1;i[6]<=
MAX_NUM
;i[6]++)

86 if(
i
[6] !=
num
[0] && i[6]!=num[1] && i[6] !=num[2] && i[6] !=num[3] && i[6] !=num[4] && i[6] !=num[5])

88 
num
[6] = 
i
[6];

89 
i
[7]=1;i[7]<=
MAX_NUM
;i[7]++)

91 if(
i
[7] !=
num
[0] && i[7]!=num[1] && i[7] !=num[2] && i[7] !=num[3] && i[7] !=num[4]

92 && 
i
[7] !=
num
[5] && i[7] !=num[5] && i[7] !=num[6])

94 
num
[7] = 
i
[7];

95 
i
[8]=1;i[8]<=
MAX_NUM
;i[8]++)

97 if(
i
[8] !=
num
[0] && i[8]!=num[1] && i[8] !=num[2] && i[8] !=num[3] && i[8] !=num[4]

98 && 
i
[8] !=
num
[5] && i[8] !=num[5] && i[8] !=num[6] && i[8] !=num[7])

100 
num
[8] = 
i
[8];

101 
˙t
 ++;

102 
	`check_num
(
num
);

125 
k
=0;k<20 && 
föd_nums
[k]!=0;k++)

127 
	`¥ötf
("%d\n",
föd_nums
[
k
]);

128 
sum
 +
föd_nums
[
k
];

130 
	`¥ötf
("Sum: %d\n", 
sum
);

132 
	}
}

	@euler/test33.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

5 
boﬁ
 
	$check_num
(
a
, 
b
)

8 
a1
, 
b1
;

9 if(
a
==
b
) 
FALSE
;

10 if(
a
 %10 =
b
 / 10)

12 
a1
=
a
/10;

13 
b1
=
b
%10;

14 if(
a1
*
b
 =
a
*
b1
)

15  
TRUE
;

17 if(
a
 /10 =
b
 %10)

19 
a1
=
a
%10;

20 
b1
=
b
/10;

21 if(
a1
*
b
 =
a
*
b1
)

22  
TRUE
;

24  
FALSE
;

26 
	}
}

29 
	$maö
()

31 
i
,
j
;

32 
i
=10;i<100;i++)

33 
j
=10;j<100;j++)

34 if(
i
<
j
 && 
	`check_num
(i,j))

35 
	`¥ötf
("%d,%d\n", 
i
, 
j
);

38 
	}
}

	@euler/test34.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

4 
	gnums
[10]={1};

6 
	#MAX_NUM
 10000000LL

	)

8 
boﬁ
 
	$check_num
(
num
)

10 
tmp
, 
sum
=0;

11 
tmp
 = 
num
;

14 if(
tmp
 ==0)

16 
sum
 +
nums
[
tmp
 % 10];

17 
tmp
 =Åmp / 10;

19 if(
sum
 =
num
)

21 
	`¥ötf
("%d\n", 
num
);

22  
TRUE
;

25  
FALSE
;

26 
	}
}

29 
	$maö
()

33 
i
; 
j
=1;

34 
nums
[1] = 1;

35 
i
=2;i<10;i++)

36 
nums
[
i
] =Çums[i-1]*i;

38 
j
=3;j<
MAX_NUM
;j++)

39 
	`check_num
(
j
);

42 
	}
}

	@euler/test35.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

5 
	#MAX_NUM
 1000000

	)

6 
	$maö
()

9 
i
, 
j
,
Àn
; 
˙t
 =0;

10 
boﬁ
 
is_¥ime_num
;

12 
√xt_num
;

14 if(!
	`c⁄°rcut_¥ime_check
(
MAX_NUM
))

17 
j
=1;j<
MAX_NUM
;j++)

19 
√xt_num
 = 
j
;

20 
Àn
 = 
	`check_Àngth
(
√xt_num
);

21 
is_¥ime_num
 = 
TRUE
;

22 
i
=0;i<
Àn
;i++)

24 
√xt_num
 = 
	`√xt_cúcuœr_num
“ext_num, 
Àn
);

25 if(
	`check_¥ime_wôh_ßm∂es
(
√xt_num
Ë=
FALSE
Ë{
is_¥ime_num
 = FALSE; ;}

27 if(
is_¥ime_num
)

29 
	`¥ötf
("%d\n", 
j
);

30 
˙t
 ++;

34 
	`¥ötf
("˙à%d\n", 
˙t
);

35 
	`dec⁄°ru˘_¥ime_check
();

37 
	}
}

	@euler/test36.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

4 
	#MAX_NUM
 1000000

	)

5 
	$maö
()

8 
i
,
sum
=0;

10 
i
=0;i<
MAX_NUM
;i++)

11 if(
	`is_∑lödromic_num
(
i
,10) && is_palindromic_num(i,2))

13 
	`¥ötf
("%d\n", 
i
);

14 
sum
 +
i
;

17 
	`¥ötf
("sum%d\n", 
sum
);

19 
	}
}

	@euler/test37.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

3 
	#MAX_NUM
 1000000

	)

5 
	$maö
()

7 
i
 , 
√xt_num
, 
j
, 
Àngth
, 
ba£
, 
˙t
=0,
sum
=0;

8 
boﬁ
 
found_⁄e
;

9 if(!
	`c⁄°rcut_¥ime_check
(
MAX_NUM
))

12 
i
=10;i<
MAX_NUM
;i++)

14 
√xt_num
 = 
i
;

15 
Àngth
 = 
	`check_Àngth
(
√xt_num
);

16 
found_⁄e
 = 
TRUE
;

17 
j
=1;j<
Àngth
;j++)

19 
ba£
 = 
	`pow
(10,
j
);

20 
√xt_num
 = 
i
 % 
ba£
;

21 if(!
	`check_¥ime_wôh_ßm∂es
(
√xt_num
)Ë{
found_⁄e
 = 
FALSE
; ;}

23 
ba£
 = 
	`pow
(10,
Àngth
-
j
);

24 
√xt_num
 = 
i
 / 
ba£
;

25 if(!
	`check_¥ime_wôh_ßm∂es
(
√xt_num
)Ë{
found_⁄e
 = 
FALSE
; ;}

28 if(
found_⁄e
 && 
	`check_¥ime_wôh_ßm∂es
(
i
))

30 
˙t
 ++;

31 
	`¥ötf
("%2d:%d\n", 
˙t
, 
i
);

32 
sum
 +
i
;

33 if(
˙t
 == 11)

38 
	`¥ötf
("sum: %d\n", 
sum
);

39 
	`dec⁄°ru˘_¥ime_check
();

42 
	}
}

	@euler/test38.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

6 
boﬁ
 
	$is_∑ndigôÆ_num
(
num
)

8 
m¨k
[9] = {0}; 
n
,
j
;

9 if(
	`check_Àngth
(
num
Ë!=9Ë 
FALSE
;

11 
j
 = 
num
;

14 if(
j
==0);

17 
n
 = 
j
 %10;

18 if(
n
 =0 || 
m¨k
[n-1] == 1)

19  
FALSE
;

21 
m¨k
[
n
-1] = 1;

22 
j
 = j / 10;

26  
TRUE
;

28 
	}
}

30 
	$maö
()

33 
num
, 
i
,
j
,
k
, 
ãmp
,
max_num
 = 0;

35 
i
=2;i<=9;i++)

37 
	`¥ötf
("%d\n", 
i
);

38 
k
=2;k<
	`pow
(10, 9/
i
+1);k++)

40 
num
 = 0;

41 
j
=1;j<=
i
;j++)

43 
ãmp
 = 
k
*
j
;

44 
num
 = 
	`ˇt_öt_num
“um, 
ãmp
);

46 if(
	`is_∑ndigôÆ_num
(
num
))

48 
	`¥ötf
("%d, %d -> %d\n", 
i
, 
k
, 
num
);

49 if(
num
 > 
max_num
) max_num =Çum;

51 if(
num
 > 987654321)

57 
	`¥ötf
("max: %d\n", 
max_num
);

59 
	}
}

	@euler/test39.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

4 
	#MAX_NUM
 1000

	)

6 
boﬁ
 
	$check_num
(
a
, 
b
, 
p
)

8 if(
p
*∞=2*
a
*∞+ 2*
b
*p - 2*a*b)

9  
TRUE
;

11  
FALSE
;

12 
	}
}

14 
	$maö
()

17 
i
, 
j
, 
k
,
sum
=0, 
˙t
=0, 
max
=0, 
max_num
;

18 
i
=1;i<
MAX_NUM
;i++)

20 
˙t
 = 0;

22 
j
=1;j<
i
/2;j++)

23 
k
=
i
-1;k>=
j
;k--)

24 if(
	`check_num
(
j
,
k
,
i
))

27 
˙t
++;

29 if(
˙t
 > 
max
Ë{max = c¡; 
max_num
 = 
i
;}

31 
	`¥ötf
("max c¡: %d, maxÇum: %d\n", 
max
, 
max_num
);

34 
	}
}

	@euler/test40.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<mÆloc.h
>

4 
	~<°rög.h
>

5 
	~"misc.h
"

7 
	#MAX_NUM
 1000010

	)

8 *
	gbuf
;

9 
	gÀn
=0;

11 
	$ªtu∫_num
(
i
)

13 
ªsu…
 = 
buf
[
i
-1];

14 
	`¥ötf
("%d\n",
ªsu…
);

15  
ªsu…
;

16 
	}
}

18 
boﬁ
 
	$ßve_num
(
i
)

20 
num_Àn
 = 
	`check_Àngth
(
i
);

21 
j
, 
m
=0, 
num
 = 
i
, 
ba£
;

22 
j
=
num_Àn
-1;j>=0;j--)

24 
ba£
 = 
	`pow
(10, 
j
);

25 
buf
[
Àn
++] = 
num
 / 
ba£
;

26 
num
 =Çum % 
ba£
;

27 if(
Àn
 > 
MAX_NUM
-1)

28  
FALSE
;

30  
TRUE
;

31 
	}
}

33 
	$¥öèŒ
()

35 
i
;

36 
i
=0;i<
MAX_NUM
;i++)

38 
	`¥ötf
("%d",
buf
[
i
]);

40 
	`¥ötf
("\n");

41 
	}
}

43 
	$maö
()

45 
°r
[20];

46 
i
;

47 if((
buf
=
	`mÆloc
(
MAX_NUM
)Ë=
NULL
)

49 
	`mem£t
(
buf
, 0, 
MAX_NUM
);

50 
i
=1;;i++)

52 if(!
	`ßve_num
(
i
))

56 
	`¥ötf
("%d\n",
	`ªtu∫_num
(1)*return_num(10)*return_num(100)*return_num(1000)*return_num(10000)*return_num(100000)*return_num(1000000));

58 
	`‰ì
(
buf
);

60 
	}
}

	@euler/test41.c

1 
	~<°dio.h
>

2 
	~"misc.h
"

4 
	#MAX_NUM
 7654321

	)

14 
	$maö
()

16 
i
, 
Àn
;

17 if(!
	`c⁄°rcut_¥ime_check
(
MAX_NUM
))

20 
i
=2;ò<
MAX_NUM
;i++)

22 
Àn
 = 
	`check_Àngth
(
i
);

23 if(
	`is_n_∑ndigôÆ_num
(
Àn
, 
i
Ë&& 
	`check_¥ime_wôh_ßm∂es
(i))

24 
	`¥ötf
("%d\n",
i
);

28 
	`dec⁄°ru˘_¥ime_check
();

31 
	}
}

	@euler/test42.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

5 
	~"misc.h
"

7 
boﬁ
 
	$is_åüngÀ_num
(
num
)

9 
m
;

10 
m
 = 
	`sqπ
(1+8*
num
);

12 if(
m
>=3 && (m %2 =1Ë&& (m*m =(1+8*
num
)))

13  
TRUE
;

15  
FALSE
;

16 
	}
}

18 
	$maö
()

20 
FILE
 *
°ªam
; 
ch
; 
n
, 
˙t
=0;

21 
tmp
[20],
tmp1
; 
sum
=0;

22 
°ªam
 = 
	`f›í
("./files/words.txt","r");

23 if(
°ªam
 =
NULL
)

25 
	`¥ötf
("file openÉrror\n");

28 
	`f£ek
(
°ªam
, 0, 
SEEK_SET
);

29 
n
 = 0;

30 
tmp
[0]='\0';

33 
ch
 = 
	`fgëc
 (
°ªam
);

34 i‡(
ch
=44 || ch=
EOF
)

36 
tmp
[
n
]='\0';

37 
	`¥ötf
("%†- %d\n", 
tmp
, 
sum
);

38 if(
	`is_åüngÀ_num
(
sum
))

39 
˙t
++;

41 
n
=0;

42 
tmp
[0]='\0';

43 
sum
 = 0;

45 i‡(
ch
 != 34)

47 
tmp
[
n
++] = ()
ch
;

48 
sum
 +
ch
 - 'A' + 1;

51 } 
ch
 !
EOF
);

53 
	`¥ötf
("TŸÆ c¡: %d\n", 
˙t
);

55 
	`f˛o£
(
°ªam
);

57 
	}
}

	@euler/test43.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

10 
	#MAX_NUM
 10

	)

12 
	$maö
()

14 
a
[
N
] ={0}, 
b
[N] ={0},
sum
[N] ={0};

15 
tmp1
, 
tmp2
; 
i
,
j
; 
boﬁ
 
Áû
;

16 
Á˘‹
[7] = {2,3,5,7,11,13,17};

17 
mm
[
MAX_NUM
] = {1,0,2,3,4,5,6,7,8,9};

18 
¬
[
MAX_NUM
] = {1,0,2,3,4,5,6,7,8,9};

21 
	`mem˝y
(
mm
,
¬
,
MAX_NUM
);

22 
Áû
 = 
FALSE
;

24 
j
=0;j<7;j++)

26 
tmp1
 = 
¬
[
j
+1]*100+nn[j+2]*10+nn[j+3];

27 if((
tmp1
 % 
Á˘‹
[
j
]) !=0)

29 
Áû
 = 
TRUE
;

33 if(!
Áû
)

35 
	`mem£t
(
b
,0,
N
*());

36 
b
[0] = 
MAX_NUM
;

37 
i
=0;i<
MAX_NUM
;i++)

39 
	`¥ötf
("%d", 
¬
[
i
]);

40 
b
[
i
+1] = 
¬
[
MAX_NUM
 - i -1];

42 
	`¥ötf
("\n");

44 
	`sum_l⁄g_nums
(
a
,
b
,
sum
);

45 
	`¥ötf
("sum->");

46 
	`ouçut_l⁄g_num
(
sum
);

48 
	`mem˝y
(
a
,
sum
,
N
*());

50 }
	`föd_√xt_≥rm
(
MAX_NUM
, 
mm
, 
¬
));

51 
	`¥ötf
("\nTotal sum:\n");

52 
	`ouçut_l⁄g_num
(
sum
);

55 
	}
}

	@euler/test44.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 5000

	)

7 
	$maö
()

10 
≥¡ag⁄Æ_num
[
MAX_NUM
] = {0};

11 
i
,
j
;

12 
i
=0;i<
MAX_NUM
;i++)

14 
≥¡ag⁄Æ_num
[
i
] = 
	`ˇl_≥¡ag⁄Æ_num
(i+1);

15 
	`E_PRINTF
("%d\n", 
≥¡ag⁄Æ_num
[
i
]);

18 
i
=0;i<
MAX_NUM
-1;i++)

19 
j
=
i
+1;j<
MAX_NUM
;j++)

20 if(
	`is_≥¡ag⁄Æ_num
(
≥¡ag⁄Æ_num
[
j
]-≥¡ag⁄Æ_num[
i
]) &&

21 
	`is_≥¡ag⁄Æ_num
(
≥¡ag⁄Æ_num
[
j
]+≥¡ag⁄Æ_num[
i
]) )

23 
	`¥ötf
("i:%d-%d, j:%d-%d,Ö[j]-p[i]:%d\n",
i
+1,
≥¡ag⁄Æ_num
[i],
j
+1,Öentagonal_num[j],pentagonal_num[j]-pentagonal_num[i]);

29 
	}
}

	@euler/test45.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 100000LL

	)

7 
	gåüngÀ_num
[
MAX_NUM
] = {0};

9 
	$maö
()

12 
i
,
j
;

13 
i
=0;i<
MAX_NUM
;i++)

15 
åüngÀ_num
[
i
] = 
	`ˇl_åüngÀ_num
(i+1);

16 
	`E_PRINTF
("%Œd\n", 
åüngÀ_num
[
i
]);

19 
i
=285;i<
MAX_NUM
-1;i++)

20 if(
	`is_≥¡ag⁄Æ_num
(
åüngÀ_num
[
i
]) &&

21 
	`is_hexag⁄Æ_num
(
åüngÀ_num
[
i
]) )

23 
	`¥ötf
("%Œd:%Œd\n",
i
+1, 
åüngÀ_num
[i]);

29 
	}
}

	@euler/test46.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

6 
boﬁ
 
	$is_m©ched
(
num
)

8 
i
, 
m
, 
n
;

9 
m
 = 
	`sqπ
(
num
/2)+1;

10 
i
=1;i<=
m
;i++)

12 
n
 = 
num
 - 2*
i
*i;

13 if(
n
 > 0 && 
	`check_¥ime_wôh_ßm∂es
(n))

15 
	`E_PRINTF
("%d=%d+2*%d^2\n", 
num
, 
n
, 
i
);

16  
TRUE
;

19  
FALSE
;

20 
	}
}

22 
	$maö
()

24 
num
 = 100000, 
i
;

25 if(!
	`c⁄°rcut_¥ime_check
(
num
))

28 
i
=2;i<
num
;i++)

30 if(
i
%2 =1 && (!
	`check_¥ime_wôh_ßm∂es
(i)))

32 
	`E_PRINTF
("%d ", 
i
);

33 if(!
	`is_m©ched
(
i
))

35 
	`¥ötf
("found: %d\n", 
i
);

40 
	`dec⁄°ru˘_¥ime_check
();

42 
	}
}

	@euler/test47.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

9 
	#MAX_NUM
 1000000

	)

11 
	#MAX_PRIMES
 100000

	)

13 
	#MAX_FACTOR_CNT
 4

	)

15 
	g¥imes
[
MAX_PRIMES
]={0};

16 
	g˙t
 = 0;

18 
	$föd_Á˘‹s
(
num
, *
n
, *
Á˘‹s
, *
˙ts
)

20 
i
=0, 
j
, 
Á˘‹s_˙t
=0;

21 
	`mem£t
(
Á˘‹s
, 0, 20*());

22 
	`mem£t
(
˙ts
, 0, 20*());

26 if(
num
 % 
¥imes
[
i
] == 0)

28 
j
=0;j<
Á˘‹s_˙t
;j++)

30 if(
Á˘‹s
[
j
] =
¥imes
[
i
])

32 
˙ts
[
j
] ++;

36 if(
j
 =
Á˘‹s_˙t
)

38 
Á˘‹s
[
Á˘‹s_˙t
]=
¥imes
[
i
];

39 
˙ts
[
Á˘‹s_˙t
++]++;

40 if(
Á˘‹s_˙t
>
MAX_FACTOR_CNT
)

42 
Á˘‹s_˙t
 = 0;

46 
num
 =Çum / 
¥imes
[
i
];

47 if(
num
 == 1)

52 
i
++;

53 if(
i
 > 
˙t
)

57 *
n
 = 
Á˘‹s_˙t
;

58  
Á˘‹s_˙t
;

60 
	}
}

62 
	$maö
()

64 
num
 = 
MAX_NUM
, 
i
, 
j
;

65 
Á˘‹_˙t
;

66 
Á˘‹s1
[20] = {0},
˙ts1
[20] = {0};

67 
Á˘‹s2
[20] = {0},
˙ts2
[20] = {0};

68 
Á˘‹s3
[20] = {0},
˙ts3
[20] = {0};

69 
Á˘‹s4
[20] = {0},
˙ts4
[20] = {0};

70 if(!
	`c⁄°rcut_¥ime_check
(
num
))

73 
i
=1;i<
num
;i++)

75 if(
	`check_¥ime_wôh_ßm∂es
(
i
))

77 
¥imes
[
˙t
++] = 
i
;

81 
	`¥ötf
("Found %dÖrimes\n", 
˙t
);

83 
j
=2;j<
MAX_NUM
-4;j++)

85 if(
	`föd_Á˘‹s
(
j
+3, &
Á˘‹_˙t
, 
Á˘‹s1
 , 
˙ts1
Ë==
MAX_FACTOR_CNT
 &&

86 
	`föd_Á˘‹s
(
j
+2, &
Á˘‹_˙t
, 
Á˘‹s2
 , 
˙ts2
Ë==
MAX_FACTOR_CNT
 &&

87 
	`föd_Á˘‹s
(
j
+1, &
Á˘‹_˙t
, 
Á˘‹s3
 , 
˙ts3
Ë==
MAX_FACTOR_CNT
 &&

88 
	`föd_Á˘‹s
(
j
, &
Á˘‹_˙t
, 
Á˘‹s4
 , 
˙ts4
Ë==
MAX_FACTOR_CNT
)

90 
	`¥ötf
("found %d\n",
j
);

92 
	`¥ötf
("%d ha†%d fa˘‹s:", 
j
, 
Á˘‹_˙t
);

93 
i
=0;i<20;i++)

94 if(
˙ts4
[
i
] >0)

95 
	`¥ötf
("%d(%dË", 
Á˘‹s4
[
i
],
˙ts4
[i]);

96 
	`¥ötf
("\n");

98 
	`¥ötf
("%d ha†%d fa˘‹s:", 
j
+1, 
Á˘‹_˙t
);

99 
i
=0;i<20;i++)

100 if(
˙ts3
[
i
] >0)

101 
	`¥ötf
("%d(%dË", 
Á˘‹s3
[
i
],
˙ts3
[i]);

102 
	`¥ötf
("\n");

104 
	`¥ötf
("%d ha†%d fa˘‹s:", 
j
+2, 
Á˘‹_˙t
);

105 
i
=0;i<20;i++)

106 if(
˙ts2
[
i
] >0)

107 
	`¥ötf
("%d(%dË", 
Á˘‹s2
[
i
],
˙ts2
[i]);

108 
	`¥ötf
("\n");

110 
	`¥ötf
("%d ha†%d fa˘‹s:", 
j
+3, 
Á˘‹_˙t
);

111 
i
=0;i<20;i++)

112 if(
˙ts1
[
i
] >0)

113 
	`¥ötf
("%d(%dË", 
Á˘‹s1
[
i
],
˙ts1
[i]);

114 
	`¥ötf
("\n");

122 
	`dec⁄°ru˘_¥ime_check
();

124 
	}
}

	@euler/test48.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

8 
	#MAX_NUM
 1000

	)

10 
	gØ
[
N
],
	gbb
[N],
	gcc
[N],
	gsum
[N], 
	gsum_ßve
[N];

11 
	$maö
()

13 
i
,
j
;

14 
	`mem£t
(
Ø
, 0, ()*
N
);

15 
	`mem£t
(
bb
, 0, ()*
N
);

16 
	`mem£t
(
cc
, 0, ()*
N
);

17 
	`mem£t
(
sum
, 0, ()*
N
);

19 
i
=1;i<=
MAX_NUM
;i++)

21 
	`f‹m©_l⁄g_num
(
i
, 
Ø
);

22 
	`f‹m©_l⁄g_num
(
i
, 
bb
);

23 
j
=1;j<
i
;j++)

25 
	`mul_l⁄g_nums
(
Ø
,
bb
,
cc
);

26 
	`cut_l⁄g_num
(10, 
cc
);

27 
	`mem˝y
(
Ø
, 
cc
, ()*
N
);

29 
	`sum_l⁄g_nums
(
Ø
, 
sum
, 
sum_ßve
);

30 
	`mem˝y
(
sum
, 
sum_ßve
, ()*
N
);

32 
	`E_PRINTF
("%d:", 
i
);

33 #ifde‡
PRINT_LOG


34 
	`ouçut_l⁄g_num
(
sum
);

37 
	`cut_l⁄g_num
(10, 
sum
);

38 
	`ouçut_l⁄g_num
(
sum
);

41 
	}
}

	@euler/test49.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

7 
boﬁ
 
	$föd_num
(
n
, *
li°
, 
Àngth
)

9 
i
=0;

10 
i
=0; i< 
Àngth
; i++)

12 if(
n
 =
li°
[
i
])

13  
TRUE
;

14 if(
n
< 
li°
[
i
])

15  
FALSE
;

17  
FALSE
;

19 
	}
}

21 
	$s‹t_li°
(*
li°
, 
Àn
)

23 
i
,
l
,
tmp
;

24 
i
=0;i<=
Àn
-2;i++)

25 
l
=
i
+1;l<=
Àn
-1;l++)

26 if(
li°
[
i
] >Üi°[
l
])

28 
tmp
 = 
li°
[
i
];

29 
li°
[
i
] =Üi°[
l
];

30 
li°
[
l
] = 
tmp
;

32 
	}
}

34 
	#MAX_NUM
 1000000

	)

36 
	#MAX_PRIMES
 100000

	)

38 
	#MAX_FACTOR_CNT
 4

	)

40 
	g¥imes
[
MAX_PRIMES
]={0};

41 
	g˙t
 = 0;

44 
	$maö
()

46 
num
 = 
MAX_NUM
, 
i
, 
j
,
tmp
;

47 
a
[
N
],
b
[N],
c
[N];

48 if(!
	`c⁄°rcut_¥ime_check
(
num
))

51 
i
=1000;i<9999;i++)

53 if(
	`check_¥ime_wôh_ßm∂es
(
i
))

56 
	`f‹m©_l⁄g_num
(
i
, 
a
);

57 if(
a
[1] !=á[2] &&á[1] !=á[3] &&á[1] !=á[4] &&

58 
a
[2] !=a[3] &&á[2] !=á[4] &&

59 
a
[3] !=á[4])

62 
¥imes
[
˙t
++] = 
i
;

67 
	`¥ötf
("Found %dÖrimes\n", 
˙t
);

69 
i
=0;i<
˙t
-2;i++)

70 
j
=
i
+2;j<
˙t
;j++)

72 
tmp
 = 
¥imes
[
i
] +Örimes[
j
];

73 if(
tmp
 %2 ==0 && 
	`föd_num
—mp/2,
¥imes
, 
˙t
))

76 
	`f‹m©_l⁄g_num
(
¥imes
[
i
], 
a
);

77 
	`s‹t_li°
(&
a
[1],4);

78 
	`f‹m©_l⁄g_num
(
tmp
/2, 
b
);

79 
	`s‹t_li°
(&
b
[1],4);

80 
	`f‹m©_l⁄g_num
(
¥imes
[
j
], 
c
);

81 
	`s‹t_li°
(&
c
[1],4);

82 if(
	`memcmp
(
a
,
b
,5*()Ë==0 && memcmp(b,
c
,5*()) ==0)

83 
	`¥ötf
("%d %d %d\n", 
¥imes
[
i
], 
tmp
/2,Örimes[
j
]);

87 
	`dec⁄°ru˘_¥ime_check
();

89 
	}
}

	@euler/test50.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

9 
	#MAX_NUM
 1000000

	)

11 
	#MAX_PRIMES
 100000

	)

13 
	g¥imes
[
MAX_PRIMES
]={0};

14 
	g˙t
 = 0;

16 
boﬁ
 
	$is_m©ched
(
idx
, 
n
, *
sum_ªt
)

18 
i
; 
sum
=0;

19 
i
=0;i<
n
;i++)

20 
sum
 = sum + 
¥imes
[
idx
+
i
];

21 if(
sum
 > 
MAX_NUM
)

23 *
sum_ªt
 = 0;

24  
FALSE
;

27 *
sum_ªt
 = 
sum
;

28 if(
	`check_¥ime_wôh_ßm∂es
(()
sum
))

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
boﬁ
 
	$is_m©ched_wôh_dñè
(
idx
, 
n
, *
sum_ªt
)

38 
i
; 
sum
=0;

39 
sum
 = *
sum_ªt
 - 
¥imes
[
idx
-1] +Örimes[idx+
n
-1];

40 if(
sum
 > 
MAX_NUM
)

42 *
sum_ªt
 =0;

43  
FALSE
;

45 *
sum_ªt
 = 
sum
;

46 if(
	`check_¥ime_wôh_ßm∂es
(()
sum
))

48  
TRUE
;

51  
FALSE
;

52 
	}
}

54 
	$maö
()

56 
num
 = 
MAX_NUM
, 
i
, 
j
; 
sum
;

57 if(!
	`c⁄°rcut_¥ime_check
(
num
))

60 
i
=1;i<
num
;i++)

62 if(
	`check_¥ime_wôh_ßm∂es
(
i
))

64 
¥imes
[
˙t
++] = 
i
;

68 
	`¥ötf
("Found %dÖrimes\n", 
˙t
);

70 
j
=
˙t
;j>21;j--)

72 
	`¥ötf
("%d\n", 
j
);

73 if(
	`is_m©ched
(0, 
j
, &
sum
))

75 
	`¥ötf
("%dÖrime†sumed from %d, sum: %d\n", 
j
, 0, ()
sum
);

76 
íd
;

78 if(
sum
 == 0)

81 
i
=1;i<
˙t
-
j
;i++)

83 if(
	`is_m©ched_wôh_dñè
(
i
, 
j
, &
sum
))

85 
	`¥ötf
("%dÖrime†sumed from %d, sum: %d\n", 
j
, 
i
, ()
sum
);

86 
íd
;

88 if(
sum
 == 0)

93 
íd
:

94 
	`dec⁄°ru˘_¥ime_check
();

96 
	}
}

	@euler/test51.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~"misc.h
"

30 #i‚de‡
MAX_NUM


31 
	#MAX_NUM
 100000

	)

34 
	#MAX_PRIMES
 10000000

	)

36 
	g¥imes
[
MAX_PRIMES
]={0};

37 
	g˙t
 = 0;

39 
	gãmp1
[
N
];

41 
	gfound_num
[10];

43 
boﬁ
 
	$is_m©ched
(*
num
, 
n
)

45 
i
,
j
,
l
,
k
,
m©ched
, 
ât
;

46 
i
=1;i<=
num
[0]-2;i++)

47 
j
=
i
+1;j<=
num
[0]-1;j++)

48 
l
=
j
+1;l<=
num
[0];l++)

50 if(
num
[
i
] =num[
j
] &&Çum[j] =num[
l
])

52 
	`mem˝y
(
ãmp1
,
num
,
N
*());

53 
m©ched
 = 0;

54 
k
=
num
[
l
]+1;k<=9;k++)

58 
ãmp1
[
i
] = 
k
;

59 
ãmp1
[
j
] = 
k
;

60 
ãmp1
[
l
] = 
k
;

61 if(
ãmp1
[temp1[0]] == 0)

63 
ât
 = 
	`ˇl_l⁄g_num
(
ãmp1
);

64 if(
	`check_¥ime_wôh_ßm∂es
(
ât
))

66 
m©ched
++;

67 
found_num
[
m©ched
] = 
ât
;

68 if(
m©ched
 =
n
-1)

70 
ât
 = 
	`ˇl_l⁄g_num
(
num
);

71 
found_num
[0] = 
ât
;

72  
TRUE
;

78  
FALSE
;

79 
	}
}

82 
	gãmp
[
N
];

84 
	$maö
()

86 
num
 = 
MAX_NUM
, 
i
, 
j
;

87 if(!
	`c⁄°rcut_¥ime_check
(
num
))

90 
i
=1;i<
num
;i++)

92 if(
	`check_¥ime_wôh_ßm∂es
(
i
))

94 
¥imes
[
˙t
++] = 
i
;

95 
	`E_PRINTF
("%10d:%d\n", 
˙t
, 
i
);

97 if(
˙t
>=
MAX_PRIMES
)

99 
	`¥ötf
("No free space forÇewÖrime\n");

100 
	`exô
(-1);

104 
	`¥ötf
("Found %dÖrimes\n", 
˙t
);

106 
i
=0;i<
˙t
;i++)

108 
	`E_PRINTF
("%d\n", 
i
);

109 
	`f‹m©_l⁄g_num
(
¥imes
[
i
],
ãmp
);

110 if(
	`is_m©ched
(
ãmp
,8))

112 
	`¥ötf
("found matchedÇum\n");

113 
j
=0;j<8;j++)

114 
	`¥ötf
("%d:%d\n",
j
,
found_num
[j]);

119 
	`dec⁄°ru˘_¥ime_check
();

121 
	}
}

	@euler/test52.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

6 
	#MAX_NUM
 6

	)

7 
	$s‹t_li°
(*
li°
, 
Àn
)

9 
i
,
l
,
tmp
;

10 
i
=0;i<=
Àn
-2;i++)

11 
l
=
i
+1;l<=
Àn
-1;l++)

12 if(
li°
[
i
] >Üi°[
l
])

14 
tmp
 = 
li°
[
i
];

15 
li°
[
i
] =Üi°[
l
];

16 
li°
[
l
] = 
tmp
;

18 
	}
}

20 
	$maö
()

22 
i
, 
j
,
tmp
;

23 
a
[
N
],
b
[N];

24 
i
=10;;i++)

26 
	`mem£t
(
a
, 0, 
N
*());

27 
	`f‹m©_l⁄g_num
(
i
,
a
);

28 
	`s‹t_li°
(&
a
[1],a[0]);

29 
j
=2;j<=
MAX_NUM
;j++)

31 
tmp
 = 
i
*
j
;

32 
	`mem£t
(
b
, 0, 
N
*());

33 
	`f‹m©_l⁄g_num
(
tmp
,
b
);

34 
	`s‹t_li°
(&
b
[1],b[0]);

36 if(
	`memcmp
(
a
,
b
, 
N
*())!=0)

39 if(
j
==
MAX_NUM
+1)

41 
	`¥ötf
("%d\n", 
i
);

46 
	}
}

	@euler/test53.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

12 
	#MAX_NUM
 100

	)

14 
	$maö
()

16 
Ø
[
N
],
bb
[N],
sum1
[N],
cc
[N],
dd
[N],
sum2
[N];

17 
m
, 
n
,
i
,
j
,
˙t
=0;

18 
m
=2;m<=
MAX_NUM
;m++)

19 
n
=2;n<
m
;n++)

21 
	`mem£t
(
Ø
,0,
N
*());

22 
	`f‹m©_l⁄g_num
(
m
,
Ø
);

23 
	`mem£t
(
cc
,0,
N
*());

24 
	`f‹m©_l⁄g_num
(1,
cc
);

26 
i
=0;i<
n
-1;i++)

28 
	`mem£t
(
bb
,0,
N
*());

29 
	`f‹m©_l⁄g_num
(
m
-
i
-1,
bb
);

30 
	`mem£t
(
sum1
,0,
N
*());

31 
	`mul_l⁄g_nums
(
Ø
,
bb
,
sum1
);

33 
	`mem£t
(
dd
,0,
N
*());

34 
	`f‹m©_l⁄g_num
(
i
+2,
dd
);

35 
	`mem£t
(
sum2
,0,
N
*());

36 
	`mul_l⁄g_nums
(
cc
,
dd
,
sum2
);

38 
	`mem˝y
(
Ø
,
sum1
, 
N
*());

39 
	`mem˝y
(
cc
,
sum2
, 
N
*());

41 
	`mem£t
(
sum2
,0,
N
*());

42 
	`mem£t
(
dd
,0,
N
*());

43 
	`f‹m©_l⁄g_num
(1000000,
dd
);

44 
	`mul_l⁄g_nums
(
cc
,
dd
,
sum2
);

45 if(
	`com∑ª_l⁄g_nums
(
sum1
,
sum2
) == 1)

47 
	`¥ötf
("%d,%d\n",
m
,
n
);

48 
˙t
++;

51 
	`ouçut_l⁄g_num
(
sum1
);

52 
	`ouçut_l⁄g_num
(
sum2
);

56 
	`¥ötf
("tŸÆ c¡:%d\n", 
˙t
);

59 
	}
}

	@euler/test54.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

4 
	~<°rög.h
>

6 
	~"misc.h
"

8 
	$s‹t_h™d
(*
h™d
)

10 
i
,
l
,
tmp1
,
tmp2
;

11 
i
=0;i<=3;i++)

12 
l
=
i
+1;l<=4;l++)

13 if(
h™d
[
i
*2] > h™d[
l
*2])

15 
tmp1
 = 
h™d
[
i
*2];

16 
tmp2
 = 
h™d
[
i
*2+1];

18 
h™d
[
i
*2] = h™d[
l
*2];

19 
h™d
[
i
*2+1] = h™d[
l
*2+1];

21 
h™d
[
l
*2] = 
tmp1
;

22 
h™d
[
l
*2+1] = 
tmp2
;

24 
	}
}

27 
	$show_h™d
(*
h™d
)

29 
i
;

30 
i
=0;i<5;i++)

31 
	`¥ötf
("%02d%¯",
h™d
[
i
*2], hand[i*2+1]);

32 
	`¥ötf
("\n");

33 
	}
}

36 
boﬁ
 
	$is_Êush
(*
h™d
, *
vÆues
)

38 
	`mem£t
(
vÆues
, 0, 5);

40 if(
h™d
[1] == hand[3] &&

41 
h™d
[3] == hand[5] &&

42 
h™d
[5] == hand[7] &&

43 
h™d
[7] == hand[9])

45 
vÆues
[0] = 
h™d
[8];

46 
vÆues
[1] = 
h™d
[6];

47 
vÆues
[2] = 
h™d
[4];

48 
vÆues
[3] = 
h™d
[2];

49 
vÆues
[4] = 
h™d
[0];

50  
TRUE
;

53  
FALSE
;

54 
	}
}

56 
boﬁ
 
	$is_°øight
(*
h™d
,*
vÆues
)

58 
	`mem£t
(
vÆues
, 0, 5);

60 if(
h™d
[0]+1 == hand[2] &&

61 
h™d
[2]+1 == hand[4] &&

62 
h™d
[4]+1 == hand[6] &&

63 
h™d
[6]+1 == hand[8])

65 
vÆues
[0] = 
h™d
[8];

66  
TRUE
;

69  
FALSE
;

70 
	}
}

73 
boﬁ
 
	$is_°øight_Êush
(*
h™d
,*
vÆues
)

76 if(
	`is_°øight
(
h™d
, 
vÆues
) &&

77 
	`is_Êush
(
h™d
, 
vÆues
))

79 
	`mem£t
(
vÆues
, 0, 5);

80 
vÆues
[0] = 
h™d
[8];

81  
TRUE
;

84  
FALSE
;

85 
	}
}

87 
boﬁ
 
	$is_royÆ_Êush
(*
h™d
, *
vÆues
)

90 if(
h™d
[0] == 10 &&

91 
	`is_°øight_Êush
(
h™d
,
vÆues
))

92  
TRUE
;

94  
FALSE
;

95 
	}
}

98 
boﬁ
 
	$is_four_of_a_köd
(*
h™d
,*
vÆues
)

100 
	`mem£t
(
vÆues
, 0, 5);

101 if(
h™d
[0] == hand[4] &&

102 
h™d
[2] == hand[4] &&

103 
h™d
[6] == hand[4])

105 
vÆues
[0] = 
h™d
[4];

106 
vÆues
[1] = 
h™d
[8];

107  
TRUE
;

111 if(
h™d
[2] == hand[4] &&

112 
h™d
[6] == hand[4] &&

113 
h™d
[8] == hand[4])

115 
vÆues
[0] = 
h™d
[4];

116 
vÆues
[1] = 
h™d
[0];

117  
TRUE
;

119  
FALSE
;

120 
	}
}

121 
boﬁ
 
	$is_thªe_of_a_köd
(*
h™d
,*
vÆues
)

123 
	`mem£t
(
vÆues
, 0, 5);

125 if(
h™d
[0] == hand[4] &&

126 
h™d
[2] == hand[4])

128 
vÆues
[0] = 
h™d
[4];

129 
vÆues
[1] = 
h™d
[8];

130  
TRUE
;

133 if(
h™d
[2] == hand[4] &&

134 
h™d
[4] == hand[6])

136 
vÆues
[0] = 
h™d
[4];

137 
vÆues
[1] = 
h™d
[8];

138  
TRUE
;

141 if(
h™d
[4] == hand[6] &&

142 
h™d
[6] == hand[8])

144 
vÆues
[0] = 
h™d
[8];

145 
vÆues
[1] = 
h™d
[2];

146  
TRUE
;

149  
FALSE
;

150 
	}
}

152 
boﬁ
 
	$is_two_∑ús
(*
h™d
,*
vÆues
)

154 
	`mem£t
(
vÆues
, 0, 5);

156 if((
h™d
[0] == hand[2] &&

157 
h™d
[4] == hand[6]))

159 
vÆues
[0] = 
h™d
[4];

160 
vÆues
[1] = 
h™d
[2];

161 
vÆues
[2] = 
h™d
[8];

162  
TRUE
;

164 if((
h™d
[0] == hand[2] &&

165 
h™d
[6] == hand[8]))

167 
vÆues
[0] = 
h™d
[8];

168 
vÆues
[1] = 
h™d
[2];

169 
vÆues
[2] = 
h™d
[4];

170  
TRUE
;

172 if((
h™d
[2] == hand[4] &&

173 
h™d
[6] == hand[8]))

175 
vÆues
[0] = 
h™d
[8];

176 
vÆues
[1] = 
h™d
[4];

177 
vÆues
[2] = 
h™d
[0];

178  
TRUE
;

181  
FALSE
;

182 
	}
}

184 
boﬁ
 
	$is_⁄e_∑ú
(*
h™d
,*
vÆues
)

186 
	`mem£t
(
vÆues
, 0, 5);

188 if(
h™d
[0] == hand[2])

190 
vÆues
[0] = 
h™d
[2];

191 
vÆues
[1] = 
h™d
[8];

192  
TRUE
;

195 if(
h™d
[2] == hand[4])

197 
vÆues
[0] = 
h™d
[2];

198 
vÆues
[1] = 
h™d
[8];

199  
TRUE
;

202 if(
h™d
[4] == hand[6])

204 
vÆues
[0] = 
h™d
[4];

205 
vÆues
[1] = 
h™d
[8];

206  
TRUE
;

208 if(
h™d
[6] == hand[8])

210 
vÆues
[0] = 
h™d
[8];

211 
vÆues
[1] = 
h™d
[4];

212  
TRUE
;

214  
FALSE
;

215 
	}
}

219 
boﬁ
 
	$is_fuŒ_hou£
(*
h™d
,*
vÆues
)

221 
	`mem£t
(
vÆues
, 0, 5);

223 if(
h™d
[0] == hand[2] &&

224 
h™d
[2] == hand[4] &&

225 
h™d
[6] == hand[8])

227 
vÆues
[0] = 
h™d
[0];

228 
vÆues
[1] = 
h™d
[6];

229  
TRUE
;

232 if(
h™d
[0] == hand[2] &&

233 
h™d
[4] == hand[6] &&

234 
h™d
[6] == hand[8])

236 
vÆues
[0] = 
h™d
[8];

237 
vÆues
[1] = 
h™d
[0];

238  
TRUE
;

241  
FALSE
;

242 
	}
}

244 
	$check_h™d
(*
h™d
, *
vÆues
)

246 if(
	`is_royÆ_Êush
(
h™d
,
vÆues
))

248 if(
	`is_°øight_Êush
(
h™d
, 
vÆues
))

250 if(
	`is_four_of_a_köd
(
h™d
, 
vÆues
))

252 if(
	`is_fuŒ_hou£
(
h™d
, 
vÆues
))

254 if(
	`is_Êush
(
h™d
, 
vÆues
))

256 if(
	`is_°øight
(
h™d
, 
vÆues
))

258 if(
	`is_thªe_of_a_köd
(
h™d
, 
vÆues
))

260 if(
	`is_two_∑ús
(
h™d
, 
vÆues
))

262 if(
	`is_⁄e_∑ú
(
h™d
, 
vÆues
))

265 
vÆues
[0] = 
h™d
[8];

266 
vÆues
[1] = 
h™d
[6];

267 
vÆues
[2] = 
h™d
[4];

268 
vÆues
[3] = 
h™d
[2];

269 
vÆues
[4] = 
h™d
[0];

272 
	}
}

275 
	gh™ds
[1000*20] = {0};

277 
	g˙t
 = 0;

280 
	$maö
()

282 
FILE
 *
°ªam
; 
ch
; 
n
,
˙t
=0;

283 
vÆues1
[5],
vÆues2
[5];

284 
⁄e_h™d
[20];

285 
ªsu…1
, 
ªsu…2
;

287 
°ªam
 = 
	`f›í
("./files/poker.txt","r");

288 if(
°ªam
 =
NULL
)

290 
	`¥ötf
("file openÉrror\n");

293 
	`f£ek
(
°ªam
, 0, 
SEEK_SET
);

294 
n
 = 0;

296 
ch
 = 
	`fgëc
 (
°ªam
);

297 i‡(
ch
 !0x20 && ch !34 && ch !0xD && ch !0xA && ch !
EOF
)

299 if(
n
>=1000*20)

301 
	`¥ötf
("noÉnough spaceÅo save\n");

302 
	`exô
(-1);

304 if(
ch
 == 'T')

305 
ch
 = 10;

306 if(
ch
 >= '2' && ch <= '9')

307 
ch
 = ch - '0' ;

308 if(
ch
 == 'J')

309 
ch
 = 11;

310 if(
ch
 == 'Q')

311 
ch
 = 12;

312 if(
ch
 == 'K')

313 
ch
 = 13;

314 if(
ch
 == 'A')

315 
ch
 = 14;

317 
h™ds
[
n
++] = ()
ch
;

320 } 
ch
 !
EOF
);

322 
n
=0;n<
MAX_NUM
;n++)

324 
	`mem˝y
(
⁄e_h™d
, &
h™ds
[
n
*20], 20);

326 
	`s‹t_h™d
(
⁄e_h™d
);

327 
ªsu…1
 = 
	`check_h™d
(
⁄e_h™d
,
vÆues1
);

330 
	`s‹t_h™d
(&
⁄e_h™d
[10]);

331 
ªsu…2
 = 
	`check_h™d
(&
⁄e_h™d
[10],
vÆues2
);

333 if(
ªsu…1
 > 
ªsu…2
 || (‘esu…1 =ªsu…2Ë&& 
	`memcmp
(
vÆues1
,
vÆues2
,5)> 0 ))

335 
˙t
++;

336 
	`¥ötf
("h™d %d:\n", 
n
);

337 
	`show_h™d
(
⁄e_h™d
);

338 
	`¥ötf
("∂ayî1: %d, %d %d %d %d %d\n",
ªsu…1
, 
vÆues1
[0],values1[1],values1[2],values1[3],values1[4]);

339 
	`show_h™d
(&
⁄e_h™d
[10]);

340 
	`¥ötf
("∂ayî2: %d, %d %d %d %d %d\n\n",
ªsu…2
, 
vÆues2
[0],values2[1],values2[2],values2[3],values2[4]);

347 
	`¥ötf
("TŸÆ h™d†%d wö†f‹Öe›À1\n", 
˙t
);

348 
	`f˛o£
(
°ªam
);

350 
	}
}

	@euler/test55.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 10000

	)

7 
	$maö
()

9 
i
, 
j
, 
num
[
N
]={0}, 
out
[N] = {0}, 
sum
[N]={0}, 
˙t
=0;

11 
i
=10;i<=
MAX_NUM
;i++)

13 
	`mem£t
(
num
, 0, 
N
*());

14 
	`f‹m©_l⁄g_num
(
i
, 
num
);

15 
	`E_PRINTF
("%d::::begö\n",
i
);

16 
j
=0;j<50;j++)

18 
	`mem£t
(
out
, 0, 
N
*());

19 
	`ªvî£_l⁄g_num
(
num
, 
out
);

20 
	`mem£t
(
sum
, 0, 
N
*());

21 
	`sum_l⁄g_nums
(
num
,
out
,
sum
);

23 
	`ouçut_l⁄g_num
(
num
);

24 
	`ouçut_l⁄g_num
(
out
);

25 
	`ouçut_l⁄g_num
(
sum
);

28 if(
	`is_∑lödromic_l⁄g_num
(
sum
))

30 
	`mem˝y
(
num
, 
sum
, 
N
*());

33 
	`E_PRINTF
("%d::::íd\n",
i
);

34 if(
j
==50)

36 
	`¥ötf
("%d\n", 
i
);

37 
˙t
++;

41 
	`¥ötf
("TŸÆ Lychª»num: %d\n", 
˙t
);

43 
	}
}

	@euler/test56.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

15 
	#MAX_NUM
 100

	)

17 
	gØ
[
N
],
	gbb
[N],
	gcc
[N], 
	gsum_ßve
[N];

18 
	$maö
()

20 
i
,
j
, 
sum_max
 = 0, 
sum
, 
m
, 
n
;

22 
i
=1;i<=
MAX_NUM
;i++)

24 
	`mem£t
(
Ø
, 0, ()*
N
);

25 
	`f‹m©_l⁄g_num
(
i
, 
Ø
);

26 
	`mem£t
(
bb
, 0, ()*
N
);

27 
	`f‹m©_l⁄g_num
(
i
, 
bb
);

28 
j
=1;j<
MAX_NUM
;j++)

30 
	`mem£t
(
cc
, 0, ()*
N
);

31 
	`mul_l⁄g_nums
(
Ø
,
bb
,
cc
);

32 
	`mem˝y
(
Ø
, 
cc
, ()*
N
);

34 
sum
 = 
	`sum_l⁄g_num_digôs
(
cc
);

35 if(
sum
 > 
sum_max
)

37 
sum_max
 = 
sum
;

38 
m
 = 
i
;

39 
n
 = 
j
+1;

44 
	`¥ötf
("max: i %d j %d sum %d", 
m
, 
n
, 
sum_max
);

47 
	}
}

	@euler/test57.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 1000

	)

7 
	gØ
[
N
]={0};

8 
	gbb
[
N
]={0};

10 
	$föd_√xt
(*
m
, *
n
)

12 
	`mem˝y
(
Ø
, 
m
, 
N
*());

13 
	`mem˝y
(
bb
, 
n
, 
N
*());

15 
	`sum_l⁄g_nums
(
Ø
, 
bb
, 
n
);

16 
	`sum_l⁄g_nums
(
n
, 
bb
, 
m
);

17 
	}
}

19 
	$maö
()

21 
m
[
N
]={0},
n
[N]={0}; 
j
,
˙t
=0;

22 
	`f‹m©_l⁄g_num
(3,
m
);

23 
	`f‹m©_l⁄g_num
(2,
n
);

25 
j
=1;j<=
MAX_NUM
;j++)

27 
	`E_PRINTF
("%d:%Œd/%Œd\n",
j
,
m
,
n
);

28 if(
m
[0]>
n
[0])

30 
˙t
++;

31 
	`¥ötf
("Found%d:\n", 
j
);

32 
	`ouçut_l⁄g_num
(
m
);

33 
	`ouçut_l⁄g_num
(
n
);

35 
	`föd_√xt
(
m
, 
n
);

37 
	`¥ötf
("TŸÆ cou¡ %d m©ched\n", 
˙t
);

39 
	}
}

	@euler/test58.c

1 
	~<°dio.h
>

3 
	~"misc.h
"

5 
	#MAX_NUM
 50000

	)

6 
	$maö
()

8 
i
, 
j
, 
˙t
=1, 
¥ime_˙t
=0;

9 
num
;

11 if(!
	`c⁄°rcut_¥ime_check_l⁄g
(1000000000LL))

15 
	`E_PRINTF
("%d ", 1);

16 
i
=3;i<=
MAX_NUM
;i+=2)

18 
j
=0;j<4;j++)

20 
num
 = (
i
-2)*(i-1)+1+(i-1)*
j
;

21 
	`E_PRINTF
("%Œd ", 
num
);

22 if(
j
!=3 && 
	`check_¥ime_wôh_ßm∂es_l⁄g
(
num
))

23 
¥ime_˙t
++;

26 
˙t
 = cnt+4;

27 if(
¥ime_˙t
*10 < 
˙t
)

29 
	`¥ötf
("\nm©ched, %d\n", 
i
);

33 
	`¥ötf
("¥ime_˙t/˙t: %d/%d=%f\n", 
¥ime_˙t
, 
˙t
, ()prime_cnt/()cnt);

35 
	`dec⁄°ru˘_¥ime_check_l⁄g
();

38 
	}
}

	@euler/test59.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

5 
	~"misc.h
"

7 
	#MAX_NUM
 10000

	)

9 
	gnums
[
MAX_NUM
]={0};

10 
	g˙t
 =0;

12 
	$maö
()

14 
FILE
 *
°ªam
; 
ch
; 
n
,
i
,
j
,
k
,
m
;

15 
tmp
[100],
tmp1
; 
sum
=0; 
boﬁ
 
Áû
;

16 
°ªam
 = 
	`f›í
("./files/cipher1.txt","r");

17 if(
°ªam
 =
NULL
)

19 
	`¥ötf
("file openÉrror\n");

22 
	`f£ek
(
°ªam
, 0, 
SEEK_SET
);

23 
n
 = 0;

25 
tmp
[0]='\0';

27 
ch
 = 
	`fgëc
 (
°ªam
);

28 i‡(
ch
=44 || ch=
EOF
)

30 
tmp
[
n
]='\0';

31 
	`E_PRINTF
("%†- %d\n", 
tmp
, 
sum
);

32 
nums
[
˙t
++] = 
sum
;

33 
n
=0;

34 
tmp
[0]='\0';

35 
sum
 = 0;

39 
tmp
[
n
++] = ()
ch
;

40 
sum
 = sum*10+
ch
 - '0';

43 } 
ch
 !
EOF
);

44 
	`f˛o£
(
°ªam
);

46 
	`E_PRINTF
("TŸÆ c¡: %d\n", 
˙t
);

48 
nums
[
˙t
-1] = 73;

49 
n
=0;n<
˙t
;n++)

51 
	`¥ötf
("%d - %d\n", 
n
, 
nums
[n]);

53 
i
=0;i<26;i++)

54 
j
=0;j<26;j++)

55 
k
=0;k<26;k++)

57 
Áû
 = 
FALSE
;

58 
m
=0;

59 
n
=0;n<40;n++)

62 if(
n
%3==0)

63 
ch
 = (
i
+'a'Ë^ 
nums
[
n
];

64 if(
n
%3==1)

65 
ch
 = (
j
+'a'Ë^ 
nums
[
n
];

66 if(
n
%3==2)

67 
ch
 = (
k
+'a'Ë^ 
nums
[
n
];

68 
tmp
[
m
++] = 
ch
;

70 if(
ch
 == '{' || ch == '}' || ch == '*'

71 || 
ch
 == '<' || ch == '>' || ch == '_'

72 || 
ch
 == '$' || ch == '#' || ch == '^' || ch == '&'

73 || 
ch
 == '*' || ch == '%' || ch == '~' || ch == '`'

74 || 
ch
 == '|' || ch == '=' || ch == '@'

75 || 
ch
 == '/' || ch == '+')

77 
Áû
 = 
TRUE
;

83 
tmp
[39] = '\0';

84 if(!
Áû
 )

86 
	`¥ötf
("%c%c%c:",(
i
+'a'),(
j
+'a'),(
k
+'a'));

87 
	`¥ötf
("%s\n", 
tmp
);

90 
	`¥ötf
("%d %d %d %d\n",'a','z','A','Z');

91 
sum
 = 0;

92 
n
=0;n<
˙t
;n++)

95 if(
n
%3==0)

96 
ch
 = ('g'Ë^ 
nums
[
n
];

97 if(
n
%3==1)

98 
ch
 = ('o'Ë^ 
nums
[
n
];

99 if(
n
%3==2)

100 
ch
 = ('d'Ë^ 
nums
[
n
];

101 
	`¥ötf
("%c",
ch
);

102 
sum
 +=
ch
;

104 
	`¥ötf
("\nTŸÆ sum:%d\n", 
sum
);

106 
	}
}

	@euler/test60.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

17 
	#MAX_NUM
 100000000

	)

19 
	#MAX_PRIMES
 10000

	)

21 
	g¥imes
[
MAX_PRIMES
]={0};

22 
	g˙t
 = 0;

24 
boﬁ
 
	$check_nums
(
i
, 
j
)

26 
p
;

27 
p
 = 
	`ˇt_öt_num
(
¥imes
[
i
],¥imes[
j
]);

28  
	`check_¥ime_wôh_ßm∂es
(
p
);

29 
	}
}

31 
	$maö
()

33 
num
 = 
MAX_PRIMES
, 
ii
, 
jj
,
p1
,
p2
; 
sum
;

34 
i
[5];

36 if(!
	`c⁄°rcut_¥ime_check
(
MAX_NUM
))

39 
ii
=1;ii<
num
;ii++)

41 if(
	`check_¥ime_wôh_ßm∂es
(
ii
))

44 
¥imes
[
˙t
++] = 
ii
;

45 
	`¥ötf
("%d ", 
ii
);

49 
	`¥ötf
("\nFound %dÖrimes\n", 
˙t
);

51 
i
[0]=0;i[0]<
˙t
;i[0]++)

53 
i
[1]=i[0]+1;i[1]<
˙t
;i[1]++)

55 if(!
	`check_nums
(
i
[1],i[0]) || !check_nums(i[0],i[1]))

57 
i
[2]=i[1]+1;i[2]<
˙t
;i[2]++)

59 if(!
	`check_nums
(
i
[2],i[0]) || !check_nums(i[2],i[1])

60 || !
	`check_nums
(
i
[0],i[2]) || !check_nums(i[1],i[2]) )

63 
i
[3]=i[2]+1;i[3]<
˙t
;i[3]++)

65 if(!
	`check_nums
(
i
[3],i[0]) || !check_nums(i[3],i[1]) || !check_nums(i[3],i[2])

66 || !
	`check_nums
(
i
[0],i[3]) || !check_nums(i[1],i[3]) || !check_nums(i[2],i[3]))

69 
i
[4]=i[3]+1;i[4]<
˙t
;i[4]++)

72 
	`¥ötf
("%d %d %d %d %d\n",
¥imes
[
i
[0]],primes[i[1]],

73 
¥imes
[
i
[2]],primes[i[3]],primes[i[4]]);

75 if(!
	`check_nums
(
i
[4],i[0]) || !check_nums(i[4],i[1]) || !check_nums(i[4],i[2]) || !check_nums(i[4],i[3])

76 || !
	`check_nums
(
i
[0],i[4]) || !check_nums(i[1],i[4]) || !check_nums(i[2],i[4]) || !check_nums(i[3],i[4]))

79 
sum
 = 
¥imes
[
i
[0]]+primes[i[1]]+primes[i[2]]+primes[i[3]]+primes[i[4]];

80 
	`¥ötf
("m©ched:%d %d %d %d %d, sum:%d\n",
¥imes
[
i
[0]],primes[i[1]],

81 
¥imes
[
i
[2]],¥imes[i[3]],¥imes[i[4]],
sum
);

83 
íd
;

91 
íd
:

92 
	`dec⁄°ru˘_¥ime_check
();

94 
	}
}

	@euler/test61.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

4 #unde‡
MAX_NUM


5 
	#MAX_NUM
 6

	)

7 
	#MINIMUM_NUM
 1000

	)

8 
	#MAXIMUM_NUM
 9999

	)

11 
	$ˇl_figuøã_num
(
n
, 
m
)

13 
num
;

14 
n
)

17 
num
 = 
m
*(m+1)/2;

20 
num
 = 
m
*m;

23 
num
 = 
m
*(3*m-1)/2;

26 
num
 = 
m
*(2*m-1);

29 
num
 = 
m
*(5*m-3)/2;

32 
num
 = 
m
*(3*m-2);

37  
num
;

39 
	}
}

41 
	gfiguøãs
[
MAX_NUM
][10000]={0};

42 
	g˙ts
[
MAX_NUM
]={0};

44 
	g∑âîns
[
MAX_NUM
][400]={0};

45 
	g£ts
[
MAX_NUM
][MAX_NUM]={0};

46 
	gn_£ts
[
MAX_NUM
];

47 
	g∑âîn_˙t
[
MAX_NUM
];

50 
	$cﬁÀ˘_∑âîns
(
n
, *
ö_£ts
)

52 
i
, 
j
;

53 
∑âîn_˙t
[
n
] = 0;

54 
	`mem£t
(
∑âîns
[
n
], 0, 400*());

55 
	`mem˝y
(
£ts
[
n
], 
ö_£ts
, 
MAX_NUM
*());

56 
n_£ts
[
n
] =Ç;

58 
i
=0;i<
n
;i++)

60 
j
=0;j<
˙ts
[
ö_£ts
[
i
]];j++)

62 
∑âîns
[
n
][
∑âîn_˙t
[n]++] = 
figuøãs
[
ö_£ts
[
i
]][
j
];

66 
	`E_PRINTF
("∑âîn(%d):\n", 
∑âîn_˙t
[
n
]);

67 
j
=0;j<
∑âîn_˙t
[
n
];j++)

69 
	`E_PRINTF
("%d ", 
∑âîns
[
n
][
j
]);

71 
	`E_PRINTF
("\n");

73 
	}
}

75 
	$check_£t
(
n
, 
idx
)

77 
sum
 =0,
j
;

79 
j
=0;j<
n
;j++)

81 
sum
 = sum + 
˙ts
[
£ts
[
n
][
j
]];

82 if(
idx
 <
sum
)

83  
£ts
[
n
][
j
];

86 
	}
}

88 
	$maö
()

90 
i
,
j
,
k
,
num
; 
kk
[
MAX_NUM
],
tocheck
[MAX_NUM],
check_ªsu…
[MAX_NUM];

91 
£ä
[
MAX_NUM
];

92 
i
=0;i<
MAX_NUM
;i++)

94 
j
=0;;j++)

96 
num
 = 
	`ˇl_figuøã_num
(
i
+3,
j
);

97 if(
num
 >
MINIMUM_NUM
 &&Çum <=
MAXIMUM_NUM
)

99 
figuøãs
[
i
][
˙ts
[i]++]=
num
;

102 if(
num
 > 
MAXIMUM_NUM
)

110 
	`mem£t
(
£ä
, 0, 
MAX_NUM
*());

111 
£ä
[0] = 4; setn[1] = 3; setn[2] = 2; setn[3] = 1; setn[4] = 0;

112 
	`cﬁÀ˘_∑âîns
(5, 
£ä
);

113 
check_ªsu…
[5]=5;

114 
kk
[5]=0;kk[5]<
˙ts
[5];kk[5]++)

116 
tocheck
[5]=
figuøãs
[5][
kk
[5]];

117 
kk
[4]=0;kk[4]<
∑âîn_˙t
[5];kk[4]++)

119 if(
tocheck
[5]%100 =
∑âîns
[5][
kk
[4]]/100)

121 
check_ªsu…
[4] = 
	`check_£t
(5,
kk
[4]);
num
=0;

122 
k
=
MAX_NUM
-1;k>=0;k--)

124 if(
k
!=
check_ªsu…
[5] && k!=check_result[4])

125 
£ä
[
num
++]=
k
;

127 
	`cﬁÀ˘_∑âîns
(4, 
£ä
);

128 
tocheck
[4] = 
∑âîns
[5][
kk
[4]];

129 
kk
[3]=0;kk[3]<
∑âîn_˙t
[4];kk[3]++)

131 if(
tocheck
[4]%100 =
∑âîns
[4][
kk
[3]]/100)

133 
check_ªsu…
[3] = 
	`check_£t
(4,
kk
[3]);
num
=0;

134 
k
=0;k<
MAX_NUM
;k++)

136 if(
k
!=
check_ªsu…
[5] && k!=check_result[4] && k!=check_result[3])

137 
£ä
[
num
++]=
k
;

139 
	`cﬁÀ˘_∑âîns
(3, 
£ä
);

140 
tocheck
[3] = 
∑âîns
[4][
kk
[3]];

141 
kk
[2]=0;kk[2]<
∑âîn_˙t
[3];kk[2]++)

143 if(
tocheck
[3]%100 =
∑âîns
[3][
kk
[2]]/100)

145 
check_ªsu…
[2] = 
	`check_£t
(3,
kk
[2]);
num
=0;

146 
k
=0;k<
MAX_NUM
;k++)

148 if(
k
!=
check_ªsu…
[5] && k!=check_result[4] && k!=check_result[3]

149 && 
k
!=
check_ªsu…
[2])

150 
£ä
[
num
++]=
k
;

152 
	`cﬁÀ˘_∑âîns
(2, 
£ä
);

153 
tocheck
[2] = 
∑âîns
[3][
kk
[2]];

154 
kk
[1]=0;kk[1]<
∑âîn_˙t
[2];kk[1]++)

156 if(
tocheck
[2]%100 =
∑âîns
[2][
kk
[1]]/100)

158 
check_ªsu…
[1] = 
	`check_£t
(2,
kk
[1]);
num
=0;

159 
k
=0;k<
MAX_NUM
;k++)

161 if(
k
!=
check_ªsu…
[5] && k!=check_result[4] && k!=check_result[3] && k!=check_result[2] && k!=check_result[1])

162 
£ä
[
num
++]=
k
;

164 
	`cﬁÀ˘_∑âîns
(1, 
£ä
);

165 
tocheck
[1] = 
∑âîns
[2][
kk
[1]];

166 
kk
[0]=0;kk[0]<
∑âîn_˙t
[1];kk[0]++)

168 
check_ªsu…
[0] = 
£ä
[0];

169 if(
tocheck
[1]%100 =
∑âîns
[1][
kk
[0]]/100 &&Öatterns[1][kk[0]]%100 ==Åocheck[5]/100)

171 
tocheck
[0] = 
∑âîns
[1][
kk
[0]];

172 
	`¥ötf
("%d %d %d %d %d %d\n", 
check_ªsu…
[5]+3,check_result[4]+3,check_result[3]+3,check_result[2]+3,check_result[1]+3,check_result[0]+3);

173 
	`¥ötf
("%d %d %d %d %d %d\n", 
tocheck
[5],tocheck[4],tocheck[3],tocheck[2],tocheck[1],tocheck[0]);

174 
	`¥ötf
("sum:%d\n", 
tocheck
[5]+tocheck[4]+tocheck[3]+tocheck[2]+tocheck[1]+tocheck[0]);

194 
íd
:

197 
i
=0;i<
MAX_NUM
;i++)

199 
	`¥ötf
("%d figuøãs(%d):\n", 
i
+3,
˙ts
[i]);

200 
j
=0;j<
˙ts
[
i
];j++)

202 
	`¥ötf
("%d ", 
figuøãs
[
i
][
j
]);

204 
	`¥ötf
("\n");

205 
˙t
 = c¡ + 
˙ts
[
i
];

211 
	}
}

	@euler/test62.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

5 #i‚de‡
MAX_NUM


6 
	#MAX_NUM
 10000

	)

9 
	gªsu…s
[
MAX_NUM
][
N
]={0};

10 
	g£q
[
MAX_NUM
];

12 
	gs‹t_£q
[
MAX_NUM
];

13 
	gs‹t_ªsu…s
[
MAX_NUM
][
N
]={0};

14 
	g˙t
 = 0;

23 
	$ö£π_num
(
n
)

25 
i
,
j
;

26 if(
˙t
 == 0)

28 
	`mem˝y
(
s‹t_ªsu…s
[0], 
ªsu…s
[
n
], 
N
*());

29 
˙t
++;

30 
s‹t_£q
[0] = 
£q
[
n
];

33 { if(
	`com∑ª_l⁄g_nums
(
s‹t_ªsu…s
[
˙t
-1], 
ªsu…s
[
n
])>0)

35 
i
=
˙t
-1;i>=0;i--)

37 if(
	`com∑ª_l⁄g_nums
(
s‹t_ªsu…s
[
i
], 
ªsu…s
[
n
])<0)

39 
j
=
˙t
-1;j>
i
;j--)

41 
	`mem˝y
(
s‹t_ªsu…s
[
j
+1], s‹t_ªsu…s[j], 
N
*());

42 
s‹t_£q
[
j
+1] = sort_seq[j];

44 
	`mem˝y
(
s‹t_ªsu…s
[
i
+1], 
ªsu…s
[
n
], 
N
*());

45 
s‹t_£q
[
i
+1] = 
£q
[
n
];

52 
	`mem˝y
(
s‹t_ªsu…s
[
˙t
], 
ªsu…s
[
n
], 
N
*());

53 
s‹t_£q
[
˙t
] = 
£q
[
n
];

55 
˙t
++;

57 
	}
}

59 
	$maö
()

61 
i
,
n
,
k
;

62 
ªsu…
;

64 
i
=0;i<
MAX_NUM
;i++)

66 
ªsu…
 = 
i
*i*i;

67 
	`f‹m©_l⁄g_l⁄g_num
(
ªsu…
, &
ªsu…s
[
i
][0]);

68 
	`s‹t_li°
(&
ªsu…s
[
i
][1],results[i][0]);

70 
	`¥ötf
("%Œd:",
i
);

71 
	`ouçut_l⁄g_num
(
ªsu…s
[
i
]);

73 
£q
[
i
] = i;

74 
	`ö£π_num
(
i
);

77 
i
=0;i<
MAX_NUM
;i++)

80 
	`¥ötf
("%2d: %d",
i
, 
s‹t_£q
[i]);

81 
	`ouçut_l⁄g_num
(
s‹t_ªsu…s
[
i
]);

83 if(
	`memcmp
(
s‹t_ªsu…s
[
i
],s‹t_ªsu…s[i+1],
N
*())==0 &&

84 
	`memcmp
(
s‹t_ªsu…s
[
i
],s‹t_ªsu…s[i+2],
N
*()) ==0 &&

85 
	`memcmp
(
s‹t_ªsu…s
[
i
],s‹t_ªsu…s[i+3],
N
*()) ==0 &&

86 
	`memcmp
(
s‹t_ªsu…s
[
i
],s‹t_ªsu…s[i+4],
N
*()) ==0)

88 
	`¥ötf
("%d %d %d %d %d\n", 
s‹t_£q
[
i
],sort_seq[i+1],sort_seq[i+2],

89 
s‹t_£q
[
i
+3],sort_seq[i+4]);

97 
	}
}

	@euler/test63.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

16 #i‚de‡
MAX_NUM


17 
	#MAX_NUM
 50

	)

20 
	gØ
[
N
],
	gbb
[N],
	gcc
[N],
	gsum
[N], 
	gsum_ßve
[N];

21 
	$maö
()

23 
i
,
j
,
˙t
=0;

25 
i
=1;i<=
MAX_NUM
;i++)

27 
	`f‹m©_l⁄g_num
(
i
, 
Ø
);

28 
	`f‹m©_l⁄g_num
(
i
, 
bb
);

29 if(1 =
Ø
[0])

31 
	`¥ötf
("%2d:%d^1 ha†1 digôs\n",++
˙t
, 
i
);

34 
j
=2;j<=
MAX_NUM
;j++)

36 
	`mul_l⁄g_nums
(
Ø
,
bb
,
cc
);

37 
	`mem˝y
(
Ø
, 
cc
, ()*
N
);

38 if(
j
 =
Ø
[0])

40 
	`¥ötf
("%2d:%d^%d ha†%d digôs\n", ++
˙t
,
i
, 
j
, j);

42 
	`E_PRINTF
("%d^%d:", 
i
, 
j
);

43 #ifde‡
PRINT_LOG


44 
	`ouçut_l⁄g_num
(
Ø
);

49 
	`¥ötf
("TŸÆ c¡:%d\n",
˙t
);

51 
	}
}

	@euler/test64.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~"misc.h
"

7 #i‚de‡
MAX_NUM


8 
	#MAX_NUM
 10

	)

12 
boﬁ
 
	$is_m©ched
(
n
)

14 
m
;

15 
m
 = 
	`sqπ
(
n
);

16 if(
m
*m =
n
)

17  
TRUE
;

19  
FALSE
;

20 
	}
}

22 
	ga
[
N
]={0};

23 
	gb
[
N
][2]={0};

25 
	$gë_≥riod_of_‰a˘i⁄s
(
n
)

27 
idx
 = 1;

28 
a
[0] = 
	`sqπ
(
n
);

29 
b
[0][0] = 1;

30 
b
[0][1] = 
a
[0];

31 
	`E_PRINTF
("%d %d %d\n", 
a
[0], 
b
[0][0], b[0][1]);

35 
b
[
idx
][0] = (
n
 - b[idx-1][1]*b[idx-1][1])/b[idx-1][0];

37 
a
[
idx
] = ()
	`Êo‹
((
b
[idx-1][1]+a[0])/b[idx][0]);

39 
b
[
idx
][1] = 
a
[idx]*b[idx][0] - b[idx-1][1];

41 
	`E_PRINTF
("%d %d %d\n", 
a
[
idx
], 
b
[idx][0], b[idx][1]);

44 if(
idx
 > 1 && (
b
[idx][0] == b[1][0]) && (b[idx][1] == b[1][1]))

46  
idx
 - 1;

49 
idx
++;

50 if(
idx
 >
N
)

52 
	`¥ötf
("N=%d i†nŸÜ¨gêíough!!!!\n", 
N
);

53 
	`exô
(-1);

56 
	}
}

58 
	$maö
()

61 
˙t
=0,
num
,
D
;

63 
D
=1;D<=
MAX_NUM
;D++)

65 if(
	`is_m©ched
(
D
))

67 
num
 = 
	`gë_≥riod_of_‰a˘i⁄s
(
D
);

69 if(
num
%2==1)

70 
˙t
++;

74 
	`¥ötf
("TŸÆ %d c⁄töued fø˘i⁄†havêoddÖîiod\n", 
˙t
);

78 
	}
}

	@euler/test65.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~"misc.h
"

7 #i‚de‡
MAX_NUM


8 
	#MAX_NUM
 1000

	)

12 
	gm
[
N
]={0};

14 
	$öô_m
()

16 
i
;

17 
i
=0;i<
MAX_NUM
;i++)

19 if(
i
==0)
m
[i] = 2;

20 if(
i
==1Ë
m
[i] =1;

21 if((
i
-2)%3 =0Ë
m
[i] = ((i-2)/3+1)*2;

22 
m
[
i
] = 1;

28 
	}
}

31 
	$gë_c⁄vîgít_of_c⁄töued_‰a˘i⁄
(
n
, *
mm
, *
¬
)

33 
i
; 
tmp
[
N
],
√xt
[N],
kk
[N];

34 
	`mem£t
(
mm
, 0, 
N
*());

35 
	`mem£t
(
¬
, 0, 
N
*());

36 
	`f‹m©_l⁄g_num
(1,
kk
);

38 if(
n
==0)

40 
	`f‹m©_l⁄g_num
(
m
[0],
mm
);

41 
	`f‹m©_l⁄g_num
(1,
¬
);

45 if(
n
==1)

47 
	`f‹m©_l⁄g_num
(3,
mm
);

48 
	`f‹m©_l⁄g_num
(1,
¬
);

53 
	`f‹m©_l⁄g_num
(
m
[
n
],
¬
);

54 
i
=
n
-1;i>=0;i--)

56 
	`mem˝y
(
mm
, 
¬
, 
N
*());

57 
	`f‹m©_l⁄g_num
(
m
[
i
],
√xt
);

58 
	`mul_l⁄g_nums
(
√xt
,
¬
,
tmp
);

59 
	`sum_l⁄g_nums
(
tmp
,
kk
,
¬
);

60 
	`mem˝y
(
kk
, 
mm
, 
N
*());

64 
	}
}

67 
	$maö
()

70 
mm
[
N
], 
¬
[N];

71 
èrgë_num
 = 100;

73 
	`öô_m
();

75 
	`gë_c⁄vîgít_of_c⁄töued_‰a˘i⁄
(
èrgë_num
-1, 
mm
, 
¬
);

77 
	`¥ötf
("numerator:\n");

78 
	`ouçut_l⁄g_num
(
¬
);

79 
	`¥ötf
("denominator:\n");

80 
	`ouçut_l⁄g_num
(
mm
);

82 
	`¥ötf
("\nSum o‡Æ»thêdigôs:%d\n", 
	`sum_l⁄g_num_digôs
(
¬
));

85 
	}
}

	@euler/test66.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<m©h.h
>

4 
	~"misc.h
"

6 #i‚de‡
MAX_NUM


7 
	#MAX_NUM
 1000

	)

28 
	s_PñlAns


30 
	mp
[
N
],
	mq
[N];

31 } 
	tPñlAns
;

32 
	s_Node


34 
	mg
,
	mh
;

35 } 
	tNode
;

38 
	gx
[
N
], 
	gy
[N], 
	gdd
[N], 
	g⁄e
[N];

39 
	gªsu…1
[
N
], 
	gªsu…2
[N];

40 
boﬁ
 
	$is_m©ched_l⁄g
(
PñlAns
 *
s
,
n
)

44 
	`mul_l⁄g_nums
(
s
->
q
,s->q,
ªsu…2
);

45 
	`mul_l⁄g_nums
(
ªsu…2
, 
dd
, 
ªsu…1
);

46 
	`sum_l⁄g_nums
(
ªsu…1
, 
⁄e
, 
ªsu…2
);

48 
	`mul_l⁄g_nums
(
s
->
p
,s->p,
ªsu…1
);

50 if(
	`com∑ª_l⁄g_nums
(
ªsu…1
, 
ªsu…2
) == 0)

51  
TRUE
;

53  
FALSE
;

56 if(
s
.
p
*s.∞- 
n
*s.
q
*s.q == 1)

57  
TRUE
;

59  
FALSE
;

61 
	}
}

63 
	gtmp1
[
N
],
	gtmp2
[N],
	gØ
[N];

64 
PñlAns
 
	gs
[4];

66 
	$Sﬁve
–
n
, 
PñlAns
 *
out
)

69 
Node
 
w
[4];

70 
a
[4];

72 
	`f‹m©_l⁄g_num
(
n
, 
dd
);

77 
	`f‹m©_l⁄g_num
(0, 
s
[0].
p
);

78 
	`f‹m©_l⁄g_num
(1, 
s
[0].
q
);

79 
	`f‹m©_l⁄g_num
(1, 
s
[1].
p
);

80 
	`f‹m©_l⁄g_num
(0, 
s
[1].
q
);

82 
a
[0]=()
	`Êo‹
(
	`sqπ
–()
n
 ));

83 
a
[2]=a[0];

84 
w
[1].
g
=0;w[1].
h
=1;

87 
w
[2].
g
 = -w[1].g+
a
[2]*w[1].
h
;

88 
w
[2].
h
 = (
n
-w[2].
g
*w[2].g)/w[1].h;

89 
a
[3] = ()
	`Êo‹
–()(
w
[2].
g
+a[0])/w[2].
h
 );

94 
	`f‹m©_l⁄g_l⁄g_num
(
a
[2],
Ø
);

96 
	`mul_l⁄g_nums
(
Ø
, 
s
[1].
p
,
tmp1
);

97 
	`sum_l⁄g_nums
(
tmp1
,
s
[0].
p
,s[2].p);

99 
	`mul_l⁄g_nums
(
Ø
, 
s
[1].
q
,
tmp1
);

100 
	`sum_l⁄g_nums
(
tmp1
,
s
[0].
q
,s[2].q);

107 if–
	`is_m©ched_l⁄g
(&
s
[2],
n
))

109 
	`mem˝y
(
out
,&
s
[2],(
PñlAns
));

113 
w
[0]=w[1];w[1]=w[2];

114 
a
[2]=a[3];

118 
	`mem˝y
(&
s
[0],&s[1],(
PñlAns
));

119 
	`mem˝y
(&
s
[1],&s[2],(
PñlAns
));

121 
	}
}

123 
boﬁ
 
	$is_m©ched
(
n
)

125 
m
;

126 
m
 = 
	`sqπ
(
n
);

127 if(
m
*m =
n
)

128  
TRUE
;

130  
FALSE
;

131 
	}
}

133 
	$maö
()

136 
max_x
[
N
],
max_y
[N]; 
max_D
,
D
;

137 
PñlAns
 
™s
;

138 
	`f‹m©_l⁄g_num
(1, 
⁄e
);

139 
D
=1;D<=
MAX_NUM
;D++)

141 if(
	`is_m©ched
(
D
))

143 
	`¥ötf
("d:%d\n", 
D
);

144 
	`Sﬁve
(
D
, &
™s
);

146 if(
	`com∑ª_l⁄g_nums
(
™s
.
p
, 
max_x
) > 0 )

148 
	`mem˝y
(
max_x
, 
™s
.
p
,
N
*());

149 
max_D
 = 
D
;

150 
	`mem˝y
(
max_y
, 
™s
.
q
,
N
*());

154 
	`¥ötf
("max d:%d\nx:\n", 
max_D
);

155 
	`ouçut_l⁄g_num
(
max_x
);

156 
	`¥ötf
("y:\n");

157 
	`ouçut_l⁄g_num
(
max_y
);

162 
	}
}

	@euler/test69.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"misc.h
"

6 #i‚de‡
MAX_NUM


7 
	#MAX_NUM
 6

	)

10 
boﬁ
 
	$is_ªœtivñy_¥im
(
n
, 
i
)

12 
j
;

13 if(
i
==1)

14  
TRUE
;

15 if(
i
 =2 && 
n
 %2 ==1)

16  
TRUE
;

17 if(
	`check_¥ime_wôh_ßm∂es
(
i
Ë&& 
n
 % i !=0)

18  
TRUE
;

19 if(
i
+1 =
n
)

20  
TRUE
;

21 if(
i
+2 =
n
 &&Ç%2 ==1)

22  
TRUE
;

25 
j
=2;j<=
i
;j++)

27 if(
i
 % 
j
 ==0 && 
n
 % j ==0)

28  
FALSE
;

30  
TRUE
;

31 
	}
}

33 
	$ˇl_vÆue
(
n
)

35 
i
, 
˙t
=0;

36 if(
	`check_¥ime_wôh_ßm∂es
(
n
))

37 
i
=1;i<
n
;i++)

39 
	`E_PRINTF
("%d ", 
i
);

40 
˙t
 = 
n
-1;

43 
i
=1;i<
n
;i++)

45 if(
	`is_ªœtivñy_¥im
(
n
,
i
)){
	`E_PRINTF
("%d ", i); 
˙t
++;}

47 
	`E_PRINTF
("\n");

48  ()
n
/()
˙t
;

49 
	}
}

52 
	$maö
()

54 
i
;

55 if(!
	`c⁄°rcut_¥ime_check
(
MAX_NUM
))

58 
i
=2;i<=
MAX_NUM
;i++)

59 
	`¥ötf
("%7d:%f\n",
i
, 
	`ˇl_vÆue
(i));

61 
	`dec⁄°ru˘_¥ime_check
();

63 
	}
}

	@euler/test8.c

1 
	~<°dio.h
>

3 
	gßm∂es
[] = {

26 
	$maö
()

29 
Àngth
 = (
ßm∂es
)/();

30 
ßved
[5];

32 
maxvÆue
 = 0, 
i
, 
tobechecked
;

34 
i
=0; i< 
Àngth
-4; i++)

36 
tobechecked
 = 
ßm∂es
[
i
]*samples[i+1]*samples[i+2]*samples[i+3]*samples[i+4] ;

37 if(
tobechecked
 > 
maxvÆue
)

39 
maxvÆue
 = 
tobechecked
;

40 
ßved
[0] = 
ßm∂es
[
i
];

41 
ßved
[1] = 
ßm∂es
[
i
+1];

42 
ßved
[2] = 
ßm∂es
[
i
+2];

43 
ßved
[3] = 
ßm∂es
[
i
+3];

44 
ßved
[4] = 
ßm∂es
[
i
+4];

49 
	`¥ötf
("%d=%d %d %d %d %d\n", 
maxvÆue
, 
ßved
[0],saved[1],saved[2],saved[3],saved[4]);

51 
	}
}

	@euler/test9.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	$maö
()

6 
a
, 
b
;

8 
a
=1;á<=1000;á++)

9 
b
=1;b<()((1000-
a
)/2);b++)

11 if(
a
*®=(1000-a-2*
b
)*(1000-a))

13 
	`¥ötf
("a:%d, b:%d, c:%d,á*b*c:%d\n", 
a
, 
b
, ()
	`sqπ
(a*a+b*b),á*b*(()sqrt(a*a+b*b)));

19 
	}
}

	@euler/test97.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°rög.h
>

4 
	~"misc.h
"

7 #i‚de‡
MAX_NUM


8 
	#MAX_NUM
 1000

	)

11 
	gtwo
[
N
],
	gbb
[N],
	gcc
[N],
	gtmp
[N],
	gsum
[N], 
	gsum_ßve
[N];

12 
	$maö
()

14 
i
,
j
;

15 
	`mem£t
(
two
, 0, ()*
N
);

16 
	`mem£t
(
bb
, 0, ()*
N
);

17 
	`mem£t
(
cc
, 0, ()*
N
);

18 
	`mem£t
(
sum
, 0, ()*
N
);

20 
	`f‹m©_l⁄g_num
(2, 
two
);

21 
	`f‹m©_l⁄g_num
(1, 
bb
);

22 
	`f‹m©_l⁄g_num
(28433, 
tmp
);

23 
i
=1;i<=
MAX_NUM
;i++)

25 
	`mul_l⁄g_nums
(
bb
,
two
,
cc
);

26 
	`cut_l⁄g_num
(10,
cc
);

27 
	`mem˝y
(
bb
, 
cc
, ()*
N
);

31 
	`mul_l⁄g_nums
(
bb
,
tmp
,
cc
);

32 
	`cut_l⁄g_num
(10,
cc
);

34 
	`f‹m©_l⁄g_num
(1, 
bb
);

35 
	`sum_l⁄g_nums
(
cc
, 
bb
, 
sum
);

36 
	`cut_l⁄g_num
(10,
sum
);

38 
	`ouçut_l⁄g_num
(
sum
);

41 
	}
}

	@gprof/test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	$a
 ()

6 
i
 = 0, 
g
 = 0;

7 
i
++ < 100000)

9 
g
 +
i
;

11  
g
;

12 
	}
}

15 
	$b
 ()

17 
i
 = 0, 
g
 = 0;

18 
i
++ < 400000)

20 
g
 +
i
;

22  
g
;

23 
	}
}

26 
	$maö
 (
¨gc
, **
¨gv
)

28 
ôî©i⁄s
;

29 i‡(
¨gc
 != 2)

31 
	`¥ötf
 ("Ußgê%†<Nÿo‡Iãøti⁄s>\n", 
¨gv
[0]);

32 
	`exô
 (-1);

35 
ôî©i⁄s
 = 
	`©oi
 (
¨gv
[1]);

36 
	`¥ötf
 ("Nÿo‡ôî©i⁄†%d\n", 
ôî©i⁄s
);

37 
ôî©i⁄s
--)

39 
	`a
 ();

40 
	`b
 ();

42 
	}
}

	@hash/ip_hash/dlist.h

1 #i‚de‡
_APP_DLIST_H__


2 
	#_APP_DLIST_H__


	)

15 
	sdli°_t


17 
dli°_t
 *
	m√xt
;

18 
dli°_t
 *
	m¥ev
;

19 }
	tdli°_t
;

21 
ölöe
 
	$dli°_öô__r
(
dli°_t
 *
hód
)

23 
hód
->
√xt
=hód->
¥ev
=head;

24 
	}
}

30 
ölöe
 
	$dli°_ö£π_√xt__r
(
dli°_t
 *
node
,dli°_à*
to_ö£π
)

32 
dli°_t
 *
tmp
=
node
->
√xt
;

33 
node
->
√xt
=
to_ö£π
;Åo_ö£π->√xt=
tmp
;

34 
tmp
->
¥ev
=
to_ö£π
;Åo_ö£π->¥ev=
node
;

35 
	}
}

40 
ölöe
 
	$dli°_ö£π_¥ev__r
(
dli°_t
 *
node
,dli°_à*
to_ö£π
)

42 
dli°_t
 *
tmp
=
node
->
¥ev
;

43 
tmp
->
√xt
=
to_ö£π
;Åo_ö£π->√xt=
node
;

44 
node
->
¥ev
=
to_ö£π
;Åo_ö£π->¥ev=
tmp
;

45 
	}
}

47 
ölöe
 
dli°_t
 *
	$dli°_√xt__r
(
dli°_t
 *
node
)

49  
node
->
√xt
;

50 
	}
}

51 
ölöe
 
dli°_t
 *
	$dli°_¥ev__r
(
dli°_t
 *
node
)

53  
node
->
¥ev
;

54 
	}
}

55 
ölöe
 
	$dli°_em±y__r
(
dli°_t
 *
hód
)

57  (
hód
->
√xt
==hód && hód->
¥ev
==head)? 1:0;

58 
	}
}

60 
ölöe
 
	$dli°_dëach__r
(
dli°_t
 *
node
)

62 
dli°_t
 *
nxt
=
node
->
√xt
,*
¥v
Úode->
¥ev
;

63 
¥v
->
√xt
=
nxt
;

64 
nxt
->
¥ev
=
¥v
;

65 
node
->
√xt
Úode->
¥ev
=node;

66 
	}
}

73 
	#DLIST_ENTRY
(
±r
,
ty≥
,
«me
) \

74 ((
ty≥
 *)(()
±r
 -(()(&(—y≥ *)0)->
«me
))))

	)

	@hash/ip_hash/ghash_bucket.c

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<°dio.h
>

11 
	~"ghash_buckë.h
"

13 
	#GHASH_BUCK_STAT


	)

17 
dli°_t
 
	mhód
;

18 
u32
 
	mcou¡
;

19 }
	tghash_buckë_hód__t
;

21 
	sghash_buckë__t


23 
u32
 
	mbuck_size
;

24 
ghash_buckë_hód__t
 *
	mbuckë
;

25 
GHASH_EQUAL_F
 
	mcmp_f
;

26 
GHASH_KEY_F
 
	mkey_f
;

27 
u32
 
	mønd_vÆue
;

28 #ifde‡
GHASH_BUCK_STAT


29 
	mmax
, 
	mmö
;

40 
ghash_buckë__t
 *
	$ghash_buckë_¸óã__r
(
buck_size
,
GHASH_EQUAL_F
 
cmp_f
,
GHASH_KEY_F
 
key_f
,
u32
 
ønd_vÆue
)

42 
ghash_buckë__t
 *
hash
;

43 
i
;

45 
hash
–
ghash_buckë__t
 *)
	`mÆloc
((ghash_bucket__t));

46 if(!
hash
Ë 
NULL
;

47 
hash
->
buckë
=(
ghash_buckë_hód__t
 *)
	`mÆloc
(
buck_size
 *(ghash_bucket_head__t));

49 if(!
hash
->
buckë
)

51 
	`‰ì
(
hash
);

52  
NULL
;

54 
i
=0;i<
buck_size
; i++)

56 
	`dli°_öô__r
(&
hash
->
buckë
[
i
].
hód
);

57 
hash
->
buckë
[
i
].
cou¡
=0;

59 
hash
->
cmp_f
=cmp_f;

60 
hash
->
key_f
=key_f;

61 
hash
->
buck_size
=buck_size;

62 
hash
->
ønd_vÆue
=rand_value;

63 #ifde‡
GHASH_BUCK_STAT


64 
hash
->
mö
=(
u32
)-1;

65 
hash
->
max
=0;

67  
hash
;

68 
	}
}

78 
dli°_t
 *
	$ghash_buckë_£¨ch__r
(
ghash_buckë__t
 *
hash_buckë
,
GHASH_KEY
 
key
)

80 
u32
 
¶Ÿ
;

81 
dli°_t
 *
hód
,*
node
;

83 
¶Ÿ
=(*
hash_buckë
->
key_f
)(
key
,hash_buckë->
ønd_vÆue
Ë% hash_buckë->
buck_size
;

84 
hód
=&
hash_buckë
->
buckë
[
¶Ÿ
].head;

85 
node
=
	`dli°_√xt__r
(
hód
);

86 
node
!=
hód
)

88 if((*
hash_buckë
->
cmp_f
)(
node
,
key
)==1)

90  
node
;

92 
node
=
	`dli°_√xt__r
(node);

94  
NULL
;

95 
	}
}

103 
	$ghash_buckë_ö£π__r
(
ghash_buckë__t
 *
hash_buckë
,
dli°_t
 *
node
, 
GHASH_KEY
 
key
)

105 
u32
 
¶Ÿ
;

106 
dli°_t
 *
hód
;

108 
¶Ÿ
=(*
hash_buckë
->
key_f
)(
key
,hash_buckë->
ønd_vÆue
Ë% hash_buckë->
buck_size
;

109 
hód
=&
hash_buckë
->
buckë
[
¶Ÿ
].head;

110 
	`dli°_ö£π_√xt__r
(
hód
,
node
);

111 
hash_buckë
->
buckë
[
¶Ÿ
].
cou¡
++;

112 #ifde‡
GHASH_BUCK_STAT


113 if(
hash_buckë
->
mö
 >hash_buckë->
buckë
[
¶Ÿ
].
cou¡
) hash_bucket->min =hash_bucket->bucket[slot].count;

114 if(
hash_buckë
->
max
 <hash_buckë->
buckë
[
¶Ÿ
].
cou¡
) hash_bucket->max =hash_bucket->bucket[slot].count;

116 
	}
}

124 
	$ghash_buckë_dñëe__r
(
ghash_buckë__t
 *
hash_buckë
,
dli°_t
 *
node
, 
GHASH_KEY
 
key
)

126 
u32
 
¶Ÿ
;

127 
dli°_t
 *
hód
;

129 
¶Ÿ
=(*
hash_buckë
->
key_f
)(
key
,hash_buckë->
ønd_vÆue
Ë% hash_buckë->
buck_size
;

130 
hód
=&
hash_buckë
->
buckë
[
¶Ÿ
].head;

132 
hash_buckë
->
buckë
[
¶Ÿ
].
cou¡
--;

133 
	`dli°_dëach__r
(
node
);

134 #ifde‡
GHASH_BUCK_STAT


135 if(
hash_buckë
->
mö
 >hash_buckë->
buckë
[
¶Ÿ
].
cou¡
) hash_bucket->min =hash_bucket->bucket[slot].count;

136 if(
hash_buckë
->
max
 <hash_buckë->
buckë
[
¶Ÿ
].
cou¡
) hash_bucket->max =hash_bucket->bucket[slot].count;

138 
	}
}

143 
	$ghash_buckë_de°roy__r
(
ghash_buckë__t
 *
hash_buckë
)

145 
	`‰ì
(
hash_buckë
->
buckë
);

146 
	`‰ì
(
hash_buckë
);

147 
	}
}

153 
	$ghash_buckë_°©__r
(
ghash_buckë__t
 *
hash_buckë
,
ghash_buckë_°©__t
 *
ghash_buckë_°©
)

155 
i
;

156 
	`mem£t
(
ghash_buckë_°©
,0,(
ghash_buckë_°©__t
));

157 #ifde‡
GHASH_BUCK_STAT


158 
ghash_buckë_°©
->
mö
=
hash_buckë
->min;

159 
ghash_buckë_°©
->
max
=
hash_buckë
->max;

161 
i
=0;i<
hash_buckë
->
buck_size
;i++)

163 
cou¡
=
hash_buckë
->
buckë
[
i
].count;

164 if(
cou¡
<=4Ë
ghash_buckë_°©
->
di°ributi⁄
[0]+=count;

165 if(
cou¡
 <=8Ë
ghash_buckë_°©
->
di°ributi⁄
[1] +=count;

166 if(
cou¡
 <=16Ë
ghash_buckë_°©
->
di°ributi⁄
[2] +=count;

167 if(
cou¡
 <=32Ë
ghash_buckë_°©
->
di°ributi⁄
[3] +=count;

168 
ghash_buckë_°©
->
di°ributi⁄
[4]+=
cou¡
;

169 
	`¥ötf
("%d cou¡: %d \n", 
i
, 
cou¡
);

172 
	}
}

179 
	$g_hash_buckë_åavî£__r
(
ghash_buckë__t
 *
hash_buckë
,
GHASH_KEY
 
key
,
GHASH_TRAVERSE_NODE_F
 
åav_f
,* 
buf„r
,
max_ôem
)

181 
sz
=0;

182 
u32
 
¶Ÿ
;

183 
dli°_t
 *
hód
,*
node
;

185 
¶Ÿ
=(*
hash_buckë
->
key_f
)(
key
,hash_buckë->
ønd_vÆue
Ë% hash_buckë->
buck_size
;

186 
hód
=&
hash_buckë
->
buckë
[
¶Ÿ
].head;

187 
node
=
	`dli°_√xt__r
(
hód
);

188 
node
!=
hód
 && 
sz
 <
max_ôem
)

190 
buf„r
=(*
åav_f
)(
node
,buffer);

191 
node
=
	`dli°_√xt__r
(node);

192 
sz
++;

194  
sz
;

195 
	}
}

	@hash/ip_hash/ghash_bucket.h

1 #i‚de‡
_APP_GHASH_BUCKET_H__


2 
	#_APP_GHASH_BUCKET_H__


	)

4 
	~"jhash.h
"

5 
	~"dli°.h
"

9 
	gghash_buckë__t
;

10 
ghash_buckë__t
 
	tghash_buckë__t
;

11 
	sghash_buckë_°©__t


13 
	mmö
, 
	mmax
;

14 
	mdi°ributi⁄
[5];

20 }
	tghash_buckë_°©__t
;

21 * 
	tGHASH_KEY
;

22 (*
	tGHASH_EQUAL_F
)(
	tdli°_t
 *
	thód
,
	tGHASH_KEY
 
	tkey
);

23 
	$u32
 (*
	tGHASH_KEY_F
)(
	tGHASH_KEY
 
	tkey
,
	tu32
 
	tønd_vÆue
);

24 * (*
	tGHASH_TRAVERSE_NODE_F
)(
	tdli°_t
 *
	thód
,*
	tbuf„r
);

26 
ghash_buckë__t
 *
	`ghash_buckë_¸óã__r
(
buck_size
,
GHASH_EQUAL_F
 
cmp_f
,
GHASH_KEY_F
 
key_f
,
u32
 
ønd_vÆue
);

27 
dli°_t
 *
	`ghash_buckë_£¨ch__r
(
ghash_buckë__t
 *
hash_buckë
,
GHASH_KEY
 
key
);

28 
	`ghash_buckë_ö£π__r
(
ghash_buckë__t
 *
hash_buckë
,
dli°_t
 *
node
, 
GHASH_KEY
 
key
);

29 
	`ghash_buckë_dñëe__r
(
ghash_buckë__t
 *
hash_buckë
,
dli°_t
 *
node
, 
GHASH_KEY
 
key
);

30 
	`ghash_buckë_de°roy__r
(
ghash_buckë__t
 *
hash_buckë
);

31 
	`ghash_buckë_°©__r
(
ghash_buckë__t
 *
hash_buckë
,
ghash_buckë_°©__t
 *
ghash_buckë_°©
);

32 
	`g_hash_buckë_åavî£__r
(
ghash_buckë__t
 *
hash_buckë
,
GHASH_KEY
 
key
,
GHASH_TRAVERSE_NODE_F
 
åav_f
,* 
buf„r
,
max_ôem
);

	@hash/ip_hash/iptest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~"dli°.h
"

5 
	~"ghash_buckë.h
"

6 
	~"jhash.h
"

7 
	#IP_ADDR_T_IPV4_C
 0x0

	)

8 
	#IP_ADDR_T_IPV6_C
 0x1

	)

9 
	#IP_HASH_BUCKET_SZ
 2039

	)

10 
	#MAX_IP_ADDR_NBR
 2200

	)

11 
	#IP_ADDR_T_SIZE_C
 16

	)

14 
	mvîsi⁄
;

17 
	maddr
[
IP_ADDR_T_SIZE_C
];

18 
	mvÆue
[
IP_ADDR_T_SIZE_C
/()];

20 }
	tù_addr__t
;

22 
	#GET_IP_ADDR__T
(
ù_ö
,
ù_out
) do{\

23 (
ù_out
)->
vîsi⁄
=(
ù_ö
)->version; \

24 
	`mem˝y
((
ù_out
)->
addr
,(
ù_ö
)->addr,
IP_ADDR_T_SIZE_C
); \

25 }0)

	)

29 
dli°_t
 
	mli°
;

30 
ù_addr__t
 
	mù_addr
;

31 
	mª„ªn˚
;

32 }
	t≠p_ù_addr__t
;

36 
≠p_ù_addr__t
 
	mù_addr_°‹age
[
MAX_IP_ADDR_NBR
];

37 
ghash_buckë__t
 *
	mù_addr_hash
;

38 
dli°_t
 
	m‰ì_hód
;

39 
	mønd_vÆue
;

40 }
	tù_addr_Á˘‹y__t
;

42 
	$ù_hash_equÆ__r
(
dli°_t
 *
node
,
GHASH_KEY
 
key
)

44 
ù_addr__t
 *
ù1
,*
ù2
;

45 
≠p_ù_addr__t
 *
ùhash
=
	`DLIST_ENTRY
(
node
,≠p_ù_addr__t,
li°
);

46 
ªsu…
=0;

48 
ù1
=&
ùhash
->
ù_addr
;

49 
ù2
=(
ù_addr__t
 *)
key
;

51 if–
ù1
->
vîsi⁄
 =
ù2
->version)

53 if(
ù1
->
vîsi⁄
 =
IP_ADDR_T_IPV4_C
)

55 
ªsu…
=(
ù1
->
vÆue
[0]==
ù2
->value[0]) ? 1:0;

59 
ªsu…
=((
ù1
->
vÆue
[3]==
ù2
->value[3] && ip1->value[2]==ip2->value[2] &&

60 
ù1
->
vÆue
[1]==
ù2
->value[1] && ip1->value[0]==ip2->value[0])? 1:0);

65 
ªsu…
=0;

67  
ªsu…
;

68 
	}
}

70 
u32
 
	$ù_hash_¶Ÿ__r
(
GHASH_KEY
 
key
,
u32
 
ønd_vÆue
)

72 
ù_addr__t
 *
ù
=(ù_addr__à*)
key
;

73 if(
ù
->
vîsi⁄
==
IP_ADDR_T_IPV4_C
)

74  (
u32
)
ù
->
vÆue
[0];

75  (
u32
)
	`jhash
(
ù
->
addr
,(ù->addr),
ønd_vÆue
);

76 
	}
}

78 
ù_addr_Á˘‹y__t
 
	gù_addr_Á˘‹y
;

79 
	#GET_APP_IP_HANDLE
(
≠p_ù_addr
) \

80 (()(
≠p_ù_addr
 - 
ù_addr_Á˘‹y
.
ù_addr_°‹age
))

	)

82 
	$öô_hash
()

84 
ønd_vÆue
, 
i
;

85 
ønd_vÆue
 = (Ë
	`ønd
();

86 
ù_addr_Á˘‹y
.
ù_addr_hash
=
	`ghash_buckë_¸óã__r
(
IP_HASH_BUCKET_SZ
,
ù_hash_equÆ__r
,
ù_hash_¶Ÿ__r
,
ønd_vÆue
);

87 if(
ù_addr_Á˘‹y
.
ù_addr_hash
 =
NULL
)

89 
	`¥ötf
("hash init failed \n");

90 
	`exô
(-1);

92 
	`dli°_öô__r
(&
ù_addr_Á˘‹y
.
‰ì_hód
);

93 
i
=0;i<
MAX_IP_ADDR_NBR
;i++)

95 
	`mem£t
(&
ù_addr_Á˘‹y
.
ù_addr_°‹age
[
i
], 0, (
≠p_ù_addr__t
));

96 
	`dli°_öô__r
(&
ù_addr_Á˘‹y
.
ù_addr_°‹age
[
i
].
li°
);

97 
	`dli°_ö£π_√xt__r
(&
ù_addr_Á˘‹y
.
‰ì_hód
,&ù_addr_Á˘‹y.
ù_addr_°‹age
[
i
].
li°
);

100 
	}
}

102 
	$de°roy_hash
()

104 
	`ghash_buckë_de°roy__r
(
ù_addr_Á˘‹y
.
ù_addr_hash
);

105 
	}
}

107 
	$add_ù_addr_r
–
ù_addr__t
* 
p_ù_addr_ö_±r
,

108 * 
p_ù_idx
 )

110 
ù_addr__t
 
ù_addr
;

111 
dli°_t
 *
node
;

112 
≠p_ù_addr__t
 *
≠p_ù_addr
 = 
NULL
;

113 
°©us
 = -2;

115 
	`GET_IP_ADDR__T
(
p_ù_addr_ö_±r
,&
ù_addr
);

117 if((
p_ù_addr_ö_±r
 -> 
vîsi⁄
 !
IP_ADDR_T_IPV4_C
) &&

118 (
p_ù_addr_ö_±r
 -> 
vîsi⁄
 !
IP_ADDR_T_IPV6_C
) )

120 
	`¥ötf
("IPáddress version %d is invalid",

121 
p_ù_addr_ö_±r
 -> 
vîsi⁄
 );

124 
node
=
	`ghash_buckë_£¨ch__r
(
ù_addr_Á˘‹y
.
ù_addr_hash
,(
GHASH_KEY
)&
ù_addr
);

125 if(
node
!=
NULL
)

127 
≠p_ù_addr
=
	`DLIST_ENTRY
(
node
,
≠p_ù_addr__t
,
li°
);

128 
≠p_ù_addr
->
ª„ªn˚
++;

132 if(
	`dli°_em±y__r
(&
ù_addr_Á˘‹y
.
‰ì_hód
))

134 
°©us
=-1;

138 
node
=
	`dli°_¥ev__r
(&
ù_addr_Á˘‹y
.
‰ì_hód
);

139 
	`dli°_dëach__r
(
node
);

140 
≠p_ù_addr
=
	`DLIST_ENTRY
(
node
,
≠p_ù_addr__t
,
li°
);

143 
	`dli°_öô__r
(&
≠p_ù_addr
->
li°
);

144 
	`mem˝y
(&
≠p_ù_addr
->
ù_addr
,&ip_addr,(ip_addr));

145 
≠p_ù_addr
->
ª„ªn˚
=1;

147 
	`ghash_buckë_ö£π__r
(
ù_addr_Á˘‹y
.
ù_addr_hash
,
node
,(
GHASH_KEY
)(&
ù_addr
));

150 *
p_ù_idx
 = 
	`GET_APP_IP_HANDLE
(
≠p_ù_addr
);

152 
	}
}

153 
	$¥öt_ù
(
ù_addr__t
 *
ù
)

155 
	`¥ötf
("IP: %3d.%3d.%3d.%3d\n",
ù
->
addr
[0],ip->addr[1],ip->addr[2],ip->addr[3]);

156 
	}
}

157 
	$maö
()

160 
i
;

161 
ù_addr__t
 
ù
;

162 
idx
;

163 
ghash_buckë_°©__t
 *
ghash_buckë_°©
;

164 
	`§™d
(
	`time
(
NULL
));

165 
ù
.
vîsi⁄
 = 
IP_ADDR_T_IPV4_C
;

166 
ù
.
addr
[0]=1; ip.addr[1]=2; ip.addr[2]=3; ip.addr[3]=4;

168 
	`öô_hash
();

169 
	`¥ötf
("init done\n");

170 
i
=0;i<
MAX_IP_ADDR_NBR
;i++)

172 
ù
.
vÆue
[0]=()
	`ønd
();

173 
	`add_ù_addr_r
(&
ù
, &
idx
);

176 
	`ghash_buckë_°©__r
(
ù_addr_Á˘‹y
.
ù_addr_hash
, 
ghash_buckë_°©
);

184 
	`¥ötf
("Hash mö: %d, max: %d\¿di°ributi⁄: [0-4]:%d\n, [5-8]:%d, [9-16]:%d, [17-32]:%d, [33-]:%d\n", 
ghash_buckë_°©
->
mö
, \

185 
ghash_buckë_°©
->
max
, \

186 
ghash_buckë_°©
->
di°ributi⁄
[0], \

187 
ghash_buckë_°©
->
di°ributi⁄
[1], \

188 
ghash_buckë_°©
->
di°ributi⁄
[2], \

189 
ghash_buckë_°©
->
di°ributi⁄
[3], \

190 
ghash_buckë_°©
->
di°ributi⁄
[4]);

194 
	`de°roy_hash
();

197 
	}
}

	@hash/ip_hash/jhash.c

21 
	~<°rög.h
>

22 
	~<°dio.h
>

23 
	~"jhash.h
"

27 
	#__jhash_mix
(
a
, 
b
, 
c
) \

29 
a
 -
b
;á -
c
;á ^= (c>>13); \

30 
b
 -
c
; b -
a
; b ^= (a<<8); \

31 
c
 -
a
; c -
b
; c ^= (b>>13); \

32 
a
 -
b
;á -
c
;á ^= (c>>12); \

33 
b
 -
c
; b -
a
; b ^= (a<<16); \

34 
c
 -
a
; c -
b
; c ^= (b>>5); \

35 
a
 -
b
;á -
c
;á ^= (c>>3); \

36 
b
 -
c
; b -
a
; b ^= (a<<10); \

37 
c
 -
a
; c -
b
; c ^= (b>>15); \

38 }

	)

41 
	#JHASH_GOLDEN_RATIO
 0x9e3779b9

	)

47 
u32
 
	$jhash
(*
key
, 
u32
 
Àngth
, u32 
öôvÆ
)

49 
u32
 
a
, 
b
, 
c
, 
Àn
;

50 
u8
 *
k
 = 
key
;

52 
Àn
 = 
Àngth
;

53 
a
 = 
b
 = 
JHASH_GOLDEN_RATIO
;

54 
c
 = 
öôvÆ
;

56 
Àn
 >= 12) {

57 
a
 +(
k
[0] +((
u32
)k[1]<<8) +((u32)k[2]<<16) +((u32)k[3]<<24));

58 
b
 +(
k
[4] +((
u32
)k[5]<<8) +((u32)k[6]<<16) +((u32)k[7]<<24));

59 
c
 +(
k
[8] +((
u32
)k[9]<<8) +((u32)k[10]<<16)+((u32)k[11]<<24));

61 
	`__jhash_mix
(
a
,
b
,
c
);

63 
k
 += 12;

64 
Àn
 -= 12;

67 
c
 +
Àngth
;

68 
Àn
) {

69 11: 
c
 +((
u32
)
k
[10]<<24);

70 10: 
c
 +((
u32
)
k
[9]<<16);

71 9 : 
c
 +((
u32
)
k
[8]<<8);

72 8 : 
b
 +((
u32
)
k
[7]<<24);

73 7 : 
b
 +((
u32
)
k
[6]<<16);

74 6 : 
b
 +((
u32
)
k
[5]<<8);

75 5 : 
b
 +
k
[4];

76 4 : 
a
 +((
u32
)
k
[3]<<24);

77 3 : 
a
 +((
u32
)
k
[2]<<16);

78 2 : 
a
 +((
u32
)
k
[1]<<8);

79 1 : 
a
 +
k
[0];

82 
	`__jhash_mix
(
a
,
b
,
c
);

84  
c
;

85 
	}
}

	@hash/ip_hash/jhash.h

1 #i‚de‡
APP_JHASH_H__


2 
	#APP_JHASH_H__


	)

4 
	tu32
;

5 
	tu8
;

7 
u32
 
jhash
(*
key
, u32 
Àngth
, u32 
öôvÆ
);

	@iputils-s20140519/Modules/pg3.c

84 
	~<löux/moduÀ.h
>

85 
	~<löux/kî√l.h
>

86 
	~<löux/sched.h
>

87 
	~<löux/ty≥s.h
>

88 
	~<löux/°rög.h
>

89 
	~<löux/±ø˚.h
>

90 
	~<löux/î∫o.h
>

91 
	~<löux/i›‹t.h
>

92 
	~<löux/mÆloc.h
>

93 
	~<löux/öãºu±.h
>

94 
	~<löux/pci.h
>

95 
	~<löux/dñay.h
>

96 
	~<löux/öô.h
>

97 
	~<löux/öë.h
>

98 
	~<asm/byã‹dî.h
>

99 
	~<asm/bô›s.h
>

100 
	~<asm/io.h
>

101 
	~<asm/dma.h
>

103 
	~<löux/ö.h
>

104 
	~<löux/ù.h
>

105 
	~<löux/udp.h
>

106 
	~<löux/skbuff.h
>

107 
	~<löux/√tdevi˚.h
>

108 
	~<löux/öëdevi˚.h
>

109 
	~<löux/π√éök.h
>

110 
	~<löux/¥oc_fs.h
>

111 
	~<löux/if_¨p.h
>

112 
	~<√t/checksum.h
>

114 
	gvîsi⁄
[] 
	g__öôd©a
 =

121 
	gpg_outdev
[32], 
	gpg_d°
[32];

122 
	gpkt_size
=
ETH_ZLEN
;

123 
	gn‰ags
=0;

124 
__u32
 
	gpg_cou¡
 = 100000;

125 
__u32
 
	gpg_ùg
 = 0;

129 
	gdebug
;

130 
	gf‹˚d_°›
;

131 
	gpg_˝u_•ìd
;

132 
	gpg_busy
;

134 
__u8
 
	ghh
[14] = {

142 *
	gpg_d°mac
 = 
hh
;

143 
	gpg_ªsu…
[512];

146 
√t_devi˚
 *
	$pg_£tup_öje˘
(
u32
 *
ßddΩ
)

148 
p1
, 
p2
;

149 
√t_devi˚
 *
odev
;

150 
u32
 
ßddr
;

152 
	`π∆_lock
();

153 
odev
 = 
	`__dev_gë_by_«me
(
pg_outdev
);

154 i‡(!
odev
) {

155 
	`•rötf
(
pg_ªsu…
, "NÿsuchÇëdevi˚: \"%s\"", 
pg_outdev
);

156 
out_u∆ock
;

159 i‡(
odev
->
ty≥
 !
ARPHRD_ETHER
) {

160 
	`•rötf
(
pg_ªsu…
, "NŸÉthî√àdevi˚: \"%s\"", 
pg_outdev
);

161 
out_u∆ock
;

164 i‡(!
	`√tif_ru¬ög
(
odev
)) {

165 
	`•rötf
(
pg_ªsu…
, "Devi˚ i†down: \"%s\"", 
pg_outdev
);

166 
out_u∆ock
;

169 
p1
=6,
p2
=0;Ö1 < 
odev
->
addr_Àn
+6;p1++)

170 
hh
[
p1
]=
odev
->
dev_addr
[
p2
++];

172 
ßddr
 = 0;

173 i‡(
odev
->
ù_±r
) {

174 
ö_devi˚
 *
ö_dev
 = 
odev
->
ù_±r
;

176 i‡(
ö_dev
->
iÁ_li°
)

177 
ßddr
 = 
ö_dev
->
iÁ_li°
->
iÁ_addªss
;

179 
	`©omic_öc
(&
odev
->
ªf˙t
);

180 
	`π∆_u∆ock
();

182 *
ßddΩ
 = 
ßddr
;

183  
odev
;

185 
out_u∆ock
:

186 
	`π∆_u∆ock
();

187  
NULL
;

188 
	}
}

191 
u32
 
	gidÀ_acc_lo
, 
	gidÀ_acc_hi
;

193 
	$«no•ö
(
pg_ùg
)

195 
u32
 
idÀ_°¨t
, 
idÀ
;

197 
idÀ_°¨t
 = 
	`gë_cy˛es
();

200 
	`b¨rõr
();

201 
idÀ
 = 
	`gë_cy˛es
(Ë- 
idÀ_°¨t
;

202 i‡(
idÀ
*1000 >
pg_ùg
*
pg_˝u_•ìd
)

205 
idÀ_acc_lo
 +
idÀ
;

206 i‡(
idÀ_acc_lo
 < 
idÀ
)

207 
idÀ_acc_hi
++;

208 
	}
}

210 
	$ˇlc_mhz
()

212 
timevÆ
 
°¨t
, 
°›
;

213 
u32
 
°¨t_s
, 
ñ≠£d
;

215 
	`do_gëtimeofday
(&
°¨t
);

216 
°¨t_s
 = 
	`gë_cy˛es
();

218 
	`b¨rõr
();

219 
ñ≠£d
 = 
	`gë_cy˛es
(Ë- 
°¨t_s
;

220 i‡(
ñ≠£d
 == 0)

222 } 
ñ≠£d
 < 1000*50000);

223 
	`do_gëtimeofday
(&
°›
);

224  
ñ≠£d
/(
°›
.
tv_u£c
-
°¨t
.tv_u£c+1000000*(°›.
tv_£c
-start.tv_sec));

225 
	}
}

227 
	$cy˛es_ˇlibøã
()

229 
i
;

231 
i
=0; i<3; i++) {

232 
ªs
 = 
	`ˇlc_mhz
();

233 i‡(
ªs
 > 
pg_˝u_•ìd
)

234 
pg_˝u_•ìd
 = 
ªs
;

236 
	}
}

238 
sk_buff
 *

239 
	$fûl_∑ckë
(
√t_devi˚
 *
odev
, 
__u32
 
ßddr
)

241 
sk_buff
 *
skb
;

242 
__u8
 *
ëh
;

243 
udphdr
 *
udph
;

244 
d©Æí
, 
ùÀn
;

245 
ùhdr
 *
ùh
;

247 
skb
 = 
	`Æloc_skb
(
pkt_size
+64+16, 
GFP_ATOMIC
);

248 i‡(!
skb
) {

249 
	`•rötf
(
pg_ªsu…
, "No memory");

250  
NULL
;

253 
	`skb_ª£rve
(
skb
, 16);

256 
ëh
 = (
__u8
 *Ë
	`skb_push
(
skb
, 14);

257 
ùh
 = (
ùhdr
*)
	`skb_put
(
skb
, ( iphdr));

258 
udph
 = (
udphdr
*)
	`skb_put
(
skb
, ( udphdr));

261 
	`mem˝y
(
ëh
, 
hh
, 14);

263 
d©Æí
 = 
pkt_size
-14-20-8;

264 i‡(
d©Æí
 < 0)

265 
d©Æí
 = 0;

267 
udph
->
sour˚

	`ht⁄s
(9);

268 
udph
->
de°

	`ht⁄s
(9);

269 
udph
->
Àn

	`ht⁄s
(
d©Æí
+8);

270 
udph
->
check
=0;

272 
ùh
->
ihl
=5;

273 
ùh
->
vîsi⁄
=4;

274 
ùh
->
âl
=3;

275 
ùh
->
tos
=0;

276 
ùh
->
¥Ÿocﬁ
 = 
IPPROTO_UDP
;

277 
ùh
->
ßddr
 = saddr;

278 
ùh
->
daddr
 = 
	`ö_©⁄
(
pg_d°
);

279 
ùh
->
‰ag_off
 = 0;

280 
ùÀn
 = 20 + 8 + 
d©Æí
;

281 
ùh
->
tŸ_Àn
 = 
	`ht⁄s
(
ùÀn
);

282 
ùh
->
check
 = 0;

283 
ùh
->
check
 = 
	`ù_Á°_csum
((*)ùh, iph->
ihl
);

284 
skb
->
¥Ÿocﬁ
 = 
	`__c⁄°™t_ht⁄s
(
ETH_P_IP
);

285 
skb
->
mac
.
øw
 = ((
u8
*)
ùh
) - 14;

286 
skb
->
dev
 = 
odev
;

287 
skb
->
pkt_ty≥
 = 
PACKET_HOST
;

289 i‡(
n‰ags
<=0) {

290 
	`skb_put
(
skb
, 
d©Æí
);

292 
‰ags
 = 
n‰ags
;

293 
i
;

295 i‡(
‰ags
 > 
MAX_SKB_FRAGS
)

296 
‰ags
 = 
MAX_SKB_FRAGS
;

297 i‡(
d©Æí
 > 
‰ags
*
PAGE_SIZE
) {

298 
	`skb_put
(
skb
, 
d©Æí
-
‰ags
*
PAGE_SIZE
);

299 
d©Æí
 = 
‰ags
*
PAGE_SIZE
;

302 
i
 = 0;

303 
d©Æí
 > 0) {

304 
∑ge
 *∑gê
	`Æloc_∑ges
(
GFP_KERNEL
, 0);

305 
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
∑ge
 =Öage;

306 
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
∑ge_off£t
 = 0;

307 
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
size
 = (
d©Æí
 < 
PAGE_SIZE
 ? datalen : PAGE_SIZE);

308 
d©Æí
 -
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
size
;

309 
skb
->
Àn
 +
	`skb_shöfo
(skb)->
‰ags
[
i
].
size
;

310 
skb
->
d©a_Àn
 +
	`skb_shöfo
(skb)->
‰ags
[
i
].
size
;

311 
i
++;

312 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
 = 
i
;

315 
i
 < 
‰ags
) {

316 
ªm
;

318 i‡(
i
 == 0)

321 
ªm
 = 
	`skb_shöfo
(
skb
)->
‰ags
[
i
-1].
size
/2;

322 i‡(
ªm
 == 0)

325 
	`skb_shöfo
(
skb
)->
‰ags
[
i
-1].
size
 -
ªm
;

327 
	`skb_shöfo
(
skb
)->
‰ags
[
i
] = skb_shinfo(skb)->frags[i-1];

328 
	`gë_∑ge
(
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
∑ge
);

329 
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
∑ge
 = skb_shinfo(skb)->frags[i-1].page;

330 
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
∑ge_off£t
 +skb_shöfo(skb)->‰ags[i-1].
size
;

331 
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
size
 = 
ªm
;

332 
i
++;

333 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
 = 
i
;

337  
skb
;

338 
	}
}

341 
	$pg_öje˘
()

343 
u32
 
ßddr
;

344 
√t_devi˚
 *
odev
;

345 
sk_buff
 *
skb
;

346 
timevÆ
 
°¨t
, 
°›
;

347 
u32
 
tŸÆ
, 
idÀ
;

348 
pc
, 
lcou¡
;

350 
odev
 = 
	`pg_£tup_öje˘
(&
ßddr
);

351 i‡(!
odev
)

354 
skb
 = 
	`fûl_∑ckë
(
odev
, 
ßddr
);

355 i‡(
skb
 =
NULL
)

356 
out_ªldev
;

358 
f‹˚d_°›
 = 0;

359 
idÀ_acc_hi
 = 0;

360 
idÀ_acc_lo
 = 0;

361 
pc
 = 0;

362 
lcou¡
 = 
pg_cou¡
;

363 
	`do_gëtimeofday
(&
°¨t
);

366 
	`•ö_lock_bh
(&
odev
->
xmô_lock
);

367 
	`©omic_öc
(&
skb
->
u£rs
);

368 i‡(!
	`√tif_queue_°›≥d
(
odev
)) {

369 i‡(
odev
->
	`h¨d_°¨t_xmô
(
skb
, odev)) {

370 
	`k‰ì_skb
(
skb
);

371 i‡(
	`√t_øãlimô
())

372 
	`¥ötk
(
KERN_INFO
 "Hard xmitÉrror\n");

374 
pc
++;

376 
	`k‰ì_skb
(
skb
);

378 
	`•ö_u∆ock_bh
(&
odev
->
xmô_lock
);

380 i‡(
pg_ùg
)

381 
	`«no•ö
(
pg_ùg
);

382 i‡(
f‹˚d_°›
)

383 
out_öå
;

384 i‡(
	`sig«l_≥ndög
(
cuºít
))

385 
out_öå
;

387 i‡(--
lcou¡
 == 0) {

388 i‡(
	`©omic_ªad
(&
skb
->
u£rs
) != 1) {

389 
u32
 
idÀ_°¨t
, 
idÀ
;

391 
idÀ_°¨t
 = 
	`gë_cy˛es
();

392 
	`©omic_ªad
(&
skb
->
u£rs
) != 1) {

393 i‡(
	`sig«l_≥ndög
(
cuºít
))

394 
out_öå
;

395 
	`scheduÀ
();

397 
idÀ
 = 
	`gë_cy˛es
(Ë- 
idÀ_°¨t
;

398 
idÀ_acc_lo
 +
idÀ
;

399 i‡(
idÀ_acc_lo
 < 
idÀ
)

400 
idÀ_acc_hi
++;

405 i‡(
	`√tif_queue_°›≥d
(
odev
Ë|| 
cuºít
->
√ed_ªsched
) {

406 
u32
 
idÀ_°¨t
, 
idÀ
;

408 
idÀ_°¨t
 = 
	`gë_cy˛es
();

410 i‡(
	`sig«l_≥ndög
(
cuºít
))

411 
out_öå
;

412 i‡(!
	`√tif_ru¬ög
(
odev
))

413 
out_öå
;

414 i‡(
cuºít
->
√ed_ªsched
)

415 
	`scheduÀ
();

417 
	`do_so·úq
();

418 } 
	`√tif_queue_°›≥d
(
odev
));

419 
idÀ
 = 
	`gë_cy˛es
(Ë- 
idÀ_°¨t
;

420 
idÀ_acc_lo
 +
idÀ
;

421 i‡(
idÀ_acc_lo
 < 
idÀ
)

422 
idÀ_acc_hi
++;

426 
	`do_gëtimeofday
(&
°›
);

428 
tŸÆ
 = (
°›
.
tv_£c
 - 
°¨t
.tv_sec)*1000000 +

429 
°›
.
tv_u£c
 - 
°¨t
.tv_usec;

431 
idÀ
 = (((
idÀ_acc_hi
<<20)/
pg_˝u_•ìd
)<<12)+
idÀ_acc_lo
/pg_cpu_speed;

434 *
p
 = 
pg_ªsu…
;

436 
p
 +
	`•rötf
(p, "OK: %u(c%u+d%u) usec, %u (%dbyte,%dfrags) %upps %uMB/sec",

437 
tŸÆ
,ÅŸÆ-
idÀ
, idle,

438 
pc
, 
skb
->
Àn
, 
	`skb_shöfo
(skb)->
ƒ_‰ags
,

439 ((
pc
*1000)/(
tŸÆ
/1000)),

440 (((
pc
*1000)/(
tŸÆ
/1000))*
pkt_size
)/1024/1024

444 
out_ªlskb
:

445 
	`k‰ì_skb
(
skb
);

446 
out_ªldev
:

447 
	`dev_put
(
odev
);

450 
out_öå
:

451 
	`•rötf
(
pg_ªsu…
, "Interrupted");

452 
out_ªlskb
;

453 
	}
}

457 
¥oc_dú_íåy
 *
	gpg_¥oc_ít
 = 0;

458 
¥oc_dú_íåy
 *
	gpg_busy_¥oc_ít
 = 0;

460 
	$¥oc_pg_busy_ªad
(*
buf
 , **
°¨t
, 
off_t
 
off£t
,

461 
Àn
, *
eof
, *
d©a
)

463 *
p
;

465 
p
 = 
buf
;

466 
p
 +
	`•rötf
’, "%d\n", 
pg_busy
);

467 *
eof
 = 1;

469  
p
-
buf
;

470 
	}
}

472 
	$¥oc_pg_ªad
(*
buf
 , **
°¨t
, 
off_t
 
off£t
,

473 
Àn
, *
eof
, *
d©a
)

475 *
p
;

476 
i
;

478 
p
 = 
buf
;

479 
p
 +
	`•rötf
(p, "Params: count=%uÖkt_size=%u frags %d ipg %u odev \"%s\" dst %s dstmac ",

480 
pg_cou¡
, 
pkt_size
, 
n‰ags
, 
pg_ùg
,

481 
pg_outdev
, 
pg_d°
);

482 
i
=0;i<6;i++)

483 
p
 +
	`•rötf
’, "%02X%s", 
pg_d°mac
[
i
], i == 5 ? "\n" : ":");

485 if(
pg_ªsu…
[0])

486 
p
 +
	`•rötf
’, "Resu…: %s\n", 
pg_ªsu…
);

488 
p
 +
	`•rötf
(p, "Result: Idle\n");

489 *
eof
 = 1;

490  
p
-
buf
;

491 
	}
}

493 
	$cou¡_åaû_ch¨s
(c⁄° *
buf„r
, 
maxÀn
)

495 
i
;

497 
i
=0; i<
maxÀn
;i++) {

498 
buf„r
[
i
]) {

507 
d⁄e
;

510 
d⁄e
:

511  
i
;

512 
	}
}

514 
	$num_¨g
(c⁄° *
buf„r
, 
maxÀn
,

515 *
num
)

517 
i
=0;

518 *
num
 = 0;

520 ; 
i
<
maxÀn
;i++) {

521 if–(
buf„r
[
i
] >= '0') && (buffer[i] <= '9')) {

522 *
num
 *= 10;

523 *
num
 +
buf„r
[
i
] -'0';

528  
i
;

529 
	}
}

531 
	$°∫_Àn
(c⁄° *
buf„r
, 
maxÀn
)

533 
i
=0;

535 ; 
i
<
maxÀn
;i++)

536 
buf„r
[
i
]) {

542 
d⁄e_°r
;

545 
d⁄e_°r
:

546  
i
;

547 
	}
}

549 
	$¥oc_pg_wrôe
(
fûe
 *fûe, c⁄° *
buf„r
,

550 
cou¡
, *
d©a
)

552 
i
=0, 
max
, 
Àn
;

553 
«me
[16], 
vÆ°r
[32];

554 
vÆue
 = 0;

556 i‡(
cou¡
 < 1) {

557 
	`•rötf
(
pg_ªsu…
, "Wrong command format");

558  -
EINVAL
;

561 
max
 = 
cou¡
 -
i
;

562 
i
 +
	`cou¡_åaû_ch¨s
(&
buf„r
[i], 
max
);

566 
Àn
 = 
	`°∫_Àn
(&
buf„r
[
i
], (
«me
)-1);

567 
	`mem£t
(
«me
, 0, (name));

568 
	`°∫˝y
(
«me
, &
buf„r
[
i
], 
Àn
);

569 
i
 +
Àn
;

571 
max
 = 
cou¡
 -
i
;

572 
Àn
 = 
	`cou¡_åaû_ch¨s
(&
buf„r
[
i
], 
max
);

573 
i
 +
Àn
;

575 i‡(
debug
)

576 
	`¥ötk
("pg: %s,%lu\n", 
«me
, 
cou¡
);

580 if(!
	`°rcmp
(
«me
, "stop")) {

581 
f‹˚d_°›
=1;

582 i‡(
pg_busy
)

583 
	`°r˝y
(
pg_ªsu…
, "Stopping");

584  
cou¡
;

587 i‡(
pg_busy
) {

588 
	`°r˝y
(
pg_ªsu…
, "Busy");

589  -
EINVAL
;

592 if(!
	`°rcmp
(
«me
, "pkt_size")) {

593 
Àn
 = 
	`num_¨g
(&
buf„r
[
i
], 10, &
vÆue
);

594 
i
 +
Àn
;

595 i‡(
vÆue
 < 14+20+8)

596 
vÆue
 = 14+20+8;

597 
pkt_size
 = 
vÆue
;

598 
	`•rötf
(
pg_ªsu…
, "OK:Ökt_size=%u", 
pkt_size
);

599  
cou¡
;

601 if(!
	`°rcmp
(
«me
, "frags")) {

602 
Àn
 = 
	`num_¨g
(&
buf„r
[
i
], 10, &
vÆue
);

603 
i
 +
Àn
;

604 
n‰ags
 = 
vÆue
;

605 
	`•rötf
(
pg_ªsu…
, "OK: føgs=%u", 
n‰ags
);

606  
cou¡
;

608 if(!
	`°rcmp
(
«me
, "ipg")) {

609 
Àn
 = 
	`num_¨g
(&
buf„r
[
i
], 10, &
vÆue
);

610 
i
 +
Àn
;

611 
pg_ùg
 = 
vÆue
;

612 
	`•rötf
(
pg_ªsu…
, "OK: ipg=%u", 
pg_ùg
);

613  
cou¡
;

615 if(!
	`°rcmp
(
«me
, "count")) {

616 
Àn
 = 
	`num_¨g
(&
buf„r
[
i
], 10, &
vÆue
);

617 
i
 +
Àn
;

618 
pg_cou¡
 = 
vÆue
;

619 
	`•rötf
(
pg_ªsu…
, "OK: cou¡=%u", 
pg_cou¡
);

620  
cou¡
;

622 if(!
	`°rcmp
(
«me
, "odev")) {

623 
Àn
 = 
	`°∫_Àn
(&
buf„r
[
i
], (
pg_outdev
)-1);

624 
	`mem£t
(
pg_outdev
, 0, (pg_outdev));

625 
	`°∫˝y
(
pg_outdev
, &
buf„r
[
i
], 
Àn
);

626 
i
 +
Àn
;

627 
	`•rötf
(
pg_ªsu…
, "OK: odev=%s", 
pg_outdev
);

628  
cou¡
;

630 if(!
	`°rcmp
(
«me
, "dst")) {

631 
Àn
 = 
	`°∫_Àn
(&
buf„r
[
i
], (
pg_d°
)-1);

632 
	`mem£t
(
pg_d°
, 0, (pg_dst));

633 
	`°∫˝y
(
pg_d°
, &
buf„r
[
i
], 
Àn
);

634 if(
debug
)

635 
	`¥ötk
("pg: d° sëÅo: %s\n", 
pg_d°
);

636 
i
 +
Àn
;

637 
	`•rötf
(
pg_ªsu…
, "OK: d°=%s", 
pg_d°
);

638  
cou¡
;

640 if(!
	`°rcmp
(
«me
, "dstmac")) {

641 *
v
 = 
vÆ°r
;

642 *
m
 = 
pg_d°mac
;

644 
Àn
 = 
	`°∫_Àn
(&
buf„r
[
i
], (
vÆ°r
)-1);

645 
	`mem£t
(
vÆ°r
, 0, (valstr));

646 
	`°∫˝y
(
vÆ°r
, &
buf„r
[
i
], 
Àn
);

647 
i
 +
Àn
;

649 *
m
 = 0;*
v
 && m < 
pg_d°mac
+6;v++) {

650 if(*
v
 >= '0' && *v <= '9') {

651 *
m
 *= 16;

652 *
m
 +*
v
 - '0';

654 if(*
v
 >= 'A' && *v <= 'F') {

655 *
m
 *= 16;

656 *
m
 +*
v
 - 'A' + 10;

658 if(*
v
 >= 'a' && *v <= 'f') {

659 *
m
 *= 16;

660 *
m
 +*
v
 - 'a' + 10;

662 if(*
v
 == ':') {

663 
m
++;

664 *
m
 = 0;

667 
	`•rötf
(
pg_ªsu…
, "OK: dstmac");

668  
cou¡
;

671 i‡(!
	`°rcmp
(
«me
, "inject") || !strcmp(name, "start") ) {

672 
MOD_INC_USE_COUNT
;

673 
pg_busy
 = 1;

674 
	`°r˝y
(
pg_ªsu…
, "Starting");

675 
	`pg_öje˘
();

676 
pg_busy
 = 0;

677 
MOD_DEC_USE_COUNT
;

678  
cou¡
;

681 
	`•rötf
(
pg_ªsu…
, "NÿsuchÖ¨amëî \"%s\"", 
«me
);

682  -
EINVAL
;

683 
	}
}

685 
	$pg_öô
()

687 
	`¥ötk
(
vîsi⁄
);

688 
	`cy˛es_ˇlibøã
();

689 i‡(
pg_˝u_•ìd
 == 0) {

690 
	`¥ötk
("pg3: Error: your machine doesÇot have working cycle counter.\n");

691  -
EINVAL
;

693 if(!
pg_¥oc_ít
) {

694 
pg_¥oc_ít
 = 
	`¸óã_¥oc_íåy
("net/pg", 0600, 0);

695 i‡(
pg_¥oc_ít
) {

696 
pg_¥oc_ít
->
ªad_¥oc
 = 
¥oc_pg_ªad
;

697 
pg_¥oc_ít
->
wrôe_¥oc
 = 
¥oc_pg_wrôe
;

698 
pg_¥oc_ít
->
d©a
 = 0;

700 
pg_busy_¥oc_ít
 = 
	`¸óã_¥oc_íåy
("net/pg_busy", 0, 0);

701 i‡(
pg_busy_¥oc_ít
) {

702 
pg_busy_¥oc_ít
->
ªad_¥oc
 = 
¥oc_pg_busy_ªad
;

703 
pg_busy_¥oc_ít
->
d©a
 = 0;

707 
	}
}

709 
	$pg_˛ónup
()

711 i‡(
pg_¥oc_ít
) {

712 
	`ªmove_¥oc_íåy
("√t/pg", 
NULL
);

713 
pg_¥oc_ít
 = 0;

714 
	`ªmove_¥oc_íåy
("√t/pg_busy", 
NULL
);

715 
pg_busy_¥oc_ít
 = 0;

717 
	}
}

719 
moduÀ_öô
(
pg_öô
);

720 
moduÀ_exô
(
pg_˛ónup
);

723 #i‡
LINUX_VERSION_CODE
 > 0x20118

724 
MODULE_AUTHOR
("Robert Olsson <robert.olsson@its.uu.se");

725 
MODULE_DESCRIPTION
("Packet GeneratorÅool");

726 
MODULE_PARM
(
pg_cou¡
, "i");

727 
MODULE_PARM
(
pg_ùg
, "i");

728 
MODULE_PARM
(
pg_˝u_•ìd
, "i");

	@iputils-s20140519/SNAPSHOT.h

1 
	gSNAPSHOT
[] = "s20140519";

	@iputils-s20140519/arping.c

13 
	~<°dlib.h
>

14 
	~<time.h
>

15 
	~<sig«l.h
>

16 
	~<√t/if.h
>

17 
	~<löux/if_∑ckë.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<√t/if_¨p.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/∑øm.h
>

22 #ifde‡
CAPABILITIES


23 
	~<sys/¥˘l.h
>

24 
	~<sys/ˇ∑bûôy.h
>

27 
	~<√tdb.h
>

28 
	~<uni°d.h
>

29 
	~<°dio.h
>

30 
	~<˘y≥.h
>

31 
	~<î∫o.h
>

32 
	~<°rög.h
>

33 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

36 #ifde‡
USE_SYSFS


37 
	~<sysfs/libsysfs.h
>

38 
	gsysfs_dev©å_vÆues
;

41 #i‚de‡
WITHOUT_IFADDRS


42 
	~<iÁddrs.h
>

45 #ifde‡
USE_IDN


46 
	~<id«.h
>

47 
	~<loˇÀ.h
>

50 
	~"SNAPSHOT.h
"

52 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

54 #ifde‡
DEFAULT_DEVICE


55 
	#DEFAULT_DEVICE_STR
 
DEFAULT_DEVICE


	)

57 
	#DEFAULT_DEVICE
 
NULL


	)

60 
	sdevi˚
 {

61 *
«me
;

62 
ifödex
;

63 #i‚de‡
WITHOUT_IFADDRS


64 
iÁddrs
 *
iÁ
;

66 #ifde‡
USE_SYSFS


67 
sysfs_dev©å_vÆues
 *
sysfs
;

71 
quô_⁄_ª∂y
=0;

72 
devi˚
 device = {

73 .
«me
 = 
DEFAULT_DEVICE
,

74 
	}
};

75 *
	gsour˚
;

76 
ö_addr
 
	g§c
, 
	gd°
;

77 *
	gèrgë
;

78 
	gdad
, 
	gunsﬁicôed
, 
	gadvît
;

79 
	gquõt
;

80 
	gcou¡
=-1;

81 
	gtimeout
;

82 
	guniˇ°ög
;

83 
	gs
;

84 
	gbrﬂdˇ°_⁄ly
;

86 
sockaddr_°‹age
 
	gme
;

87 
sockaddr_°‹age
 
	ghe
;

89 
time•ec
 
	g°¨t
, 
	gœ°
;

91 
	g£¡
, 
	gbrd_£¡
;

92 
	gª˚ived
, 
	gbrd_ªcv
, 
	gªq_ªcv
;

94 #i‚de‡
CAPABILITIES


95 
uid_t
 
	geuid
;

98 
	#MS_TDIFF
(
tv1
,
tv2
Ë–(—v1).
tv_£c
-(tv2).tv_sec)*1000 + \

99 ((
tv1
).
tv_u£c
-(
tv2
).tv_u£c)/1000 )

	)

101 
	#OFFSET_OF
(
«me
,
ñe
Ë((
size_t
)((“amê*)0)->ñe))

	)

103 
ölöe
 
sockÀn_t
 
	$¶l_Àn
(
size_t
 
hÆí
)

105 
sockÀn_t
 
Àn
 = 
	`OFFSET_OF
(
sockaddr_Œ
, 
¶l_addr
Ë+ 
hÆí
;

106 i‡(
Àn
 < (
sockaddr_Œ
))

107 
Àn
 = (
sockaddr_Œ
);

108  
Àn
;

109 
	}
}

111 
	#SLL_LEN
(
h 
Ë
	`¶l_Àn
(h )

	)

113 
	$ußge
()

115 
	`Ârötf
(
°dîr
,

127 #ifde‡
DEFAULT_DEVICE_STR


128 " (" 
DEFAULT_DEVICE_STR
 ")"

134 
	`exô
(2);

135 
	}
}

137 
£t_sig«l
(
signo
, (*
h™dÀr
)())

139 
siga˘i⁄
 
ß
;

141 
	`mem£t
(&
ß
, 0, (sa));

142 
ß
.
ß_h™dÀr
 = ((*)())
h™dÀr
;

143 
ß
.
ß_Êags
 = 
SA_RESTART
;

144 
	`siga˘i⁄
(
signo
, &
ß
, 
NULL
);

145 
	}
}

147 #ifde‡
CAPABILITIES


148 c⁄° 
ˇp_vÆue_t
 
	gˇps
[] = { 
CAP_NET_RAW
, };

149 
ˇp_Êag_vÆue_t
 
	gˇp_øw
 = 
CAP_CLEAR
;

152 
	$limô_ˇ∑bûôõs
()

154 #ifde‡
CAPABILITIES


155 
ˇp_t
 
ˇp_p
;

157 
ˇp_p
 = 
	`ˇp_gë_¥oc
();

158 i‡(!
ˇp_p
) {

159 
	`≥º‹
("arping: cap_get_proc");

160 
	`exô
(-1);

163 
	`ˇp_gë_Êag
(
ˇp_p
, 
CAP_NET_RAW
, 
CAP_PERMITTED
, &
ˇp_øw
);

165 i‡(
ˇp_øw
 !
CAP_CLEAR
) {

166 i‡(
	`ˇp_˛ór
(
ˇp_p
) < 0) {

167 
	`≥º‹
("arping: cap_clear");

168 
	`exô
(-1);

171 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_PERMITTED
, 1, 
ˇps
, 
CAP_SET
);

173 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

174 
	`≥º‹
("arping: cap_set_proc");

175 i‡(
î∫o
 !
EPERM
)

176 
	`exô
(-1);

180 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 1) < 0) {

181 
	`≥º‹
("arping:Örctl");

182 
	`exô
(-1);

185 i‡(
	`£tuid
(
	`gëuid
()) < 0) {

186 
	`≥º‹
("arping: setuid");

187 
	`exô
(-1);

190 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 0) < 0) {

191 
	`≥º‹
("arping:Örctl");

192 
	`exô
(-1);

195 
	`ˇp_‰ì
(
ˇp_p
);

197 
euid
 = 
	`gëeuid
();

199 
	}
}

201 
	$modify_ˇ∑bûôy_øw
(
⁄
)

203 #ifde‡
CAPABILITIES


204 
ˇp_t
 
ˇp_p
;

206 i‡(
ˇp_øw
 !
CAP_SET
)

207  
⁄
 ? -1 : 0;

209 
ˇp_p
 = 
	`ˇp_gë_¥oc
();

210 i‡(!
ˇp_p
) {

211 
	`≥º‹
("arping: cap_get_proc");

215 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_EFFECTIVE
, 1, 
ˇps
, 
⁄
 ? 
CAP_SET
 : 
CAP_CLEAR
);

217 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

218 
	`≥º‹
("arping: cap_set_proc");

222 
	`ˇp_‰ì
(
ˇp_p
);

224 i‡(
	`£tuid
(
⁄
 ? 
euid
 : 
	`gëuid
())) {

225 
	`≥º‹
("arping: setuid");

230 
	}
}

232 
ölöe
 
	$íabÀ_ˇ∑bûôy_øw
()

234  
	`modify_ˇ∑bûôy_øw
(1);

235 
	}
}

237 
ölöe
 
	$dißbÀ_ˇ∑bûôy_øw
()

239  
	`modify_ˇ∑bûôy_øw
(0);

240 
	}
}

242 
	$dr›_ˇ∑bûôõs
()

244 #ifde‡
CAPABILITIES


245 
ˇp_t
 
ˇp_p
 = 
	`ˇp_öô
();

247 i‡(!
ˇp_p
) {

248 
	`≥º‹
("arping: cap_init");

249 
	`exô
(-1);

252 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

253 
	`≥º‹
("arping: cap_set_proc");

254 
	`exô
(-1);

257 
	`ˇp_‰ì
(
ˇp_p
);

259 i‡(
	`£tuid
(
	`gëuid
()) < 0) {

260 
	`≥º‹
("arping: setuid");

261 
	`exô
(-1);

264 
	}
}

266 
	$£nd_∑ck
(
s
, 
ö_addr
 
§c
, ö_add∏
d°
,

267 
sockaddr_Œ
 *
ME
, sockaddr_Œ *
HE
)

269 
îr
;

270 
time•ec
 
now
;

271 
buf
[256];

272 
¨phdr
 *
ah
 = (¨phdr*)
buf
;

273 *
p
 = (*)(
ah
+1);

275 
ah
->
¨_hrd
 = 
	`ht⁄s
(
ME
->
¶l_h©y≥
);

276 i‡(
ah
->
¨_hrd
 =
	`ht⁄s
(
ARPHRD_FDDI
))

277 
ah
->
¨_hrd
 = 
	`ht⁄s
(
ARPHRD_ETHER
);

278 
ah
->
¨_¥o
 = 
	`ht⁄s
(
ETH_P_IP
);

279 
ah
->
¨_h 
 = 
ME
->
¶l_hÆí
;

280 
ah
->
¨_∂n
 = 4;

281 
ah
->
¨_›
 = 
advît
 ? 
	`ht⁄s
(
ARPOP_REPLY
Ë: ht⁄s(
ARPOP_REQUEST
);

283 
	`mem˝y
(
p
, &
ME
->
¶l_addr
, 
ah
->
¨_h 
);

284 
p
+=
ME
->
¶l_hÆí
;

286 
	`mem˝y
(
p
, &
§c
, 4);

287 
p
+=4;

289 i‡(
advît
)

290 
	`mem˝y
(
p
, &
ME
->
¶l_addr
, 
ah
->
¨_h 
);

292 
	`mem˝y
(
p
, &
HE
->
¶l_addr
, 
ah
->
¨_h 
);

293 
p
+=
ah
->
¨_h 
;

295 
	`mem˝y
(
p
, &
d°
, 4);

296 
p
+=4;

298 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
now
);

299 
îr
 = 
	`£ndto
(
s
, 
buf
, 
p
-buf, 0, (
sockaddr
*)
HE
, 
	`SLL_LEN
(
ah
->
¨_h 
));

300 i‡(
îr
 =
p
-
buf
) {

301 
œ°
 = 
now
;

302 
£¡
++;

303 i‡(!
uniˇ°ög
)

304 
brd_£¡
++;

306  
îr
;

307 
	}
}

309 
	$föish
()

311 i‡(!
quõt
) {

312 
	`¥ötf
("Síà%dÖrobe†(%d brﬂdˇ°(s))\n", 
£¡
, 
brd_£¡
);

313 
	`¥ötf
("Re˚ived %dÑe•⁄£(s)", 
ª˚ived
);

314 i‡(
brd_ªcv
 || 
ªq_ªcv
) {

315 
	`¥ötf
(" (");

316 i‡(
ªq_ªcv
)

317 
	`¥ötf
("%dÑeque°(s)", 
ªq_ªcv
);

318 i‡(
brd_ªcv
)

319 
	`¥ötf
("%s%d broadcast(s)",

320 
ªq_ªcv
 ? ", " : "",

321 
brd_ªcv
);

322 
	`¥ötf
(")");

324 
	`¥ötf
("\n");

325 
	`fÊush
(
°dout
);

327 i‡(
dad
)

328 
	`exô
(!!
ª˚ived
);

329 i‡(
unsﬁicôed
)

330 
	`exô
(0);

331 
	`exô
(!
ª˚ived
);

332 
	}
}

334 
	$time•ec_sub
(
time•ec
 *
a
, time•e¯*
b
,

335 
time•ec
 *
ªs
)

337 
ªs
->
tv_£c
 = 
a
->tv_£¯- 
b
->tv_sec;

338 
ªs
->
tv_n£c
 = 
a
->tv_n£¯- 
b
->tv_nsec;

339 i‡(
a
->
tv_n£c
 < 
b
->tv_nsec) {

340 
ªs
->
tv_£c
--;

341 
ªs
->
tv_n£c
 += 1000000000;

343 
	}
}

345 
	$time•ec_œãr
(
time•ec
 *
a
, time•e¯*
b
)

347  (
a
->
tv_£c
 > 
b
->tv_sec) ||

348 ((
a
->
tv_£c
 =
b
->tv_£cË&& (a->
tv_n£c
 > b->tv_nsec));

349 
	}
}

351 
	$ˇtchî
()

353 
time•ec
 
ts
, 
ts_s
, 
ts_o
;

355 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

357 i‡(
°¨t
.
tv_£c
==0)

358 
°¨t
 = 
ts
;

360 
	`time•ec_sub
(&
ts
, &
°¨t
, &
ts_s
);

361 
ts_o
.
tv_£c
 = 
timeout
;

362 
ts_o
.
tv_n£c
 = 500 * 1000000;

364 i‡(
timeout
 && 
	`time•ec_œãr
(&
ts_s
, &
ts_o
))

365 
	`föish
();

367 
	`time•ec_sub
(&
ts
, &
œ°
, &
ts_s
);

368 
ts_o
.
tv_£c
 = 0;

370 i‡(
œ°
.
tv_£c
==0 || 
	`time•ec_œãr
(&
ts_s
, &
ts_o
)) {

371 i‡(!
timeout
 && (
£¡
 =
cou¡
))

372 
	`föish
();

373 
	`£nd_∑ck
(
s
, 
§c
, 
d°
,

374 (
sockaddr_Œ
 *)&
me
, (sockaddr_Œ *)&
he
);

375 i‡((
£¡
 =
cou¡
Ë&& 
unsﬁicôed
)

380 
	`föish
();

382 
	`Æ¨m
(1);

383 
	}
}

385 
	$¥öt_hex
(*
p
, 
Àn
)

387 
i
;

388 
i
=0; i<
Àn
; i++) {

389 
	`¥ötf
("%02X", 
p
[
i
]);

390 i‡(
i
 !
Àn
-1)

391 
	`¥ötf
(":");

393 
	}
}

395 
	$ªcv_∑ck
(*
buf
, 
Àn
, 
sockaddr_Œ
 *
FROM
)

397 
time•ec
 
ts
;

398 
¨phdr
 *
ah
 = (¨phdr*)
buf
;

399 *
p
 = (*)(
ah
+1);

400 
ö_addr
 
§c_ù
, 
d°_ù
;

402 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

405 i‡(
FROM
->
¶l_pkây≥
 !
PACKET_HOST
 &&

406 
FROM
->
¶l_pkây≥
 !
PACKET_BROADCAST
 &&

407 
FROM
->
¶l_pkây≥
 !
PACKET_MULTICAST
)

411 i‡(
ah
->
¨_›
 !
	`ht⁄s
(
ARPOP_REQUEST
) &&

412 
ah
->
¨_›
 !
	`ht⁄s
(
ARPOP_REPLY
))

416 i‡(
ah
->
¨_hrd
 !
	`ht⁄s
(
FROM
->
¶l_h©y≥
) &&

417 (
FROM
->
¶l_h©y≥
 !
ARPHRD_FDDI
 || 
ah
->
¨_hrd
 !
	`ht⁄s
(
ARPHRD_ETHER
)))

421 i‡(
ah
->
¨_¥o
 !
	`ht⁄s
(
ETH_P_IP
))

423 i‡(
ah
->
¨_∂n
 != 4)

425 i‡(
ah
->
¨_h 
 !((
sockaddr_Œ
 *)&
me
)->
¶l_hÆí
)

427 i‡(
Àn
 < (*
ah
Ë+ 2*(4 +áh->
¨_h 
))

429 
	`mem˝y
(&
§c_ù
, 
p
+
ah
->
¨_h 
, 4);

430 
	`mem˝y
(&
d°_ù
, 
p
+
ah
->
¨_h 
+4+ah->ar_hln, 4);

431 i‡(!
dad
) {

432 i‡(
§c_ù
.
s_addr
 !
d°
.s_addr)

434 i‡(
§c
.
s_addr
 !
d°_ù
.s_addr)

436 i‡(
	`memcmp
(
p
+
ah
->
¨_h 
+4, ((
sockaddr_Œ
 *)&
me
)->
¶l_addr
,áh->ar_hln))

452 i‡(
§c_ù
.
s_addr
 !
d°
.s_addr)

454 i‡(
	`memcmp
(
p
, ((
sockaddr_Œ
 *)&
me
)->
¶l_addr
, ((sockaddr_Œ *)&me)->
¶l_hÆí
) == 0)

456 i‡(
§c
.
s_addr
 && src.s_add∏!
d°_ù
.s_addr)

459 i‡(!
quõt
) {

460 
s_¥öãd
 = 0;

461 
	`¥ötf
("%†", 
FROM
->
¶l_pkây≥
==
PACKET_HOST
 ? "Unicast" : "Broadcast");

462 
	`¥ötf
("%†‰om ", 
ah
->
¨_›
 =
	`ht⁄s
(
ARPOP_REPLY
) ? "reply" : "request");

463 
	`¥ötf
("%†[", 
	`öë_¡ﬂ
(
§c_ù
));

464 
	`¥öt_hex
(
p
, 
ah
->
¨_h 
);

465 
	`¥ötf
("] ");

466 i‡(
d°_ù
.
s_addr
 !
§c
.s_addr) {

467 
	`¥ötf
("f‹ %†", 
	`öë_¡ﬂ
(
d°_ù
));

468 
s_¥öãd
 = 1;

470 i‡(
	`memcmp
(
p
+
ah
->
¨_h 
+4, ((
sockaddr_Œ
 *)&
me
)->
¶l_addr
,áh->ar_hln)) {

471 i‡(!
s_¥öãd
)

472 
	`¥ötf
("for ");

473 
	`¥ötf
("[");

474 
	`¥öt_hex
(
p
+
ah
->
¨_h 
+4,áh->ar_hln);

475 
	`¥ötf
("]");

477 i‡(
œ°
.
tv_£c
) {

478 
u£cs
 = (
ts
.
tv_£c
-
œ°
.tv_sec) * 1000000 +

479 (
ts
.
tv_n£c
-
œ°
.tv_nsec+500) / 1000;

480 
m£cs
 = (
u£cs
+500)/1000;

481 
u£cs
 -
m£cs
*1000 - 500;

482 
	`¥ötf
(" %ld.%03ldms\n", 
m£cs
, 
u£cs
);

484 
	`¥ötf
(" UNSOLICITED?\n");

486 
	`fÊush
(
°dout
);

488 
ª˚ived
++;

489 i‡(
timeout
 && (
ª˚ived
 =
cou¡
))

490 
	`föish
();

491 i‡(
FROM
->
¶l_pkây≥
 !
PACKET_HOST
)

492 
brd_ªcv
++;

493 i‡(
ah
->
¨_›
 =
	`ht⁄s
(
ARPOP_REQUEST
))

494 
ªq_ªcv
++;

495 i‡(
quô_⁄_ª∂y
 || (
cou¡
 =0 && 
ª˚ived
 =
£¡
))

496 
	`föish
();

497 if(!
brﬂdˇ°_⁄ly
) {

498 
	`mem˝y
(((
sockaddr_Œ
 *)&
he
)->
¶l_addr
, 
p
, ((sockaddr_Œ *)&
me
)->
¶l_hÆí
);

499 
uniˇ°ög
=1;

502 
	}
}

504 #ifde‡
USE_SYSFS


505 
	usysfs_dev©å_vÆue
 {

506 
	mul⁄g
;

507 *
	m±r
;

511 
	mSYSFS_DEVATTR_IFINDEX
,

512 
	mSYSFS_DEVATTR_FLAGS
,

513 
	mSYSFS_DEVATTR_ADDR_LEN
,

514 
	mSYSFS_DEVATTR_BROADCAST
,

515 
	mSYSFS_DEVATTR_NUM


518 
	ssysfs_dev©å_vÆues


520 *
	mi‚ame
;

521 
sysfs_dev©å_vÆue
 
	mvÆue
[
SYSFS_DEVATTR_NUM
];

524 
sysfs_dev©å_ul⁄g_dec
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
);

525 
sysfs_dev©å_ul⁄g_hex
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
);

526 
sysfs_dev©å_maˇddr
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
);

528 
	ssysfs_dev©ås
 {

529 c⁄° *
	m«me
;

530 (*
	mh™dÀr
)(*
	m±r
, 
sysfs_dev©å_vÆues
 *
	mv
, 
	midx
);

531 
	m‰ì
;

532 } 
	gsysfs_dev©ås
[
SYSFS_DEVATTR_NUM
] = {

533 [
SYSFS_DEVATTR_IFINDEX
] = {

534 .
«me
 = "ifindex",

535 .
	gh™dÀr
 = 
sysfs_dev©å_ul⁄g_dec
,

537 [
SYSFS_DEVATTR_ADDR_LEN
] = {

538 .
«me
 = "addr_len",

539 .
	gh™dÀr
 = 
sysfs_dev©å_ul⁄g_dec
,

541 [
SYSFS_DEVATTR_FLAGS
] = {

542 .
«me
 = "flags",

543 .
	gh™dÀr
 = 
sysfs_dev©å_ul⁄g_hex
,

545 [
SYSFS_DEVATTR_BROADCAST
] = {

546 .
«me
 = "broadcast",

547 .
	gh™dÀr
 = 
sysfs_dev©å_maˇddr
,

548 .
	g‰ì
 = 1,

579 
	$check_ifÊags
(
ifÊags
, 
Áèl
)

581 i‡(!(
ifÊags
 & 
IFF_UP
)) {

582 i‡(
Áèl
) {

583 i‡(!
quõt
)

584 
	`¥ötf
("I¡îÁ˚ \"%s\" i†down\n", 
devi˚
.
«me
);

585 
	`exô
(2);

589 i‡(
ifÊags
 & (
IFF_NOARP
 | 
IFF_LOOPBACK
)) {

590 i‡(
Áèl
) {

591 i‡(!
quõt
)

592 
	`¥ötf
("I¡îÁ˚ \"%s\" i†nŸ ARPabÀ\n", 
devi˚
.
«me
);

593 
	`exô
(
dad
 ? 0 : 2);

598 
	}
}

600 
	$föd_devi˚_by_iÁddrs
()

602 #i‚de‡
WITHOUT_IFADDRS


603 
rc
;

604 
iÁddrs
 *
iÁ0
, *
iÁ
;

605 
n
 = 0;

607 
rc
 = 
	`gëiÁddrs
(&
iÁ0
);

608 i‡(
rc
) {

609 
	`≥º‹
("getifaddrs");

613 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

614 i‡(!
iÁ
->
iÁ_addr
)

616 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 !
AF_PACKET
)

618 i‡(
devi˚
.
«me
 && 
iÁ
->
iÁ_«me
 && 
	`°rcmp
(ifa->ifa_name, device.name))

621 i‡(
	`check_ifÊags
(
iÁ
->
iÁ_Êags
, 
devi˚
.
«me
 !
NULL
) < 0)

624 i‡(!((
sockaddr_Œ
 *)
iÁ
->
iÁ_addr
)->
¶l_hÆí
)

626 i‡(!
iÁ
->
iÁ_brﬂdaddr
)

629 
devi˚
.
iÁ
 = ifa;

631 i‡(
n
++)

635 i‡(
n
 =1 && 
devi˚
.
iÁ
) {

636 
devi˚
.
ifödex
 = 
	`if_«mëoödex
(devi˚.
iÁ
->
iÁ_«me
);

637 i‡(!
devi˚
.
ifödex
) {

638 
	`≥º‹
("arping: if_nametoindex");

639 
	`‰ìiÁddrs
(
iÁ0
);

642 
devi˚
.
«me
 = devi˚.
iÁ
->
iÁ_«me
;

649 
	}
}

651 #ifde‡
USE_SYSFS


652 
	$sysfs_dev©å_vÆues_öô
(
sysfs_dev©å_vÆues
 *
v
, 
do_‰ì
)

654 
i
;

655 i‡(
do_‰ì
) {

656 
	`‰ì
(
v
->
i‚ame
);

657 
i
 = 0; i < 
SYSFS_DEVATTR_NUM
; i++) {

658 i‡(
sysfs_dev©ås
[
i
].
‰ì
)

659 
	`‰ì
(
v
->
vÆue
[
i
].
±r
);

662 
	`mem£t
(
v
, 0, (*v));

663 
	}
}

665 
	$sysfs_dev©å_ul⁄g
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
,

666 
ba£
)

668 *
p
;

669 *
ï
;

671 i‡(!
±r
 || !
v
)

674 
p
 = &
v
->
vÆue
[
idx
].
ul⁄g
;

675 
î∫o
 = 0;

676 *
p
 = 
	`°πoul
(
±r
, &
ï
, 
ba£
);

677 i‡((*
±r
 && 
	`is•a˚
(*±∏& 0xff)Ë|| 
î∫o
 || (*
ï
 != '\0' && *ep != '\n'))

678 
out
;

681 
out
:

683 
	}
}

685 
	$sysfs_dev©å_ul⁄g_dec
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
)

687 
rc
 = 
	`sysfs_dev©å_ul⁄g
(
±r
, 
v
, 
idx
, 10);

688  
rc
;

689 
	}
}

691 
	$sysfs_dev©å_ul⁄g_hex
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
)

693 
rc
 = 
	`sysfs_dev©å_ul⁄g
(
±r
, 
v
, 
idx
, 16);

694  
rc
;

695 
	}
}

697 
	$sysfs_dev©å_maˇddr
(*
±r
, 
sysfs_dev©å_vÆues
 *
v
, 
idx
)

699 *
m
;

700 
i
;

701 
addæí
;

703 i‡(!
±r
 || !
v
)

706 
addæí
 = 
v
->
vÆue
[
SYSFS_DEVATTR_ADDR_LEN
].
ul⁄g
;

707 
m
 = 
	`mÆloc
(
addæí
);

709 
i
 = 0; i < 
addæí
; i++) {

710 i‡(
i
 && *(
±r
 + i * 3 - 1) != ':')

711 
out
;

712 i‡(
	`ssˇnf
(
±r
 + 
i
 * 3, "%02hhx", &
m
[i]) != 1)

713 
out
;

716 
v
->
vÆue
[
idx
].
±r
 = 
m
;

718 
out
:

719 
	`‰ì
(
m
);

721 
	}
}

724 
	$föd_devi˚_by_sysfs
()

726 
rc
 = -1;

727 #ifde‡
USE_SYSFS


728 
sysfs_˛ass
 *
˛s_√t
;

729 
dli°
 *
dev_li°
;

730 
sysfs_˛ass_devi˚
 *
dev
;

731 
sysfs_©åibuã
 *
dev_©å
;

732 
sysfs_dev©å_vÆues
 sysfs_devattr_values;

733 
n
 = 0;

735 i‡(!
devi˚
.
sysfs
) {

736 
devi˚
.
sysfs
 = 
	`mÆloc
((*device.sysfs));

737 
	`sysfs_dev©å_vÆues_öô
(
devi˚
.
sysfs
, 0);

740 
˛s_√t
 = 
	`sysfs_›í_˛ass
("net");

741 i‡(!
˛s_√t
) {

742 
	`≥º‹
("sysfs_open_class");

746 
dev_li°
 = 
	`sysfs_gë_˛ass_devi˚s
(
˛s_√t
);

747 i‡(!
dev_li°
) {

748 
	`≥º‹
("sysfs_get_class_devices");

749 
out
;

752 
	`sysfs_dev©å_vÆues_öô
(&
sysfs_dev©å_vÆues
, 0);

754 
	`dli°_f‹_óch_d©a
(
dev_li°
, 
dev
, 
sysfs_˛ass_devi˚
) {

755 
i
;

756 
rc
 = -1;

758 i‡(
devi˚
.
«me
 && 
	`°rcmp
(
dev
->name, device.name))

759 
do_√xt
;

761 
	`sysfs_dev©å_vÆues_öô
(&
sysfs_dev©å_vÆues
, 1);

763 
i
 = 0; i < 
SYSFS_DEVATTR_NUM
; i++) {

765 
dev_©å
 = 
	`sysfs_gë_˛assdev_©å
(
dev
, 
sysfs_dev©ås
[
i
].
«me
);

766 i‡(!
dev_©å
) {

767 
	`≥º‹
("sysfs_get_classdev_attr");

768 
rc
 = -1;

771 i‡(
	`sysfs_ªad_©åibuã
(
dev_©å
)) {

772 
	`≥º‹
("sysfs_read_attribute");

773 
rc
 = -1;

776 
rc
 = 
sysfs_dev©ås
[
i
].
	`h™dÀr
(
dev_©å
->
vÆue
, &
sysfs_dev©å_vÆues
, i);

778 i‡(
rc
 < 0)

782 i‡(
rc
 < 0)

783 
do_√xt
;

785 i‡(
	`check_ifÊags
(
sysfs_dev©å_vÆues
.
vÆue
[
SYSFS_DEVATTR_FLAGS
].
ul⁄g
,

786 
devi˚
.
«me
 !
NULL
) < 0)

787 
do_√xt
;

789 i‡(!
sysfs_dev©å_vÆues
.
vÆue
[
SYSFS_DEVATTR_ADDR_LEN
].
ul⁄g
)

790 
do_√xt
;

792 i‡(
devi˚
.
sysfs
->
vÆue
[
SYSFS_DEVATTR_IFINDEX
].
ul⁄g
) {

793 i‡(
devi˚
.
sysfs
->
vÆue
[
SYSFS_DEVATTR_FLAGS
].
ul⁄g
 & 
IFF_RUNNING
)

794 
do_√xt
;

797 
sysfs_dev©å_vÆues
.
i‚ame
 = 
	`°rdup
(
dev
->
«me
);

798 i‡(!
sysfs_dev©å_vÆues
.
i‚ame
) {

799 
	`≥º‹
("malloc");

800 
out
;

803 
	`sysfs_dev©å_vÆues_öô
(
devi˚
.
sysfs
, 1);

804 
	`mem˝y
(
devi˚
.
sysfs
, &
sysfs_dev©å_vÆues
, (*device.sysfs));

805 
	`sysfs_dev©å_vÆues_öô
(&
sysfs_dev©å_vÆues
, 0);

807 i‡(
n
++)

811 
do_√xt
:

812 
	`sysfs_dev©å_vÆues_öô
(&
sysfs_dev©å_vÆues
, 1);

815 i‡(
n
 == 1) {

816 
devi˚
.
ifödex
 = devi˚.
sysfs
->
vÆue
[
SYSFS_DEVATTR_IFINDEX
].
ul⁄g
;

817 
devi˚
.
«me
 = devi˚.
sysfs
->
i‚ame
;

819 
rc
 = !
devi˚
.
ifödex
;

820 
out
:

821 
	`sysfs_˛o£_˛ass
(
˛s_√t
);

823  
rc
;

824 
	}
}

826 
	$check_devi˚_by_io˘l
(
s
, 
i‰eq
 *
i‰
)

828 i‡(
	`io˘l
(
s
, 
SIOCGIFFLAGS
, 
i‰
) < 0) {

829 
	`≥º‹
("ioctl(SIOCGIFINDEX");

833 i‡(
	`check_ifÊags
(
i‰
->
i‰_Êags
, 
devi˚
.
«me
 !
NULL
) < 0)

836 i‡(
	`io˘l
(
s
, 
SIOCGIFINDEX
, 
i‰
) < 0) {

837 
	`≥º‹
("ioctl(SIOCGIFINDEX");

842 
	}
}

844 
	$föd_devi˚_by_io˘l
()

846 
s
;

847 
i‰eq
 *
i‰0
, *
i‰
, *
i‰_íd
;

848 
size_t
 
i‰size
 = (*
i‰
);

849 
ifc⁄f
 
ifc
;

850 
i‰eq
 
i‰buf
;

851 
n
 = 0;

853 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

854 i‡(
s
 < 0) {

855 
	`≥º‹
("socket");

859 
	`mem£t
(&
i‰buf
, 0, (ifrbuf));

861 i‡(
devi˚
.
«me
) {

862 
	`°∫˝y
(
i‰buf
.
i‰_«me
, 
devi˚
.
«me
, (ifrbuf.ifr_name) - 1);

863 i‡(
	`check_devi˚_by_io˘l
(
s
, &
i‰buf
))

864 
out
;

865 
n
++;

868 
rc
;

869 
i‰0
 = 
	`mÆloc
(
i‰size
);

870 i‡(!
i‰0
) {

871 
	`≥º‹
("malloc");

872 
out
;

875 
ifc
.
ifc_buf
 = (*)
i‰0
;

876 
ifc
.
ifc_Àn
 = 
i‰size
;

878 
rc
 = 
	`io˘l
(
s
, 
SIOCGIFCONF
, &
ifc
);

879 i‡(
rc
 < 0) {

880 
	`≥º‹
("ioctl(SIOCFIFCONF");

881 
out
;

884 i‡(
ifc
.
ifc_Àn
 + (*
i‰0
Ë+ (
sockaddr_°‹age
Ë- (
sockaddr
Ë<
i‰size
)

886 
i‰size
 *= 2;

887 
	`‰ì
(
i‰0
);

888 
i‰0
 = 
NULL
;

889 } 
i‰size
 < 
INT_MAX
 / 2);

891 i‡(!
i‰0
) {

892 
	`Ârötf
(
°dîr
, "arping:Åoo many interfaces!?\n");

893 
out
;

896 
i‰_íd
 = (
i‰eq
 *)(((*)
i‰0
Ë+ 
ifc
.
ifc_Àn
 - (*ifr0));

897 
i‰
 = 
i‰0
; i‰ <
i‰_íd
; ifr++) {

898 i‡(
	`check_devi˚_by_io˘l
(
s
, &
i‰buf
))

900 
	`mem˝y
(&
i‰buf
.
i‰_«me
, 
i‰
->ifr_name, (ifrbuf.ifr_name));

901 i‡(
n
++)

906 
	`˛o£
(
s
);

908 i‡(
n
 == 1) {

909 
devi˚
.
ifödex
 = 
i‰buf
.
i‰_ifödex
;

910 
devi˚
.
«me
 = 
i‰buf
.
i‰_«me
;

912  !
devi˚
.
ifödex
;

913 
out
:

914 
	`˛o£
(
s
);

916 
	}
}

918 
	$föd_devi˚
()

920 
rc
;

921 
rc
 = 
	`föd_devi˚_by_iÁddrs
();

922 i‡(
rc
 >= 0)

923 
out
;

924 
rc
 = 
	`föd_devi˚_by_sysfs
();

925 i‡(
rc
 >= 0)

926 
out
;

927 
rc
 = 
	`föd_devi˚_by_io˘l
();

928 
out
:

929  
rc
;

930 
	}
}

938 
	$£t_devi˚_brﬂdˇ°_iÁddrs_⁄e
(
devi˚
 *devi˚, *
ba
, 
size_t
 
bÆí
, 
Áèl
)

940 #i‚de‡
WITHOUT_IFADDRS


941 
iÁddrs
 *
iÁ
;

942 
sockaddr_Œ
 *
¶l
;

944 i‡(!
devi˚
)

947 
iÁ
 = 
devi˚
->ifa;

948 i‡(!
iÁ
)

951 
¶l
 = (
sockaddr_Œ
 *)
iÁ
->
iÁ_brﬂdaddr
;

953 i‡(
¶l
->
¶l_hÆí
 !
bÆí
) {

954 i‡(
Áèl
) {

955 i‡(!
quõt
)

956 
	`¥ötf
("AddressÜength doesÇot match...\n");

957 
	`exô
(2);

961 
	`mem˝y
(
ba
, 
¶l
->
¶l_addr
, sŒ->
¶l_hÆí
);

966 
	}
}

967 
	$£t_devi˚_brﬂdˇ°_sysfs
(
devi˚
 *devi˚, *
ba
, 
size_t
 
bÆí
)

969 #ifde‡
USE_SYSFS


970 
sysfs_dev©å_vÆues
 *
v
;

971 i‡(!
devi˚
)

973 
v
 = 
devi˚
->
sysfs
;

974 i‡(!
v
)

976 i‡(
v
->
vÆue
[
SYSFS_DEVATTR_ADDR_LEN
].
ul⁄g
 !
bÆí
)

978 
	`mem˝y
(
ba
, 
v
->
vÆue
[
SYSFS_DEVATTR_BROADCAST
].
±r
, 
bÆí
);

983 
	}
}

985 
	$£t_devi˚_brﬂdˇ°_ÁŒback
(
devi˚
 *devi˚, *
ba
, 
size_t
 
bÆí
)

987 i‡(!
quõt
)

988 
	`Ârötf
(
°dîr
, "WARNING: using default broadcastáddress.\n");

989 
	`mem£t
(
ba
, -1, 
bÆí
);

991 
	}
}

993 
	$£t_devi˚_brﬂdˇ°
(
devi˚
 *
dev
, *
ba
, 
size_t
 
bÆí
)

995 i‡(!
	`£t_devi˚_brﬂdˇ°_iÁddrs_⁄e
(
dev
, 
ba
, 
bÆí
, 0))

997 i‡(!
	`£t_devi˚_brﬂdˇ°_sysfs
(
dev
, 
ba
, 
bÆí
))

999 
	`£t_devi˚_brﬂdˇ°_ÁŒback
(
dev
, 
ba
, 
bÆí
);

1000 
	}
}

1003 
	$maö
(
¨gc
, **
¨gv
)

1005 
sockë_î∫o
;

1006 
ch
;

1008 
	`limô_ˇ∑bûôõs
();

1010 #ifde‡
USE_IDN


1011 
	`£éoˇÀ
(
LC_ALL
, "");

1014 
	`íabÀ_ˇ∑bûôy_øw
();

1016 
s
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 0);

1017 
sockë_î∫o
 = 
î∫o
;

1019 
	`dißbÀ_ˇ∑bûôy_øw
();

1021 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h?bfDUAqc:w:s:I:V")Ë!
EOF
) {

1022 
ch
) {

1024 
brﬂdˇ°_⁄ly
=1;

1027 
dad
++;

1028 
quô_⁄_ª∂y
=1;

1031 
unsﬁicôed
++;

1034 
advît
++;

1035 
unsﬁicôed
++;

1038 
quõt
++;

1041 
cou¡
 = 
	`©oi
(
›èrg
);

1044 
timeout
 = 
	`©oi
(
›èrg
);

1047 
devi˚
.
«me
 = 
›èrg
;

1050 
quô_⁄_ª∂y
=1;

1053 
sour˚
 = 
›èrg
;

1056 
	`¥ötf
("¨pög utûôy, iputûs-%s\n", 
SNAPSHOT
);

1057 
	`exô
(0);

1061 
	`ußge
();

1064 
¨gc
 -
›töd
;

1065 
¨gv
 +
›töd
;

1067 i‡(
¨gc
 != 1)

1068 
	`ußge
();

1070 
èrgë
 = *
¨gv
;

1072 i‡(
devi˚
.
«me
 && !*device.name)

1073 
devi˚
.
«me
 = 
NULL
;

1075 i‡(
s
 < 0) {

1076 
î∫o
 = 
sockë_î∫o
;

1077 
	`≥º‹
("arping: socket");

1078 
	`exô
(2);

1081 i‡(
	`föd_devi˚
() < 0)

1082 
	`exô
(2);

1084 i‡(!
devi˚
.
ifödex
) {

1085 i‡(
devi˚
.
«me
) {

1086 
	`Ârötf
(
°dîr
, "¨pög: Devi˚ %†nŸávaûabÀ.\n", 
devi˚
.
«me
);

1087 
	`exô
(2);

1089 
	`Ârötf
(
°dîr
, "arping: device (option -I) isÑequired.\n");

1090 
	`ußge
();

1093 i‡(
	`öë_©⁄
(
èrgë
, &
d°
) != 1) {

1094 
ho°ít
 *
hp
;

1095 *
idn
 = 
èrgë
;

1096 #ifde‡
USE_IDN


1097 
rc
;

1099 
rc
 = 
	`id«_to_ascii_lz
(
èrgë
, &
idn
, 0);

1101 i‡(
rc
 !
IDNA_SUCCESS
) {

1102 
	`Ârötf
(
°dîr
, "¨pög: IDNÉncodög faûed: %s\n", 
	`id«_°ªº‹
(
rc
));

1103 
	`exô
(2);

1107 
hp
 = 
	`gëho°by«me2
(
idn
, 
AF_INET
);

1108 i‡(!
hp
) {

1109 
	`Ârötf
(
°dîr
, "¨pög: unknow¿ho° %s\n", 
èrgë
);

1110 
	`exô
(2);

1113 #ifde‡
USE_IDN


1114 
	`‰ì
(
idn
);

1117 
	`mem˝y
(&
d°
, 
hp
->
h_addr
, 4);

1120 i‡(
sour˚
 && 
	`öë_©⁄
(sour˚, &
§c
) != 1) {

1121 
	`Ârötf
(
°dîr
, "¨pög: invÆid sour˚ %s\n", 
sour˚
);

1122 
	`exô
(2);

1125 i‡(!
dad
 && 
unsﬁicôed
 && 
§c
.
s_addr
 == 0)

1126 
§c
 = 
d°
;

1128 i‡(!
dad
 || 
§c
.
s_addr
) {

1129 
sockaddr_ö
 
ßddr
;

1130 
¥obe_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1132 i‡(
¥obe_fd
 < 0) {

1133 
	`≥º‹
("socket");

1134 
	`exô
(2);

1136 i‡(
devi˚
.
«me
) {

1137 
	`íabÀ_ˇ∑bûôy_øw
();

1139 i‡(
	`£tsock›t
(
¥obe_fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
devi˚
.
«me
, 
	`°æí
(device.name)+1) == -1)

1140 
	`≥º‹
("WARNING: interface is ignored");

1142 
	`dißbÀ_ˇ∑bûôy_øw
();

1144 
	`mem£t
(&
ßddr
, 0, (saddr));

1145 
ßddr
.
sö_Ámûy
 = 
AF_INET
;

1146 i‡(
§c
.
s_addr
) {

1147 
ßddr
.
sö_addr
 = 
§c
;

1148 i‡(
	`böd
(
¥obe_fd
, (
sockaddr
*)&
ßddr
, (saddr)) == -1) {

1149 
	`≥º‹
("bind");

1150 
	`exô
(2);

1152 } i‡(!
dad
) {

1153 
⁄
 = 1;

1154 
sockÀn_t
 
Æí
 = (
ßddr
);

1156 
ßddr
.
sö_p‹t
 = 
	`ht⁄s
(1025);

1157 
ßddr
.
sö_addr
 = 
d°
;

1159 i‡(
	`£tsock›t
(
¥obe_fd
, 
SOL_SOCKET
, 
SO_DONTROUTE
, (*)&
⁄
, (on)) == -1)

1160 
	`≥º‹
("WARNING: setsockopt(SO_DONTROUTE)");

1161 i‡(
	`c⁄√˘
(
¥obe_fd
, (
sockaddr
*)&
ßddr
, (saddr)) == -1) {

1162 
	`≥º‹
("connect");

1163 
	`exô
(2);

1165 i‡(
	`gësock«me
(
¥obe_fd
, (
sockaddr
*)&
ßddr
, &
Æí
) == -1) {

1166 
	`≥º‹
("getsockname");

1167 
	`exô
(2);

1169 
§c
 = 
ßddr
.
sö_addr
;

1171 
	`˛o£
(
¥obe_fd
);

1174 ((
sockaddr_Œ
 *)&
me
)->
¶l_Ámûy
 = 
AF_PACKET
;

1175 ((
sockaddr_Œ
 *)&
me
)->
¶l_ifödex
 = 
devi˚
.
ifödex
;

1176 ((
sockaddr_Œ
 *)&
me
)->
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ARP
);

1177 i‡(
	`böd
(
s
, (
sockaddr
*)&
me
, (me)) == -1) {

1178 
	`≥º‹
("bind");

1179 
	`exô
(2);

1183 
sockÀn_t
 
Æí
 = (
me
);

1184 i‡(
	`gësock«me
(
s
, (
sockaddr
*)&
me
, &
Æí
) == -1) {

1185 
	`≥º‹
("getsockname");

1186 
	`exô
(2);

1189 i‡(((
sockaddr_Œ
 *)&
me
)->
¶l_hÆí
 == 0) {

1190 i‡(!
quõt
)

1191 
	`¥ötf
("I¡îÁ˚ \"%s\" i†nŸ ARPabÀ (nÿŒáddªss)\n", 
devi˚
.
«me
);

1192 
	`exô
(
dad
?0:2);

1195 
he
 = 
me
;

1197 
	`£t_devi˚_brﬂdˇ°
(&
devi˚
, ((
sockaddr_Œ
 *)&
he
)->
¶l_addr
,

1198 ((
sockaddr_Œ
 *)&
he
)->
¶l_hÆí
);

1200 i‡(!
quõt
) {

1201 
	`¥ötf
("ARPING %†", 
	`öë_¡ﬂ
(
d°
));

1202 
	`¥ötf
("‰om %†%s\n", 
	`öë_¡ﬂ
(
§c
), 
devi˚
.
«me
 ? : "");

1205 i‡(!
§c
.
s_addr
 && !
dad
) {

1206 
	`Ârötf
(
°dîr
, "arping:Ço sourceáddress inÇot-DAD mode\n");

1207 
	`exô
(2);

1210 
	`dr›_ˇ∑bûôõs
();

1212 
	`£t_sig«l
(
SIGINT
, 
föish
);

1213 
	`£t_sig«l
(
SIGALRM
, 
ˇtchî
);

1215 
	`ˇtchî
();

1218 
sig£t_t
 
s£t
, 
os£t
;

1219 
∑ckë
[4096];

1220 
sockaddr_°‹age
 
‰om
;

1221 
sockÀn_t
 
Æí
 = (
‰om
);

1222 
cc
;

1224 
	`sigem±y£t
(&
s£t
);

1225 
	`sigadd£t
(&
s£t
, 
SIGALRM
);

1226 
	`sigadd£t
(&
s£t
, 
SIGINT
);

1231 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
s£t
, &
os£t
);

1233 i‡((
cc
 = 
	`ªcv‰om
(
s
, 
∑ckë
, (packet), 0,

1234 (
sockaddr
 *)&
‰om
, &
Æí
)) < 0) {

1235 
	`≥º‹
("arping:Ñecvfrom");

1239 
	`sig¥ocmask
(
SIG_BLOCK
, &
s£t
, 
NULL
);

1240 
	`ªcv_∑ck
(
∑ckë
, 
cc
, (
sockaddr_Œ
 *)&
‰om
);

1241 
	`sig¥ocmask
(
SIG_SETMASK
, &
os£t
, 
NULL
);

1243 
	}
}

	@iputils-s20140519/clockdiff.c

1 
	~<time.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/∑øm.h
>

4 
	~<°dio.h
>

5 
	~<uni°d.h
>

6 
	~<°dlib.h
>

7 
	~<m©h.h
>

8 
	~<°rög.h
>

9 
	~<sys/time.h
>

10 
	~<sys/timex.h
>

11 
	~<î∫o.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

14 
	~<√töë/ù.h
>

15 
	~<√töë/ù_icmp.h
>

16 
	#TSPTYPES


	)

17 
	~<f˙é.h
>

18 
	~<√tdb.h
>

19 
	~<¨∑/öë.h
>

20 
	~<î∫o.h
>

21 
	~<löux/ty≥s.h
>

22 #ifde‡
CAPABILITIES


23 
	~<sys/ˇ∑bûôy.h
>

26 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

28 
	#MAX_HOSTNAMELEN
 
NI_MAXHOST


	)

39 #unde‡
ADDCARRY


40 
	#ADDCARRY
(
sum
) { \

41 i‡(
sum
 & 0xffff0000) { \

42 
sum
 &= 0xffff; \

43 
sum
++; \

45 
	}

	)
}

47 
	$ö_cksum
(*
addr
, 
Àn
)

49 
	uw‹d
 {

50 
c
[2];

51 
s
;

52 } 
u
;

53 
sum
 = 0;

55 
Àn
 > 0) {

59 (
Àn
 -= 2) >= 0) {

60 i‡(()
addr
 & 0x1) {

62 
u
.
c
[0] = *(*)
addr
;

63 
u
.
c
[1] = *((*)
addr
+1);

64 
sum
 +
u
.
s
;

65 
addr
++;

67 
sum
 +*
addr
++;

68 
	`ADDCARRY
(
sum
);

70 i‡(
Àn
 == -1)

74 
u
.
c
[0] = *(*)
addr
;

76 i‡(
Àn
 == -1) {

79 
u
.
c
[1] = 0;

80 
sum
 +
u
.
s
;

81 
	`ADDCARRY
(
sum
);

83  (~
sum
 & 0xffff);

84 
	}
}

86 
	#ON
 1

	)

87 
	#OFF
 0

	)

89 
	#RANGE
 1

	)

90 
	#MSGS
 50

	)

91 
	#TRIALS
 10

	)

93 
	#GOOD
 0

	)

94 
	#UNREACHABLE
 2

	)

95 
	#NONSTDTIME
 3

	)

96 
	#HOSTDOWN
 0x7fffffff

	)

99 
	göãø˘ive
 = 0;

100 
uöt16_t
 
	gid
;

101 
	gsock
;

102 
	gsock_øw
;

103 
sockaddr_ö
 
	g£rvî
;

104 
	gù_›t_Àn
 = 0;

106 
	#BIASP
 43199999

	)

107 
	#BIASN
 -43200000

	)

108 
	#MODULO
 86400000

	)

109 
	#PROCESSING_TIME
 0

	)

111 
	#PACKET_IN
 1024

	)

113 
	gmósuª_dñè
;

114 
	gmósuª_dñè1
;

115 
	g£qno
, 
	g£qno0
, 
	gacked
;

116 
	gπt
 = 1000;

117 
	gmö_πt
;

118 
	gπt_sigma
 = 0;

125 
	$mósuª
(
sockaddr_ö
 * 
addr
)

127 
sockÀn_t
 
Àngth
;

128 
msgcou¡
;

129 
cc
, 
cou¡
;

130 
fd_£t
 
ªady
;

131 
£ndtime
, 
ªcvtime
, 
hi°ime
;

132 
mö1
, 
mö2
, 
diff
;

133 
dñè1
, 
dñè2
;

134 
timevÆ
 
tv1
, 
tout
;

135 
∑ckë
[
PACKET_IN
], 
›ackë
[64];

136 
icmphdr
 *
i˝
 = (icmphd∏*Ë
∑ckë
;

137 
icmphdr
 *
oi˝
 = (icmphd∏*Ë
›ackë
;

138 
ùhdr
 *
ù
 = (ùhd∏*Ë
∑ckë
;

140 
mö1
 = 
mö2
 = 0x7fffffff;

141 
mö_πt
 = 0x7fffffff;

142 
mósuª_dñè
 = 
HOSTDOWN
;

143 
mósuª_dñè1
 = 
HOSTDOWN
;

146 
	`FD_ZERO
(&
ªady
);

148 
em±y
:

149 
tout
.
tv_£c
 =Åout.
tv_u£c
 = 0;

150 
	`FD_SET
(
sock_øw
, &
ªady
);

151 i‡(
	`£À˘
(
FD_SETSIZE
, &
ªady
, (
fd_£t
 *)0, (fd_£à*)0, &
tout
)) {

152 
Àngth
 = (
sockaddr_ö
);

153 
cc
 = 
	`ªcv‰om
(
sock_øw
, (*)
∑ckë
, 
PACKET_IN
, 0,

154 (
sockaddr
 *)
NULL
, &
Àngth
);

155 i‡(
cc
 < 0)

157 
em±y
;

169 
Àngth
 = (
sockaddr_ö
);

170 
oi˝
->
ty≥
 = 
ICMP_TIMESTAMP
;

171 
oi˝
->
code
 = 0;

172 
oi˝
->
checksum
 = 0;

173 
oi˝
->
un
.
echo
.
id
 = id;

174 ((
__u32
*)(
oi˝
+1))[0] = 0;

175 ((
__u32
*)(
oi˝
+1))[1] = 0;

176 ((
__u32
*)(
oi˝
+1))[2] = 0;

177 
	`FD_ZERO
(&
ªady
);

178 
msgcou¡
 = 0;

180 
acked
 = 
£qno
 = 
£qno0
 = 0;

182 
msgcou¡
 = 0; msgcou¡ < 
MSGS
; ) {

188 i‡(
£qno
 - 
acked
 > 
TRIALS
)

189  
HOSTDOWN
;

191 
oi˝
->
un
.
echo
.
£quí˚
 = ++
£qno
;

192 
oi˝
->
checksum
 = 0;

194 ()
	`gëtimeofday
 (&
tv1
, (
timez⁄e
 *)0);

195 *(
__u32
*)(
oi˝
+1Ë
	`ht⁄l
((
tv1
.
tv_£c
 % (24*60*60)) * 1000

196 + 
tv1
.
tv_u£c
 / 1000);

197 
oi˝
->
checksum
 = 
	`ö_cksum
((*)oicp, (*oicp) + 12);

199 
cou¡
 = 
	`£ndto
(
sock_øw
, (*)
›ackë
, (*
oi˝
)+12, 0,

200 (
sockaddr
 *)
addr
, (
sockaddr_ö
));

202 i‡(
cou¡
 < 0)

203  
UNREACHABLE
;

206 
	`FD_ZERO
(&
ªady
);

207 
	`FD_SET
(
sock_øw
, &
ªady
);

209 
tmo
 = 
πt
 + 
πt_sigma
;

210 
tout
.
tv_£c
 = 
tmo
/1000;

211 
tout
.
tv_u£c
 = (
tmo
 - (tmo/1000)*1000)*1000;

214 i‡((
cou¡
 = 
	`£À˘
(
FD_SETSIZE
, &
ªady
, (
fd_£t
 *)0,

215 (
fd_£t
 *)0, &
tout
)) <= 0)

218 ()
	`gëtimeofday
(&
tv1
, (
timez⁄e
 *)0);

219 
cc
 = 
	`ªcv‰om
(
sock_øw
, (*)
∑ckë
, 
PACKET_IN
, 0,

220 (
sockaddr
 *)
NULL
, &
Àngth
);

222 i‡(
cc
 < 0)

225 
i˝
 = (
icmphdr
 *)(
∑ckë
 + (
ù
->
ihl
 << 2));

226 if–
i˝
->
ty≥
 =
ICMP_TIMESTAMPREPLY
 &&

227 
i˝
->
un
.
echo
.
id
 =id && i˝->un.echo.
£quí˚
 >
£qno0
 &&

228 
i˝
->
un
.
echo
.
£quí˚
 <
£qno
) {

229 i‡(
acked
 < 
i˝
->
un
.
echo
.
£quí˚
)

230 
acked
 = 
i˝
->
un
.
echo
.
£quí˚
;

232 
ªcvtime
 = (
tv1
.
tv_£c
 % (24*60*60)) * 1000 +

233 
tv1
.
tv_u£c
 / 1000;

234 
£ndtime
 = 
	`¡ohl
(*(
__u32
*)(
i˝
+1));

235 
diff
 = 
ªcvtime
 - 
£ndtime
;

239 i‡(
diff
 < 0)

241 
πt
 = (πà* 3 + 
diff
)/4;

242 
πt_sigma
 = (πt_sigm®*3 + 
	`abs
(
diff
-
πt
))/4;

243 
msgcou¡
++;

244 
hi°ime
 = 
	`¡ohl
(((
__u32
*)(
i˝
+1))[1]);

251 i‡((
hi°ime
 & 0x80000000) != 0)

252  
NONSTDTIME
;

254 i‡(
öãø˘ive
) {

255 
	`¥ötf
(".");

256 
	`fÊush
(
°dout
);

259 
dñè1
 = 
hi°ime
 - 
£ndtime
;

266 i‡(
dñè1
 < 
BIASN
)

267 
dñè1
 +
MODULO
;

268 i‡(
dñè1
 > 
BIASP
)

269 
dñè1
 -
MODULO
;

271 
dñè2
 = 
ªcvtime
 - 
hi°ime
;

272 i‡(
dñè2
 < 
BIASN
)

273 
dñè2
 +
MODULO
;

274 i‡(
dñè2
 > 
BIASP
)

275 
dñè2
 -
MODULO
;

277 i‡(
dñè1
 < 
mö1
)

278 
mö1
 = 
dñè1
;

279 i‡(
dñè2
 < 
mö2
)

280 
mö2
 = 
dñè2
;

281 i‡(
dñè1
 + 
dñè2
 < 
mö_πt
) {

282 
mö_πt
 = 
dñè1
 + 
dñè2
;

283 
mósuª_dñè1
 = (
dñè1
 - 
dñè2
)/2 + 
PROCESSING_TIME
;

285 i‡(
diff
 < 
RANGE
) {

286 
mö1
 = 
dñè1
;

287 
mö2
 = 
dñè2
;

288 
good_exô
;

294 
good_exô
:

295 
mósuª_dñè
 = (
mö1
 - 
mö2
)/2 + 
PROCESSING_TIME
;

296  
GOOD
;

297 
	}
}

299 *
	gmy«me
, *
	ghi¢ame
;

302 
	$mósuª_›t
(
sockaddr_ö
 * 
addr
)

304 
sockÀn_t
 
Àngth
;

305 
msgcou¡
;

306 
cc
, 
cou¡
;

307 
fd_£t
 
ªady
;

308 
£ndtime
, 
ªcvtime
, 
hi°ime
, 
hi°ime1
;

309 
mö1
, 
mö2
, 
diff
;

310 
dñè1
, 
dñè2
;

311 
timevÆ
 
tv1
, 
tout
;

312 
∑ckë
[
PACKET_IN
], 
›ackë
[64];

313 
icmphdr
 *
i˝
 = (icmphd∏*Ë
∑ckë
;

314 
icmphdr
 *
oi˝
 = (icmphd∏*Ë
›ackë
;

315 
ùhdr
 *
ù
 = (ùhd∏*Ë
∑ckë
;

317 
mö1
 = 
mö2
 = 0x7fffffff;

318 
mö_πt
 = 0x7fffffff;

319 
mósuª_dñè
 = 
HOSTDOWN
;

320 
mósuª_dñè1
 = 
HOSTDOWN
;

323 
	`FD_ZERO
(&
ªady
);

324 
em±y
:

325 
tout
.
tv_£c
 =Åout.
tv_u£c
 = 0;

326 
	`FD_SET
(
sock_øw
, &
ªady
);

327 i‡(
	`£À˘
(
FD_SETSIZE
, &
ªady
, (
fd_£t
 *)0, (fd_£à*)0, &
tout
)) {

328 
Àngth
 = (
sockaddr_ö
);

329 
cc
 = 
	`ªcv‰om
(
sock_øw
, (*)
∑ckë
, 
PACKET_IN
, 0,

330 (
sockaddr
 *)
NULL
, &
Àngth
);

331 i‡(
cc
 < 0)

333 
em±y
;

345 
Àngth
 = (
sockaddr_ö
);

346 
oi˝
->
ty≥
 = 
ICMP_ECHO
;

347 
oi˝
->
code
 = 0;

348 
oi˝
->
checksum
 = 0;

349 
oi˝
->
un
.
echo
.
id
 = id;

350 ((
__u32
*)(
oi˝
+1))[0] = 0;

351 ((
__u32
*)(
oi˝
+1))[1] = 0;

352 ((
__u32
*)(
oi˝
+1))[2] = 0;

354 
	`FD_ZERO
(&
ªady
);

355 
msgcou¡
 = 0;

357 
acked
 = 
£qno
 = 
£qno0
 = 0;

359 
msgcou¡
 = 0; msgcou¡ < 
MSGS
; ) {

365 i‡–
£qno
 - 
acked
 > 
TRIALS
) {

366 
î∫o
 = 
EHOSTDOWN
;

367  
HOSTDOWN
;

369 
oi˝
->
un
.
echo
.
£quí˚
 = ++
£qno
;

370 
oi˝
->
checksum
 = 0;

372 
	`gëtimeofday
 (&
tv1
, 
NULL
);

373 ((
__u32
*)(
oi˝
+1))[0] = 
	`ht⁄l
((
tv1
.
tv_£c
 % (24*60*60)) * 1000

374 + 
tv1
.
tv_u£c
 / 1000);

375 
oi˝
->
checksum
 = 
	`ö_cksum
((*)oicp, (*oicp)+12);

377 
cou¡
 = 
	`£ndto
(
sock_øw
, (*)
›ackë
, (*
oi˝
)+12, 0,

378 (
sockaddr
 *)
addr
, (
sockaddr_ö
));

380 i‡(
cou¡
 < 0) {

381 
î∫o
 = 
EHOSTUNREACH
;

382  
UNREACHABLE
;

386 
	`FD_ZERO
(&
ªady
);

387 
	`FD_SET
(
sock_øw
, &
ªady
);

389 
tmo
 = 
πt
 + 
πt_sigma
;

390 
tout
.
tv_£c
 = 
tmo
/1000;

391 
tout
.
tv_u£c
 = (
tmo
 - (tmo/1000)*1000)*1000;

394 i‡((
cou¡
 = 
	`£À˘
(
FD_SETSIZE
, &
ªady
, (
fd_£t
 *)0,

395 (
fd_£t
 *)0, &
tout
)) <= 0)

398 ()
	`gëtimeofday
(&
tv1
, (
timez⁄e
 *)0);

399 
cc
 = 
	`ªcv‰om
(
sock_øw
, (*)
∑ckë
, 
PACKET_IN
, 0,

400 (
sockaddr
 *)
NULL
, &
Àngth
);

402 i‡(
cc
 < 0)

405 
i˝
 = (
icmphdr
 *)(
∑ckë
 + (
ù
->
ihl
 << 2));

406 i‡(
i˝
->
ty≥
 =
ICMP_ECHOREPLY
 &&

407 
∑ckë
[20] =
IPOPT_TIMESTAMP
 &&

408 
i˝
->
un
.
echo
.
id
 == id &&

409 
i˝
->
un
.
echo
.
£quí˚
 >
£qno0
 &&

410 
i˝
->
un
.
echo
.
£quí˚
 <
£qno
) {

411 
i
;

412 
__u8
 *
›t
 = 
∑ckë
+20;

414 i‡(
acked
 < 
i˝
->
un
.
echo
.
£quí˚
)

415 
acked
 = 
i˝
->
un
.
echo
.
£quí˚
;

416 i‡((
›t
[3]&0xFË!
IPOPT_TS_PRESPEC
) {

417 
	`Ârötf
(
°dîr
, "Wr⁄gÅime°am∞%d\n", 
›t
[3]&0xF);

418  
NONSTDTIME
;

420 i‡(
›t
[3]>>4) {

421 i‡((
›t
[3]>>4Ë!1 || 
ù_›t_Àn
 != 4+3*8)

422 
	`Ârötf
(
°dîr
, "OvîÊow %d h›s\n", 
›t
[3]>>4);

424 
£ndtime
 = 
ªcvtime
 = 
hi°ime
 = 
hi°ime1
 = 0;

425 
i
=0; i < (
›t
[2]-5)/8; i++) {

426 
__u32
 *
timï
 = (__u32*)(
›t
+4+
i
*8+4);

427 
__u32
 
t
 = 
	`¡ohl
(*
timï
);

429 i‡(
t
 & 0x80000000)

430  
NONSTDTIME
;

432 i‡(
i
 == 0)

433 
£ndtime
 = 
t
;

434 i‡(
i
 == 1)

435 
hi°ime
 = 
hi°ime1
 = 
t
;

436 i‡(
i
 == 2) {

437 i‡(
ù_›t_Àn
 == 4+4*8)

438 
hi°ime1
 = 
t
;

440 
ªcvtime
 = 
t
;

442 i‡(
i
 == 3)

443 
ªcvtime
 = 
t
;

446 i‡(!(
£ndtime
&
hi°ime
&
hi°ime1
&
ªcvtime
)) {

447 
	`Ârötf
(
°dîr
, "wrongÅimestamps\n");

451 
diff
 = 
ªcvtime
 - 
£ndtime
;

455 i‡(
diff
 < 0)

457 
πt
 = (πà* 3 + 
diff
)/4;

458 
πt_sigma
 = (πt_sigm®*3 + 
	`abs
(
diff
-
πt
))/4;

459 
msgcou¡
++;

461 i‡(
öãø˘ive
) {

462 
	`¥ötf
(".");

463 
	`fÊush
(
°dout
);

466 
dñè1
 = 
hi°ime
 - 
£ndtime
;

473 i‡(
dñè1
 < 
BIASN
)

474 
dñè1
 +
MODULO
;

475 i‡(
dñè1
 > 
BIASP
)

476 
dñè1
 -
MODULO
;

478 
dñè2
 = 
ªcvtime
 - 
hi°ime1
;

479 i‡(
dñè2
 < 
BIASN
)

480 
dñè2
 +
MODULO
;

481 i‡(
dñè2
 > 
BIASP
)

482 
dñè2
 -
MODULO
;

484 i‡(
dñè1
 < 
mö1
)

485 
mö1
 = 
dñè1
;

486 i‡(
dñè2
 < 
mö2
)

487 
mö2
 = 
dñè2
;

488 i‡(
dñè1
 + 
dñè2
 < 
mö_πt
) {

489 
mö_πt
 = 
dñè1
 + 
dñè2
;

490 
mósuª_dñè1
 = (
dñè1
 - 
dñè2
)/2 + 
PROCESSING_TIME
;

492 i‡(
diff
 < 
RANGE
) {

493 
mö1
 = 
dñè1
;

494 
mö2
 = 
dñè2
;

495 
good_exô
;

501 
good_exô
:

502 
mósuª_dñè
 = (
mö1
 - 
mö2
)/2 + 
PROCESSING_TIME
;

503  
GOOD
;

504 
	}
}

529 
	$ußge
() {

530 
	`Ârötf
(
°dîr
, "Usage: clockdiff [-o] <host>\n");

531 
	`exô
(1);

532 
	}
}

534 
	$dr›_rights
() {

535 #ifde‡
CAPABILITIES


536 
ˇp_t
 
ˇps
 = 
	`ˇp_öô
();

537 i‡(
	`ˇp_£t_¥oc
(
ˇps
)) {

538 
	`≥º‹
("clockdiff: cap_set_proc");

539 
	`exô
(-1);

541 
	`ˇp_‰ì
(
ˇps
);

543 i‡(
	`£tuid
(
	`gëuid
())) {

544 
	`≥º‹
("clockdiff: setuid");

545 
	`exô
(-1);

547 
	}
}

550 
	$maö
(
¨gc
, *
¨gv
[])

552 
mósuª_°©us
;

553 
ho°ít
 * 
hp
;

554 
ho°«me
[
MAX_HOSTNAMELEN
];

555 
s_î∫o
 = 0;

556 
n_î∫o
 = 0;

558 i‡(
¨gc
 < 2) {

559 
	`dr›_rights
();

560 
	`ußge
();

563 
sock_øw
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

564 
s_î∫o
 = 
î∫o
;

566 
î∫o
 = 0;

567 i‡(
	`ni˚
(-16) == -1)

568 
n_î∫o
 = 
î∫o
;

569 
	`dr›_rights
();

571 i‡(
¨gc
 == 3) {

572 i‡(
	`°rcmp
(
¨gv
[1], "-o") == 0) {

573 
ù_›t_Àn
 = 4 + 4*8;

574 
¨gv
++;

575 } i‡(
	`°rcmp
(
¨gv
[1], "-o1") == 0) {

576 
ù_›t_Àn
 = 4 + 3*8;

577 
¨gv
++;

579 
	`ußge
();

580 } i‡(
¨gc
 != 2)

581 
	`ußge
();

583 i‡(
sock_øw
 < 0) {

584 
î∫o
 = 
s_î∫o
;

585 
	`≥º‹
("clockdiff: socket");

586 
	`exô
(1);

589 i‡(
n_î∫o
 < 0) {

590 
î∫o
 = 
n_î∫o
;

591 
	`≥º‹
("clockdiff:Çice");

592 
	`exô
(1);

595 i‡(
	`ißây
(
	`fûío
(
°dö
)Ë&& ißây(fûío(
°dout
)))

596 
öãø˘ive
 = 1;

598 
id
 = 
	`gëpid
();

600 ()
	`gëho°«me
(
ho°«me
,(hostname));

601 
hp
 = 
	`gëho°by«me
(
ho°«me
);

602 i‡(
hp
 =
NULL
) {

603 
	`Ârötf
(
°dîr
, "˛ockdiff: %s: my ho°ÇŸ found\n", 
ho°«me
);

604 
	`exô
(1);

606 
my«me
 = 
	`°rdup
(
hp
->
h_«me
);

608 
hp
 = 
	`gëho°by«me
(
¨gv
[1]);

609 i‡(
hp
 =
NULL
) {

610 
	`Ârötf
(
°dîr
, "˛ockdiff: %s: ho°ÇŸ found\n", 
¨gv
[1]);

611 
	`exô
(1);

613 
hi¢ame
 = 
	`°rdup
(
hp
->
h_«me
);

615 
	`mem£t
(&
£rvî
, 0, (server));

616 
£rvî
.
sö_Ámûy
 = 
hp
->
h_addπy≥
;

617 
	`mem˝y
(&(
£rvî
.
sö_addr
.
s_addr
), 
hp
->
h_addr
, 4);

619 i‡(
	`c⁄√˘
(
sock_øw
, (
sockaddr
*)&
£rvî
, (server)) == -1) {

620 
	`≥º‹
("connect");

621 
	`exô
(1);

623 i‡(
ù_›t_Àn
) {

624 
sockaddr_ö
 
myaddr
;

625 
sockÀn_t
 
addæí
 = (
myaddr
);

626 
r•a˚
[
ù_›t_Àn
];

628 
	`mem£t
(
r•a˚
, 0, (rspace));

629 
r•a˚
[0] = 
IPOPT_TIMESTAMP
;

630 
r•a˚
[1] = 
ù_›t_Àn
;

631 
r•a˚
[2] = 5;

632 
r•a˚
[3] = 
IPOPT_TS_PRESPEC
;

633 i‡(
	`gësock«me
(
sock_øw
, (
sockaddr
*)&
myaddr
, &
addæí
) == -1) {

634 
	`≥º‹
("getsockname");

635 
	`exô
(1);

637 ((
__u32
*)(
r•a˚
+4))[0*2] = 
myaddr
.
sö_addr
.
s_addr
;

638 ((
__u32
*)(
r•a˚
+4))[1*2] = 
£rvî
.
sö_addr
.
s_addr
;

639 ((
__u32
*)(
r•a˚
+4))[2*2] = 
myaddr
.
sö_addr
.
s_addr
;

640 i‡(
ù_›t_Àn
 == 4+4*8) {

641 ((
__u32
*)(
r•a˚
+4))[2*2] = 
£rvî
.
sö_addr
.
s_addr
;

642 ((
__u32
*)(
r•a˚
+4))[3*2] = 
myaddr
.
sö_addr
.
s_addr
;

645 i‡(
	`£tsock›t
(
sock_øw
, 
IPPROTO_IP
, 
IP_OPTIONS
, 
r•a˚
, 
ù_›t_Àn
) < 0) {

646 
	`≥º‹
("ping: IP_OPTIONS (fallbackÅo icmpÅstamps)");

647 
ù_›t_Àn
 = 0;

651 i‡((
mósuª_°©us
 = (
ù_›t_Àn
 ? 
mósuª_›t
 : 
mósuª
)(&
£rvî
)) < 0) {

652 i‡(
î∫o
)

653 
	`≥º‹
("measure");

655 
	`Ârötf
(
°dîr
, "measure: unknown failure\n");

656 
	`exô
(1);

659 
mósuª_°©us
) {

660 
HOSTDOWN
:

661 
	`Ârötf
(
°dîr
, "%†i†down\n", 
hi¢ame
);

662 
	`exô
(1);

663 
NONSTDTIME
:

664 
	`Ârötf
(
°dîr
, "%†timêå™smôãd i¿®n⁄-°™d¨d f‹m©\n", 
hi¢ame
);

665 
	`exô
(1);

666 
UNREACHABLE
:

667 
	`Ârötf
(
°dîr
, "%†i†uƒóchabÀ\n", 
hi¢ame
);

668 
	`exô
(1);

675 
time_t
 
now
 = 
	`time
(
NULL
);

677 i‡(
öãø˘ive
)

678 
	`¥ötf
("\nho°=%†πt=%ld(%ld)ms/%ldm†dñè=%dms/%dm†%s", 
hi¢ame
,

679 
πt
, 
πt_sigma
, 
mö_πt
,

680 
mósuª_dñè
, 
mósuª_dñè1
,

681 
	`˘ime
(&
now
));

683 
	`¥ötf
("%ld %d %d\n", 
now
, 
mósuª_dñè
, 
mósuª_dñè1
);

685 
	`exô
(0);

686 
	}
}

	@iputils-s20140519/in6_flowlabel.h

9 
	sö6_Êowœbñ_ªq


11 
ö6_addr
 
	mÊr_d°
;

12 
__u32
 
	mÊr_œbñ
;

13 
__u8
 
	mÊr_a˘i⁄
;

14 
__u8
 
	mÊr_sh¨e
;

15 
__u16
 
	mÊr_Êags
;

16 
__u16
 
	mÊr_expúes
;

17 
__u16
 
	mÊr_lögî
;

18 
__u32
 
	m__Êr_∑d
;

22 
	#IPV6_FL_A_GET
 0

	)

23 
	#IPV6_FL_A_PUT
 1

	)

24 
	#IPV6_FL_A_RENEW
 2

	)

26 
	#IPV6_FL_F_CREATE
 1

	)

27 
	#IPV6_FL_F_EXCL
 2

	)

29 
	#IPV6_FL_S_NONE
 0

	)

30 
	#IPV6_FL_S_EXCL
 1

	)

31 
	#IPV6_FL_S_PROCESS
 2

	)

32 
	#IPV6_FL_S_USER
 3

	)

33 
	#IPV6_FL_S_ANY
 255

	)

35 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

36 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

38 
	#IPV6_FLOWLABEL_MGR
 32

	)

39 
	#IPV6_FLOWINFO_SEND
 33

	)

	@iputils-s20140519/ninfod/icmp6_nodeinfo.h

31 #i‚de‡
ICMP6_NODEINFO_H


32 
	#ICMP6_NODEINFO_H


	)

34 
	sicmp6_nodeöfo
 {

35 
icmp6_hdr
 
	micmp6_ni_hdr
;

36 
uöt8_t
 
	micmp6_ni_n⁄˚
[8];

40 
	#ni_ty≥
 
icmp6_ni_hdr
.
icmp6_ty≥


	)

41 
	#ni_code
 
icmp6_ni_hdr
.
icmp6_code


	)

42 
	#ni_cksum
 
icmp6_ni_hdr
.
icmp6_cksum


	)

43 
	#ni_qty≥
 
icmp6_ni_hdr
.
icmp6_d©a16
[0]

	)

44 
	#ni_Êags
 
icmp6_ni_hdr
.
icmp6_d©a16
[1]

	)

45 
	#ni_n⁄˚
 
icmp6_ni_n⁄˚


	)

48 
	#ICMP6_NI_QUERY
 139

	)

49 
	#ICMP6_NI_REPLY
 140

	)

52 
	#ICMP6_NI_SUBJ_IPV6
 0

	)

53 
	#ICMP6_NI_SUBJ_FQDN
 1

	)

54 
	#ICMP6_NI_SUBJ_IPV4
 2

	)

57 
	#ICMP6_NI_SUCCESS
 0

	)

58 
	#ICMP6_NI_REFUSED
 1

	)

59 
	#ICMP6_NI_UNKNOWN
 2

	)

62 
	#NI_QTYPE_NOOP
 0

	)

63 
	#NI_QTYPE_SUPTYPES
 1

	)

64 
	#NI_QTYPE_DNSNAME
 2

	)

65 
	#NI_QTYPE_NODEADDR
 3

	)

66 
	#NI_QTYPE_IPV4ADDR
 4

	)

69 #i‡
WORDS_BIGENDIAN


70 
	#NI_SUPTYPE_FLAG_COMPRESS
 0x1

	)

71 
	#NI_FQDN_FLAG_VALIDTTL
 0x1

	)

73 
	#NI_SUPTYPE_FLAG_COMPRESS
 0x0100

	)

74 
	#NI_FQDN_FLAG_VALIDTTL
 0x0100

	)

77 #i‡
WORDS_BIGENDIAN


78 
	#NI_NODEADDR_FLAG_TRUNCATE
 0x1

	)

79 
	#NI_NODEADDR_FLAG_ALL
 0x2

	)

80 
	#NI_NODEADDR_FLAG_COMPAT
 0x4

	)

81 
	#NI_NODEADDR_FLAG_LINKLOCAL
 0x8

	)

82 
	#NI_NODEADDR_FLAG_SITELOCAL
 0x10

	)

83 
	#NI_NODEADDR_FLAG_GLOBAL
 0x20

	)

85 
	#NI_NODEADDR_FLAG_TRUNCATE
 0x0100

	)

86 
	#NI_NODEADDR_FLAG_ALL
 0x0200

	)

87 
	#NI_NODEADDR_FLAG_COMPAT
 0x0400

	)

88 
	#NI_NODEADDR_FLAG_LINKLOCAL
 0x0800

	)

89 
	#NI_NODEADDR_FLAG_SITELOCAL
 0x1000

	)

90 
	#NI_NODEADDR_FLAG_GLOBAL
 0x2000

	)

93 
	#NI_IPV4ADDR_FLAG_TRUNCATE
 
NI_NODEADDR_FLAG_TRUNCATE


	)

94 
	#NI_IPV4ADDR_FLAG_ALL
 
NI_NODEADDR_FLAG_ALL


	)

	@iputils-s20140519/ninfod/ni_ifaddrs.c

63 
	~"c⁄fig.h
"

65 
	~<°rög.h
>

66 
	~<time.h
>

67 
	~<mÆloc.h
>

68 
	~<î∫o.h
>

69 
	~<uni°d.h
>

71 
	~<sys/sockë.h
>

72 
	~<asm/ty≥s.h
>

73 
	~<löux/√éök.h
>

74 
	~<löux/π√éök.h
>

75 
	~<sys/ty≥s.h
>

76 
	~<sys/sockë.h
>

77 
	~<√çackë/∑ckë.h
>

78 
	~<√t/ëhî√t.h
>

79 
	~<sys/uio.h
>

80 
	~<√t/if.h
>

81 
	~<√t/if_¨p.h
>

82 
	~"ni_iÁddrs.h
"

83 
	~<√töë/ö.h
>

85 #ifde‡
_USAGI_LIBINET6


86 
	~"libc-com∑t.h
"

91 c⁄° *
RCSID
 
__©åibuã__
 ((
unu£d
)) = "$USAGI:Çi_ifaddrs.c,v 1.8 2007-10-11 06:25:21 yoshfuji Exp $ based on USAGI: ifaddrs.c,v 1.18 2002/03/06 01:50:46 yoshfuji Exp";

94 
	s∆msg_li°
 {

95 
∆msg_li°
 *
	m∆m_√xt
;

96 
∆msghdr
 *
	m∆h
;

97 
	msize
;

98 
time_t
 
	m£q
;

101 #i‚de‡
IFA_LOCAL


102 
	sπmaddr_iÁm≠
 {

103 *
	maddªss
;

104 *
	mloˇl
;

105 *
	mbrﬂdˇ°
;

106 
	maddªss_Àn
;

107 
	mloˇl_Àn
;

108 
	mbrﬂdˇ°_Àn
;

113 
	$∆_£ndªq
(
sd
, 
ªque°
, 
Êags
, *
£q
)

115 
ªqbuf
[
	`NLMSG_ALIGN
((
∆msghdr
)Ë+ NLMSG_ALIGN((
πgímsg
))];

116 
sockaddr_∆
 
∆addr
;

117 
∆msghdr
 *
ªq_hdr
;

118 
πgímsg
 *
ªq_msg
;

119 
time_t
 
t
 = 
	`time
(
NULL
);

121 i‡(
£q
)

122 *
£q
 = 
t
;

123 
	`mem£t
(&
ªqbuf
, 0, (reqbuf));

124 
ªq_hdr
 = (
∆msghdr
 *Ë
ªqbuf
;

125 
ªq_msg
 = (
πgímsg
 *Ë
	`NLMSG_DATA
(
ªq_hdr
);

126 
ªq_hdr
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ªq_msg
));

127 
ªq_hdr
->
∆msg_ty≥
 = 
ªque°
;

128 
ªq_hdr
->
∆msg_Êags
 = 
Êags
 | 
NLM_F_REQUEST
;

129 
ªq_hdr
->
∆msg_pid
 = 0;

130 
ªq_hdr
->
∆msg_£q
 = 
t
;

131 
ªq_msg
->
πgí_Ámûy
 = 
AF_UNSPEC
;

132 
	`mem£t
(&
∆addr
, 0, (nladdr));

133 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

134  (
	`£ndto
(
sd
, (*Ë
ªq_hdr
,Ñeq_hdr->
∆msg_Àn
, 0, (
sockaddr
 *Ë&
∆addr
, (nladdr)));

135 
	}
}

137 
	$∆_ªcvmsg
(
sd
, 
ªque°
, 
£q
, *
buf
, 
size_t
 
buÊí
, *
Êags
)

139 
msghdr
 
msg
;

140 
iovec
 
iov
 = { 
buf
, 
buÊí
 };

141 
sockaddr_∆
 
∆addr
;

142 
ªad_Àn
;

145 
msg
.
msg_«me
 = (*Ë&
∆addr
;

146 
msg
.
msg_«mñí
 = (
∆addr
);

147 
msg
.
msg_iov
 = &
iov
;

148 
msg
.
msg_iovÀn
 = 1;

149 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

150 
msg
.
msg_c⁄åﬁÀn
 = 0;

151 
msg
.
msg_Êags
 = 0;

152 
ªad_Àn
 = 
	`ªcvmsg
(
sd
, &
msg
, 0);

153 i‡((
ªad_Àn
 < 0 && 
î∫o
 =
EINTR
)

154 || (
msg
.
msg_Êags
 & 
MSG_TRUNC
))

156 i‡(
Êags
)

157 *
Êags
 = 
msg
.
msg_Êags
;

160  
ªad_Àn
;

161 
	}
}

163 
	$∆_gëmsg
(
sd
, 
ªque°
, 
£q
, 
∆msghdr
 **
∆hp
, *
d⁄e
)

165 
∆msghdr
 *
nh
;

166 
size_t
 
bufsize
 = 65536, 
œ°bufsize
 = 0;

167 *
buff
 = 
NULL
;

168 
ªsu…
 = 0, 
ªad_size
;

169 
msg_Êags
;

170 
pid_t
 
pid
 = 
	`gëpid
();

172 *
√wbuff
 = 
	`ªÆloc
(
buff
, 
bufsize
);

173 i‡(
√wbuff
 =
NULL
 || 
bufsize
 < 
œ°bufsize
) {

174 
	`‰ì
(
√wbuff
);

175 
ªsu…
 = -1;

178 
buff
 = 
√wbuff
;

179 
ªsu…
 = 
ªad_size
 = 
	`∆_ªcvmsg
(
sd
, 
ªque°
, 
£q
, 
buff
, 
bufsize
, &
msg_Êags
);

180 i‡(
ªad_size
 < 0 || (
msg_Êags
 & 
MSG_TRUNC
)) {

181 
œ°bufsize
 = 
bufsize
;

182 
bufsize
 *= 2;

185 i‡(
ªad_size
 == 0)

187 
nh
 = (
∆msghdr
 *Ë
buff
;

188 
nh
 = (
∆msghdr
 *Ë
buff
; 
	`NLMSG_OK
“h, 
ªad_size
);Çh = (∆msghd∏*Ë
	`NLMSG_NEXT
(nh,Ñead_size)) {

189 i‡(
nh
->
∆msg_pid
 !
pid
 ||Çh->
∆msg_£q
 !
£q
)

191 i‡(
nh
->
∆msg_ty≥
 =
NLMSG_DONE
) {

192 (*
d⁄e
)++;

195 i‡(
nh
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

196 
∆msgîr
 *
∆îr
 = (∆msgî∏*Ë
	`NLMSG_DATA
(
nh
);

197 
ªsu…
 = -1;

198 i‡(
nh
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
∆msgîr
)))

199 
î∫o
 = 
EIO
;

201 
î∫o
 = -
∆îr
->
îr‹
;

207 i‡(
ªsu…
 < 0)

208 i‡(
buff
) {

209 
ßved_î∫o
 = 
î∫o
;

210 
	`‰ì
(
buff
);

211 
buff
 = 
NULL
;

212 
î∫o
 = 
ßved_î∫o
;

214 *
∆hp
 = (
∆msghdr
 *Ë
buff
;

215  
ªsu…
;

216 
	}
}

218 
	$∆_gëli°
(
sd
, 
£q
, 
ªque°
, 
∆msg_li°
 **
∆m_li°
, ∆msg_li° **
∆m_íd
)

220 
∆msghdr
 *
∆h
 = 
NULL
;

221 
°©us
;

222 
d⁄e
 = 0;

224 
°©us
 = 
	`∆_£ndªq
(
sd
, 
ªque°
, 
NLM_F_ROOT
 | 
NLM_F_MATCH
, &
£q
);

225 i‡(
°©us
 < 0)

226  
°©us
;

227 i‡(
£q
 == 0)

228 
£q
 = (Ë
	`time
(
NULL
);

229 !
d⁄e
) {

230 
°©us
 = 
	`∆_gëmsg
(
sd
, 
ªque°
, 
£q
, &
∆h
, &
d⁄e
);

231 i‡(
°©us
 < 0)

232  
°©us
;

233 i‡(
∆h
) {

234 
∆msg_li°
 *
∆m_√xt
 = (∆msg_li° *Ë
	`mÆloc
((nlmsg_list));

235 i‡(
∆m_√xt
 =
NULL
) {

236 
ßved_î∫o
 = 
î∫o
;

237 
	`‰ì
(
∆h
);

238 
î∫o
 = 
ßved_î∫o
;

239 
°©us
 = -1;

241 
∆m_√xt
->∆m_√xà
NULL
;

242 
∆m_√xt
->
∆h
 = (
∆msghdr
 *)Çlh;

243 
∆m_√xt
->
size
 = 
°©us
;

244 
∆m_√xt
->
£q
 = seq;

245 i‡(*
∆m_li°
 =
NULL
) {

246 *
∆m_li°
 = 
∆m_√xt
;

247 *
∆m_íd
 = 
∆m_√xt
;

249 (*
∆m_íd
)->
∆m_√xt
 =Çlm_next;

250 *
∆m_íd
 = 
∆m_√xt
;

255  
°©us
 >0 ? 
£q
 : status;

256 
	}
}

259 
	$‰ì_∆msgli°
(
∆msg_li°
 *
∆m0
)

261 
∆msg_li°
 *
∆m
, *
∆m_√xt
;

262 
ßved_î∫o
;

263 i‡(!
∆m0
)

265 
ßved_î∫o
 = 
î∫o
;

266 
∆m
 = 
∆m0
;

267 
∆m
) {

268 if(
∆m
->
∆h
)

269 
	`‰ì
(
∆m
->
∆h
);

270 
∆m_√xt
 = 
∆m
->nlm_next;

271 
	`‰ì
(
∆m
);

272 
∆m
 = 
∆m_√xt
;

274 
î∫o
 = 
ßved_î∫o
;

275 
	}
}

277 
	$‰ì_d©a
(*
d©a
)

279 
ßved_î∫o
 = 
î∫o
;

280 i‡(
d©a
 !
NULL
)

281 
	`‰ì
(
d©a
);

282 
î∫o
 = 
ßved_î∫o
;

283 
	}
}

286 
	$∆_˛o£
(
sd
)

288 
ßved_î∫o
 = 
î∫o
;

289 i‡(
sd
 >= 0)

290 
	`˛o£
(
sd
);

291 
î∫o
 = 
ßved_î∫o
;

292 
	}
}

295 
	$∆_›í
()

297 
sockaddr_∆
 
∆addr
;

298 
sd
;

300 
sd
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
);

301 i‡(
sd
 < 0)

303 
	`mem£t
(&
∆addr
, 0, (nladdr));

304 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

305 i‡(
	`böd
(
sd
, (
sockaddr
 *Ë&
∆addr
, (nladdr)) < 0) {

306 
	`∆_˛o£
(
sd
);

309  
sd
;

310 
	}
}

313 
	$ni_iÁddrs
(
ni_iÁddrs
 **
iÁp
, 
ß_Ámûy_t
 
Ámûy
)

315 
sd
;

316 
∆msg_li°
 *∆msg_li°, *
∆msg_íd
, *
∆m
;

318 
i˙t
;

319 
size_t
 
dÀn
, 
xÀn
;

320 
uöt32_t
 
max_ifödex
 = 0;

322 
pid_t
 
pid
 = 
	`gëpid
();

323 
£q
 = 0;

324 
buûd
;

328 
i˙t
 = 
dÀn
 = 
xÀn
 = 0;

329 
∆msg_li°
 = 
∆msg_íd
 = 
NULL
;

331 i‡(
iÁp
)

332 *
iÁp
 = 
NULL
;

336 
sd
 = 
	`∆_›í
();

337 i‡(
sd
 < 0)

342 i‡((
£q
 = 
	`∆_gëli°
(
sd
, seq + 1, 
RTM_GETADDR
, &
∆msg_li°
, &
∆msg_íd
)) < 0) {

343 
	`‰ì_∆msgli°
(
∆msg_li°
);

344 
	`∆_˛o£
(
sd
);

350 
buûd
 = 0; build <= 1; build++) {

351 
ni_iÁddrs
 *
iÊ
 = 
NULL
, *
iÁ
 = NULL;

352 
∆msghdr
 *
∆h
, *
∆h0
;

353 *
d©a
 = 
NULL
, *
xd©a
 = NULL;

354 #i‚de‡
IFA_LOCAL


355 
πmaddr_iÁm≠
 
iÁm≠
;

358 i‡(
buûd
) {

359 
iÁ
 = 
d©a
 = 
	`ˇŒoc
(1, 
	`NLMSG_ALIGN
((
ni_iÁddrs
[
i˙t
]))

360 + 
dÀn
 + 
xÀn
);

361 i‡(
iÁp
 !
NULL
)

362 *
iÁp
 = 
iÁ
;

364 
	`‰ì_d©a
(
d©a
);

367 i‡(
d©a
 =
NULL
) {

368 
	`‰ì_d©a
(
d©a
);

371 
iÊ
 = 
NULL
;

372 
d©a
 +
	`NLMSG_ALIGN
((
ni_iÁddrs
)Ë* 
i˙t
;

373 
xd©a
 = 
d©a
 + 
dÀn
;

376 
∆m
 = 
∆msg_li°
;Çlm;Çlm =Çlm->
∆m_√xt
) {

377 
∆mÀn
 = 
∆m
->
size
;

378 i‡(!(
∆h0
 = 
∆m
->
∆h
))

380 
∆h
 = 
∆h0
; 
	`NLMSG_OK
“lh, 
∆mÀn
);Çlh = 
	`NLMSG_NEXT
(nlh,Çlmlen)) {

381 
iÁddrmsg
 *
iÁm
 = 
NULL
;

382 
π©å
 *
πa
;

384 
size_t
 
∆m_°ru˘_size
 = 0;

385 
ß_Ámûy_t
 
∆m_Ámûy
 = 0;

386 
uöt32_t
 
∆m_ödex
 = 0;

387 
∆m_Êags
;

388 
size_t
 
πasize
;

390 #i‚de‡
IFA_LOCAL


391 
	`mem£t
(&
iÁm≠
, 0, (ifamap));

395 i‡(
∆h
->
∆msg_pid
 !
pid
 ||Çlh->
∆msg_£q
 !
∆m
->
£q
)

397 i‡(
∆h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

400 
∆h
->
∆msg_ty≥
) {

401 
RTM_NEWADDR
:

402 
iÁm
 = (
iÁddrmsg
 *Ë
	`NLMSG_DATA
(
∆h
);

403 
∆m_°ru˘_size
 = (*
iÁm
);

404 
∆m_Ámûy
 = 
iÁm
->
iÁ_Ámûy
;

405 
∆m_ödex
 = 
iÁm
->
iÁ_ödex
;

406 
∆m_Êags
 = 
iÁm
->
iÁ_Êags
;

407 i‡(
Ámûy
 && 
∆m_Ámûy
 != family)

409 i‡(
buûd
) {

410 
iÁ
->
iÁ_ifödex
 = 
∆m_ödex
;

411 
iÁ
->
iÁ_Êags
 = 
∆m_Êags
;

418 i‡(!
buûd
) {

419 i‡(
max_ifödex
 < 
∆m_ödex
)

420 
max_ifödex
 = 
∆m_ödex
;

422 i‡(
iÊ
 !
NULL
)

423 
iÊ
->
iÁ_√xt
 = 
iÁ
;

426 
πasize
 = 
	`NLMSG_PAYLOAD
(
∆h
, 
∆mÀn
Ë- 
	`NLMSG_ALIGN
(
∆m_°ru˘_size
);

427 
πa
 = (
π©å
 *Ë(((*Ë
	`NLMSG_DATA
(
∆h
)) +

428 
	`NLMSG_ALIGN
(
∆m_°ru˘_size
));

429 
	`RTA_OK
(
πa
, 
πasize
);

430 
πa
 = 
	`RTA_NEXT
‘è, 
πasize
)) {

431 *
πad©a
 = 
	`RTA_DATA
(
πa
);

432 
size_t
 
π≠aylﬂd
 = 
	`RTA_PAYLOAD
(
πa
);

434 
∆h
->
∆msg_ty≥
) {

435 
RTM_NEWADDR
:

436 i‡(
∆m_Ámûy
 =
AF_PACKET
)

438 
πa
->
πa_ty≥
) {

439 #i‚de‡
IFA_LOCAL


440 
IFA_ADDRESS
:

441 
iÁm≠
.
addªss
 = 
πad©a
;

442 
iÁm≠
.
addªss_Àn
 = 
π≠aylﬂd
;

444 
IFA_LOCAL
:

445 
iÁm≠
.
loˇl
 = 
πad©a
;

446 
iÁm≠
.
loˇl_Àn
 = 
π≠aylﬂd
;

448 
IFA_BROADCAST
:

449 
iÁm≠
.
brﬂdˇ°
 = 
πad©a
;

450 
iÁm≠
.
brﬂdˇ°_Àn
 = 
π≠aylﬂd
;

452 
IFA_LABEL
:

454 
IFA_UNSPEC
:

457 
IFA_LOCAL
:

458 i‡(!
buûd
)

459 
dÀn
 +
	`NLMSG_ALIGN
(
π≠aylﬂd
);

461 
	`mem˝y
(
d©a
, 
πad©a
, 
π≠aylﬂd
);

462 
iÁ
->
iÁ_addr
 = 
d©a
;

463 
d©a
 +
	`NLMSG_ALIGN
(
π≠aylﬂd
);

467 
IFA_CACHEINFO
:

468 i‡(!
buûd
)

469 
xÀn
 +
	`NLMSG_ALIGN
(
π≠aylﬂd
);

471 
	`mem˝y
(
xd©a
, 
πad©a
, 
π≠aylﬂd
);

472 
iÁ
->
iÁ_ˇcheöfo
 = 
xd©a
;

473 
xd©a
 +
	`NLMSG_ALIGN
(
π≠aylﬂd
);

479 #i‚de‡
IFA_LOCAL


480 i‡(
∆h
->
∆msg_ty≥
 =
RTM_NEWADDR
 && 
∆m_Ámûy
 !
AF_PACKET
) {

481 i‡(!
iÁm≠
.
loˇl
) {

482 
iÁm≠
.
loˇl
 = iÁm≠.
addªss
;

483 
iÁm≠
.
loˇl_Àn
 = iÁm≠.
addªss_Àn
;

485 i‡(!
iÁm≠
.
addªss
) {

486 
iÁm≠
.
addªss
 = iÁm≠.
loˇl
;

487 
iÁm≠
.
addªss_Àn
 = iÁm≠.
loˇl_Àn
;

489 i‡(
iÁm≠
.
addªss_Àn
 !iÁm≠.
loˇl_Àn
 ||

490 (
iÁm≠
.
addªss
 !
NULL
 &&

491 
	`memcmp
(
iÁm≠
.
addªss
, iÁm≠.
loˇl
, iÁm≠.
addªss_Àn
))) {

493 
iÁm≠
.
brﬂdˇ°
 = iÁm≠.
addªss
;

494 
iÁm≠
.
brﬂdˇ°_Àn
 = iÁm≠.
addªss_Àn
;

495 
iÁm≠
.
addªss
 = iÁm≠.
loˇl
;

496 
iÁm≠
.
addªss_Àn
 = iÁm≠.
loˇl_Àn
;

498 i‡(
iÁm≠
.
addªss
) {

499 i‡(!
buûd
)

500 
dÀn
 +
	`NLMSG_ALIGN
(
iÁm≠
.
addªss_Àn
);

502 
iÁ
->
iÁ_addr
 = (
sockaddr
 *Ë
d©a
;

503 
	`mem˝y
(
iÁ
->
iÁ_addr
, 
iÁm≠
.
addªss
, iÁm≠.
addªss_Àn
);

504 
d©a
 +
	`NLMSG_ALIGN
(
iÁm≠
.
addªss_Àn
);

509 i‡(!
buûd
) {

510 
i˙t
++;

512 
iÊ
 = 
iÁ
++;

516 i‡(!
buûd
) {

517 i‡(
i˙t
 =0 && (
dÀn
 + 
xÀn
 == 0)) {

518 i‡(
iÁp
 !
NULL
)

519 *
iÁp
 = 
NULL
;

527 
	`‰ì_∆msgli°
(
∆msg_li°
);

528 
	`∆_˛o£
(
sd
);

530 
	}
}

533 
	$ni_‰ìiÁddrs
(
ni_iÁddrs
 *
iÁ
)

535 
	`‰ì
(
iÁ
);

536 
	}
}

	@iputils-s20140519/ninfod/ni_ifaddrs.h

30 #i‚de‡
NODEINFO_IFADDRS_H


31 
	#NODEINFO_IFADDRS_H


	)

33 
	sni_iÁddrs
 {

34 
ni_iÁddrs
 *
	miÁ_√xt
;

35 
	miÁ_ifödex
;

36 
	miÁ_Êags
;

37 *
	miÁ_addr
;

38 
iÁ_ˇcheöfo
 *
	miÁ_ˇcheöfo
;

41 
ni_iÁddrs
(ni_iÁddr†**
iÁp
, 
ß_Ámûy_t
 
Ámûy
);

42 
ni_‰ìiÁddrs
(
ni_iÁddrs
 *
iÁ
);

	@iputils-s20140519/ninfod/ninfod.c

35 #i‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

39 #i‡
HAVE_SYS_TYPES_H


40 
	~<sys/ty≥s.h
>

42 #i‡
STDC_HEADERS


43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<°ddef.h
>

46 
	~<°d¨g.h
>

48 #i‡
HAVE_STDLIB_H


49 
	~<°dlib.h
>

53 #i‡
HAVE_STRING_H


54 #i‡!
STDC_HEADERS
 && 
HAVE_MEMORY_H


55 
	~<mem‹y.h
>

57 
	~<°rög.h
>

59 #i‡
HAVE_STRINGS_H


60 
	~<°rögs.h
>

62 #i‡
HAVE_INTTYPES_H


63 
	~<öây≥s.h
>

65 #i‡
HAVE_STDINT_H


66 
	~<°döt.h
>

69 #i‡
HAVE_LIMITS_H


70 
	~<limôs.h
>

72 #i‡
HAVE_UNISTD_H


73 
	~<uni°d.h
>

76 #ifde‡
TIME_WITH_SYS_TIME


77 
	~<sys/time.h
>

78 
	~<time.h
>

80 #ifde‡
HAVE_SYS_TIME_H


81 
	~<sys/time.h
>

83 
	~<time.h
>

87 #i‡
HAVE_SYS_UIO_H


88 
	~<sys/uio.h
>

91 
	~<sys/sockë.h
>

93 #i‡
HAVE_NETINET_IN_H


94 
	~<√töë/ö.h
>

97 #i‡
HAVE_NETINET_ICMP6_H


98 
	~<√töë/icmp6.h
>

100 #i‚de‡
HAVE_STRUCT_ICMP6_NODEINFO


101 
	~"icmp6_nodeöfo.h
"

104 #i‡
HAVE_NETDB_H


105 
	~<√tdb.h
>

107 
	~<î∫o.h
>

109 
	~<sig«l.h
>

111 #i‡
HAVE_SYSLOG_H


112 
	~<sy¶og.h
>

115 #i‡
HAVE_PWD_H


116 
	~<pwd.h
>

119 #i‡
HAVE_SYS_CAPABILITY_H


120 
	~<sys/¥˘l.h
>

121 
	~<sys/ˇ∑bûôy.h
>

124 
	~"nöfod.h
"

126 #i‚de‡
off£tof


127 
	#off£tof
(
aggªg©e
,
membî
Ë((
size_t
)&(◊ggªg©ê*)0)->membî)

	)

132 *
RCSID
 
__©åibuã__
 ((
unu£d
)) = "$USAGI:Çinfod.c,v 1.34 2003-01-15 06:41:23 mk Exp $";

135 
	gsock
;

136 
	gd´m⁄ized
;

138 *
	g≠≤ame
;

139 
	g›t_d
 = 0;

140 
	g›t_h
 = 0;

141 *
	g›t_p
 = 
NINFOD_PIDFILE
;

142 
	ggŸ_sig«l
 = 0;

143 
	g›t_v
 = 0;

144 
uid_t
 
	g›t_u
;

146 
	gùv6_pktöfo
 = 
IPV6_PKTINFO
;

149 #i‡
ENABLE_DEBUG


150 c⁄° 
__ölöe__
 * 
	$log_Àvñ
(
¥i‹ôy
) {

151 
¥i‹ôy
) {

152 
LOG_EMERG
:  "EMERG";

153 
LOG_ALERT
:  "ALERT";

154 
LOG_CRIT
:  "CRIT";

155 
LOG_ERR
:  "ERR";

156 
LOG_WARNING
:  "WARNING";

157 
LOG_NOTICE
:  "NOTICE";

158 
LOG_INFO
:  "INFO";

159 
LOG_DEBUG
:  "DEBUG";

162 
	}
}

164 
	$°dîæog
(
¥i
, *
fmt
, ...)

166 
va_li°
 
≠
;

167 
ebuf
[512];

168 *
buf
;

169 
size_t
 
buÊí
;

171 
	`va_°¨t
(
≠
, 
fmt
);

173 
buf
 = 
ebuf
, 
buÊí
 = (ebuf);

174 
buÊí
 < 
SIZE_MAX
 / 2;

175 
	`‰ì
(
buf
 !
ebuf
 ? bu‡: 
NULL
), bu‡NULL, 
buÊí
 *= 2) {

176 
size_t
 
ªm
;

177 
size_t
 
ªs
;

179 
buf
 = 
	`mÆloc
(
buÊí
);

180 i‡(!
buf
)

183 
ªm
 = 
buÊí
;

185 
ªs
 = 
	`¢¥ötf
(
buf
, 
ªm
, "[%s] ", 
	`log_Àvñ
(
¥i
));

186 i‡(
ªs
 >
ªm
)

188 
ªm
 -
ªs
;

190 
ªs
 = 
	`v¢¥ötf
(
buf
 +Ñes, 
ªm
, 
fmt
, 
≠
);

192 i‡(
ªs
 >
ªm
)

197 i‡(
buf
) {

198 
	`Âuts
(
buf
, 
°dîr
);

199 
	`‰ì
(
buf
 !
ebuf
 ? bu‡: 
NULL
);

202 
	`va_íd
(
≠
);

203 
	}
}

207 
__ölöe__
 
	$›í_sock
()

209  
	`sockë
(
PF_INET6
, 
SOCK_RAW
, 
IPPROTO_ICMPV6
);

210 
	}
}

212 
	$£t_ªcvpktöfo
(
sock
)

214 
⁄
, 
ªt
;

216 
⁄
 = 1;

218 #i‡
	`deföed
(
IPV6_RECVPKTINFO
)

219 
ªt
 = 
	`£tsock›t
(
sock
,

220 
IPPROTO_IPV6
, 
IPV6_RECVPKTINFO
,

221 &
⁄
, (on));

222 i‡(!
ªt
)

224 #i‡
	`deföed
(
IPV6_2292PKTINFO
)

225 
ªt
 = 
	`£tsock›t
(
sock
,

226 
IPPROTO_IPV6
, 
IPV6_2292PKTINFO
,

227 &
⁄
, (on));

228 i‡(!
ªt
) {

229 
ùv6_pktöfo
 = 
IPV6_2292PKTINFO
;

233 
	`DEBUG
(
LOG_ERR
, "setsockopt(IPV6_RECVPKTINFO/IPV6_2292PKTINFO): %s\n",

234 
	`°ªº‹
(
î∫o
));

236 
	`DEBUG
(
LOG_ERR
, "setsockopt(IPV6_RECVPKTINFO): %s\n",

237 
	`°ªº‹
(
î∫o
));

240 
ªt
 = 
	`£tsock›t
(
sock
,

241 
IPPROTO_IPV6
, 
IPV6_PKTINFO
,

242 &
⁄
, (on));

243 i‡(!
ªt
)

246 
	`DEBUG
(
LOG_ERR
, "setsockopt(IPV6_PKTINFO): %s\n",

247 
	`°ªº‹
(
î∫o
));

251 
	}
}

253 
__ölöe__
 
	$öô_sock
(
sock
)

255 
icmp6_fûãr
 
fûãr
;

256 #i‡
NEED_IPV6CHECKSUM


257 
i
;

259 
i
 = 
	`off£tof
(
icmp6_nodeöfo
, 
ni_cksum
);

260 i‡(
	`£tsock›t
(
sock
,

261 
IPPROTO_IPV6
, 
IPV6_CHECKSUM
,

262 &
i
, (i)) < 0) {

263 
	`DEBUG
(
LOG_ERR
, "setsockopt(IPV6_CHECKSUM): %s\n",

264 
	`°ªº‹
(
î∫o
));

269 
	`ICMP6_FILTER_SETBLOCKALL
(&
fûãr
);

270 
	`ICMP6_FILTER_SETPASS
(
ICMP6_NI_QUERY
, &
fûãr
);

271 i‡(
	`£tsock›t
(
sock
,

272 
IPPROTO_ICMPV6
, 
ICMP6_FILTER
,

273 &
fûãr
, (filter)) < 0) {

274 
	`DEBUG
(
LOG_ERR
, "setsockopt(ICMP6_FILTER): %s\n",

275 
	`°ªº‹
(
î∫o
));

279 i‡(
	`£t_ªcvpktöfo
(
sock
) < 0)

283 
	}
}

286 
	$ni_ªcv
(
∑ckëc⁄ãxt
 *
p
)

288 
sock
 = 
p
->sock;

289 
iovec
 
iov
[1];

290 
msghdr
 
msgh
;

291 
ªcvcbuf
[
	`CMSG_SPACE
((
p
->
pktöfo
))];

292 
cmsghdr
 *
cmsg
;

293 
cc
;

295 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

297 
	`mem£t
(&
iov
, 0, (iov));

298 
iov
[0].
iov_ba£
 = 
p
->
quîy
;

299 
iov
[0].
iov_Àn
 = (
p
->
quîy
);

301 
	`mem£t
(&
msgh
, 0, (msgh));

302 
msgh
.
msg_«me
 = (
sockaddr
 *)&
p
->
addr
;

303 
msgh
.
msg_«mñí
 = (
p
->
addr
);

304 
msgh
.
msg_iov
 = 
iov
;

305 
msgh
.
msg_iovÀn
 = 1;

306 
msgh
.
msg_c⁄åﬁ
 = 
ªcvcbuf
;

307 
msgh
.
msg_c⁄åﬁÀn
 = (
ªcvcbuf
);

309 i‡((
cc
 = 
	`ªcvmsg
(
sock
, &
msgh
, 0)) < 0)

312 
p
->
quîyÀn
 = 
cc
;

313 
p
->
addæí
 = 
msgh
.
msg_«mñí
;

315 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msgh
); cmsg;

316 
cmsg
 = 
	`CMSG_NXTHDR
(&
msgh
, cmsg)) {

317 i‡(
cmsg
->
cmsg_Àvñ
 =
IPPROTO_IPV6
 &&

318 (
cmsg
->
cmsg_ty≥
 =
IPV6_PKTINFO


319 #i‡
	`deföed
(
IPV6_2292PKTINFO
)

320 || 
cmsg
->
cmsg_ty≥
 =
IPV6_2292PKTINFO


323 
	`mem˝y
(&
p
->
pktöfo
, 
	`CMSG_DATA
(
cmsg
), (p->pktinfo));

329 
	}
}

331 
	$ni_£nd
(
∑ckëc⁄ãxt
 *
p
)

333 
sock
 = 
p
->sock;

334 
iovec
 
iov
[2];

335 
cbuf
[
	`CMSG_SPACE
((
p
->
pktöfo
))];

336 
msghdr
 
msgh
;

337 
cmsghdr
 *
cmsg
;

338 
cc
;

340 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

342 
	`mem£t
(&
iov
, 0, (iov));

343 
iov
[0].
iov_ba£
 = &
p
->
ª∂y
;

344 
iov
[0].
iov_Àn
 = (
p
->
ª∂y
);

345 
iov
[1].
iov_ba£
 = 
p
->
ª∂yd©a
;

346 
iov
[1].
iov_Àn
 = 
p
->
ª∂yd©Æí
;

348 
	`mem£t
(&
msgh
, 0, (msgh));

349 
msgh
.
msg_«me
 = (
sockaddr
 *)&
p
->
addr
;

350 
msgh
.
msg_«mñí
 = 
p
->
addæí
;

351 
msgh
.
msg_iov
 = 
iov
;

352 
msgh
.
msg_iovÀn
 = 
p
->
ª∂yd©a
 ? 2 : 1;

354 
msgh
.
msg_c⁄åﬁ
 = 
cbuf
;

355 
msgh
.
msg_c⁄åﬁÀn
 = (
cbuf
);

357 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msgh
);

358 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_IPV6
;

359 
cmsg
->
cmsg_ty≥
 = 
ùv6_pktöfo
;

360 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
p
->
pktöfo
));

361 
	`mem˝y
(
	`CMSG_DATA
(
cmsg
), &
p
->
pktöfo
, (p->pktinfo));

363 
msgh
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

365 i‡(
p
->
dñay
) {

366 #i‡
HAVE_NANOSLEEP


367 
time•ec
 
ts
, 
πs
;

368 
îr
 = 0;

370 
πs
.
tv_£c
 = 
p
->
dñay
 / 1000000;

371 
πs
.
tv_n£c
 = ()(
p
->
dñay
 % 1000000) * 1000;

374 
ts
 = 
πs
;

375 
îr
 = 
	`«no¶ìp
(&
ts
, &
πs
);

376 } 
îr
 < 0);

378 
	`u¶ìp
(
p
->
dñay
);

382 
cc
 = 
	`£ndmsg
(
sock
, &
msgh
, 0);

383 i‡(
cc
 < 0)

384 
	`DEBUG
(
LOG_DEBUG
, "£ndmsg(): %s\n", 
	`°ªº‹
(
î∫o
));

386 
	`ni_‰ì
(
p
->
ª∂yd©a
);

387 
	`ni_‰ì
(
p
);

389  
cc
;

390 
	}
}

393 
	$sig_h™dÀr
(
sig
)

395 i‡(!
gŸ_sig«l
)

396 
	`DEBUG
(
LOG_INFO
, "sög«l(%dËª˚ived, quôtög.\n", 
sig
);

397 
gŸ_sig«l
 = 1;

398 
	}
}

400 
	$£tup_sigh™dÀrs
()

402 
siga˘i⁄
 
a˘
;

403 
sig£t_t
 
smask
;

404 
	`sigem±y£t
(&
smask
);

405 
	`sigadd£t
(&
smask
, 
SIGHUP
);

406 
	`sigadd£t
(&
smask
, 
SIGINT
);

407 
	`sigadd£t
(&
smask
, 
SIGQUIT
);

408 
	`sigadd£t
(&
smask
, 
SIGTERM
);

410 
	`mem£t
(&
a˘
, 0, (act));

411 
a˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

412 
a˘
.
ß_mask
 = 
smask
;

414 
	`siga˘i⁄
(
SIGHUP
, &
a˘
, 
NULL
);

415 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

416 
	`siga˘i⁄
(
SIGQUIT
, &
a˘
, 
NULL
);

417 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

418 
	}
}

420 
	$£t_logfûe
()

422 
	`£tbuf
(
°dîr
, 
NULL
);

423 #i‡
ENABLE_DEBUG


424 
	`›ílog
(
NINFOD
, 0, 
LOG_USER
);

426 
	}
}

428 
	$˛ónup_pidfûe
()

430 
îr
;

432 i‡(
d´m⁄ized
 && 
›t_p
) {

433 
îr
 = 
	`u∆ök
(
›t_p
);

434 
	`DEBUG
(
LOG_ERR
, "failedÅo unlink file '%s' : %s\n",

435 
›t_p
, 
	`°ªº‹
(
î∫o
));

437 
	}
}

439 
FILE
 *
	$f›í_ex˛
(c⁄° *
fûe
)

441 #i‚de‡
__löux__


442 
fd
;

443 
FILE
 *
Â
;

445 
fd
 = 
	`›í
(
fûe
, 
O_CREAT
 | 
O_RDWR
 | 
O_EXCL
,

446 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

447 i‡(
fd
 < 0)

448  
NULL
;

450  
	`fd›í
(
fûe
, "w+");

452  
	`f›í
(
fûe
, "w+x");

454 
	}
}

456 
	$do_d´m⁄ize
()

458 
FILE
 *
Â
 = 
NULL
;

459 
pid_t
 
pid
;

461 i‡(
›t_p
) {

462 i‡(!
	`ac˚ss
(
›t_p
, 
R_OK
)) {

463 i‡((
Â
 = 
	`f›í
(
›t_p
, "r"))) {

464 i‡(
	`fsˇnf
(
Â
, "%d", &
pid
) != 1) {

465 
	`DEBUG
(
LOG_ERR
, "pid file '%s'Éxists, butÑead failed.\n",

466 
›t_p
);

468 
	`DEBUG
(
LOG_ERR
, "pid file '%s'Éxists : %d\n",

469 
›t_p
, 
pid
);

471 
	`f˛o£
(
Â
);

472 
	`exô
(1);

476 
Â
 = 
	`f›í_ex˛
(
›t_p
);

477 i‡(!
Â
) {

478 
	`DEBUG
(
LOG_ERR
, "failedÅo open file '%s': %s\n",

479 
›t_p
, 
	`°ªº‹
(
î∫o
));

480 
	`exô
(1);

484 i‡(
	`d´m⁄
(0, 0) < 0) {

485 
	`DEBUG
(
LOG_ERR
, "ÁûedÅÿd´m⁄(): %s\n", 
	`°ªº‹
(
î∫o
));

486 
	`u∆ök
(
›t_p
);

487 
	`exô
(1);

489 
d´m⁄ized
 = 1;

491 i‡(
Â
) {

492 
	`Ârötf
(
Â
, "%d\n", 
	`gëpid
());

493 
	`f˛o£
(
Â
);

495 
	}
}

498 #ifde‡
HAVE_LIBCAP


499 c⁄° 
ˇp_vÆue_t
 
	gˇp_√t_øw
 = 
CAP_NET_RAW
;

500 c⁄° 
ˇp_vÆue_t
 
	gˇp_£tuid
 = 
CAP_SETUID
;

501 
ˇp_Êag_vÆue_t
 
	gˇp_ok
;

503 
uid_t
 
	geuid
;

506 
	$limô_ˇ∑bûôõs
()

508 #ifde‡
HAVE_LIBCAP


509 
ˇp_t
 
ˇp_p
, 
ˇp_cur_p
;

511 
ˇp_p
 = 
	`ˇp_öô
();

512 i‡(!
ˇp_p
) {

513 
	`DEBUG
(
LOG_ERR
, "ˇp_öô: %s\n", 
	`°ªº‹
(
î∫o
));

514 
	`exô
(-1);

517 
ˇp_cur_p
 = 
	`ˇp_gë_¥oc
();

518 i‡(!
ˇp_cur_p
) {

519 
	`DEBUG
(
LOG_ERR
, "ˇp_gë_¥oc: %s\n", 
	`°ªº‹
(
î∫o
));

520 
	`exô
(-1);

524 
	`ˇp_gë_Êag
(
ˇp_cur_p
, 
CAP_NET_RAW
, 
CAP_PERMITTED
, &
ˇp_ok
);

525 i‡(
ˇp_ok
 !
CAP_CLEAR
) {

526 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_PERMITTED
, 1, &
ˇp_√t_øw
, 
CAP_SET
);

527 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_EFFECTIVE
, 1, &
ˇp_√t_øw
, 
CAP_SET
);

530 
	`ˇp_gë_Êag
(
ˇp_cur_p
, 
CAP_SETUID
, 
CAP_PERMITTED
, &
ˇp_ok
);

531 i‡(
ˇp_ok
 !
CAP_CLEAR
)

532 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_PERMITTED
, 1, &
ˇp_£tuid
, 
CAP_SET
);

534 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

535 
	`DEBUG
(
LOG_ERR
, "ˇp_£t_¥oc: %s\n", 
	`°ªº‹
(
î∫o
));

536 i‡(
î∫o
 !
EPERM
)

537 
	`exô
(-1);

540 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 1) < 0) {

541 
	`DEBUG
(
LOG_ERR
, "¥˘l: %s\n", 
	`°ªº‹
(
î∫o
));

542 
	`exô
(-1);

545 
	`ˇp_‰ì
(
ˇp_cur_p
);

546 
	`ˇp_‰ì
(
ˇp_p
);

548 
euid
 = 
	`gëeuid
();

550 
	}
}

552 
	$dr›_ˇ∑bûôõs
()

554 #ifde‡
HAVE_LIBCAP


555 
ˇp_t
 
ˇp_p
;

557 
ˇp_p
 = 
	`ˇp_öô
();

558 i‡(!
ˇp_p
) {

559 
	`DEBUG
(
LOG_ERR
, "ˇp_öô: %s\n", 
	`°ªº‹
(
î∫o
));

560 
	`exô
(-1);

564 i‡(
ˇp_ok
 !
CAP_CLEAR
) {

565 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_PERMITTED
, 1, &
ˇp_£tuid
, 
CAP_SET
);

566 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_EFFECTIVE
, 1, &
ˇp_£tuid
, 
CAP_SET
);

568 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

569 
	`DEBUG
(
LOG_ERR
, "ˇp_£t_¥oc: %s\n", 
	`°ªº‹
(
î∫o
));

570 
	`exô
(-1);

574 i‡(
	`£ãuid
(
›t_u
 ? o±_u : 
	`gëuid
()) < 0) {

575 
	`DEBUG
(
LOG_ERR
, "£tuid: %s\n", 
	`°ªº‹
(
î∫o
));

576 
	`exô
(-1);

579 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 0) < 0) {

580 
	`DEBUG
(
LOG_ERR
, "¥˘l: %s\n", 
	`°ªº‹
(
î∫o
));

581 
	`exô
(-1);

584 
	`ˇp_˛ór
(
ˇp_p
);

585 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

586 
	`DEBUG
(
LOG_ERR
, "ˇp_£t_¥oc: %s\n", 
	`°ªº‹
(
î∫o
));

587 
	`exô
(-1);

590 
	`ˇp_‰ì
(
ˇp_p
);

592 i‡(
	`£tuid
(
	`gëuid
()) < 0) {

593 
	`DEBUG
(
LOG_ERR
, "£tuid: %s\n", 
	`°ªº‹
(
î∫o
));

594 
	`exô
(-1);

597 
	}
}

600 
	$∑r£_¨gs
(
¨gc
, **
¨gv
)

602 
c
;

603 
vÆ
;

604 *
ï
;

607 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dhvp:u:")) != -1) {

608 
c
) {

610 
›t_d
 = 1;

613 
›t_v
 = 1;

616 
›t_p
 = 
›èrg
;

619 
vÆ
 = 
	`°πoul
(
›èrg
, &
ï
, 10);

620 i‡(!
›èrg
 || *
ï
) {

621 
∑sswd
 *
pw
 = 
	`gëpw«m
(
›èrg
);

622 i‡(!
pw
) {

623 
	`DEBUG
(
LOG_ERR
, "Nÿsuch u£r: %s", 
›èrg
);

624 
	`exô
(1);

626 
›t_u
 = 
pw
->
pw_uid
;

628 
›t_u
 = 
vÆ
;

632 
›t_h
 = 1;

637 
¨gc
 -
›töd
;

639 
¨gv
 +
›töd
;

642 i‡(
¨gc
)

643 
›t_h
 = 1;

644 
	}
}

646 
	$¥öt_c›yög
() {

647 
	`Ârötf
(
°dîr
,

652 
	}
}

654 
	$¥öt_ußge
() {

655 
	`Ârötf
(
°dîr
,

657 
≠≤ame


659 
	}
}

662 
	$maö
 (
¨gc
, **
¨gv
)

664 
sock_î∫o
 = 0;

665 
ªt
;

667 
≠≤ame
 = 
¨gv
[0];

668 
	`£t_logfûe
();

670 
	`limô_ˇ∑bûôõs
();

672 
sock
 = 
	`›í_sock
();

673 i‡(
sock
 < 0)

674 
sock_î∫o
 = 
î∫o
;

676 
	`∑r£_¨gs
(
¨gc
, 
¨gv
);

678 
	`dr›_ˇ∑bûôõs
();

680 i‡(
›t_h
 || 
›t_v
)

681 
	`¥öt_c›yög
();

682 i‡(
›t_h
) {

683 
	`¥öt_ußge
();

684 
	`exô
(1);

687 i‡(
sock_î∫o
) {

688 
	`DEBUG
(
LOG_ERR
, "sockë: %s\n", 
	`°ªº‹
(
sock_î∫o
));

689 
	`exô
(1);

693 i‡(
	`öô_sock
(
sock
) < 0)

694 
	`exô
(1);

696 
	`£tup_sigh™dÀrs
();

697 i‡(!
›t_d
)

698 
	`do_d´m⁄ize
();

700 
	`öô_c‹e
(1);

703 !
gŸ_sig«l
) {

704 
∑ckëc⁄ãxt
 *
p
;

705 
icmp6_hdr
 *
icmph
;

706 #i‡
ENABLE_DEBUG


707 
ßddrbuf
[
NI_MAXHOST
];

708 
gni
;

711 
	`öô_c‹e
(0);

713 
p
 = 
	`ni_mÆloc
((*p));

714 i‡(!
p
) {

715 
	`DEBUG
(
LOG_WARNING
, "%s(): failedÅoállocateÖacket context; sleep 1 sec.\n",

716 
__func__
);

717 
	`¶ìp
(1);

721 !
gŸ_sig«l
) {

722 
	`mem£t
(
p
, 0, (*p));

723 
p
->
sock
 = sock;

725 i‡(
	`ni_ªcv
(
p
) < 0) {

726 i‡(
gŸ_sig«l
)

728 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

736 #i‡
ENABLE_DEBUG


737 
gni
 = 
	`gë«meöfo
((
sockaddr
 *)&
p
->
addr
,

738 
p
->
addæí
,

739 
ßddrbuf
, (saddrbuf),

740 
NULL
, 0,

741 
NI_NUMERICHOST
);

742 i‡(
gni
)

743 
	`•rötf
(
ßddrbuf
, "???");

745 
	`öô_c‹e
(0);

747 i‡(
p
->
quîyÀn
 < (
icmp6_hdr
)) {

748 
	`ni_‰ì
(
p
);

749 
	`DEBUG
(
LOG_WARNING
, "Toÿsh‹àicm∞mesßgê‰om %s\n", 
ßddrbuf
);

753 
icmph
 = (
icmp6_hdr
 *)
p
->
quîy
;

755 
	`DEBUG
(
LOG_DEBUG
,

757 
icmph
->
icmp6_ty≥
, icmph->
icmp6_code
,

758 
	`¡ohs
(
icmph
->
icmp6_cksum
));

760 i‡(
icmph
->
icmp6_ty≥
 !
ICMP6_NI_QUERY
) {

761 
	`DEBUG
(
LOG_WARNING
,

763 
icmph
->
icmp6_ty≥
, 
ßddrbuf
);

764 
	`ni_‰ì
(
p
);

768 
	`¥_nodeöfo
(
p
);

771 
	`˛ónup_pidfûe
();

773 
	`exô
(0);

774 
	}
}

	@iputils-s20140519/ninfod/ninfod.h

36 
	#NINFOD
 "nöfod"

	)

37 
	#NINFOD_PIDFILE
 "/v¨/run/nöfod.pid"

	)

39 
	#MAX_ANYCAST_DELAY_TIME
 1000000.0

	)

41 
	#MAX_DNSLABEL_SIZE
 63

	)

42 
	#MAX_DNSNAME_SIZE
 255

	)

43 
	#MAX_QUERY_SIZE
 ((
icmp6_nodeöfo
)+
MAX_DNSNAME_SIZE
+2)

	)

44 
	#MAX_REPLY_SIZE
 1280-(
ù6_hdr
)

	)

46 
	#MAX_SUPTYPES
 32

	)

48 
	#CHECKANDFILL_ARGS
 
∑ckëc⁄ãxt
 *
p
,\

49 *
subje˘
, 
size_t
 
subjÀn
, \

50 
Êags
, \

51 *
subj_if
, \

52 
ª∂y


	)

53 
	#INIT_ARGS
 \

54 
f‹˚d


	)

56 
	s∑ckëc⁄ãxt
 {

58 
	msock
;

61 
sockaddr_°‹age
 
	maddr
;

62 
sockÀn_t
 
	maddæí
;

63 
ö6_pktöfo
 
	mpktöfo
;

64 
	mquîy
[
MAX_QUERY_SIZE
];

65 
	mquîyÀn
;

68 
icmp6_nodeöfo
 
	mª∂y
;

69 *
	mª∂yd©a
;

70 
	mª∂yd©Æí
;

72 
	mdñay
;

76 
›t_v
;

77 
d´m⁄ized
;

78 
sock
;

79 
öôülized
;

82 
ni_ªcv
(
∑ckëc⁄ãxt
 *
p
);

83 
ni_£nd
(
∑ckëc⁄ãxt
 *
p
);

86 #i‡
ENABLE_DEBUG


87 
°dîæog
(
¥i‹ôy
, *
f‹m©
, ...);

88 
	#DEBUG
(
¥i
, 
fmt
, 
¨gs
...) do { \

89 
ßved_î∫o
 = 
î∫o
; \

90 i‡(
›t_v
 || 
¥i
 !
LOG_DEBUG
) { \

91 i‡(
d´m⁄ized
) { \

92 
	`sy¶og
(
¥i
, 
fmt
, ## 
¨gs
); \

94 
	`°dîæog
(
¥i
, 
fmt
, ## 
¨gs
); \

97 
î∫o
 = 
ßved_î∫o
; \

98 } 0)

	)

100 
	#DEBUG
(
¥i
, 
fmt
, 
¨gs
...Ëdÿ{ ; } 0)

	)

103 
	#ni_mÆloc
(
size
) ({ \

104 
size_t
 
_size
 = (
size
); \

105 *
p
 = 
	`mÆloc
(
_size
); \

106 
	`DEBUG
(
LOG_DEBUG
, "%s(): mÆloc(%zuË%p\n", 
__func__
, 
_size
, 
p
); \

107 
p
; \

108 })

	)

109 
	#ni_‰ì
(
p
) ({ \

110 *
_p
 = (
p
); \

111 
ßved_î∫o
 = 
î∫o
; \

112 
	`DEBUG
(
LOG_DEBUG
, "%s(): fªe(%p)\n", 
__func__
, 
_p
); \

113 
	`‰ì
(
_p
); \

114 
î∫o
 = 
ßved_î∫o
; \

115 })

	)

117 
öô_c‹e
(
f‹˚d
);

118 
¥_nodeöfo
(
∑ckëc⁄ãxt
 *
p
);

120 
¥_nodeöfo_unknown
(
CHECKANDFILL_ARGS
);

121 
¥_nodeöfo_ªfu£d
(
CHECKANDFILL_ARGS
);

122 
¥_nodeöfo_no›
(
CHECKANDFILL_ARGS
);

123 
öô_nodeöfo_su±y≥s
(
INIT_ARGS
);

124 
¥_nodeöfo_su±y≥s
(
CHECKANDFILL_ARGS
);

127 
öô_nodeöfo_ùv6addr
(
INIT_ARGS
);

128 
¥_nodeöfo_ùv6addr
(
CHECKANDFILL_ARGS
);

129 
öô_nodeöfo_ùv4addr
(
INIT_ARGS
);

130 
¥_nodeöfo_ùv4addr
(
CHECKANDFILL_ARGS
);

133 
check_nigroup
(c⁄° 
ö6_addr
 *
addr
);

134 
öô_nodeöfo_nodíame
(
INIT_ARGS
);

135 
¥_nodeöfo_nodíame
(
CHECKANDFILL_ARGS
);

	@iputils-s20140519/ninfod/ninfod_addrs.c

35 #i‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

39 #i‡
HAVE_SYS_TYPES_H


40 
	~<sys/ty≥s.h
>

43 #i‡
STDC_HEADERS


44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°ddef.h
>

48 #i‡
HAVE_STDLIB_H


49 
	~<°dlib.h
>

52 #i‡
HAVE_STRING_H


53 #i‡!
STDC_HEADERS
 && 
HAVE_MEMORY_H


54 
	~<mem‹y.h
>

56 
	~<°rög.h
>

58 #i‡
HAVE_STRINGS_H


59 
	~<°rögs.h
>

61 #i‡
HAVE_INTTYPES_H


62 
	~<öây≥s.h
>

64 #i‡
HAVE_STDINT_H


65 
	~<°döt.h
>

68 #i‡
HAVE_UNISTD_H


69 
	~<uni°d.h
>

72 #i‡
TIME_WITH_SYS_TIME


73 
	~<sys/time.h
>

74 
	~<time.h
>

76 #i‡
HAVE_SYS_TIME_H


77 
	~<sys/time.h
>

79 
	~<time.h
>

83 #i‡
HAVE_SYS_UIO_H


84 
	~<sys/uio.h
>

87 
	~<sys/sockë.h
>

88 #i‡
HAVE_LINUX_RTNETLINK_H


89 
	~<asm/ty≥s.h
>

90 
	~<löux/π√éök.h
>

93 #i‡
HAVE_NETINET_IN_H


94 
	~<√töë/ö.h
>

97 #i‡
HAVE_NETINET_IP6_H


98 
	~<√töë/ù6.h
>

101 #i‡
HAVE_NETINET_ICMP6_H


102 
	~<√töë/icmp6.h
>

104 #i‚de‡
HAVE_STRUCT_ICMP6_NODEINFO


105 
	~"icmp6_nodeöfo.h
"

108 #i‡
HAVE_NETDB_H


109 
	~<√tdb.h
>

111 
	~<î∫o.h
>

113 #i‡
HAVE_SYSLOG_H


114 
	~<sy¶og.h
>

117 
	~"nöfod.h
"

118 
	~"ni_iÁddrs.h
"

120 #i‚de‡
off£tof


121 
	#off£tof
(
aggªg©e
,
membî
Ë((
size_t
)&(◊ggªg©ê*)0)->membî)

	)

126 *
RCSID
 
__©åibuã__
 ((
unu£d
)) = "$USAGI:Çinfod_addrs.c,v 1.18 2003-07-16 09:49:01 yoshfuji Exp $";

130 
	$öô_nodeöfo_ùv6addr
(
INIT_ARGS
)

132 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

134 
	}
}

136 
	$fûãr_ùv6addr
(c⁄° 
ö6_addr
 *
iÁddr
, 
Êags
)

138 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(
iÁddr
) ||

139 
	`IN6_IS_ADDR_LOOPBACK
(
iÁddr
)) {

141 } i‡(
	`IN6_IS_ADDR_V4COMPAT
(
iÁddr
) ||

142 
	`IN6_IS_ADDR_V4MAPPED
(
iÁddr
)) {

143  !(
Êags
 & 
NI_NODEADDR_FLAG_COMPAT
);

144 } i‡(
	`IN6_IS_ADDR_LINKLOCAL
(
iÁddr
)) {

145  !(
Êags
 & 
NI_NODEADDR_FLAG_LINKLOCAL
);

146 } i‡(
	`IN6_IS_ADDR_SITELOCAL
(
iÁddr
)) {

147  !(
Êags
 & 
NI_NODEADDR_FLAG_SITELOCAL
);

149  !(
Êags
 & 
NI_NODEADDR_FLAG_GLOBAL
);

150 
	}
}

152 
	$¥_nodeöfo_ùv6addr
(
CHECKANDFILL_ARGS
)

154 
ni_iÁddrs
 *
iÁ0
;

155 
ifödex
 = 0;

157 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

159 i‡(
subje˘
 && 
subjÀn
 !(
ö6_addr
)) {

160 
	`DEBUG
(
LOG_INFO
,

162 
__func__
, 
subjÀn
);

165 i‡(
	`ni_iÁddrs
(&
iÁ0
, 
AF_INET6
))

169 i‡(
subje˘
) {

170 
ni_iÁddrs
 *
iÁ
;

172 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

173 i‡(!
iÁ
->
iÁ_addr
)

175 i‡(
iÁ
->
iÁ_Êags
 & (
IFA_F_TENTATIVE
|
IFA_F_SECONDARY
))

177 i‡(!
ifödex
 &&

178 
	`IN6_ARE_ADDR_EQUAL
(&
p
->
pktöfo
.
ùi6_addr
,

179 (
ö6_addr
 *)
subje˘
)) {

185 
ifödex
 = 
p
->
pktöfo
.
ùi6_ifödex
;

187 i‡(!
	`IN6_IS_ADDR_LOOPBACK
((
ö6_addr
 *)
subje˘
) &&

188 
	`IN6_ARE_ADDR_EQUAL
((
ö6_addr
 *)
iÁ
->
iÁ_addr
,

189 (
ö6_addr
 *)
subje˘
)) {

196 i‡(!
ifödex
 ||

197 (
p
->
pktöfo
.
ùi6_ifödex
 =
ifödex
))

198 
ifödex
 = 
iÁ
->
iÁ_ifödex
;

201 i‡(!
ifödex
) {

202 
	`ni_‰ìiÁddrs
(
iÁ0
);

205 i‡(
subj_if
)

206 *
subj_if
 = 
ifödex
;

208 
ifödex
 = 
subj_if
 ? *subj_if : 0;

209 i‡(
ifödex
 == 0)

210 
ifödex
 = 
p
->
pktöfo
.
ùi6_ifödex
;

211 i‡(
ifödex
 == 0) {

212 
	`ni_‰ìiÁddrs
(
iÁ0
);

217 i‡(
ª∂y
) {

218 
ni_iÁddrs
 *
iÁ
;

219 
addrs0
 = 0, 
∑ddrs0
 = 0;

220 
addrs
, 
∑ddrs
 = 0, 
daddrs
 = 0;

222 
Êags
 &~
NI_NODEADDR_FLAG_TRUNCATE
;

225 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

226 i‡(!
iÁ
->
iÁ_addr
)

228 i‡(
iÁ
->
iÁ_Êags
 & (
IFA_F_TENTATIVE
|
IFA_F_SECONDARY
))

230 i‡(!(
Êags
 & 
NI_NODEADDR_FLAG_ALL
) &&

231 
iÁ
->
iÁ_ifödex
 !
ifödex
)

233 i‡(
	`fûãr_ùv6addr
((
ö6_addr
 *)
iÁ
->
iÁ_addr
, 
Êags
))

236 i‡(
addrs0
 + 1 >((
MAX_REPLY_SIZE
 - (
icmp6_nodeöfo
)Ë/ ((
uöt32_t
Ë+ (
ö6_addr
)))) {

237 
Êags
 |~
NI_NODEADDR_FLAG_TRUNCATE
;

241 
addrs0
++;

242 i‡(!(
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
))

243 
∑ddrs0
++;

246 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

247 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_SUCCESS
;

248 
p
->
ª∂y
.
ni_cksum
 = 0;

249 
p
->
ª∂y
.
ni_qty≥
 = 
	`ht⁄s
(
NI_QTYPE_NODEADDR
);

250 
p
->
ª∂y
.
ni_Êags
 = 
Êags
&(
NI_NODEADDR_FLAG_COMPAT
|

251 
NI_NODEADDR_FLAG_LINKLOCAL
|

252 
NI_NODEADDR_FLAG_SITELOCAL
|

253 
NI_NODEADDR_FLAG_GLOBAL
);

256 
p
->
ª∂yd©Æí
 = ((
uöt32_t
)+(
ö6_addr
)Ë* 
addrs0
;

257 
p
->
ª∂yd©a
 =Ö->
ª∂yd©Æí
 ? 
	`ni_mÆloc
’->ª∂yd©ÆíË: 
NULL
;

259 i‡(
p
->
ª∂yd©Æí
 && !p->
ª∂yd©a
) {

260 
p
->
ª∂y
.
ni_Êags
 |
NI_NODEADDR_FLAG_TRUNCATE
;

261 
addrs0
 = 
∑ddrs0
 = 0;

264 
iÁ
 = 
iÁ0
, 
addrs
 = 0;

265 
iÁ
 && 
addrs
 < 
addrs0
;

266 
iÁ
 = iÁ->
iÁ_√xt
) {

267 *
˝
;

268 
uöt32_t
 
âl
;

270 i‡(!
iÁ
->
iÁ_addr
)

272 i‡(
iÁ
->
iÁ_Êags
 & (
IFA_F_TENTATIVE
|
IFA_F_SECONDARY
))

274 i‡(!(
Êags
 & 
NI_NODEADDR_FLAG_ALL
) &&

275 ((
subj_if
 && *subj_ifË? (
iÁ
->
iÁ_ifödex
 != *subj_if) :

276 (
iÁ
->
iÁ_ifödex
 !
p
->
pktöfo
.
ùi6_ifödex
)))

278 i‡(
	`fûãr_ùv6addr
((
ö6_addr
 *)
iÁ
->
iÁ_addr
, 
Êags
))

281 #i‡
ENABLE_TTL


282 i‡(
iÁ
->
iÁ_ˇcheöfo
) {

283 
âl
 = 
iÁ
->
iÁ_ˇcheöfo
->
iÁ_vÆid
 > 0x7fffffff ?

284 
	`ht⁄l
(0x7fffffffË: ht⁄l(
iÁ
->
iÁ_ˇcheöfo
->
iÁ_vÆid
);

286 
âl
 = (
iÁ
->
iÁ_Êags
 & 
IFA_F_PERMANENT
Ë? 
	`ht⁄l
(0x7fffffff) : 0;

289 
âl
 = 0;

292 
˝
 = 
p
->
ª∂yd©a
 +

293 ((
uöt32_t
)+(
ö6_addr
)Ë* (
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
 ? 
∑ddrs0
+
daddrs
 : 
∑ddrs
);

294 
	`mem˝y
(
˝
, &
âl
, (ttl));

295 
	`mem˝y
(
˝
 + (
âl
), 
iÁ
->
iÁ_addr
, (
ö6_addr
));

297 
addrs
++;

298 i‡(
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
)

299 
daddrs
++;

301 
∑ddrs
++;

305 
	`ni_‰ìiÁddrs
(
iÁ0
);

307 
	}
}

310 
	$öô_nodeöfo_ùv4addr
(
INIT_ARGS
)

312 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

314 
	}
}

316 
	$fûãr_ùv4addr
(c⁄° 
ö_addr
 *
iÁddr
, 
Êags
)

319 
	}
}

321 
	$¥_nodeöfo_ùv4addr
(
CHECKANDFILL_ARGS
)

323 
ni_iÁddrs
 *
iÁ0
;

324 
ifödex
 = 0;

326 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

328 i‡(
subje˘
 && 
subjÀn
 !(
ö_addr
)) {

329 
	`DEBUG
(
LOG_INFO
,

331 
__func__
, 
subjÀn
);

334 i‡(
	`ni_iÁddrs
(&
iÁ0
, 
AF_INET
))

338 i‡(
subje˘
) {

339 
ni_iÁddrs
 *
iÁ
;

341 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

342 i‡(!
iÁ
->
iÁ_addr
)

344 i‡(
iÁ
->
iÁ_Êags
 & (
IFA_F_TENTATIVE
|
IFA_F_SECONDARY
))

346 i‡((((
ö_addr
 *)
subje˘
)->
s_addr
 !
	`ht⁄l
(
INADDR_LOOPBACK
)) &&

347 
	`memcmp
((
ö_addr
 *)
iÁ
->
iÁ_addr
,

348 (
ö_addr
 *)
subje˘
,

349 (
ö_addr
)) == 0) {

356 i‡(!
ifödex
 ||

357 (
p
->
pktöfo
.
ùi6_ifödex
 =
ifödex
))

358 
ifödex
 = 
iÁ
->
iÁ_ifödex
;

361 i‡(!
ifödex
) {

362 
	`ni_‰ìiÁddrs
(
iÁ0
);

365 i‡(
subj_if
)

366 *
subj_if
 = 
ifödex
;

368 
ifödex
 = 
subj_if
 ? *subj_if : 0;

369 i‡(
ifödex
 == 0)

370 
ifödex
 = 
p
->
pktöfo
.
ùi6_ifödex
;

371 i‡(
ifödex
 == 0) {

372 
	`ni_‰ìiÁddrs
(
iÁ0
);

377 i‡(
ª∂y
) {

378 
ni_iÁddrs
 *
iÁ
;

379 
addrs0
 = 0, 
∑ddrs0
 = 0;

380 
addrs
, 
∑ddrs
 = 0, 
daddrs
 = 0;

382 
Êags
 &~
NI_IPV4ADDR_FLAG_TRUNCATE
;

385 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

386 i‡(!
iÁ
->
iÁ_addr
)

389 i‡(
iÁ
->
iÁ_Êags
 & (
IFA_F_TENTATIVE
))

392 i‡(!(
Êags
 & 
NI_NODEADDR_FLAG_ALL
) &&

393 ((
subj_if
 && *subj_ifË? (
iÁ
->
iÁ_ifödex
 != *subj_if) :

394 (
iÁ
->
iÁ_ifödex
 !
p
->
pktöfo
.
ùi6_ifödex
)))

396 i‡(
	`fûãr_ùv4addr
((
ö_addr
 *)
iÁ
->
iÁ_addr
, 
Êags
))

399 i‡(
addrs0
 + 1 >((
MAX_REPLY_SIZE
 - (
icmp6_nodeöfo
)Ë/ ((
uöt32_t
Ë+ (
ö_addr
)))) {

400 
Êags
 |
NI_IPV4ADDR_FLAG_TRUNCATE
;

404 
addrs0
++;

405 i‡(!(
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
))

406 
∑ddrs0
++;

409 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

410 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_SUCCESS
;

411 
p
->
ª∂y
.
ni_cksum
 = 0;

412 
p
->
ª∂y
.
ni_qty≥
 = 
	`ht⁄s
(
NI_QTYPE_IPV4ADDR
);

413 
p
->
ª∂y
.
ni_Êags
 = 
Êags
 & 
NI_IPV4ADDR_FLAG_ALL
;

416 
p
->
ª∂yd©Æí
 = ((
uöt32_t
)+(
ö_addr
)Ë* 
addrs0
;

417 
p
->
ª∂yd©a
 = 
addrs0
 ? 
	`ni_mÆloc
’->
ª∂yd©Æí
Ë: 
NULL
;

419 i‡(
p
->
ª∂yd©Æí
 && !p->
ª∂yd©a
) {

420 
p
->
ª∂y
.
ni_Êags
 |
NI_NODEADDR_FLAG_TRUNCATE
;

421 
addrs0
 = 
∑ddrs0
 = 0;

424 
iÁ
 = 
iÁ0
, 
addrs
 = 0;

425 
iÁ
 && 
addrs
 < 
addrs0
;

426 
iÁ
 = iÁ->
iÁ_√xt
) {

427 *
˝
;

428 
uöt32_t
 
âl
;

430 i‡(!
iÁ
->
iÁ_addr
)

433 i‡(
iÁ
->
iÁ_Êags
 & (
IFA_F_TENTATIVE
))

436 i‡(!(
Êags
 & 
NI_NODEADDR_FLAG_ALL
) &&

437 (
iÁ
->
iÁ_ifödex
 !
ifödex
))

439 i‡(
	`fûãr_ùv4addr
((
ö_addr
 *)
iÁ
->
iÁ_addr
, 
Êags
))

442 #i‡
ENABLE_TTL


443 i‡(
iÁ
->
iÁ_ˇcheöfo
) {

444 
âl
 = 
iÁ
->
iÁ_ˇcheöfo
->
iÁ_vÆid
 > 0x7fffffff ?

445 
	`ht⁄l
(0x7fffffffË: ht⁄l(
iÁ
->
iÁ_ˇcheöfo
->
iÁ_vÆid
);

447 
âl
 = 0;

450 
âl
 = 0;

453 
˝
 = (
p
->
ª∂yd©a
 +

454 ((
uöt32_t
)+(
ö_addr
)Ë* (
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
 ? 
∑ddrs0
+
daddrs
 : 
∑ddrs
));

455 
	`mem˝y
(
˝
, &
âl
, (ttl));

456 
	`mem˝y
(
˝
 + (
âl
), 
iÁ
->
iÁ_addr
, (
ö_addr
));

458 
addrs
++;

459 i‡(
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
)

460 
daddrs
++;

462 
∑ddrs
++;

466 
	`ni_‰ìiÁddrs
(
iÁ0
);

468 
	}
}

	@iputils-s20140519/ninfod/ninfod_core.c

35 #i‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

39 #i‡
HAVE_SYS_TYPES_H


40 
	~<sys/ty≥s.h
>

42 #i‡
STDC_HEADERS


43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<°ddef.h
>

47 #i‡
HAVE_STDLIB_H


48 
	~<°dlib.h
>

51 #i‡
ENABLE_THREADS
 && 
HAVE_PTHREAD_H


52 
	~<±hªad.h
>

54 #i‡
HAVE_STRING_H


55 #i‡!
STDC_HEADERS
 && 
HAVE_MEMORY_H


56 
	~<mem‹y.h
>

58 
	~<°rög.h
>

60 #i‡
HAVE_STRINGS_H


61 
	~<°rögs.h
>

63 #i‡
HAVE_INTTYPES_H


64 
	~<öây≥s.h
>

66 #i‡
HAVE_STDINT_H


67 
	~<°döt.h
>

70 #i‡
HAVE_UNISTD_H


71 
	~<uni°d.h
>

74 #i‡
TIME_WITH_SYS_TIME


75 
	~<sys/time.h
>

76 
	~<time.h
>

78 #i‡
HAVE_SYS_TIME_H


79 
	~<sys/time.h
>

81 
	~<time.h
>

85 #i‡
HAVE_SYS_UIO_H


86 
	~<sys/uio.h
>

89 #i‡
HAVE_NETINET_IN_H


90 
	~<√töë/ö.h
>

93 #i‡
HAVE_NETINET_ICMP6_H


94 
	~<√töë/icmp6.h
>

96 #i‚de‡
HAVE_STRUCT_ICMP6_NODEINFO


97 
	~"icmp6_nodeöfo.h
"

100 #i‡
HAVE_NETDB_H


101 
	~<√tdb.h
>

103 
	~<î∫o.h
>

105 #i‡
HAVE_SYSLOG_H


106 
	~<sy¶og.h
>

109 
	~"nöfod.h
"

111 #i‚de‡
off£tof


112 
	#off£tof
(
aggªg©e
,
membî
Ë((
size_t
)&(◊ggªg©ê*)0)->membî)

	)

115 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

119 *
RCSID
 
__©åibuã__
 ((
unu£d
)) = "$USAGI:Çinfod_core.c,v 1.29 2003-07-16 09:49:01 yoshfuji Exp $";

122 
	göôülized
 = 0;

124 #i‡
ENABLE_THREADS
 && 
HAVE_LIBPTHREAD


125 
±hªad_©å_t
 
	g∑âr
;

128 
uöt32_t
 
	gsu±y≥s
[(
MAX_SUPTYPES
+31)>>5];

129 
size_t
 
	gsu±y≥s_Àn
;

132 
	ssubjöfo
 {

133 
uöt8_t
 
	mcode
;

134 *
	m«me
;

135 (*
	mchecksubj
)(
	mCHECKANDFILL_ARGS
);

136 (*
	möô
)(
	mINIT_ARGS
);

139 
subjöfo
 
	gsubjöfo_èbÀ
 [] = {

140 [
ICMP6_NI_SUBJ_IPV6
] = {

141 .
code
 = 
ICMP6_NI_SUBJ_IPV6
,

142 .
	g«me
 = "IPv6",

144 .
	gchecksubj
 = 
¥_nodeöfo_ùv6addr
,

146 [
ICMP6_NI_SUBJ_FQDN
] = {

147 .
code
 = 
ICMP6_NI_SUBJ_FQDN
,

148 .
	g«me
 = "FQDN",

150 .
	gchecksubj
 = 
¥_nodeöfo_nodíame
,

152 [
ICMP6_NI_SUBJ_IPV4
] = {

153 .
code
 = 
ICMP6_NI_SUBJ_IPV4
,

154 .
	g«me
 = "IPv4",

156 .
	gchecksubj
 = 
¥_nodeöfo_ùv4addr
,

160 
subjöfo
 
	gsubjöfo_nuŒ
 = {

161 .
«me
 = "null",

162 .
	gchecksubj
 = 
¥_nodeöfo_no›
,

165 
__ölöe__
 
subjöfo
 *
	$subjöfo_lookup
(
code
)

167 i‡(
code
 >
	`ARRAY_SIZE
(
subjöfo_èbÀ
))

168  
NULL
;

169 i‡(
subjöfo_èbÀ
[
code
].
«me
 =
NULL
)

170  
NULL
;

171  &
subjöfo_èbÀ
[
code
];

172 
	}
}

175 
	#QTYPEINFO_F_RATELIMIT
 0x1

	)

177 
	sqty≥öfo
 {

178 
uöt16_t
 
	mqty≥
;

179 *
	m«me
;

180 (*
	mgëª∂y
)(
	mCHECKANDFILL_ARGS
);

181 (*
	möô
)(
	mINIT_ARGS
);

182 
	mÊags
;

185 
qty≥öfo
 
	gqty≥öfo_èbÀ
[] = {

186 [
NI_QTYPE_NOOP
] = {

187 .
qty≥
 = 
NI_QTYPE_NOOP
,

188 .
	g«me
 = "NOOP",

189 .
	ggëª∂y
 = 
¥_nodeöfo_no›
,

191 #i‡
ENABLE_SUPTYPES


192 [
NI_QTYPE_SUPTYPES
] = {

193 .
qty≥
 = 
NI_QTYPE_SUPTYPES
,

194 .
	g«me
 = "SupTypes",

195 .
	ggëª∂y
 = 
¥_nodeöfo_su±y≥s
,

196 .
	göô
 = 
öô_nodeöfo_su±y≥s
,

199 [
NI_QTYPE_DNSNAME
] = {

200 .
qty≥
 = 
NI_QTYPE_DNSNAME
,

201 .
	g«me
 = "DnsName",

202 .
	ggëª∂y
 = 
¥_nodeöfo_nodíame
,

203 .
	göô
 = 
öô_nodeöfo_nodíame
,

205 [
NI_QTYPE_NODEADDR
] = {

206 .
qty≥
 = 
NI_QTYPE_NODEADDR
,

207 .
	g«me
 = "NodeAddr",

208 .
	ggëª∂y
 = 
¥_nodeöfo_ùv6addr
,

209 .
	göô
 = 
öô_nodeöfo_ùv6addr
,

211 [
NI_QTYPE_IPV4ADDR
] = {

212 .
qty≥
 = 
NI_QTYPE_IPV4ADDR
,

213 .
	g«me
 = "IPv4Addr",

214 .
	ggëª∂y
 = 
¥_nodeöfo_ùv4addr
,

215 .
	göô
 = 
öô_nodeöfo_ùv4addr
,

219 
qty≥öfo
 
	gqty≥öfo_unknown
 = {

220 .
«me
 = "unknown",

221 .
	ggëª∂y
 = 
¥_nodeöfo_unknown
,

222 .
	gÊags
 = 
QTYPEINFO_F_RATELIMIT
,

225 
qty≥öfo
 
	gqty≥öfo_ªfu£d
 = {

226 .
«me
 = "refused",

227 .
	ggëª∂y
 = 
¥_nodeöfo_ªfu£d
,

228 .
	gÊags
 = 
QTYPEINFO_F_RATELIMIT
,

231 
__ölöe__
 
qty≥öfo
 *
	$qty≥öfo_lookup
(
qty≥
)

233 i‡(
qty≥
 >
	`ARRAY_SIZE
(
qty≥öfo_èbÀ
))

234  &
qty≥öfo_unknown
;

235 i‡(
qty≥öfo_èbÀ
[
qty≥
].
«me
 =
NULL
)

236  &
qty≥öfo_unknown
;

237  &
qty≥öfo_èbÀ
[
qty≥
];

238 
	}
}

242 
	$¥_nodeöfo_no›
(
CHECKANDFILL_ARGS
)

244 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

246 i‡(
subjÀn
) {

247 
	`DEBUG
(
LOG_WARNING
,

249 
__func__
, 
subjÀn
);

253 i‡(
ª∂y
) {

254 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

255 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_SUCCESS
;

256 
p
->
ª∂y
.
ni_cksum
 = 0;

257 
p
->
ª∂y
.
ni_qty≥
 = 
	`ht⁄s
(
NI_QTYPE_NOOP
);

258 
p
->
ª∂y
.
ni_Êags
 = 
Êags
;

261 i‡(
subj_if
)

262 *
subj_if
 = 0;

265 
	}
}

267 #i‡
ENABLE_SUPTYPES


269 
	$¥_nodeöfo_su±y≥s
(
CHECKANDFILL_ARGS
)

271 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

273 i‡(
subjÀn
) {

274 
	`DEBUG
(
LOG_WARNING
, "%s(): invalid subjectÜength(%zu)\n",

275 
__func__
, 
subjÀn
);

279 i‡(
ª∂y
) {

280 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

281 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_SUCCESS
;

282 
p
->
ª∂y
.
ni_cksum
 = 0;

283 
p
->
ª∂y
.
ni_qty≥
 = 
	`ht⁄s
(
NI_QTYPE_SUPTYPES
);

284 
p
->
ª∂y
.
ni_Êags
 = 
Êags
&~
NI_SUPTYPE_FLAG_COMPRESS
;

286 
p
->
ª∂yd©Æí
 = 
su±y≥s_Àn
<<2;

287 
p
->
ª∂yd©a
 = 
	`ni_mÆloc
’->
ª∂yd©Æí
);

288 i‡(
p
->
ª∂yd©a
 =
NULL
) {

289 
p
->
ª∂yd©Æí
 = -1;

293 
	`mem˝y
(
p
->
ª∂yd©a
, 
su±y≥s
,Ö->
ª∂yd©Æí
);

296 
	}
}

298 
	$öô_nodeöfo_su±y≥s
(
INIT_ARGS
)

300 
size_t
 
w
, 
b
;

301 
i
;

303 i‡(!
f‹˚d
 && 
öôülized
)

306 
	`mem£t
(
su±y≥s
, 0, (suptypes));

307 
su±y≥s_Àn
 = 0;

309 
i
=0; i < 
	`ARRAY_SIZE
(
qty≥öfo_èbÀ
); i++) {

310 
qty≥
;

312 i‡(
qty≥öfo_èbÀ
[
i
].
«me
 =
NULL
)

314 
qty≥
 = 
qty≥öfo_èbÀ
[
i
].qtype;

315 
w
 = 
qty≥
>>5;

316 
b
 = 
qty≥
&0x1f;

317 i‡(
w
 >
	`ARRAY_SIZE
(
su±y≥s
)) {

319 
	`DEBUG
(
LOG_ERR
, "Warning: Too Large Supported Types\n");

320 
	`exô
(1);

322 
su±y≥s
[
w
] |
	`ht⁄l
(1<<
b
);

324 i‡(
su±y≥s_Àn
 < 
w
)

325 
su±y≥s_Àn
 = 
w
;

327 
su±y≥s_Àn
++;

328 
	}
}

333 
	$¥_nodeöfo_unknown
(
CHECKANDFILL_ARGS
)

335 i‡(!
ª∂y
)

338 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

339 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_UNKNOWN
;

340 
p
->
ª∂y
.
ni_cksum
 = 0;

342 
p
->
ª∂y
.
ni_Êags
 = 
Êags
;

344 
p
->
ª∂yd©a
 = 
NULL
;

345 
p
->
ª∂yd©Æí
 = 0;

348 
	}
}

351 
	$¥_nodeöfo_ªfu£d
(
CHECKANDFILL_ARGS
)

353 i‡(!
ª∂y
)

356 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

357 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_REFUSED
;

358 
p
->
ª∂y
.
ni_cksum
 = 0;

360 
p
->
ª∂y
.
ni_Êags
 = 
Êags
;

362 
p
->
ª∂yd©a
 = 
NULL
;

363 
p
->
ª∂yd©Æí
 = 0;

366 
	}
}

370 
	$ni_pﬁicy
(
∑ckëc⁄ãxt
 *
p
)

372 c⁄° 
ö6_addr
 *
ßddr
 = &((c⁄° 
sockaddr_ö6
 *)&
p
->
addr
)->
sö6_addr
;

384 i‡(!(
	`IN6_IS_ADDR_LINKLOCAL
(
ßddr
) ||

385 
	`IN6_IS_ADDR_SITELOCAL
(
ßddr
) ||

386 
	`IN6_IS_ADDR_LOOPBACK
(
ßddr
)))

389 
	}
}

392 
	$öô_c‹e
(
f‹˚d
)

394 
i
;

396 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

398 i‡(!
öôülized
 || 
f‹˚d
) {

399 
timevÆ
 
tv
;

400 
£ed
 = 0;

401 
pid_t
 
pid
;

403 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

404 
	`DEBUG
(
LOG_WARNING
, "%s(): faûedÅÿgëtimeofday()\n", 
__func__
);

406 
£ed
 = (
tv
.
tv_u£c
 & 0xffffffff);

409 
pid
 = 
	`gëpid
();

410 
£ed
 ^((()
pid
) & 0xffffffff);

412 
	`§™d
(
£ed
);

414 #i‡
ENABLE_THREADS
 && 
HAVE_LIBPTHREAD


415 i‡(
öôülized
)

416 
	`±hªad_©å_de°roy
(&
∑âr
);

418 
	`±hªad_©å_öô
(&
∑âr
);

419 
	`±hªad_©å_£tdëach°©e
(&
∑âr
, 
PTHREAD_CREATE_DETACHED
);

423 
i
=0; i < 
	`ARRAY_SIZE
(
subjöfo_èbÀ
); i++) {

424 i‡(
subjöfo_èbÀ
[
i
].
«me
 =
NULL
)

426 i‡(
subjöfo_èbÀ
[
i
].
öô
)

427 
subjöfo_èbÀ
[
i
].
	`öô
(
f‹˚d
);

430 
i
=0; i < 
	`ARRAY_SIZE
(
qty≥öfo_èbÀ
); i++) {

431 i‡(
qty≥öfo_èbÀ
[
i
].
«me
 =
NULL
)

433 i‡(
qty≥öfo_èbÀ
[
i
].
öô
)

434 
qty≥öfo_èbÀ
[
i
].
	`öô
(
f‹˚d
);

437 
öôülized
 = 1;

440 
	}
}

442 #i‡
ENABLE_THREADS
 && 
HAVE_LIBPTHREAD


443 *
	$ni_£nd_thªad
(*
d©a
)

445 
ªt
;

446 
	`DEBUG
(
LOG_DEBUG
, "%s():Åhªad=%ld\n", 
__func__
, 
	`±hªad_£lf
());

447 
ªt
 = 
	`ni_£nd
(
d©a
);

448 
	`DEBUG
(
LOG_DEBUG
, "%s():Åhªad=%ld => %d\n", 
__func__
, 
	`±hªad_£lf
(), 
ªt
);

449  
NULL
;

450 
	}
}

452 
	$ni_£nd_f‹k
(
∑ckëc⁄ãxt
 *
p
)

454 
pid_t
 
chûd
 = 
	`f‹k
();

455 i‡(
chûd
 < 0)

457 i‡(
chûd
 == 0) {

458 
pid_t
 
gøndchûd
 = 
	`f‹k
();

459 i‡(
gøndchûd
 < 0)

460 
	`exô
(1);

461 i‡(
gøndchûd
 == 0) {

462 
ªt
;

463 
	`DEBUG
(
LOG_DEBUG
, "%s(): worker=%d\n",

464 
__func__
, 
	`gëpid
());

465 
ªt
 = 
	`ni_£nd
(
p
);

466 
	`DEBUG
(
LOG_DEBUG
, "%s(): worker=%d => %d\n",

467 
__func__
, 
	`gëpid
(), 
ªt
);

468 
	`exô
(
ªt
 > 0 ? 1 : 0);

470 
	`ni_‰ì
(
p
->
ª∂yd©a
);

471 
	`ni_‰ì
(
p
);

472 
	`exô
(0);

474 
	`waôpid
(
chûd
, 
NULL
, 0);

475 
	`ni_‰ì
(
p
->
ª∂yd©a
);

476 
	`ni_‰ì
(
p
);

479 
	}
}

482 
	$ni_øãlimô
()

484 
timevÆ
 
œ°
;

485 
timevÆ
 
tv
, 
sub
;

487 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

488 
	`DEBUG
(
LOG_WARNING
, "%s(): gettimeofday(): %s\n",

489 
__func__
, 
	`°ªº‹
(
î∫o
));

493 i‡(!
	`timîis£t
(&
œ°
)) {

494 
œ°
 = 
tv
;

498 
	`timîsub
(&
tv
, &
œ°
, &
sub
);

500 i‡(
sub
.
tv_£c
 < 1)

503 
œ°
 = 
tv
;

505 
	}
}

507 
	$¥_nodeöfo
(
∑ckëc⁄ãxt
 *
p
)

509 
icmp6_nodeöfo
 *
quîy
 = (icmp6_nodeöfÿ*)
p
->query;

511 *
subje˘
 = (*)(
quîy
 + 1);

512 
size_t
 
subjÀn
;

513 
subjöfo
 *subjinfo;

514 
qty≥öfo
 *qtypeinfo;

515 
ª∂y⁄subjcheck
 = 0;

516 
subj_if
;

517 #i‡
ENABLE_DEBUG


518 
¥ötbuf
[128];

519 
i
;

520 *
˝
;

522 #i‡
ENABLE_THREADS
 && 
HAVE_PTHREAD_H


523 
±hªad_t
 
thªad
;

525 
rc
;

531 i‡(
	`IN6_IS_ADDR_MULTICAST
(&
p
->
pktöfo
.
ùi6_addr
)) {

532 i‡(!
	`IN6_IS_ADDR_MC_LINKLOCAL
(&
p
->
pktöfo
.
ùi6_addr
)) {

533 
	`DEBUG
(
LOG_WARNING
,

535 
	`ni_‰ì
(
p
);

542 i‡(!
	`check_nigroup
(&
p
->
pktöfo
.
ùi6_addr
)) {

543 
	`DEBUG
(
LOG_WARNING
,

546 
	`ni_‰ì
(
p
);

553 i‡(
p
->
quîyÀn
 < (
icmp6_nodeöfo
)) {

554 
	`DEBUG
(
LOG_WARNING
, "QueryÅoo short\n");

555 
	`ni_‰ì
(
p
);

559 #i‡
ENABLE_DEBUG


560 
˝
 = 
¥ötbuf
;

561 
i
 = 0; i < (
quîy
->
icmp6_ni_n⁄˚
); i++) {

562 
˝
 +
	`•rötf
(˝, " %02x", 
quîy
->
icmp6_ni_n⁄˚
[
i
]);

564 
	`DEBUG
(
LOG_DEBUG
, "%s(): qtype=%d, flags=0x%04x,Çonce[] = {%s }\n",

565 
__func__
,

566 
	`¡ohs
(
quîy
->
ni_qty≥
),Çtohs(quîy->
ni_Êags
), 
¥ötbuf
);

569 
subjÀn
 = 
p
->
quîyÀn
 - (
icmp6_nodeöfo
);

572 
	`ht⁄s
(
quîy
->
ni_qty≥
)) {

573 
NI_QTYPE_NOOP
:

574 
NI_QTYPE_SUPTYPES
:

575 i‡(
quîy
->
ni_code
 !
ICMP6_NI_SUBJ_FQDN
) {

576 
	`DEBUG
(
LOG_WARNING
,

578 
__func__
, 
quîy
->
ni_code
);

579 
subjÀn
 = 0;

581 
subjöfo
 = &
subjöfo_nuŒ
;

584 
subjöfo
 = 
	`subjöfo_lookup
(
quîy
->
ni_code
);

585 i‡(!
subjöfo
) {

586 
	`DEBUG
(
LOG_WARNING
,

588 
__func__
, 
quîy
->
ni_code
);

589 
	`ni_‰ì
(
p
);

595 
qty≥öfo
 = 
	`qty≥öfo_lookup
(
	`¡ohs
(
quîy
->
ni_qty≥
));

600 i‡(
qty≥öfo
->
gëª∂y
 =
subjöfo
->
checksubj
)

601 
ª∂y⁄subjcheck
 = 1;

603 i‡(
subjöfo
->
	`checksubj
(
p
,

604 
subje˘
, 
subjÀn
,

605 
quîy
->
ni_Êags
,

606 
ª∂y⁄subjcheck
 ? 
NULL
 : &
subj_if
,

607 
ª∂y⁄subjcheck
)) {

608 i‡(
p
->
ª∂yd©Æí
 < 0) {

609 
	`DEBUG
(
LOG_WARNING
,

611 
	`°ªº‹
(
î∫o
));

613 
	`ni_‰ì
(
p
);

618 
rc
 = 
	`ni_pﬁicy
(
p
);

619 i‡(
rc
 <= 0) {

620 
	`ni_‰ì
(
p
->
ª∂yd©a
);

621 
p
->
ª∂yd©a
 = 
NULL
;

622 
p
->
ª∂yd©Æí
 = 0;

623 i‡(
rc
 < 0) {

624 
	`DEBUG
(
LOG_WARNING
, "Ignored byÖolicy.\n");

625 
	`ni_‰ì
(
p
);

628 
	`DEBUG
(
LOG_WARNING
, "Refused byÖolicy.\n");

629 
ª∂y⁄subjcheck
 = 0;

630 
qty≥öfo
 = &
qty≥öfo_ªfu£d
;

634 i‡(!
ª∂y⁄subjcheck
) {

635 i‡(
qty≥öfo
->
	`gëª∂y
(
p
,

636 
NULL
, 0,

637 
quîy
->
ni_Êags
,

638 &
subj_if
,

640 i‡(
p
->
ª∂yd©Æí
) {

641 
	`DEBUG
(
LOG_WARNING
,

643 
	`°ªº‹
(
î∫o
));

645 
	`ni_‰ì
(
p
);

651 i‡(
qty≥öfo
->
Êags
&
QTYPEINFO_F_RATELIMIT
 &&

652 
	`ni_øãlimô
()) {

653 
	`ni_‰ì
(
p
->
ª∂yd©a
);

654 
	`ni_‰ì
(
p
);

659 
p
->
ª∂y
.
ni_qty≥
 = 
quîy
->ni_qtype;

660 
	`mem˝y
(
p
->
ª∂y
.
icmp6_ni_n⁄˚
, 
quîy
->icmp6_ni_nonce, (p->reply.icmp6_ni_nonce));

663 i‡(
	`IN6_IS_ADDR_MULTICAST
(&
p
->
pktöfo
.
ùi6_addr
)) {

668 
	`mem£t
(&
p
->
pktöfo
.
ùi6_addr
, 0, (p->pktinfo.ipi6_addr));

673 
p
->
dñay
 = (Ë(
MAX_ANYCAST_DELAY_TIME
*
	`ønd
()/(
RAND_MAX
+1.0));

675 
p
->
dñay
 = 0;

680 #i‡
ENABLE_THREADS
 && 
HAVE_LIBPTHREAD


682 i‡(
	`±hªad_¸óã
(&
thªad
, &
∑âr
, 
ni_£nd_thªad
, 
p
)) {

683 
	`ni_‰ì
(
p
->
ª∂yd©a
);

684 
	`ni_‰ì
(
p
);

689 i‡(
	`ni_£nd_f‹k
(
p
)) {

690 
	`ni_‰ì
(
p
->
ª∂yd©a
);

691 
	`ni_‰ì
(
p
);

697 
	}
}

	@iputils-s20140519/ninfod/ninfod_name.c

35 #i‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

39 #i‡
HAVE_SYS_TYPES_H


40 
	~<sys/ty≥s.h
>

42 #i‡
STDC_HEADERS


43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<°ddef.h
>

46 
	~<˘y≥.h
>

48 #i‡
HAVE_STDLIB_H


49 
	~<°dlib.h
>

52 #i‡
HAVE_STRING_H


53 #i‡!
STDC_HEADERS
 && 
HAVE_MEMORY_H


54 
	~<mem‹y.h
>

56 
	~<°rög.h
>

58 #i‡
HAVE_STRINGS_H


59 
	~<°rögs.h
>

61 #i‡
HAVE_INTTYPES_H


62 
	~<öây≥s.h
>

64 #i‡
HAVE_STDINT_H


65 
	~<°döt.h
>

68 #i‡
HAVE_UNISTD_H


69 
	~<uni°d.h
>

72 #i‡
TIME_WITH_SYS_TIME


73 
	~<sys/time.h
>

74 
	~<time.h
>

76 #i‡
HAVE_SYS_TIME_H


77 
	~<sys/time.h
>

79 
	~<time.h
>

83 #i‡
HAVE_SYS_UIO_H


84 
	~<sys/uio.h
>

87 
	~<sys/sockë.h
>

89 #i‡
HAVE_NETINET_IN_H


90 
	~<√töë/ö.h
>

93 #i‡
HAVE_NETINET_ICMP6_H


94 
	~<√töë/icmp6.h
>

96 #i‚de‡
HAVE_STRUCT_ICMP6_NODEINFO


97 
	~"icmp6_nodeöfo.h
"

100 
	~<¨∑/öë.h
>

102 #i‡
deföed
(
HAVE_GNUTLS_OPENSSL_H
)

103 
	~<gnués/›ís¶.h
>

104 #ñi‡
deföed
(
HAVE_OPENSSL_MD5_H
)

105 
	~<›ís¶/md5.h
>

108 #i‡
HAVE_SYS_UTSNAME_H


109 
	~<sys/ut¢ame.h
>

111 #i‡
HAVE_NETDB_H


112 
	~<√tdb.h
>

114 
	~<î∫o.h
>

116 #i‡
HAVE_SYSLOG_H


117 
	~<sy¶og.h
>

120 
	~"nöfod.h
"

122 #i‚de‡
off£tof


123 
	#off£tof
(
aggªg©e
,
membî
Ë((
size_t
)&(◊ggªg©ê*)0)->membî)

	)

127 #i‚de‡
IPV6_JOIN_GROUP


128 
	#IPV6_JOIN_GROUP
 
IPV6_ADD_MEMBERSHIP


	)

129 
	#IPV6_LEAVE_GROUP
 
IPV6_DROP_MEMBERSHIP


	)

134 *
RCSID
 
__©åibuã__
 ((
unu£d
)) = "$USAGI:Çinfod_name.c,v 1.15 2003-01-11 14:33:28 yoshfuji Exp $";

137 
ut¢ame
 
	gut¢ame
;

138 *
	guts_nodíame
 = 
ut¢ame
.
nodíame
;

140 
	gnodíame
[
MAX_DNSNAME_SIZE
];

141 
size_t
 
	gnodíamñí
;

143 
ùv6_mªq
 
	gnigroup
;

147 
	$check_nigroup
(c⁄° 
ö6_addr
 *
addr
)

149  
	`IN6_IS_ADDR_MULTICAST
(&
nigroup
.
ùv6mr_mu…üddr
) &&

150 
	`IN6_ARE_ADDR_EQUAL
(&
nigroup
.
ùv6mr_mu…üddr
, 
addr
);

151 
	}
}

153 
	$ícode_dn¢ame
(c⁄° *
«me
,

154 *
buf
, 
size_t
 
buÊí
,

155 
fqdn
)

157 
size_t
 
«mñí
;

158 
i
;

160 i‡(
buÊí
 < 0)

163 
«mñí
 = 
	`°æí
(
«me
);

164 i‡(
«mñí
 == 0)

166 i‡(
«mñí
 > 255 || 
buÊí
 <Çamelen+1)

169 
i
 = 0;

170 
i
 <
«mñí
) {

171 c⁄° *
e
;

172 
Œí
, 
ii
;

174 
e
 = 
	`°rchr
(&
«me
[
i
], '.');

175 i‡(
e
 =
NULL
)

176 
e
 = 
«me
 + 
«mñí
;

177 
Œí
 = 
e
 - &
«me
[
i
];

178 i‡(
Œí
 == 0) {

179 i‡(*
e
)

181 i‡(
fqdn
 < 0)

183 
fqdn
 = 1;

186 i‡(
Œí
 >= 0x40)

188 
buf
[
i
] = 
Œí
;

189 
ii
 = 0; iò< 
Œí
; ii++) {

190 i‡(!
	`ißscii
(
«me
[
i
+
ii
]))

192 i‡(
ii
 =0 || iò=
Œí
-1) {

193 i‡(!
	`ißÕha
(
«me
[
i
+
ii
]Ë&& !
	`isdigô
(name[i+ii]))

195 } i‡(!
	`iß um
(
«me
[
i
+
ii
]) &&Çame[i+ii] != '-')

197 
buf
[
i
+
ii
+1] = 
	`isuµî
(
«me
[i+ii]Ë? 
	`tﬁowî
(name[i+ii]) :Çame[i+ii];

199 
i
 +
Œí
 + 1;

201 i‡(
buÊí
 < 
i
 + 1 + !(
fqdn
 > 0))

203 
buf
[
i
++] = 0;

204 i‡(!(
fqdn
 > 0))

205 
buf
[
i
++] = 0;

206  
i
;

207 
	}
}

209 
	$com∑ª_dn¢ame
(c⁄° *
s
, 
size_t
 
¶í
,

210 c⁄° *
n
, 
size_t
 
∆í
)

212 c⁄° *
s0
 = 
s
, *
n0
 = 
n
;

213 
d⁄e
 = 0, 
ªtcode
 = 0;

214 i‡(
¶í
 < 1 || 
∆í
 < 1)

217 i‡(
¶í
 =
∆í
 && 
	`memcmp
(
s
, 
n
, slen) == 0)

219 i‡(*(
s0
 + 
¶í
 - 1Ë|| *(
n0
 + 
∆í
 - 1))

221 
s
 < 
s0
 + 
¶í
 && 
n
 < 
n0
 + 
∆í
) {

222 i‡(*
s
 >0x40 || *
n
 >= 0x40)

224 i‡(
s
 + *†+ 1 > 
s0
 + 
¶í
 || 
n
 + *¿+ 1 > 
n0
 + 
∆í
)

226 i‡(*
s
 == '\0') {

227 i‡(
s
 =
s0
 + 
¶í
 - 1)

229 i‡(
s
 + 1 =
s0
 + 
¶í
 - 1)

230  
ªtcode
;

234 i‡(!
d⁄e
) {

235 i‡(*
n
 == '\0') {

236 i‡(
n
 =
n0
 + 
∆í
 - 1) {

237 
d⁄e
 = 1;

238 } i‡(
n
 + 1 =
n0
 + 
∆í
 - 1) {

239 
ªtcode
 = 1;

240 
d⁄e
 = 1;

244 i‡(*
s
 !*
n
) {

245 
d⁄e
 = 1;

246 
ªtcode
 = 1;

248 i‡(
	`memcmp
(
s
+1, 
n
+1, *s)) {

249 
d⁄e
 = 1;

250 
ªtcode
 = 1;

255 
s
 += *s + 1;

256 
n
 +
d⁄e
 ? 0 : (*n + 1);

258  
ªtcode
;

259 
	}
}

261 
	$nodeöfo_group
(c⁄° *
dn¢ame
, 
«mñí
,

262 
ö6_addr
 *
nigroup
)

264 
MD5_CTX
 
˘xt
;

265 
dige°
[16];

267 i‡(!
dn¢ame
 || !
nigroup
)

270 
	`MD5_Inô
(&
˘xt
);

271 
	`MD5_Upd©e
(&
˘xt
, 
dn¢ame
, *dnsname);

272 
	`MD5_FöÆ
(
dige°
, &
˘xt
);

274 #ifde‡
s6_addr32


275 
nigroup
->
s6_addr32
[0] = 
	`ht⁄l
(0xff020000);

276 
nigroup
->
s6_addr32
[1] = 0;

277 
nigroup
->
s6_addr32
[2] = 
	`ht⁄l
(0x00000002);

279 
	`mem£t
(
nigroup
, 0, (*nigroup));

280 
nigroup
->
s6_addr
[ 0] = 0xff;

281 
nigroup
->
s6_addr
[ 1] = 0x02;

282 
nigroup
->
s6_addr
[11] = 0x02;

284 
	`mem˝y
(&
nigroup
->
s6_addr
[12], 
dige°
, 4);

287 
	}
}

290 
	$öô_nodeöfo_nodíame
(
f‹˚d
)

292 
ut¢ame
 
√w«me
;

293 
Àn
;

294 
ch™ged
 = 0;

296 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

298 
	`u«me
(&
√w«me
);

299 
ch™ged
 = 
	`°rcmp
(
√w«me
.
nodíame
, 
ut¢ame
.nodename);

301 i‡(!
ch™ged
 && !
f‹˚d
)

304 
	`mem˝y
(&
ut¢ame
, &
√w«me
, (newname));

307 i‡((
ch™ged
 || 
f‹˚d
Ë&& !
	`IN6_IS_ADDR_UNSPECIFIED
(&
nigroup
.
ùv6mr_mu…üddr
)) {

308 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_LEAVE_GROUP
, &
nigroup
, (nigroup)) < 0) {

309 #i‡
ENABLE_DEBUG


310 
nüddrbuf
[
INET6_ADDRSTRLEN
];

311 i‡(
	`öë_¡›
(
AF_INET6
, &
nigroup
, 
nüddrbuf
, “üddrbuf)Ë=
NULL
)

312 
	`°r˝y
(
nüddrbuf
, "???");

314 
	`DEBUG
(
LOG_WARNING
,

316 
__func__
, 
nüddrbuf
);

317 
	`mem£t
(&
nigroup
, 0, (nigroup));

321 
Àn
 = 
	`ícode_dn¢ame
(
uts_nodíame
,

322 
nodíame
,

323 (
nodíame
),

327 
nodíamñí
 = 
Àn
 > 0 ?Üen : 0;

330 i‡(
ch™ged
 || 
f‹˚d
) {

331 i‡(
nodíamñí
) {

332 
	`mem£t
(&
nigroup
, 0, (nigroup));

333 
	`nodeöfo_group
(
nodíame
, 
Àn
, &
nigroup
.
ùv6mr_mu…üddr
);

334 
nigroup
.
ùv6mr_öãrÁ˚
 = 0;

335 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_JOIN_GROUP
, &
nigroup
, (nigroup)) < 0) {

336 #i‡
ENABLE_DEBUG


337 
nüddrbuf
[
INET6_ADDRSTRLEN
];

338 i‡(
	`öë_¡›
(
AF_INET6
, &
nigroup
, 
nüddrbuf
, “üddrbuf)Ë=
NULL
)

339 
	`°r˝y
(
nüddrbuf
, "???");

341 
	`DEBUG
(
LOG_WARNING
,

343 
__func__
, 
nüddrbuf
);

344 
	`mem£t
(&
nigroup
, 0, (nigroup));

347 
	`mem£t
(&
nigroup
, 0, (nigroup));

352 
	}
}

356 
	$¥_nodeöfo_nodíame
(
CHECKANDFILL_ARGS
)

358 
	`DEBUG
(
LOG_DEBUG
, "%s()\n", 
__func__
);

360 i‡(
subje˘
) {

361 i‡(!
nodíamñí
 ||

362 
	`com∑ª_dn¢ame
(
subje˘
, 
subjÀn
,

363 
nodíame
,

364 
nodíamñí
))

366 i‡(
subj_if
)

367 *
subj_if
 = 
p
->
pktöfo
.
ùi6_ifödex
;

370 i‡(
ª∂y
) {

371 
uöt32_t
 
âl
 = 0;

373 
p
->
ª∂y
.
ni_ty≥
 = 
ICMP6_NI_REPLY
;

374 
p
->
ª∂y
.
ni_code
 = 
ICMP6_NI_SUCCESS
;

375 
p
->
ª∂y
.
ni_cksum
 = 0;

376 
p
->
ª∂y
.
ni_qty≥
 = 
	`ht⁄s
(
NI_QTYPE_DNSNAME
);

377 
p
->
ª∂y
.
ni_Êags
 = 0;

379 
p
->
ª∂yd©Æí
 = 
nodíamñí
 ? (
âl
)+nodenamelen : 0;

380 
p
->
ª∂yd©a
 = 
nodíamñí
 ? 
	`ni_mÆloc
’->
ª∂yd©Æí
Ë: 
NULL
;

381 i‡(
p
->
ª∂yd©a
) {

382 
	`mem˝y
(
p
->
ª∂yd©a
, &
âl
, (ttl));

383 
	`mem˝y
(
p
->
ª∂yd©a
 + (
âl
), &
nodíame
, 
nodíamñí
);

388 
	}
}

	@iputils-s20140519/ping.c

54 
	~"pög_comm⁄.h
"

56 
	~<√töë/ù.h
>

57 
	~<√töë/ù_icmp.h
>

58 #i‚de‡
WITHOUT_IFADDRS


59 
	~<iÁddrs.h
>

62 #i‚de‡
ICMP_FILTER


63 
	#ICMP_FILTER
 1

	)

64 
	sicmp_fûãr
 {

65 
__u32
 
	md©a
;

70 
	#MAXIPLEN
 60

	)

71 
	#MAXICMPLEN
 76

	)

72 
	#NROUTES
 9

	)

73 
	#TOS_MAX
 255

	)

74 
	#MAX_HOSTNAMELEN
 
NI_MAXHOST


	)

77 
	gts_ty≥
;

78 
	gƒouã
 = 0;

79 
__u32
 
	grouã
[10];

83 
sockaddr_ö
 
	gwhîëo
;

84 
	g›éí
 = 0;

85 
	g£âos
 = 0;

86 
	gicmp_sock
;

87 
	gouçack
[0x10000];

88 
	gmax∑ckë
 = (
ouçack
);

90 
	gbrﬂdˇ°_pögs
 = 0;

92 *
¥_addr
(
__u32
);

93 
¥_›ti⁄s
(* 
˝
, 
hÀn
);

94 
¥_ùh
(
ùhdr
 *
ù
);

95 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

96 
	`ö_cksum
(c⁄° *
addr
, 
Àn
, 
ß…
);

97 
	`¥_icmph
(
__u8
 
ty≥
, __u8 
code
, 
__u32
 
öfo
, 
icmphdr
 *
i˝
);

98 
	`∑r£tos
(*
°r
);

101 
cmsghdr
 
cm
;

102 
ö_pktöfo
 
ùi
;

103 } 
cmsg
 = { {(
cmsghdr
Ë+ (
ö_pktöfo
), 
SOL_IP
, 
IP_PKTINFO
},

104 {0, }
	}
};

105 
	gcmsg_Àn
;

107 
sockaddr_ö
 
	gsour˚
;

108 *
	gdevi˚
;

109 
	gpmtudisc
 = -1;

113 
	$maö
(
¨gc
, **
¨gv
)

115 
ho°ít
 *
hp
;

116 
ch
, 
hﬁd
, 
∑ckÀn
;

117 
sockë_î∫o
;

118 *
∑ckë
;

119 *
èrgë
;

120 #ifde‡
USE_IDN


121 *
h«mebuf
 = 
NULL
;

123 
h«mebuf
[
MAX_HOSTNAMELEN
];

125 
r•a˚
[3 + 4 * 
NROUTES
 + 1];

127 
	`limô_ˇ∑bûôõs
();

129 #ifde‡
USE_IDN


130 
	`£éoˇÀ
(
LC_ALL
, "");

133 
	`íabÀ_ˇ∑bûôy_øw
();

135 
icmp_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

136 
sockë_î∫o
 = 
î∫o
;

138 
	`dißbÀ_ˇ∑bûôy_øw
();

140 
sour˚
.
sö_Ámûy
 = 
AF_INET
;

142 
¥ñﬂd
 = 1;

143 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
COMMON_OPTSTR
 "bRT:")Ë!
EOF
) {

144 
ch
) {

146 
brﬂdˇ°_pögs
 = 1;

149 
£âos
 = 
	`∑r£tos
(
›èrg
);

150 i‡(
£âos
 &&

151 (
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_TOS
,

152 (*)&
£âos
, ()) < 0)) {

153 
	`≥º‹
("ping:Érror setting QOS sockopts");

154 
	`exô
(2);

158 i‡(
›ti⁄s
 & 
F_TIMESTAMP
) {

159 
	`Ârötf
(
°dîr
, "Only one of -T or -R may be used\n");

160 
	`exô
(2);

162 
›ti⁄s
 |
F_RROUTE
;

165 i‡(
›ti⁄s
 & 
F_RROUTE
) {

166 
	`Ârötf
(
°dîr
, "Only one of -T or -R may be used\n");

167 
	`exô
(2);

169 
›ti⁄s
 |
F_TIMESTAMP
;

170 i‡(
	`°rcmp
(
›èrg
, "tsonly") == 0)

171 
ts_ty≥
 = 
IPOPT_TS_TSONLY
;

172 i‡(
	`°rcmp
(
›èrg
, "tsandaddr") == 0)

173 
ts_ty≥
 = 
IPOPT_TS_TSANDADDR
;

174 i‡(
	`°rcmp
(
›èrg
, "tsprespec") == 0)

175 
ts_ty≥
 = 
IPOPT_TS_PRESPEC
;

177 
	`Ârötf
(
°dîr
, "InvalidÅimestampÅype\n");

178 
	`exô
(2);

183 i‡(
	`öë_±⁄
(
AF_INET
, 
›èrg
, &
sour˚
.
sö_addr
) > 0)

184 
›ti⁄s
 |
F_STRICTSOURCE
;

186 
devi˚
 = 
›èrg
;

190 i‡(
	`°rcmp
(
›èrg
, "do") == 0)

191 
pmtudisc
 = 
IP_PMTUDISC_DO
;

192 i‡(
	`°rcmp
(
›èrg
, "dont") == 0)

193 
pmtudisc
 = 
IP_PMTUDISC_DONT
;

194 i‡(
	`°rcmp
(
›èrg
, "want") == 0)

195 
pmtudisc
 = 
IP_PMTUDISC_WANT
;

197 
	`Ârötf
(
°dîr
, "ping: wrong value for -M: do, dont, wantáre valid ones.\n");

198 
	`exô
(2);

202 
	`¥ötf
("pög utûôy, iputûs-%s\n", 
SNAPSHOT
);

203 
	`exô
(0);

204 
COMMON_OPTIONS


205 
	`comm⁄_›ti⁄s
(
ch
);

208 
	`ußge
();

211 
¨gc
 -
›töd
;

212 
¨gv
 +
›töd
;

214 i‡(
¨gc
 == 0)

215 
	`ußge
();

216 i‡(
¨gc
 > 1) {

217 i‡(
›ti⁄s
 & 
F_RROUTE
)

218 
	`ußge
();

219 i‡(
›ti⁄s
 & 
F_TIMESTAMP
) {

220 i‡(
ts_ty≥
 !
IPOPT_TS_PRESPEC
)

221 
	`ußge
();

222 i‡(
¨gc
 > 5)

223 
	`ußge
();

225 i‡(
¨gc
 > 10)

226 
	`ußge
();

227 
›ti⁄s
 |
F_SOURCEROUTE
;

230 
¨gc
 > 0) {

231 
èrgë
 = *
¨gv
;

233 
	`mem£t
((*)&
whîëo
, 0, (whereto));

234 
whîëo
.
sö_Ámûy
 = 
AF_INET
;

235 i‡(
	`öë_©⁄
(
èrgë
, &
whîëo
.
sö_addr
) == 1) {

236 
ho°«me
 = 
èrgë
;

237 i‡(
¨gc
 == 1)

238 
›ti⁄s
 |
F_NUMERIC
;

240 *
idn
;

241 #ifde‡
USE_IDN


242 
rc
;

244 i‡(
h«mebuf
) {

245 
	`‰ì
(
h«mebuf
);

246 
h«mebuf
 = 
NULL
;

249 
rc
 = 
	`id«_to_ascii_lz
(
èrgë
, &
idn
, 0);

250 i‡(
rc
 !
IDNA_SUCCESS
) {

251 
	`Ârötf
(
°dîr
, "pög: IDNÉncodög faûed: %s\n", 
	`id«_°ªº‹
(
rc
));

252 
	`exô
(2);

255 
idn
 = 
èrgë
;

257 
hp
 = 
	`gëho°by«me2
(
idn
, 
AF_INET
);

258 i‡(!
hp
) {

259 
	`Ârötf
(
°dîr
, "pög: unknow¿ho° %s\n", 
èrgë
);

260 
	`exô
(2);

262 #ifde‡
USE_IDN


263 
	`‰ì
(
idn
);

265 
	`mem˝y
(&
whîëo
.
sö_addr
, 
hp
->
h_addr
, 4);

266 #ifde‡
USE_IDN


267 i‡(
	`id«_to_unicode_lzlz
(
hp
->
h_«me
, &
h«mebuf
, 0Ë!
IDNA_SUCCESS
) {

268 
h«mebuf
 = 
	`°rdup
(
hp
->
h_«me
);

269 i‡(!
h«mebuf
) {

270 
	`≥º‹
("ping: strdup");

271 
	`exô
(-1);

275 
	`°∫˝y
(
h«mebuf
, 
hp
->
h_«me
, (hnamebuf) - 1);

276 
h«mebuf
[(hnamebuf) - 1] = 0;

278 
ho°«me
 = 
h«mebuf
;

280 i‡(
¨gc
 > 1)

281 
rouã
[
ƒouã
++] = 
whîëo
.
sö_addr
.
s_addr
;

282 
¨gc
--;

283 
¨gv
++;

286 i‡(
sour˚
.
sö_addr
.
s_addr
 == 0) {

287 
sockÀn_t
 
Æí
;

288 
sockaddr_ö
 
d°
 = 
whîëo
;

289 
¥obe_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

291 i‡(
¥obe_fd
 < 0) {

292 
	`≥º‹
("socket");

293 
	`exô
(2);

295 i‡(
devi˚
) {

296 
i‰eq
 
i‰
;

297 
rc
;

299 
	`mem£t
(&
i‰
, 0, (ifr));

300 
	`°∫˝y
(
i‰
.
i‰_«me
, 
devi˚
, 
IFNAMSIZ
-1);

302 
	`íabÀ_ˇ∑bûôy_øw
();

303 
rc
 = 
	`£tsock›t
(
¥obe_fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
devi˚
, 
	`°æí
(device)+1);

304 
	`dißbÀ_ˇ∑bûôy_øw
();

306 i‡(
rc
 == -1) {

307 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
d°
.
sö_addr
.
s_addr
))) {

308 
ù_mªqn
 
imr
;

309 i‡(
	`io˘l
(
¥obe_fd
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

310 
	`Ârötf
(
°dîr
, "pög: unknow¿iÁ˚ %s\n", 
devi˚
);

311 
	`exô
(2);

313 
	`mem£t
(&
imr
, 0, (imr));

314 
imr
.
imr_ifödex
 = 
i‰
.
i‰_ifödex
;

315 i‡(
	`£tsock›t
(
¥obe_fd
, 
SOL_IP
, 
IP_MULTICAST_IF
, &
imr
, (imr)) == -1) {

316 
	`≥º‹
("ping: IP_MULTICAST_IF");

317 
	`exô
(2);

320 
	`≥º‹
("ping: SO_BINDTODEVICE");

321 
	`exô
(2);

326 i‡(
£âos
 &&

327 
	`£tsock›t
(
¥obe_fd
, 
IPPROTO_IP
, 
IP_TOS
, (*)&
£âos
, ()) < 0)

328 
	`≥º‹
("Warning:Érror setting QOS sockopts");

330 
d°
.
sö_p‹t
 = 
	`ht⁄s
(1025);

331 i‡(
ƒouã
)

332 
d°
.
sö_addr
.
s_addr
 = 
rouã
[0];

333 i‡(
	`c⁄√˘
(
¥obe_fd
, (
sockaddr
*)&
d°
, (dst)) == -1) {

334 i‡(
î∫o
 =
EACCES
) {

335 i‡(
brﬂdˇ°_pögs
 == 0) {

336 
	`Ârötf
(
°dîr
, "Do you wantÅoÖing broadcast? Then -b\n");

337 
	`exô
(2);

339 
	`Ârötf
(
°dîr
, "WARNING:Öinging broadcastáddress\n");

340 i‡(
	`£tsock›t
(
¥obe_fd
, 
SOL_SOCKET
, 
SO_BROADCAST
,

341 &
brﬂdˇ°_pögs
, (broadcast_pings)) < 0) {

342 
	`≥º‹
 ("can't set broadcasting");

343 
	`exô
(2);

345 i‡(
	`c⁄√˘
(
¥obe_fd
, (
sockaddr
*)&
d°
, (dst)) == -1) {

346 
	`≥º‹
("connect");

347 
	`exô
(2);

350 
	`≥º‹
("connect");

351 
	`exô
(2);

354 
Æí
 = (
sour˚
);

355 i‡(
	`gësock«me
(
¥obe_fd
, (
sockaddr
*)&
sour˚
, &
Æí
) == -1) {

356 
	`≥º‹
("getsockname");

357 
	`exô
(2);

359 
sour˚
.
sö_p‹t
 = 0;

361 #i‚de‡
WITHOUT_IFADDRS


362 i‡(
devi˚
) {

363 
iÁddrs
 *
iÁ0
, *
iÁ
;

364 
ªt
;

366 
ªt
 = 
	`gëiÁddrs
(&
iÁ0
);

367 i‡(
ªt
) {

368 
	`Ârötf
(
°dîr
, "gatifaddrs() failed.\n");

369 
	`exô
(2);

371 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

372 i‡(!
iÁ
->
iÁ_addr
 || iÁ->iÁ_addr->
ß_Ámûy
 !
AF_INET
)

374 i‡(!
	`°∫cmp
(
iÁ
->
iÁ_«me
, 
devi˚
, (device) - 1) &&

375 !
	`memcmp
(&((
sockaddr_ö
 *)
iÁ
->
iÁ_addr
)->
sö_addr
,

376 &
sour˚
.
sö_addr
, (source.sin_addr)))

379 
	`‰ìiÁddrs
(
iÁ0
);

380 i‡(!
iÁ
)

381 
	`Ârötf
(
°dîr
, "pög: W¨nög: sour˚áddªs†mighàbê£À˘ed o¿devi˚ othîÅh™ %s.\n", 
devi˚
);

384 
	`˛o£
(
¥obe_fd
);

387 i‡(
whîëo
.
sö_addr
.
s_addr
 == 0)

388 
whîëo
.
sö_addr
.
s_addr
 = 
sour˚
.sin_addr.s_addr;

390 i‡(
icmp_sock
 < 0) {

391 
î∫o
 = 
sockë_î∫o
;

392 
	`≥º‹
("ping: icmp open socket");

393 
	`exô
(2);

396 i‡(
devi˚
) {

397 
i‰eq
 
i‰
;

399 
	`mem£t
(&
i‰
, 0, (ifr));

400 
	`°∫˝y
(
i‰
.
i‰_«me
, 
devi˚
, 
IFNAMSIZ
-1);

401 i‡(
	`io˘l
(
icmp_sock
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

402 
	`Ârötf
(
°dîr
, "pög: unknow¿iÁ˚ %s\n", 
devi˚
);

403 
	`exô
(2);

405 
cmsg
.
ùi
.
ùi_ifödex
 = 
i‰
.
i‰_ifödex
;

406 
cmsg_Àn
 = (
cmsg
);

409 i‡(
brﬂdˇ°_pögs
 || 
	`IN_MULTICAST
(
	`¡ohl
(
whîëo
.
sö_addr
.
s_addr
))) {

410 i‡(
uid
) {

411 i‡(
öãrvÆ
 < 1000) {

412 
	`Ârötf
(
°dîr
, "ping: broadcastÖing withÅoo short interval.\n");

413 
	`exô
(2);

415 i‡(
pmtudisc
 >0 &&Ömtudis¯!
IP_PMTUDISC_DO
) {

416 
	`Ârötf
(
°dîr
, "ping: broadcastÖing doesÇot fragment.\n");

417 
	`exô
(2);

420 i‡(
pmtudisc
 < 0)

421 
pmtudisc
 = 
IP_PMTUDISC_DO
;

424 i‡(
pmtudisc
 >= 0) {

425 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_IP
, 
IP_MTU_DISCOVER
, &
pmtudisc
, (pmtudisc)) == -1) {

426 
	`≥º‹
("ping: IP_MTU_DISCOVER");

427 
	`exô
(2);

431 i‡((
›ti⁄s
&
F_STRICTSOURCE
) &&

432 
	`böd
(
icmp_sock
, (
sockaddr
*)&
sour˚
, (source)) == -1) {

433 
	`≥º‹
("bind");

434 
	`exô
(2);

437 
icmp_fûãr
 
fût
;

438 
fût
.
d©a
 = ~((1<<
ICMP_SOURCE_QUENCH
)|

439 (1<<
ICMP_DEST_UNREACH
)|

440 (1<<
ICMP_TIME_EXCEEDED
)|

441 (1<<
ICMP_PARAMETERPROB
)|

442 (1<<
ICMP_REDIRECT
)|

443 (1<<
ICMP_ECHOREPLY
));

444 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_RAW
, 
ICMP_FILTER
, (*)&
fût
, (filt)) == -1)

445 
	`≥º‹
("WARNING: setsockopt(ICMP_FILTER)");

447 
hﬁd
 = 1;

448 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_IP
, 
IP_RECVERR
, (*)&
hﬁd
, (hold)))

449 
	`Ârötf
(
°dîr
, "WARNING: your kernel is veeery old. NoÖroblems.\n");

452 i‡(
›ti⁄s
 & 
F_RROUTE
) {

453 
	`mem£t
(
r•a˚
, 0, (rspace));

454 
r•a˚
[0] = 
IPOPT_NOP
;

455 
r•a˚
[1+
IPOPT_OPTVAL
] = 
IPOPT_RR
;

456 
r•a˚
[1+
IPOPT_OLEN
] = (rspace)-1;

457 
r•a˚
[1+
IPOPT_OFFSET
] = 
IPOPT_MINOFF
;

458 
›éí
 = 40;

459 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_OPTIONS
, 
r•a˚
, (rspace)) < 0) {

460 
	`≥º‹
("ping:ÑecordÑoute");

461 
	`exô
(2);

464 i‡(
›ti⁄s
 & 
F_TIMESTAMP
) {

465 
	`mem£t
(
r•a˚
, 0, (rspace));

466 
r•a˚
[0] = 
IPOPT_TIMESTAMP
;

467 
r•a˚
[1] = (
ts_ty≥
==
IPOPT_TS_TSONLY
 ? 40 : 36);

468 
r•a˚
[2] = 5;

469 
r•a˚
[3] = 
ts_ty≥
;

470 i‡(
ts_ty≥
 =
IPOPT_TS_PRESPEC
) {

471 
i
;

472 
r•a˚
[1] = 4+
ƒouã
*8;

473 
i
=0; i<
ƒouã
; i++)

474 *(
__u32
*)&
r•a˚
[4+
i
*8] = 
rouã
[i];

476 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_OPTIONS
, 
r•a˚
,Ñspace[1]) < 0) {

477 
r•a˚
[3] = 2;

478 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_OPTIONS
, 
r•a˚
,Ñspace[1]) < 0) {

479 
	`≥º‹
("ping:Ås option");

480 
	`exô
(2);

483 
›éí
 = 40;

485 i‡(
›ti⁄s
 & 
F_SOURCEROUTE
) {

486 
i
;

487 
	`mem£t
(
r•a˚
, 0, (rspace));

488 
r•a˚
[0] = 
IPOPT_NOOP
;

489 
r•a˚
[1+
IPOPT_OPTVAL
] = (
›ti⁄s
 & 
F_SO_DONTROUTE
Ë? 
IPOPT_SSRR


490 : 
IPOPT_LSRR
;

491 
r•a˚
[1+
IPOPT_OLEN
] = 3 + 
ƒouã
*4;

492 
r•a˚
[1+
IPOPT_OFFSET
] = 
IPOPT_MINOFF
;

493 
i
=0; i<
ƒouã
; i++)

494 *(
__u32
*)&
r•a˚
[4+
i
*4] = 
rouã
[i];

496 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_OPTIONS
, 
r•a˚
, 4 + 
ƒouã
*4) < 0) {

497 
	`≥º‹
("ping:ÑecordÑoute");

498 
	`exô
(2);

500 
›éí
 = 40;

505 
hﬁd
 = 
d©Æí
 + 8;

506 
hﬁd
 +((hﬁd+511)/512)*(
›éí
 + 20 + 16 + 64 + 160);

507 
	`sock_£tbufs
(
icmp_sock
, 
hﬁd
);

509 i‡(
brﬂdˇ°_pögs
) {

510 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_BROADCAST
,

511 &
brﬂdˇ°_pögs
, (broadcast_pings)) < 0) {

512 
	`≥º‹
 ("ping: can't set broadcasting");

513 
	`exô
(2);

517 i‡(
›ti⁄s
 & 
F_NOLOOP
) {

518 
lo›
 = 0;

519 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_MULTICAST_LOOP
,

520 &
lo›
, 1) == -1) {

521 
	`≥º‹
 ("ping: can't disable multicastÜoopback");

522 
	`exô
(2);

525 i‡(
›ti⁄s
 & 
F_TTL
) {

526 
ôé
 = 
âl
;

527 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
,

528 &
âl
, 1) == -1) {

529 
	`≥º‹
 ("ping: can't set multicastÅime-to-live");

530 
	`exô
(2);

532 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IP
, 
IP_TTL
,

533 &
ôé
, (ittl)) == -1) {

534 
	`≥º‹
 ("ping: can't set unicastÅime-to-live");

535 
	`exô
(2);

539 i‡(
d©Æí
 > 0xFFFF - 8 - 
›éí
 - 20) {

540 i‡(
uid
 || 
d©Æí
 > (
ouçack
)-8) {

541 
	`Ârötf
(
°dîr
, "Eº‹:Öackë sizê%d i†toÿœrge. Maximum i†%d\n", 
d©Æí
, 0xFFFF-8-20-
›éí
);

542 
	`exô
(2);

545 
	`Ârötf
(
°dîr
, "WARNING:Öackë sizê%d i†toÿœrge. Maximum i†%d\n", 
d©Æí
, 0xFFFF-8-20-
›éí
);

548 i‡(
d©Æí
 >(
timevÆ
))

549 
timög
 = 1;

550 
∑ckÀn
 = 
d©Æí
 + 
MAXIPLEN
 + 
MAXICMPLEN
;

551 i‡(!(
∑ckë
 = (*)
	`mÆloc
(()
∑ckÀn
))) {

552 
	`Ârötf
(
°dîr
, "ping: out of memory.\n");

553 
	`exô
(2);

556 
	`¥ötf
("PING %†(%sË", 
ho°«me
, 
	`öë_¡ﬂ
(
whîëo
.
sö_addr
));

557 i‡(
devi˚
 || (
›ti⁄s
&
F_STRICTSOURCE
))

558 
	`¥ötf
("‰om %†%s: ", 
	`öë_¡ﬂ
(
sour˚
.
sö_addr
), 
devi˚
 ?: "");

559 
	`¥ötf
("%d(%dËbyã†o‡d©a.\n", 
d©Æí
, d©Æí+8+
›éí
+20);

561 
	`£tup
(
icmp_sock
);

563 
	`maö_lo›
(
icmp_sock
, 
∑ckë
, 
∑ckÀn
);

564 
	}
}

567 
	$ª˚ive_îr‹_msg
()

569 
ªs
;

570 
cbuf
[512];

571 
iovec
 
iov
;

572 
msghdr
 
msg
;

573 
cmsghdr
 *
cmsg
;

574 
sock_exãnded_îr
 *
e
;

575 
icmphdr
 
icmph
;

576 
sockaddr_ö
 
èrgë
;

577 
√t_îr‹s
 = 0;

578 
loˇl_îr‹s
 = 0;

579 
ßved_î∫o
 = 
î∫o
;

581 
iov
.
iov_ba£
 = &
icmph
;

582 
iov
.
iov_Àn
 = (
icmph
);

583 
msg
.
msg_«me
 = (*)&
èrgë
;

584 
msg
.
msg_«mñí
 = (
èrgë
);

585 
msg
.
msg_iov
 = &
iov
;

586 
msg
.
msg_iovÀn
 = 1;

587 
msg
.
msg_Êags
 = 0;

588 
msg
.
msg_c⁄åﬁ
 = 
cbuf
;

589 
msg
.
msg_c⁄åﬁÀn
 = (
cbuf
);

591 
ªs
 = 
	`ªcvmsg
(
icmp_sock
, &
msg
, 
MSG_ERRQUEUE
|
MSG_DONTWAIT
);

592 i‡(
ªs
 < 0)

593 
out
;

595 
e
 = 
NULL
;

596 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg; cmsg = 
	`CMSG_NXTHDR
(&msg, cmsg)) {

597 i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_IP
) {

598 i‡(
cmsg
->
cmsg_ty≥
 =
IP_RECVERR
)

599 
e
 = (
sock_exãnded_îr
 *)
	`CMSG_DATA
(
cmsg
);

602 i‡(
e
 =
NULL
)

603 
	`ab‹t
();

605 i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_LOCAL
) {

606 
loˇl_îr‹s
++;

607 i‡(
›ti⁄s
 & 
F_QUIET
)

608 
out
;

609 i‡(
›ti⁄s
 & 
F_FLOOD
)

610 
	`wrôe_°dout
("E", 1);

611 i‡(
e
->
ì_î∫o
 !
EMSGSIZE
)

612 
	`Ârötf
(
°dîr
, "pög:Üoˇ»îr‹: %s\n", 
	`°ªº‹
(
e
->
ì_î∫o
));

614 
	`Ârötf
(
°dîr
, "pög:Üoˇ»îr‹: Mesßgêtoÿl⁄g, mtu=%u\n", 
e
->
ì_öfo
);

615 
√º‹s
++;

616 } i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP
) {

617 
sockaddr_ö
 *
sö
 = (sockaddr_ö*)(
e
+1);

619 i‡(
ªs
 < (
icmph
) ||

620 
èrgë
.
sö_addr
.
s_addr
 !
whîëo
.sin_addr.s_addr ||

621 
icmph
.
ty≥
 !
ICMP_ECHO
 ||

622 
icmph
.
un
.
echo
.
id
 !
idít
) {

624 
ßved_î∫o
 = 0;

625 
out
;

628 
	`acknowÀdge
(
	`¡ohs
(
icmph
.
un
.
echo
.
£quí˚
));

630 
√t_îr‹s
++;

631 
√º‹s
++;

632 i‡(
›ti⁄s
 & 
F_QUIET
)

633 
out
;

634 i‡(
›ti⁄s
 & 
F_FLOOD
) {

635 
	`wrôe_°dout
("\bE", 2);

637 
	`¥öt_time°amp
();

638 
	`¥ötf
("From %†icmp_£q=%u ", 
	`¥_addr
(
sö
->
sö_addr
.
s_addr
), 
	`¡ohs
(
icmph
.
un
.
echo
.
£quí˚
));

639 
	`¥_icmph
(
e
->
ì_ty≥
,É->
ì_code
,É->
ì_öfo
, 
NULL
);

640 
	`fÊush
(
°dout
);

644 
out
:

645 
î∫o
 = 
ßved_î∫o
;

646  
√t_îr‹s
 ? : -
loˇl_îr‹s
;

647 
	}
}

657 
	$£nd_¥obe
()

659 
icmphdr
 *
i˝
;

660 
cc
;

661 
i
;

663 
i˝
 = (
icmphdr
 *)
ouçack
;

664 
i˝
->
ty≥
 = 
ICMP_ECHO
;

665 
i˝
->
code
 = 0;

666 
i˝
->
checksum
 = 0;

667 
i˝
->
un
.
echo
.
£quí˚
 = 
	`ht⁄s
(
¡ønsmôãd
+1);

668 
i˝
->
un
.
echo
.
id
 = 
idít
;

670 
	`rcvd_˛ór
(
¡ønsmôãd
+1);

672 i‡(
timög
) {

673 i‡(
›ti⁄s
&
F_LATENCY
) {

674 
timevÆ
 
tmp_tv
;

675 
	`gëtimeofday
(&
tmp_tv
, 
NULL
);

676 
	`mem˝y
(
i˝
+1, &
tmp_tv
, (tmp_tv));

678 
	`mem£t
(
i˝
+1, 0, (
timevÆ
));

682 
cc
 = 
d©Æí
 + 8;

685 
i˝
->
checksum
 = 
	`ö_cksum
((*)i˝, 
cc
, 0);

687 i‡(
timög
 && !(
›ti⁄s
&
F_LATENCY
)) {

688 
timevÆ
 
tmp_tv
;

689 
	`gëtimeofday
(&
tmp_tv
, 
NULL
);

690 
	`mem˝y
(
i˝
+1, &
tmp_tv
, (tmp_tv));

691 
i˝
->
checksum
 = 
	`ö_cksum
((*)&
tmp_tv
, (tmp_tv), ~icp->checksum);

695 
iovec
 
iov
 = {
ouçack
, 0};

696 
msghdr
 
m
 = { &
whîëo
, (whereto),

697 &
iov
, 1, &
cmsg
, 0, 0 };

698 
m
.
msg_c⁄åﬁÀn
 = 
cmsg_Àn
;

699 
iov
.
iov_Àn
 = 
cc
;

701 
i
 = 
	`£ndmsg
(
icmp_sock
, &
m
, 
c⁄fúm
);

702 
c⁄fúm
 = 0;

705  (
cc
 =
i
 ? 0 : i);

706 
	}
}

715 
	$¥_echo_ª∂y
(
__u8
 *
_i˝
, 
Àn
)

717 
icmphdr
 *
i˝
 = (icmphd∏*)
_i˝
;

718 
	`¥ötf
(" icmp_£q=%u", 
	`¡ohs
(
i˝
->
un
.
echo
.
£quí˚
));

719 
	}
}

722 
	$∑r£_ª∂y
(
msghdr
 *
msg
, 
cc
, *
addr
, 
timevÆ
 *
tv
)

724 
sockaddr_ö
 *
‰om
 = 
addr
;

725 
__u8
 *
buf
 = 
msg
->
msg_iov
->
iov_ba£
;

726 
icmphdr
 *
i˝
;

727 
ùhdr
 *
ù
;

728 
hÀn
;

729 
csÁûed
;

732 
ù
 = (
ùhdr
 *)
buf
;

733 
hÀn
 = 
ù
->
ihl
*4;

734 i‡(
cc
 < 
hÀn
 + 8 || 
ù
->
ihl
 < 5) {

735 i‡(
›ti⁄s
 & 
F_VERBOSE
)

736 
	`Ârötf
(
°dîr
, "pög:ÖackëÅoÿsh‹à(%d byãsË‰om %s\n", 
cc
,

737 
	`¥_addr
(
‰om
->
sö_addr
.
s_addr
));

742 
cc
 -
hÀn
;

743 
i˝
 = (
icmphdr
 *)(
buf
 + 
hÀn
);

744 
csÁûed
 = 
	`ö_cksum
((*)
i˝
, 
cc
, 0);

746 i‡(
i˝
->
ty≥
 =
ICMP_ECHOREPLY
) {

747 i‡(
i˝
->
un
.
echo
.
id
 !
idít
)

749 i‡(
	`g©hî_°©i°ics
((
__u8
*)
i˝
, (*i˝), 
cc
,

750 
	`¡ohs
(
i˝
->
un
.
echo
.
£quí˚
),

751 
ù
->
âl
, 0, 
tv
, 
	`¥_addr
(
‰om
->
sö_addr
.
s_addr
),

752 
¥_echo_ª∂y
)) {

753 
	`fÊush
(
°dout
);

761 
i˝
->
ty≥
) {

762 
ICMP_ECHO
:

765 
ICMP_SOURCE_QUENCH
:

766 
ICMP_REDIRECT
:

767 
ICMP_DEST_UNREACH
:

768 
ICMP_TIME_EXCEEDED
:

769 
ICMP_PARAMETERPROB
:

771 
ùhdr
 * 
ùh
 = (ùhd∏*)(&
i˝
[1]);

772 
icmphdr
 *
i˝1
 = (icmphdr*)((*)
ùh
 + iph->
ihl
*4);

773 
îr‹_pkt
;

774 i‡(
cc
 < 8+(
ùhdr
)+8 ||

775 
cc
 < 8+
ùh
->
ihl
*4+8)

777 i‡(
i˝1
->
ty≥
 !
ICMP_ECHO
 ||

778 
ùh
->
daddr
 !
whîëo
.
sö_addr
.
s_addr
 ||

779 
i˝1
->
un
.
echo
.
id
 !
idít
)

781 
îr‹_pkt
 = (
i˝
->
ty≥
 !
ICMP_REDIRECT
 &&

782 
i˝
->
ty≥
 !
ICMP_SOURCE_QUENCH
);

783 i‡(
îr‹_pkt
) {

784 
	`acknowÀdge
(
	`¡ohs
(
i˝1
->
un
.
echo
.
£quí˚
));

787 
√º‹s
+=
îr‹_pkt
;

788 i‡(
›ti⁄s
&
F_QUIET
)

789  !
îr‹_pkt
;

790 i‡(
›ti⁄s
 & 
F_FLOOD
) {

791 i‡(
îr‹_pkt
)

792 
	`wrôe_°dout
("\bE", 2);

793  !
îr‹_pkt
;

795 
	`¥öt_time°amp
();

796 
	`¥ötf
("From %s: icmp_seq=%u ",

797 
	`¥_addr
(
‰om
->
sö_addr
.
s_addr
),

798 
	`¡ohs
(
i˝1
->
un
.
echo
.
£quí˚
));

799 i‡(
csÁûed
)

800 
	`¥ötf
("(BAD CHECKSUM)");

801 
	`¥_icmph
(
i˝
->
ty≥
, i˝->
code
, 
	`¡ohl
(i˝->
un
.
g©eway
), icp);

802  !
îr‹_pkt
;

808 i‡((
›ti⁄s
 & 
F_FLOOD
Ë&& !(›ti⁄†& (
F_VERBOSE
|
F_QUIET
))) {

809 i‡(!
csÁûed
)

810 
	`wrôe_°dout
("!E", 2);

812 
	`wrôe_°dout
("!EC", 3);

815 i‡(!(
›ti⁄s
 & 
F_VERBOSE
Ë|| 
uid
)

817 i‡(
›ti⁄s
 & 
F_PTIMEOFDAY
) {

818 
timevÆ
 
ªcv_time
;

819 
	`gëtimeofday
(&
ªcv_time
, 
NULL
);

820 
	`¥ötf
("%lu.%06lu ", ()
ªcv_time
.
tv_£c
, (Ïecv_time.
tv_u£c
);

822 
	`¥ötf
("From %s: ", 
	`¥_addr
(
‰om
->
sö_addr
.
s_addr
));

823 i‡(
csÁûed
) {

824 
	`¥ötf
("(BAD CHECKSUM)\n");

827 
	`¥_icmph
(
i˝
->
ty≥
, i˝->
code
, 
	`¡ohl
(i˝->
un
.
g©eway
), icp);

831 i‡(
›ti⁄s
 & 
F_AUDIBLE
) {

832 
	`putch¨
('\a');

833 if(
›ti⁄s
 & 
F_FLOOD
)

834 
	`fÊush
(
°dout
);

836 i‡(!(
›ti⁄s
 & 
F_FLOOD
)) {

837 
	`¥_›ti⁄s
(
buf
 + (
ùhdr
), 
hÀn
);

839 
	`putch¨
('\n');

840 
	`fÊush
(
°dout
);

843 
	}
}

846 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


847 
	#ODDBYTE
(
v
Ë(v)

	)

848 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


849 
	#ODDBYTE
(
v
Ë(()(vË<< 8)

	)

851 
	#ODDBYTE
(
v
Ë
	`ht⁄s
(()(vË<< 8)

	)

855 
	$ö_cksum
(c⁄° *
addr
, 
Àn
, 
csum
)

857 
∆e·
 = 
Àn
;

858 c⁄° *
w
 = 
addr
;

859 
™swî
;

860 
sum
 = 
csum
;

868 
∆e·
 > 1) {

869 
sum
 +*
w
++;

870 
∆e·
 -= 2;

874 i‡(
∆e·
 == 1)

875 
sum
 +
	`ODDBYTE
(*(*)
w
);

880 
sum
 = (sum >> 16) + (sum & 0xffff);

881 
sum
 += (sum >> 16);

882 
™swî
 = ~
sum
;

883  (
™swî
);

884 
	}
}

890 
	$¥_icmph
(
__u8
 
ty≥
, __u8 
code
, 
__u32
 
öfo
, 
icmphdr
 *
i˝
)

892 
ty≥
) {

893 
ICMP_ECHOREPLY
:

894 
	`¥ötf
("Echo Reply\n");

897 
ICMP_DEST_UNREACH
:

898 
code
) {

899 
ICMP_NET_UNREACH
:

900 
	`¥ötf
("Destination Net Unreachable\n");

902 
ICMP_HOST_UNREACH
:

903 
	`¥ötf
("Destination Host Unreachable\n");

905 
ICMP_PROT_UNREACH
:

906 
	`¥ötf
("Destination Protocol Unreachable\n");

908 
ICMP_PORT_UNREACH
:

909 
	`¥ötf
("Destination Port Unreachable\n");

911 
ICMP_FRAG_NEEDED
:

912 
	`¥ötf
("FøgÇìdedánd DF së (mtu = %u)\n", 
öfo
);

914 
ICMP_SR_FAILED
:

915 
	`¥ötf
("Source Route Failed\n");

917 
ICMP_NET_UNKNOWN
:

918 
	`¥ötf
("Destination Net Unknown\n");

920 
ICMP_HOST_UNKNOWN
:

921 
	`¥ötf
("Destination Host Unknown\n");

923 
ICMP_HOST_ISOLATED
:

924 
	`¥ötf
("Source Host Isolated\n");

926 
ICMP_NET_ANO
:

927 
	`¥ötf
("Destination Net Prohibited\n");

929 
ICMP_HOST_ANO
:

930 
	`¥ötf
("Destination Host Prohibited\n");

932 
ICMP_NET_UNR_TOS
:

933 
	`¥ötf
("Destination Net Unreachable for Type of Service\n");

935 
ICMP_HOST_UNR_TOS
:

936 
	`¥ötf
("Destination Host Unreachable for Type of Service\n");

938 
ICMP_PKT_FILTERED
:

939 
	`¥ötf
("Packet filtered\n");

941 
ICMP_PREC_VIOLATION
:

942 
	`¥ötf
("Precedence Violation\n");

944 
ICMP_PREC_CUTOFF
:

945 
	`¥ötf
("Precedence Cutoff\n");

948 
	`¥ötf
("De° UƒóchabÀ, Bad Code: %d\n", 
code
);

951 i‡(
i˝
 && (
›ti⁄s
 & 
F_VERBOSE
))

952 
	`¥_ùh
((
ùhdr
*)(
i˝
 + 1));

954 
ICMP_SOURCE_QUENCH
:

955 
	`¥ötf
("Source Quench\n");

956 i‡(
i˝
 && (
›ti⁄s
 & 
F_VERBOSE
))

957 
	`¥_ùh
((
ùhdr
*)(
i˝
 + 1));

959 
ICMP_REDIRECT
:

960 
code
) {

961 
ICMP_REDIR_NET
:

962 
	`¥ötf
("Redirect Network");

964 
ICMP_REDIR_HOST
:

965 
	`¥ötf
("Redirect Host");

967 
ICMP_REDIR_NETTOS
:

968 
	`¥ötf
("Redirect Type of Serviceánd Network");

970 
ICMP_REDIR_HOSTTOS
:

971 
	`¥ötf
("Redirect Type of Serviceánd Host");

974 
	`¥ötf
("Redúe˘, Bad Code: %d", 
code
);

977 i‡(
i˝
)

978 
	`¥ötf
("(NewÇexth›: %s)\n", 
	`¥_addr
(
i˝
->
un
.
g©eway
));

979 i‡(
i˝
 && (
›ti⁄s
 & 
F_VERBOSE
))

980 
	`¥_ùh
((
ùhdr
*)(
i˝
 + 1));

982 
ICMP_ECHO
:

983 
	`¥ötf
("Echo Request\n");

986 
ICMP_TIME_EXCEEDED
:

987 
code
) {

988 
ICMP_EXC_TTL
:

989 
	`¥ötf
("TimeÅoÜiveÉxceeded\n");

991 
ICMP_EXC_FRAGTIME
:

992 
	`¥ötf
("FragÑeassemblyÅimeÉxceeded\n");

995 
	`¥ötf
("Timêex˚eded, Bad Code: %d\n", 
code
);

998 i‡(
i˝
 && (
›ti⁄s
 & 
F_VERBOSE
))

999 
	`¥_ùh
((
ùhdr
*)(
i˝
 + 1));

1001 
ICMP_PARAMETERPROB
:

1002 
	`¥ötf
("P¨amëîÖrobÀm:Öoöã∏%u\n", 
i˝
 ? (
	`¡ohl
(i˝->
un
.
g©eway
)>>24Ë: 
öfo
);

1003 i‡(
i˝
 && (
›ti⁄s
 & 
F_VERBOSE
))

1004 
	`¥_ùh
((
ùhdr
*)(
i˝
 + 1));

1006 
ICMP_TIMESTAMP
:

1007 
	`¥ötf
("Timestamp\n");

1010 
ICMP_TIMESTAMPREPLY
:

1011 
	`¥ötf
("Timestamp Reply\n");

1014 
ICMP_INFO_REQUEST
:

1015 
	`¥ötf
("Information Request\n");

1018 
ICMP_INFO_REPLY
:

1019 
	`¥ötf
("Information Reply\n");

1022 #ifde‡
ICMP_MASKREQ


1023 
ICMP_MASKREQ
:

1024 
	`¥ötf
("Address Mask Request\n");

1027 #ifde‡
ICMP_MASKREPLY


1028 
ICMP_MASKREPLY
:

1029 
	`¥ötf
("Address Mask Reply\n");

1033 
	`¥ötf
("Bad ICMPÅy≥: %d\n", 
ty≥
);

1035 
	}
}

1037 
	$¥_›ti⁄s
(* 
˝
, 
hÀn
)

1039 
i
, 
j
;

1040 
›éí
, 
tŸÀn
;

1041 * 
›çå
;

1042 
ﬁd_ºÀn
;

1043 
ﬁd_º
[
MAX_IPOPTLEN
];

1045 
tŸÀn
 = 
hÀn
-(
ùhdr
);

1046 
›çå
 = 
˝
;

1048 
tŸÀn
 > 0) {

1049 i‡(*
›çå
 =
IPOPT_EOL
)

1051 i‡(*
›çå
 =
IPOPT_NOP
) {

1052 
tŸÀn
--;

1053 
›çå
++;

1054 
	`¥ötf
("\nNOP");

1057 
˝
 = 
›çå
;

1058 
›éí
 = 
›çå
[1];

1059 i‡(
›éí
 < 2 || o±À¿> 
tŸÀn
)

1062 *
˝
) {

1063 
IPOPT_SSRR
:

1064 
IPOPT_LSRR
:

1065 
	`¥ötf
("\n%cSRR: ", *
˝
==
IPOPT_SSRR
 ? 'S' : 'L');

1066 
j
 = *++
˝
;

1067 
i
 = *++
˝
;

1068 
i
 -= 4;

1069 
˝
++;

1070 i‡(
j
 > 
IPOPT_MINOFF
) {

1072 
__u32
 
addªss
;

1073 
	`mem˝y
(&
addªss
, 
˝
, 4);

1074 
˝
 += 4;

1075 i‡(
addªss
 == 0)

1076 
	`¥ötf
("\t0.0.0.0");

1078 
	`¥ötf
("\t%s", 
	`¥_addr
(
addªss
));

1079 
j
 -= 4;

1080 
	`putch¨
('\n');

1081 i‡(
j
 <
IPOPT_MINOFF
)

1086 
IPOPT_RR
:

1087 
j
 = *++
˝
;

1088 
i
 = *++
˝
;

1089 i‡(
i
 > 
j
)

1090 
i
 = 
j
;

1091 
i
 -
IPOPT_MINOFF
;

1092 i‡(
i
 <= 0)

1094 i‡(
i
 =
ﬁd_ºÀn


1095 && !
	`memcmp
(
˝
, 
ﬁd_º
, 
i
)

1096 && !(
›ti⁄s
 & 
F_FLOOD
)) {

1097 
	`¥ötf
("\t(sameÑoute)");

1098 
i
 = ((i + 3) / 4) * 4;

1099 
˝
 +
i
;

1102 
ﬁd_ºÀn
 = 
i
;

1103 
	`mem˝y
(
ﬁd_º
, (*)
˝
, 
i
);

1104 
	`¥ötf
("\nRR: ");

1105 
˝
++;

1107 
__u32
 
addªss
;

1108 
	`mem˝y
(&
addªss
, 
˝
, 4);

1109 
˝
 += 4;

1110 i‡(
addªss
 == 0)

1111 
	`¥ötf
("\t0.0.0.0");

1113 
	`¥ötf
("\t%s", 
	`¥_addr
(
addªss
));

1114 
i
 -= 4;

1115 
	`putch¨
('\n');

1116 i‡(
i
 <= 0)

1120 
IPOPT_TS
:

1122 
°dtime
 = 0, 
n⁄°dtime
 = 0;

1123 
__u8
 
Êags
;

1124 
j
 = *++
˝
;

1125 
i
 = *++
˝
;

1126 i‡(
i
 > 
j
)

1127 
i
 = 
j
;

1128 
i
 -= 5;

1129 i‡(
i
 <= 0)

1131 
Êags
 = *++
˝
;

1132 
	`¥ötf
("\nTS: ");

1133 
˝
++;

1135 
l
;

1137 i‡((
Êags
&0xFË!
IPOPT_TS_TSONLY
) {

1138 
__u32
 
addªss
;

1139 
	`mem˝y
(&
addªss
, 
˝
, 4);

1140 
˝
 += 4;

1141 i‡(
addªss
 == 0)

1142 
	`¥ötf
("\t0.0.0.0");

1144 
	`¥ötf
("\t%s", 
	`¥_addr
(
addªss
));

1145 
i
 -= 4;

1146 i‡(
i
 <= 0)

1149 
l
 = *
˝
++;

1150 
l
 = (l<<8Ë+ *
˝
++;

1151 
l
 = (l<<8Ë+ *
˝
++;

1152 
l
 = (l<<8Ë+ *
˝
++;

1154 i‡(
l
 & 0x80000000) {

1155 i‡(
n⁄°dtime
==0)

1156 
	`¥ötf
("\t%ldábsﬁuãÇŸ-°™d¨d", 
l
&0x7fffffff);

1158 
	`¥ötf
("\t%ldÇŸ-°™d¨d", (
l
&0x7fffffffË- 
n⁄°dtime
);

1159 
n⁄°dtime
 = 
l
&0x7fffffff;

1161 i‡(
°dtime
==0)

1162 
	`¥ötf
("\t%ldábsﬁuã", 
l
);

1164 
	`¥ötf
("\t%ld", 
l
 - 
°dtime
);

1165 
°dtime
 = 
l
;

1167 
i
 -= 4;

1168 
	`putch¨
('\n');

1169 i‡(
i
 <= 0)

1172 i‡(
Êags
>>4)

1173 
	`¥ötf
("Uƒec‹ded h›s: %d\n", 
Êags
>>4);

1177 
	`¥ötf
("\nunknow¿›ti⁄ %x", *
˝
);

1180 
tŸÀn
 -
›éí
;

1181 
›çå
 +
›éí
;

1183 
	}
}

1190 
	$¥_ùh
(
ùhdr
 *
ù
)

1192 
hÀn
;

1193 *
˝
;

1195 
hÀn
 = 
ù
->
ihl
 << 2;

1196 
˝
 = (*)
ù
 + 20;

1198 
	`¥ötf
("Vr HL TOS Len ID Flg off TTL Pro cks Src Dst Data\n");

1199 
	`¥ötf
(" %1x %1x %02x %04x %04x",

1200 
ù
->
vîsi⁄
, ip->
ihl
, ip->
tos
, ip->
tŸ_Àn
, ip->
id
);

1201 
	`¥ötf
(" %1x %04x", ((
ù
->
‰ag_off
) & 0xe000) >> 13,

1202 (
ù
->
‰ag_off
) & 0x1fff);

1203 
	`¥ötf
(" %02x %02x %04x", 
ù
->
âl
, ip->
¥Ÿocﬁ
, ip->
check
);

1204 
	`¥ötf
(" %†", 
	`öë_¡ﬂ
(*(
ö_addr
 *)&
ù
->
ßddr
));

1205 
	`¥ötf
(" %†", 
	`öë_¡ﬂ
(*(
ö_addr
 *)&
ù
->
daddr
));

1206 
	`¥ötf
("\n");

1207 
	`¥_›ti⁄s
(
˝
, 
hÀn
);

1208 
	}
}

1216 
	$¥_addr
(
__u32
 
addr
)

1218 
ho°ít
 *
hp
;

1219 
buf
[4096] = "";

1220 
__u32
 
œ°_addr
 = 0;

1222 if(*
buf
 && 
addr
 =
œ°_addr
)

1223 (
buf
);

1225 
œ°_addr
 = 
addr
;

1227 
ö_¥_addr
 = !
	`£tjmp
(
¥_addr_jmp
);

1229 i‡(
exôög
 || (
›ti⁄s
 & 
F_NUMERIC
) ||

1230 !(
hp
 = 
	`gëho°byaddr
((*)&
addr
, 4, 
AF_INET
)))

1231 
	`•rötf
(
buf
, "%s", 
	`öë_¡ﬂ
(*(
ö_addr
 *)&
addr
));

1233 *
s
;

1234 #i‡
USE_IDN


1235 i‡(
	`id«_to_unicode_lzlz
(
hp
->
h_«me
, &
s
, 0Ë!
IDNA_SUCCESS
)

1236 
s
 = 
NULL
;

1238 
s
 = 
NULL
;

1240 
	`¢¥ötf
(
buf
, (buf), "%†(%s)", 
s
 ? s : 
hp
->
h_«me
,

1241 
	`öë_¡ﬂ
(*(
ö_addr
 *)&
addr
));

1242 #i‡
USE_IDN


1243 
	`‰ì
(
s
);

1247 
ö_¥_addr
 = 0;

1249 (
buf
);

1250 
	}
}

1254 
	$∑r£tos
(*
°r
)

1256 c⁄° *
˝
;

1257 
tos
;

1258 *
ï
;

1261 i‡(
°r
[0] == '0' && (str[1] == 'x' || str[1] == 'X')) {

1262 
˝
 = 
°r
 + 2;

1263 
tos
 = ()
	`°πﬁ
(
˝
, &
ï
, 16);

1265 
tos
 = ()
	`°πﬁ
(
°r
, &
ï
, 10);

1268 i‡(*
ï
 != '\0') {

1269 
	`Ârötf
(
°dîr
, "pög: \"%s\" bad vÆuêf‹ TOS\n", 
°r
);

1270 
	`exô
(2);

1273 i‡(
tos
 > 
TOS_MAX
) {

1274 
	`Ârötf
(
°dîr
, "ping:Åhe decimal value of TOS bits must be 0-254 (or zero)\n");

1275 
	`exô
(2);

1277 (
tos
);

1278 
	}
}

1280 
	~<löux/fûãr.h
>

1282 
	$ö°Æl_fûãr
()

1284 
⁄˚
;

1285 
sock_fûãr
 
ö¢s
[] = {

1286 
	`BPF_STMT
(
BPF_LDX
|
BPF_B
|
BPF_MSH
, 0),

1287 
	`BPF_STMT
(
BPF_LD
|
BPF_H
|
BPF_IND
, 4),

1288 
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 0xAAAA, 0, 1),

1289 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, ~0U),

1290 
	`BPF_STMT
(
BPF_LD
|
BPF_B
|
BPF_IND
, 0),

1291 
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 
ICMP_ECHOREPLY
, 1, 0),

1292 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, 0xFFFFFFF),

1293 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, 0)

1295 
sock_Ârog
 
fûãr
 = {

1296  
ö¢s
 / (insns[0]),

1297 
ö¢s


1300 i‡(
⁄˚
)

1302 
⁄˚
 = 1;

1305 
ö¢s
[2] = (
sock_fûãr
)
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 
	`ht⁄s
(
idít
), 0, 1);

1307 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_ATTACH_FILTER
, &
fûãr
, (filter)))

1308 
	`≥º‹
("WARNING: failedÅo install socket filter\n");

1309 
	}
}

1311 
	#USAGE_NEWLINE
 "\¿ "

	)

1313 
	$ußge
()

1315 
	`Ârötf
(
°dîr
,

1323 
USAGE_NEWLINE


1329 
USAGE_NEWLINE


1334 
USAGE_NEWLINE


1340 
	`exô
(2);

1341 
	}
}

	@iputils-s20140519/ping6.c

62 
	~"pög_comm⁄.h
"

64 
	~<löux/fûãr.h
>

65 
	~<√töë/ù6.h
>

66 
	~<√töë/icmp6.h
>

67 
	~<ªsﬁv.h
>

68 #i‚de‡
WITHOUT_IFADDRS


69 
	~<iÁddrs.h
>

72 #ifde‡
USE_IDN


73 
	~<°rög¥ï.h
>

76 
	~"pög6_niquîy.h
"

77 
	~"ö6_Êowœbñ.h
"

79 #i‚de‡
SOL_IPV6


80 
	#SOL_IPV6
 
IPPROTO_IPV6


	)

83 #i‚de‡
SOL_ICMPV6


84 
	#SOL_ICMPV6
 
IPPROTO_ICMPV6


	)

88 #i‚de‡
ICMP6_DST_UNREACH_BEYONDSCOPE


89 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 
ICMP6_DST_UNREACH_NOTNEIGHBOR


	)

92 #i‡
deföed
(
ENABLE_PING6_RTHDR
Ë&& !deföed(
ENABLE_PING6_RTHDR_RFC3542
)

93 #i‚de‡
IPV6_SRCRT_TYPE_0


94 
	#IPV6_SRCRT_TYPE_0
 0

	)

98 #i‚de‡
MLD_LISTENER_QUERY


99 
	#MLD_LISTENER_QUERY
 130

	)

100 
	#MLD_LISTENER_REPORT
 131

	)

101 
	#MLD_LISTENER_REDUCTION
 132

	)

104 
	#BIT_CLEAR
(
ƒ
, 
addr
Ëdÿ{ ((
__u32
 *)◊ddr))[“rË>> 5] &~(1U << (“rË& 31)); } 0)

	)

105 
	#BIT_SET
(
ƒ
, 
addr
Ëdÿ{ ((
__u32
 *)◊ddr))[“rË>> 5] |(1U << (“rË& 31)); } 0)

	)

106 
	#BIT_TEST
(
ƒ
, 
addr
Ëdÿ{ (
__u32
 *)◊ddr))[“rË>> 5] & (1U << (“rË& 31)); } 0)

	)

108 #i‚de‡
ICMP6_FILTER_WILLPASS


109 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

110 (
	`BIT_TEST
((
ty≥
), 
fûãΩ
Ë=0)

	)

112 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

113 
	`BIT_TEST
((
ty≥
), 
fûãΩ
)

	)

115 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

116 
	`BIT_CLEAR
((
ty≥
), 
fûãΩ
)

	)

118 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

119 
	`BIT_SET
((
ty≥
), 
fûãΩ
)

	)

121 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

122 
	`mem£t
(
fûãΩ
, 0, (
icmp6_fûãr
));

	)

124 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

125 
	`mem£t
(
fûãΩ
, 0xFF, (
icmp6_fûãr
));

	)

128 
	#MAXPACKET
 128000

	)

130 #ifde‡
SO_TIMESTAMP


131 
	#HAVE_SIN6_SCOPEID
 1

	)

134 #i‚de‡
SCOPE_DELIMITER


135 
	#SCOPE_DELIMITER
 '%'

	)

138 
__u32
 
	gÊowœbñ
;

139 
__u32
 
	gt˛ass
;

140 #ifde‡
ENABLE_PING6_RTHDR


141 
cmsghdr
 *
	g§¸t
;

144 
sockaddr_ö6
 
	gwhîëo
;

145 
	gouçack
[
MAXPACKET
];

146 
	gmax∑ckë
 = (
ouçack
);

148 
	gcmsgbuf
[4096];

149 
	gcmsgÀn
 = 0;

151 * 
¥_addr
(
ö6_addr
 *
addr
);

152 * 
¥_addr_n
(
ö6_addr
 *
addr
);

153 
¥_icmph
(
__u8
 
ty≥
, __u8 
code
, 
__u32
 
öfo
);

154 
	$ußge
(Ë
	`__©åibuã
((
n‹ëu∫
));

156 
sockaddr_ö6
 
sour˚
;

157 *
devi˚
;

158 
pmtudisc
=-1;

160 
icmp_sock
;

162 #ifde‡
USE_GNUTLS


163 
	~<gnués/›ís¶.h
>

164 
	#USE_CRYPTO


	)

165 #ñi‡
deföed
 
USE_OPENSSL


166 
	~<›ís¶/md5.h
>

167 
	#USE_CRYPTO


	)

171 
ni_quîy
 = -1;

172 
ni_Êag
 = 0;

173 *
ni_subje˘
 = 
NULL
;

174 
ni_subje˘_Àn
 = 0;

175 
ni_subje˘_ty≥
 = -1;

176 *
ni_group
;

178 
ölöe
 
	$¡oh•
(
__u16
 *
p
)

180 
__u16
 
v
;

181 
	`mem˝y
(&
v
, 
p
, (v));

182  
	`¡ohs
(
v
);

183 
	}
}

185 #i‡
deföed
(
ENABLE_PING6_RTHDR
Ë&& !deföed(
ENABLE_PING6_RTHDR_RFC3542
)

186 
size_t
 
	$öë6_§¸t_•a˚
(
ty≥
, 
£gmíts
)

188 i‡(
ty≥
 !0 || 
£gmíts
 > 24)

191  ((
cmsghdr
Ë+ (
ù6_πhdr0
) +

192 
£gmíts
 * (
ö6_addr
));

193 
	}
}

195 
cmsghdr
 * 
	$öë6_§¸t_öô
(*
bp
, 
ty≥
)

197 
cmsghdr
 *
cmsg
;

199 i‡(
ty≥
)

200  
NULL
;

202 
	`mem£t
(
bp
, 0, (
cmsghdr
Ë+ (
ù6_πhdr0
));

203 
cmsg
 = (
cmsghdr
 *Ë
bp
;

205 
cmsg
->
cmsg_Àn
 = (
cmsghdr
Ë+ (
ù6_πhdr0
);

206 
cmsg
->
cmsg_Àvñ
 = 
SOL_IPV6
;

207 
cmsg
->
cmsg_ty≥
 = 
IPV6_RTHDR
;

209  
cmsg
;

210 
	}
}

212 
	$öë6_§¸t_add
(
cmsghdr
 *
cmsg
, c⁄° 
ö6_addr
 *
addr
)

214 
ù6_πhdr0
 *
hdr
;

216 
hdr
 = (
ù6_πhdr0
 *Ë
	`CMSG_DATA
(
cmsg
);

218 
cmsg
->
cmsg_Àn
 +(
ö6_addr
);

219 
hdr
->
ù6r0_Àn
 +(
ö6_addr
) / 8;

221 
	`mem˝y
(&
hdr
->
ù6r0_addr
[hdr->
ù6r0_£gÀ·
++], 
addr
,

222 (
ö6_addr
));

225 
	}
}

228 
	$if_«me2ödex
(c⁄° *
i‚ame
)

230 
i
 = 
	`if_«mëoödex
(
i‚ame
);

231 i‡(!
i
) {

232 
	`Ârötf
(
°dîr
, "pög: unknow¿iÁ˚ %s\n", 
i‚ame
);

233 
	`exô
(2);

235  
i
;

236 
	}
}

238 
	sniquîy_›ti⁄
 {

239 *
«me
;

240 
«mñí
;

241 
has_¨g
;

242 
d©a
;

243 (*
h™dÀr
)(
ödex
, c⁄° *
¨g
);

246 
	#NIQUERY_OPTION
(
_«me
, 
_has_¨g
, 
_d©a
, 
_h™dÀr
) \

248 .
«me
 = 
_«me
, \

249 .
«mñí
 = (
_«me
) - 1, \

250 .
has_¨g
 = 
_has_¨g
, \

251 .
d©a
 = 
_d©a
, \

252 .
h™dÀr
 = 
_h™dÀr
 \

253 }

	)

255 
niquîy_›ti⁄_«me_h™dÀr
(
ödex
, c⁄° *
¨g
);

256 
niquîy_›ti⁄_ùv6_h™dÀr
(
ödex
, c⁄° *
¨g
);

257 
niquîy_›ti⁄_ùv6_Êag_h™dÀr
(
ödex
, c⁄° *
¨g
);

258 
niquîy_›ti⁄_ùv4_h™dÀr
(
ödex
, c⁄° *
¨g
);

259 
niquîy_›ti⁄_ùv4_Êag_h™dÀr
(
ödex
, c⁄° *
¨g
);

260 
niquîy_›ti⁄_subje˘_addr_h™dÀr
(
ödex
, c⁄° *
¨g
);

261 
niquîy_›ti⁄_subje˘_«me_h™dÀr
(
ödex
, c⁄° *
¨g
);

262 
niquîy_›ti⁄_hñp_h™dÀr
(
ödex
, c⁄° *
¨g
);

264 
niquîy_›ti⁄
 
	gniquîy_›ti⁄s
[] = {

265 
NIQUERY_OPTION
("«me", 0, 0, 
niquîy_›ti⁄_«me_h™dÀr
),

266 
NIQUERY_OPTION
("fqdn", 0, 0, 
niquîy_›ti⁄_«me_h™dÀr
),

267 
NIQUERY_OPTION
("ùv6", 0, 0, 
niquîy_›ti⁄_ùv6_h™dÀr
),

268 
NIQUERY_OPTION
("ùv6-Æl", 0, 
NI_IPV6ADDR_F_ALL
, 
niquîy_›ti⁄_ùv6_Êag_h™dÀr
),

269 
NIQUERY_OPTION
("ùv6-com∑tibÀ", 0, 
NI_IPV6ADDR_F_COMPAT
, 
niquîy_›ti⁄_ùv6_Êag_h™dÀr
),

270 
NIQUERY_OPTION
("ùv6-lökloˇl", 0, 
NI_IPV6ADDR_F_LINKLOCAL
, 
niquîy_›ti⁄_ùv6_Êag_h™dÀr
),

271 
NIQUERY_OPTION
("ùv6-sôñoˇl", 0, 
NI_IPV6ADDR_F_SITELOCAL
, 
niquîy_›ti⁄_ùv6_Êag_h™dÀr
),

272 
NIQUERY_OPTION
("ùv6-globÆ", 0, 
NI_IPV6ADDR_F_GLOBAL
, 
niquîy_›ti⁄_ùv6_Êag_h™dÀr
),

273 
NIQUERY_OPTION
("ùv4", 0, 0, 
niquîy_›ti⁄_ùv4_h™dÀr
),

274 
NIQUERY_OPTION
("ùv4-Æl", 0, 
NI_IPV4ADDR_F_ALL
, 
niquîy_›ti⁄_ùv4_Êag_h™dÀr
),

275 
NIQUERY_OPTION
("subje˘-ùv6", 1, 
NI_SUBJ_IPV6
, 
niquîy_›ti⁄_subje˘_addr_h™dÀr
),

276 
NIQUERY_OPTION
("subje˘-ùv4", 1, 
NI_SUBJ_IPV4
, 
niquîy_›ti⁄_subje˘_addr_h™dÀr
),

277 
NIQUERY_OPTION
("subje˘-«me", 1, 0, 
niquîy_›ti⁄_subje˘_«me_h™dÀr
),

278 
NIQUERY_OPTION
("subje˘-fqdn", 1, -1, 
niquîy_›ti⁄_subje˘_«me_h™dÀr
),

279 
NIQUERY_OPTION
("hñp", 0, 0, 
niquîy_›ti⁄_hñp_h™dÀr
),

283 
ölöe
 
	$niquîy_is_íabÀd
()

285  
ni_quîy
 >= 0;

286 
	}
}

288 #i‡
PING6_NONCE_MEMORY


289 
__u8
 *
	gni_n⁄˚_±r
;

292 
timevÆ
 
	mtv
;

293 
pid_t
 
	mpid
;

294 } 
	gni_n⁄˚_£¸ë
;

297 
	$niquîy_öô_n⁄˚
()

299 #i‡
PING6_NONCE_MEMORY


300 
timevÆ
 
tv
;

301 
£ed
;

303 
£ed
 = ()
	`gëpid
();

304 i‡(!
	`gëtimeofday
(&
tv
, 
NULL
))

305 
£ed
 ^
tv
.
tv_u£c
;

306 
	`§™d
(
£ed
);

308 
ni_n⁄˚_±r
 = 
	`ˇŒoc
(
NI_NONCE_SIZE
, 
MAX_DUP_CHK
);

309 i‡(!
ni_n⁄˚_±r
) {

310 
	`≥º‹
("ping6: calloc");

311 
	`exô
(2);

314 
ni_n⁄˚_±r
[0] = ~0;

316 
	`gëtimeofday
(&
ni_n⁄˚_£¸ë
.
tv
, 
NULL
);

317 
ni_n⁄˚_£¸ë
.
pid
 = 
	`gëpid
();

319 
	}
}

321 #i‡!
PING6_NONCE_MEMORY


322 
	$niquîy_n⁄˚
(
__u8
 *
n⁄˚
, 
fûl
)

324 #ifde‡
USE_CRYPTO


325 
__u8
 
dige°
[
MD5_DIGEST_LENGTH
];

326 
£q
 = -1;

328 i‡(
fûl
 || 
£q
 !*(
__u16
 *)
n⁄˚
 || seq < 0) {

329 
MD5_CTX
 
˘xt
;

331 
	`MD5_Inô
(&
˘xt
);

332 
	`MD5_Upd©e
(&
˘xt
, &
ni_n⁄˚_£¸ë
, (ni_nonce_secret));

333 
	`MD5_Upd©e
(&
˘xt
, 
n⁄˚
, (
__u16
));

334 
	`MD5_FöÆ
(
dige°
, &
˘xt
);

336 
£q
 = *(
__u16
 *)
n⁄˚
;

339 i‡(
fûl
) {

340 
	`mem˝y
(
n⁄˚
 + (
__u16
), 
dige°
, 
NI_NONCE_SIZE
 - (__u16));

343 i‡(
	`memcmp
(
n⁄˚
 + (
__u16
), 
dige°
, 
NI_NONCE_SIZE
 - (__u16)))

345  
	`¡oh•
((
__u16
 *)
n⁄˚
);

348 
	`Ârötf
(
°dîr
, "ping6: functionÇotávailable; crypto disabled\n");

349 
	`exô
(3);

351 
	}
}

354 
ölöe
 
	$niquîy_fûl_n⁄˚
(
__u16
 
£q
, 
__u8
 *
n⁄˚
)

356 
__u16
 
v
 = 
	`ht⁄s
(
£q
);

357 #i‡
PING6_NONCE_MEMORY


358 
i
;

360 
	`mem˝y
(&
ni_n⁄˚_±r
[
NI_NONCE_SIZE
 * (
£q
 % 
MAX_DUP_CHK
)], &
v
, (v));

362 
i
 = (
v
); i < 
NI_NONCE_SIZE
; i++)

363 
ni_n⁄˚_±r
[
NI_NONCE_SIZE
 * (
£q
 % 
MAX_DUP_CHK
Ë+ 
i
] = 0x100 * (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0));

365 
	`mem˝y
(
n⁄˚
, &
ni_n⁄˚_±r
[
NI_NONCE_SIZE
 * (
£q
 % 
MAX_DUP_CHK
)], NI_NONCE_SIZE);

367 
	`mem˝y
(
n⁄˚
, &
v
, (v));

368 
	`niquîy_n⁄˚
(
n⁄˚
, 1);

370 
	}
}

372 
ölöe
 
	$niquîy_check_n⁄˚
(
__u8
 *
n⁄˚
)

374 #i‡
PING6_NONCE_MEMORY


375 
__u16
 
£q
 = 
	`¡oh•
((__u16 *)
n⁄˚
);

376 i‡(
	`memcmp
(
n⁄˚
, &
ni_n⁄˚_±r
[
NI_NONCE_SIZE
 * (
£q
 % 
MAX_DUP_CHK
)], NI_NONCE_SIZE))

378  
£q
;

380  
	`niquîy_n⁄˚
(
n⁄˚
, 0);

382 
	}
}

384 
	$niquîy_£t_qty≥
(
ty≥
)

386 i‡(
	`niquîy_is_íabÀd
(Ë&& 
ni_quîy
 !
ty≥
) {

387 
	`¥ötf
("Qtype conflict\n");

390 
ni_quîy
 = 
ty≥
;

392 
	}
}

394 
	$niquîy_›ti⁄_«me_h™dÀr
(
ödex
, c⁄° *
¨g
)

396 i‡(
	`niquîy_£t_qty≥
(
NI_QTYPE_NAME
) < 0)

399 
	}
}

401 
	$niquîy_›ti⁄_ùv6_h™dÀr
(
ödex
, c⁄° *
¨g
)

403 i‡(
	`niquîy_£t_qty≥
(
NI_QTYPE_IPV6ADDR
) < 0)

406 
	}
}

408 
	$niquîy_›ti⁄_ùv6_Êag_h™dÀr
(
ödex
, c⁄° *
¨g
)

410 i‡(
	`niquîy_£t_qty≥
(
NI_QTYPE_IPV6ADDR
) < 0)

412 
ni_Êag
 |
niquîy_›ti⁄s
[
ödex
].
d©a
;

414 
	}
}

416 
	$niquîy_›ti⁄_ùv4_h™dÀr
(
ödex
, c⁄° *
¨g
)

418 i‡(
	`niquîy_£t_qty≥
(
NI_QTYPE_IPV4ADDR
) < 0)

421 
	}
}

423 
	$niquîy_›ti⁄_ùv4_Êag_h™dÀr
(
ödex
, c⁄° *
¨g
)

425 i‡(
	`niquîy_£t_qty≥
(
NI_QTYPE_IPV4ADDR
) < 0)

427 
ni_Êag
 |
niquîy_›ti⁄s
[
ödex
].
d©a
;

429 
	}
}

431 
ölöe
 
	$niquîy_is_subje˘_vÆid
()

433  
ni_subje˘_ty≥
 >0 && 
ni_subje˘
;

434 
	}
}

436 
	$niquîy_£t_subje˘_ty≥
(
ty≥
)

438 i‡(
	`niquîy_is_subje˘_vÆid
(Ë&& 
ni_subje˘_ty≥
 !
ty≥
) {

439 
	`¥ötf
("SubjectÅype conflict\n");

442 
ni_subje˘_ty≥
 = 
ty≥
;

444 
	}
}

446 
	#ARRAY_SIZE
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

447 
	#OFFSET_OF
(
ty≥
,
ñem
Ë((
size_t
)&(—y≥ *)0)->ñem)

	)

449 
	$niquîy_›ti⁄_subje˘_addr_h™dÀr
(
ödex
, c⁄° *
¨g
)

451 
addröfo
 
höts
, *
ai0
, *
ai
;

452 
off£t
;

453 
gai
;

455 i‡(
	`niquîy_£t_subje˘_ty≥
(
niquîy_›ti⁄s
[
ödex
].
d©a
) < 0)

458 
ni_subje˘_ty≥
 = 
niquîy_›ti⁄s
[
ödex
].
d©a
;

460 
	`mem£t
(&
höts
, 0, (hints));

462 
niquîy_›ti⁄s
[
ödex
].
d©a
) {

463 
NI_SUBJ_IPV6
:

464 
ni_subje˘_Àn
 = (
ö6_addr
);

465 
off£t
 = 
	`OFFSET_OF
(
sockaddr_ö6
, 
sö6_addr
);

466 
höts
.
ai_Ámûy
 = 
AF_INET6
;

468 
NI_SUBJ_IPV4
:

469 
ni_subje˘_Àn
 = (
ö_addr
);

470 
off£t
 = 
	`OFFSET_OF
(
sockaddr_ö
, 
sö_addr
);

471 
höts
.
ai_Ámûy
 = 
AF_INET
;

475 
off£t
 = -1;

478 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

479 #ifde‡
USE_IDN


480 
höts
.
ai_Êags
 = 
AI_IDN
;

483 
gai
 = 
	`gëaddröfo
(
¨g
, 0, &
höts
, &
ai0
);

484 i‡(
gai
) {

485 
	`Ârötf
(
°dîr
, "Unknow¿ho°: %s\n", 
¨g
);

489 
ai
 = 
ai0
;ái;áòai->
ai_√xt
) {

490 *
p
 = 
	`mÆloc
(
ni_subje˘_Àn
);

491 i‡(!
p
)

493 
	`mem˝y
(
p
, (
__u8
 *)
ai
->
ai_addr
 + 
off£t
, 
ni_subje˘_Àn
);

494 
	`‰ì
(
ni_subje˘
);

495 
ni_subje˘
 = 
p
;

498 
	`‰ìaddröfo
(
ai0
);

501 
	}
}

503 
	$niquîy_›ti⁄_subje˘_«me_h™dÀr
(
ödex
, c⁄° *
¨g
)

505 #ifde‡
USE_CRYPTO


506 
nigroup_buf
[
INET6_ADDRSTRLEN
 + 1 + 
IFNAMSIZ
];

507 *
d≈ås
[2], **
dµ
, **
œ°d≈å
;

508 
n
;

509 
i
;

510 *
«me
, *
p
;

511 *
ˇn⁄«me
 = 
NULL
, *
idn
 = NULL;

512 *
buf
 = 
NULL
;

513 
size_t
 
«mñí
;

514 
size_t
 
buÊí
;

515 
dŸs
, 
fqdn
 = 
niquîy_›ti⁄s
[
ödex
].
d©a
;

516 
MD5_CTX
 
˘xt
;

517 
__u8
 
dige°
[
MD5_DIGEST_LENGTH
];

518 #ifde‡
USE_IDN


519 
rc
;

522 i‡(
	`niquîy_£t_subje˘_ty≥
(
NI_SUBJ_NAME
) < 0)

525 #ifde‡
USE_IDN


526 
«me
 = 
	`°rög¥ï_loˇÀ_to_utf8
(
¨g
);

527 i‡(!
«me
) {

528 
	`Ârötf
(
°dîr
, "ping6: IDN support failed.\n");

529 
	`exô
(2);

532 
«me
 = 
	`°rdup
(
¨g
);

533 i‡(!
«me
)

534 
oomexô
;

537 
p
 = 
	`°rchr
(
«me
, 
SCOPE_DELIMITER
);

538 i‡(
p
) {

539 *
p
 = '\0';

540 i‡(
	`°æí
(
p
 + 1Ë>
IFNAMSIZ
) {

541 
	`Ârötf
(
°dîr
, "ping6:ÅooÜong scopeÇame.\n");

542 
	`exô
(1);

546 #ifde‡
USE_IDN


547 
rc
 = 
	`id«_to_ascii_8z
(
«me
, &
idn
, 0);

548 i‡(
rc
) {

549 
	`Ârötf
(
°dîr
, "ping6: IDNÉncodingÉrror: %s\n",

550 
	`id«_°ªº‹
(
rc
));

551 
	`exô
(2);

554 
idn
 = 
	`°rdup
(
«me
);

555 i‡(!
idn
)

556 
oomexô
;

559 
«mñí
 = 
	`°æí
(
idn
);

560 
ˇn⁄«me
 = 
	`mÆloc
(
«mñí
 + 1);

561 i‡(!
ˇn⁄«me
)

562 
oomexô
;

564 
dŸs
 = 0;

565 
i
 = 0; i < 
«mñí
 + 1; i++) {

566 
ˇn⁄«me
[
i
] = 
	`isuµî
(
idn
[i]Ë? 
	`tﬁowî
(idn[i]) : idn[i];

567 i‡(
idn
[
i
] == '.')

568 
dŸs
++;

571 i‡(
fqdn
 == 0) {

573 
fqdn
 = 
dŸs
 ? 1 : -1;

576 
buÊí
 = 
«mñí
 + 3 + 1;

578 
buf
 = 
	`mÆloc
(
buÊí
);

579 i‡(!
buf
) {

580 
	`Ârötf
(
°dîr
, "ping6: out of memory.\n");

581 
îªxô
;

584 
dµ
 = 
d≈ås
;

585 
œ°d≈å
 = &
d≈ås
[
	`ARRAY_SIZE
(dnptrs)];

587 *
dµ
++ = (*)
buf
;

588 *
dµ
++ = 
NULL
;

590 
n
 = 
	`dn_comp
(
ˇn⁄«me
, (*)
buf
, 
buÊí
, 
d≈ås
, 
œ°d≈å
);

591 i‡(
n
 < 0) {

592 
	`Ârötf
(
°dîr
, "pög6: I«µr›rüã subje˘Çame: %s\n", 
ˇn⁄«me
);

593 
îªxô
;

594 } i‡(
n
 >
buÊí
) {

595 
	`Ârötf
(
°dîr
, "ping6: dn_comp()ÑeturnedÅooÜongÑesult.\n");

596 
îªxô
;

599 
	`MD5_Inô
(&
˘xt
);

600 
	`MD5_Upd©e
(&
˘xt
, 
buf
, buf[0]);

601 
	`MD5_FöÆ
(
dige°
, &
˘xt
);

603 
	`•rötf
(
nigroup_buf
, "ff02::2:%02x%02x:%02x%02x%s%s",

604 
dige°
[0], digest[1], digest[2], digest[3],

605 
p
 ? "%" : "",

606 
p
 ?Ö + 1 : "");

608 i‡(
fqdn
 < 0)

609 
buf
[
n
] = 0;

611 
	`‰ì
(
ni_subje˘
);

613 
ni_group
 = 
nigroup_buf
;

614 
ni_subje˘
 = 
buf
;

615 
ni_subje˘_Àn
 = 
n
 + (
fqdn
 < 0);

616 
ni_group
 = 
nigroup_buf
;

618 
	`‰ì
(
ˇn⁄«me
);

619 
	`‰ì
(
idn
);

620 
	`‰ì
(
«me
);

623 
oomexô
:

624 
	`Ârötf
(
°dîr
, "ping6: out of memory.\n");

625 
îªxô
:

626 
	`‰ì
(
buf
);

627 
	`‰ì
(
ˇn⁄«me
);

628 
	`‰ì
(
idn
);

629 
	`‰ì
(
«me
);

630 
	`exô
(1);

632 
	`Ârötf
(
°dîr
, "ping6: functionÇotávailable; crypto disabled\n");

633 
	`exô
(3);

635 
	}
}

637 
	$niquîy_›ti⁄_hñp_h™dÀr
(
ödex
, c⁄° *
¨g
)

639 
	`Ârötf
(
°dîr
, "ping6 -N suboptions\n"

649 
	`exô
(2);

650 
	}
}

652 
	$niquîy_›ti⁄_h™dÀr
(c⁄° *
›t_¨g
)

654 
niquîy_›ti⁄
 *
p
;

655 
i
;

656 
ªt
 = -1;

657 
i
 = 0, 
p
 = 
niquîy_›ti⁄s
;Ö->
«me
; i++,Ö++) {

658 i‡(
	`°∫cmp
(
p
->
«me
, 
›t_¨g
,Ö->
«mñí
))

660 i‡(!
p
->
has_¨g
) {

661 i‡(
›t_¨g
[
p
->
«mñí
] == '\0') {

662 
ªt
 = 
p
->
	`h™dÀr
(
i
, 
NULL
);

663 i‡(
ªt
 >= 0)

667 i‡(
›t_¨g
[
p
->
«mñí
] == '=') {

668 
ªt
 = 
p
->
	`h™dÀr
(
i
, &
›t_¨g
[p->
«mñí
] + 1);

669 i‡(
ªt
 >= 0)

674 i‡(!
p
->
«me
)

675 
ªt
 = 
	`niquîy_›ti⁄_hñp_h™dÀr
(0, 
NULL
);

676  
ªt
;

677 
	}
}

679 
	$hextoui
(c⁄° *
°r
)

681 
vÆ
;

682 *
ï
;

684 
î∫o
 = 0;

685 
vÆ
 = 
	`°πoul
(
°r
, &
ï
, 16);

686 i‡(*
ï
) {

687 i‡(!
î∫o
)

688 
î∫o
 = 
EINVAL
;

692 i‡(
vÆ
 > 
UINT_MAX
) {

693 
î∫o
 = 
ERANGE
;

694  
UINT_MAX
;

697  
vÆ
;

698 
	}
}

700 
	$maö
(
¨gc
, *
¨gv
[])

702 
ch
, 
hﬁd
, 
∑ckÀn
;

703 *
∑ckë
;

704 *
èrgë
;

705 
addröfo
 
höts
, *
ai
;

706 
gai
;

707 
sockaddr_ö6
 
fú°h›
;

708 
sockë_î∫o
;

709 
icmp6_fûãr
 
fûãr
;

710 
îr
;

711 #ifde‡
__löux__


712 
csum_off£t
, 
sz_›t
;

714 
uöt32_t
 
sc›e_id
 = 0;

716 
	`limô_ˇ∑bûôõs
();

718 #ifde‡
USE_IDN


719 
	`£éoˇÀ
(
LC_ALL
, "");

722 
	`íabÀ_ˇ∑bûôy_øw
();

724 
icmp_sock
 = 
	`sockë
(
AF_INET6
, 
SOCK_RAW
, 
IPPROTO_ICMPV6
);

725 
sockë_î∫o
 = 
î∫o
;

727 
	`dißbÀ_ˇ∑bûôy_øw
();

729 
sour˚
.
sö6_Ámûy
 = 
AF_INET6
;

730 
	`mem£t
(&
fú°h›
, 0, (firsthop));

731 
fú°h›
.
sö6_Ámûy
 = 
AF_INET6
;

733 
¥ñﬂd
 = 1;

734 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
COMMON_OPTSTR
 "F:N:")Ë!
EOF
) {

735 
ch
) {

737 
Êowœbñ
 = 
	`hextoui
(
›èrg
);

738 i‡(
î∫o
 || (
Êowœbñ
 & ~
IPV6_FLOWINFO_FLOWLABEL
)) {

739 
	`Ârötf
(
°dîr
, "pög: InvÆid flowöfÿ%s\n", 
›èrg
);

740 
	`exô
(2);

742 
›ti⁄s
 |
F_FLOWINFO
;

745 
t˛ass
 = 
	`hextoui
(
›èrg
);

746 i‡(
î∫o
 || (
t˛ass
 & ~0xff)) {

747 
	`Ârötf
(
°dîr
, "pög: InvÆidÅ˛as†%s\n", 
›èrg
);

748 
	`exô
(2);

750 
›ti⁄s
 |
F_TCLASS
;

753 i‡(
	`°rchr
(
›èrg
, ':')) {

754 *
p
, *
addr
 = 
	`°rdup
(
›èrg
);

756 i‡(!
addr
) {

757 
	`Ârötf
(
°dîr
, "ping: out of memory\n");

758 
	`exô
(2);

761 
p
 = 
	`°rchr
(
addr
, 
SCOPE_DELIMITER
);

762 i‡(
p
) {

763 *
p
 = '\0';

764 
devi˚
 = 
›èrg
 + (
p
 - 
addr
) + 1;

767 i‡(
	`öë_±⁄
(
AF_INET6
, 
addr
, (*)&
sour˚
.
sö6_addr
) <= 0) {

768 
	`Ârötf
(
°dîr
, "pög: invÆid sour˚áddªs†%s\n", 
›èrg
);

769 
	`exô
(2);

772 
›ti⁄s
 |
F_STRICTSOURCE
;

774 
	`‰ì
(
addr
);

776 
devi˚
 = 
›èrg
;

780 i‡(
	`°rcmp
(
›èrg
, "do") == 0)

781 
pmtudisc
 = 
IPV6_PMTUDISC_DO
;

782 i‡(
	`°rcmp
(
›èrg
, "dont") == 0)

783 
pmtudisc
 = 
IPV6_PMTUDISC_DONT
;

784 i‡(
	`°rcmp
(
›èrg
, "want") == 0)

785 
pmtudisc
 = 
IPV6_PMTUDISC_WANT
;

787 
	`Ârötf
(
°dîr
, "ping: wrong value for -M: do, dont, wantáre valid ones.\n");

788 
	`exô
(2);

792 
	`¥ötf
("pög6 utûôy, iputûs-%s\n", 
SNAPSHOT
);

793 
	`exô
(0);

795 i‡(
	`niquîy_›ti⁄_h™dÀr
(
›èrg
) < 0) {

796 
	`ußge
();

800 
COMMON_OPTIONS


801 
	`comm⁄_›ti⁄s
(
ch
);

804 
	`ußge
();

807 
¨gc
 -
›töd
;

808 
¨gv
 +
›töd
;

810 #ifde‡
ENABLE_PING6_RTHDR


811 
¨gc
 > 1) {

812 
ö6_addr
 *
addr
;

814 i‡(
§¸t
 =
NULL
) {

815 
•a˚
;

817 
	`Ârötf
(
°dîr
, "ping6: Warning: "

820 #ifde‡
ENABLE_PING6_RTHDR_RFC3542


821 
•a˚
 = 
	`öë6_πh_•a˚
(
IPV6_RTHDR_TYPE_0
, 
¨gc
 - 1);

823 
•a˚
 = 
	`öë6_§¸t_•a˚
(
IPV6_SRCRT_TYPE_0
, 
¨gc
 - 1);

825 i‡(
•a˚
 == 0) {

826 
	`Ârötf
(
°dîr
, "srcrt_space failed\n");

827 
	`exô
(2);

829 #ifde‡
ENABLE_PING6_RTHDR_RFC3542


830 i‡(
cmsgÀn
 + 
	`CMSG_SPACE
(
•a˚
Ë> (
cmsgbuf
)) {

831 
	`Ârötf
(
°dîr
, "noÑoom for options\n");

832 
	`exô
(2);

835 i‡(
•a˚
 + 
cmsgÀn
 > (
cmsgbuf
)) {

836 
	`Ârötf
(
°dîr
, "noÑoom for options\n");

837 
	`exô
(2);

840 
§¸t
 = (
cmsghdr
*)(
cmsgbuf
+
cmsgÀn
);

841 #ifde‡
ENABLE_PING6_RTHDR_RFC3542


842 
	`mem£t
(
§¸t
, 0, 
	`CMSG_SPACE
(0));

843 
§¸t
->
cmsg_Àn
 = 
	`CMSG_LEN
(
•a˚
);

844 
§¸t
->
cmsg_Àvñ
 = 
IPPROTO_IPV6
;

845 
§¸t
->
cmsg_ty≥
 = 
IPV6_RTHDR
;

846 
	`öë6_πh_öô
(
	`CMSG_DATA
(
§¸t
), 
•a˚
, 
IPV6_RTHDR_TYPE_0
, 
¨gc
 - 1);

847 
cmsgÀn
 +
	`CMSG_SPACE
(
•a˚
);

849 
cmsgÀn
 +
	`CMSG_ALIGN
(
•a˚
);

850 
	`öë6_§¸t_öô
(
§¸t
, 
IPV6_SRCRT_TYPE_0
);

854 
èrgë
 = *
¨gv
;

856 
	`mem£t
(&
höts
, 0, (hints));

857 
höts
.
ai_Ámûy
 = 
AF_INET6
;

858 #ifde‡
USE_IDN


859 
höts
.
ai_Êags
 = 
AI_IDN
;

861 
gai
 = 
	`gëaddröfo
(
èrgë
, 
NULL
, &
höts
, &
ai
);

862 i‡(
gai
) {

863 
	`Ârötf
(
°dîr
, "unknown host\n");

864 
	`exô
(2);

866 
addr
 = &((
sockaddr_ö6
 *)(
ai
->
ai_addr
))->
sö6_addr
;

867 #ifde‡
ENABLE_PING6_RTHDR_RFC3542


868 
	`öë6_πh_add
(
	`CMSG_DATA
(
§¸t
), 
addr
);

870 
	`öë6_§¸t_add
(
§¸t
, 
addr
);

872 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
fú°h›
.
sö6_addr
)) {

873 
	`mem˝y
(&
fú°h›
.
sö6_addr
, 
addr
, 16);

874 #ifde‡
HAVE_SIN6_SCOPEID


875 
fú°h›
.
sö6_sc›e_id
 = ((
sockaddr_ö6
 *)(
ai
->
ai_addr
))->sin6_scope_id;

877 i‡(
fú°h›
.
sö6_sc›e_id
 && 
sc›e_id
 && firsthop.sin6_scope_id != scope_id) {

878 
	`Ârötf
(
°dîr
, "scope discrepancyámongÅheÇodes\n");

879 
	`exô
(2);

880 } i‡(!
sc›e_id
) {

881 
sc›e_id
 = 
fú°h›
.
sö6_sc›e_id
;

885 
	`‰ìaddröfo
(
ai
);

887 
¨gv
++;

888 
¨gc
--;

892 i‡(
	`niquîy_is_íabÀd
()) {

893 
	`niquîy_öô_n⁄˚
();

895 i‡(!
	`niquîy_is_subje˘_vÆid
()) {

896 
ni_subje˘
 = &
whîëo
.
sö6_addr
;

897 
ni_subje˘_Àn
 = (
whîëo
.
sö6_addr
);

898 
ni_subje˘_ty≥
 = 
NI_SUBJ_IPV6
;

902 i‡(
¨gc
 > 1) {

903 #i‚de‡
ENABLE_PING6_RTHDR


904 
	`Ârötf
(
°dîr
, "ping6: SourceÑouting is deprecated by RFC5095.\n");

906 
	`ußge
();

907 } i‡(
¨gc
 == 1) {

908 
èrgë
 = *
¨gv
;

910 i‡(
ni_quîy
 < 0 && 
ni_subje˘_ty≥
 !
NI_SUBJ_NAME
)

911 
	`ußge
();

912 
èrgë
 = 
ni_group
;

915 
	`mem£t
(&
höts
, 0, (hints));

916 
höts
.
ai_Ámûy
 = 
AF_INET6
;

917 #ifde‡
USE_IDN


918 
höts
.
ai_Êags
 = 
AI_IDN
;

920 
gai
 = 
	`gëaddröfo
(
èrgë
, 
NULL
, &
höts
, &
ai
);

921 i‡(
gai
) {

922 
	`Ârötf
(
°dîr
, "unknown host\n");

923 
	`exô
(2);

926 
	`mem˝y
(&
whîëo
, 
ai
->
ai_addr
, (whereto));

927 
whîëo
.
sö6_p‹t
 = 
	`ht⁄s
(
IPPROTO_ICMPV6
);

929 i‡(
	`memchr
(
èrgë
, ':', 
	`°æí
(target)))

930 
›ti⁄s
 |
F_NUMERIC
;

932 
	`‰ìaddröfo
(
ai
);

934 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
fú°h›
.
sö6_addr
)) {

935 
	`mem˝y
(&
fú°h›
.
sö6_addr
, &
whîëo
.sin6_addr, 16);

936 #ifde‡
HAVE_SIN6_SCOPEID


937 
fú°h›
.
sö6_sc›e_id
 = 
whîëo
.sin6_scope_id;

939 i‡(
fú°h›
.
sö6_sc›e_id
 && 
sc›e_id
 && firsthop.sin6_scope_id != scope_id) {

940 
	`Ârötf
(
°dîr
, "scope discrepancyámongÅheÇodes\n");

941 
	`exô
(2);

942 } i‡(!
sc›e_id
) {

943 
sc›e_id
 = 
fú°h›
.
sö6_sc›e_id
;

948 
ho°«me
 = 
èrgë
;

950 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sour˚
.
sö6_addr
)) {

951 
sockÀn_t
 
Æí
;

952 
¥obe_fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

954 i‡(
¥obe_fd
 < 0) {

955 
	`≥º‹
("socket");

956 
	`exô
(2);

958 i‡(
devi˚
) {

959 #i‡
	`deföed
(
IPV6_RECVPKTINFO
Ë|| deföed(
HAVE_SIN6_SCOPEID
)

960 
iÁ˚
 = 
	`if_«me2ödex
(
devi˚
);

962 #ifde‡
IPV6_RECVPKTINFO


963 
ö6_pktöfo
 
ùi
;

965 
	`mem£t
(&
ùi
, 0, (ipi));

966 
ùi
.
ùi6_ifödex
 = 
iÁ˚
;

969 #ifde‡
HAVE_SIN6_SCOPEID


970 i‡(
	`IN6_IS_ADDR_LINKLOCAL
(&
fú°h›
.
sö6_addr
) ||

971 
	`IN6_IS_ADDR_MC_LINKLOCAL
(&
fú°h›
.
sö6_addr
))

972 
fú°h›
.
sö6_sc›e_id
 = 
iÁ˚
;

974 
	`íabÀ_ˇ∑bûôy_øw
();

976 #ifde‡
IPV6_RECVPKTINFO


977 
	`£tsock›t
(
¥obe_fd
, 
IPPROTO_IPV6
, 
IPV6_PKTINFO
, &
ùi
, (ipi)) == -1 &&

979 
	`£tsock›t
(
¥obe_fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
devi˚
, 
	`°æí
(device)+1) == -1) {

980 
	`≥º‹
("setsockopt(SO_BINDTODEVICE)");

981 
	`exô
(2);

983 
	`dißbÀ_ˇ∑bûôy_øw
();

985 
fú°h›
.
sö6_p‹t
 = 
	`ht⁄s
(1025);

986 i‡(
	`c⁄√˘
(
¥obe_fd
, (
sockaddr
*)&
fú°h›
, (firsthop)) == -1) {

987 
	`≥º‹
("connect");

988 
	`exô
(2);

990 
Æí
 = (
sour˚
);

991 i‡(
	`gësock«me
(
¥obe_fd
, (
sockaddr
*)&
sour˚
, &
Æí
) == -1) {

992 
	`≥º‹
("getsockname");

993 
	`exô
(2);

995 
sour˚
.
sö6_p‹t
 = 0;

996 
	`˛o£
(
¥obe_fd
);

998 #i‚de‡
WITHOUT_IFADDRS


999 i‡(
devi˚
) {

1000 
iÁddrs
 *
iÁ0
, *
iÁ
;

1002 i‡(
	`gëiÁddrs
(&
iÁ0
)) {

1003 
	`≥º‹
("getifaddrs");

1004 
	`exô
(2);

1007 
iÁ
 = 
iÁ0
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

1008 i‡(!
iÁ
->
iÁ_addr
 || iÁ->iÁ_addr->
ß_Ámûy
 !
AF_INET6
)

1010 i‡(!
	`°∫cmp
(
iÁ
->
iÁ_«me
, 
devi˚
, (device) - 1) &&

1011 
	`IN6_ARE_ADDR_EQUAL
(&((
sockaddr_ö6
 *)
iÁ
->
iÁ_addr
)->
sö6_addr
,

1012 &
sour˚
.
sö6_addr
))

1015 i‡(!
iÁ
)

1016 
	`Ârötf
(
°dîr
, "pög6: W¨nög: sour˚áddªs†mighàbê£À˘ed o¿devi˚ othîÅh™ %s.\n", 
devi˚
);

1018 
	`‰ìiÁddrs
(
iÁ0
);

1022 #ifde‡
HAVE_SIN6_SCOPEID


1023 i‡(
devi˚
 && (
	`IN6_IS_ADDR_LINKLOCAL
(&
sour˚
.
sö6_addr
) ||

1024 
	`IN6_IS_ADDR_MC_LINKLOCAL
(&
sour˚
.
sö6_addr
)))

1025 
sour˚
.
sö6_sc›e_id
 = 
	`if_«me2ödex
(
devi˚
);

1028 i‡(
icmp_sock
 < 0) {

1029 
î∫o
 = 
sockë_î∫o
;

1030 
	`≥º‹
("ping: icmp open socket");

1031 
	`exô
(2);

1034 i‡(
devi˚
) {

1035 
cmsghdr
 *
cmsg
;

1036 
ö6_pktöfo
 *
ùi
;

1038 
cmsg
 = (
cmsghdr
*)(
cmsgbuf
+
cmsgÀn
);

1039 
cmsgÀn
 +
	`CMSG_SPACE
((*
ùi
));

1040 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((*
ùi
));

1041 
cmsg
->
cmsg_Àvñ
 = 
SOL_IPV6
;

1042 
cmsg
->
cmsg_ty≥
 = 
IPV6_PKTINFO
;

1044 
ùi
 = (
ö6_pktöfo
*)
	`CMSG_DATA
(
cmsg
);

1045 
	`mem£t
(
ùi
, 0, (*ipi));

1046 
ùi
->
ùi6_ifödex
 = 
	`if_«me2ödex
(
devi˚
);

1049 i‡((
whîëo
.
sö6_addr
.
s6_addr16
[0]&
	`ht⁄s
(0xff00)) == htons (0xff00)) {

1050 i‡(
uid
) {

1051 i‡(
öãrvÆ
 < 1000) {

1052 
	`Ârötf
(
°dîr
, "ping: multicastÖing withÅoo short interval.\n");

1053 
	`exô
(2);

1055 i‡(
pmtudisc
 >0 &&Ömtudis¯!
IPV6_PMTUDISC_DO
) {

1056 
	`Ârötf
(
°dîr
, "ping: multicastÖing doesÇot fragment.\n");

1057 
	`exô
(2);

1060 i‡(
pmtudisc
 < 0)

1061 
pmtudisc
 = 
IPV6_PMTUDISC_DO
;

1064 i‡(
pmtudisc
 >= 0) {

1065 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_IPV6
, 
IPV6_MTU_DISCOVER
, &
pmtudisc
, (pmtudisc)) == -1) {

1066 
	`≥º‹
("ping: IPV6_MTU_DISCOVER");

1067 
	`exô
(2);

1071 i‡((
›ti⁄s
&
F_STRICTSOURCE
) &&

1072 
	`böd
(
icmp_sock
, (
sockaddr
*)&
sour˚
, (source)) == -1) {

1073 
	`≥º‹
("ping: bind icmp socket");

1074 
	`exô
(2);

1077 i‡(
d©Æí
 >(
timevÆ
Ë&& (
ni_quîy
 < 0)) {

1079 
timög
 = 1;

1081 
∑ckÀn
 = 
d©Æí
 + 8 + 4096 + 40 + 8;

1082 i‡(!(
∑ckë
 = (*)
	`mÆloc
(()
∑ckÀn
))) {

1083 
	`Ârötf
(
°dîr
, "ping: out of memory.\n");

1084 
	`exô
(2);

1087 
w‹kög_ªcvîr
 = 1;

1088 
hﬁd
 = 1;

1089 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_IPV6
, 
IPV6_RECVERR
, (*)&
hﬁd
, (hold))) {

1090 
	`Ârötf
(
°dîr
, "WARNING: your kernel is veeery old. NoÖroblems.\n");

1091 
w‹kög_ªcvîr
 = 0;

1096 
hﬁd
 = 
d©Æí
+8;

1097 
hﬁd
 += ((hold+511)/512)*(40+16+64+160);

1098 
	`sock_£tbufs
(
icmp_sock
, 
hﬁd
);

1100 #ifde‡
__löux__


1101 
csum_off£t
 = 2;

1102 
sz_›t
 = ();

1104 
îr
 = 
	`£tsock›t
(
icmp_sock
, 
SOL_RAW
, 
IPV6_CHECKSUM
, &
csum_off£t
, 
sz_›t
);

1105 i‡(
îr
 < 0) {

1109 
	`Ârötf
(
°dîr
, "setsockopt(RAW_CHECKSUM) failed -ÅryÅo continue.");

1117 
	`ICMP6_FILTER_SETBLOCKALL
(&
fûãr
);

1119 i‡(!
w‹kög_ªcvîr
) {

1120 
	`ICMP6_FILTER_SETPASS
(
ICMP6_DST_UNREACH
, &
fûãr
);

1121 
	`ICMP6_FILTER_SETPASS
(
ICMP6_PACKET_TOO_BIG
, &
fûãr
);

1122 
	`ICMP6_FILTER_SETPASS
(
ICMP6_TIME_EXCEEDED
, &
fûãr
);

1123 
	`ICMP6_FILTER_SETPASS
(
ICMP6_PARAM_PROB
, &
fûãr
);

1126 i‡(
	`niquîy_is_íabÀd
())

1127 
	`ICMP6_FILTER_SETPASS
(
ICMPV6_NI_REPLY
, &
fûãr
);

1129 
	`ICMP6_FILTER_SETPASS
(
ICMP6_ECHO_REPLY
, &
fûãr
);

1131 
îr
 = 
	`£tsock›t
(
icmp_sock
, 
IPPROTO_ICMPV6
, 
ICMP6_FILTER
, &
fûãr
,

1132 (
icmp6_fûãr
));

1134 i‡(
îr
 < 0) {

1135 
	`≥º‹
("setsockopt(ICMP6_FILTER)");

1136 
	`exô
(2);

1139 i‡(
›ti⁄s
 & 
F_NOLOOP
) {

1140 
lo›
 = 0;

1141 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_LOOP
,

1142 &
lo›
, (loop)) == -1) {

1143 
	`≥º‹
 ("can't disable multicastÜoopback");

1144 
	`exô
(2);

1147 i‡(
›ti⁄s
 & 
F_TTL
) {

1148 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
,

1149 &
âl
, (ttl)) == -1) {

1150 
	`≥º‹
 ("can't set multicast hopÜimit");

1151 
	`exô
(2);

1153 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_UNICAST_HOPS
,

1154 &
âl
, (ttl)) == -1) {

1155 
	`≥º‹
 ("can't set unicast hopÜimit");

1156 
	`exô
(2);

1160 c⁄° 
⁄
 = 1;

1162 #ifde‡
IPV6_RECVHOPLIMIT


1163 
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_RECVHOPLIMIT
,

1164 &
⁄
, (on)) == -1 &&

1165 
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_2292HOPLIMIT
,

1166 &
⁄
, (on)) == -1

1168 
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_HOPLIMIT
,

1169 &
⁄
, (on)) == -1

1172 
	`≥º‹
 ("can'tÑeceive hopÜimit");

1173 
	`exô
(2);

1176 i‡(
›ti⁄s
 & 
F_TCLASS
) {

1177 #ifde‡
IPV6_TCLASS


1178 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_TCLASS
,

1179 &
t˛ass
, (tclass)) == -1) {

1180 
	`≥º‹
 ("setsockopt(IPV6_TCLASS)");

1181 
	`exô
(2);

1184 
	`Ârötf
(
°dîr
, "Traffic class isÇot supported.\n");

1188 i‡(
›ti⁄s
&
F_FLOWINFO
) {

1189 #ifde‡
IPV6_FLOWLABEL_MGR


1190 
‰eq_buf
[
	`CMSG_ALIGN
((
ö6_Êowœbñ_ªq
)Ë+ 
cmsgÀn
];

1191 
ö6_Êowœbñ_ªq
 *
‰eq
 = (ö6_Êowœbñ_ªq *)
‰eq_buf
;

1192 
‰eq_Àn
 = (*
‰eq
);

1193 #ifde‡
ENABLE_PING6_RTHDR


1194 i‡(
§¸t
)

1195 
‰eq_Àn
 = 
	`CMSG_ALIGN
((*
‰eq
)Ë+ 
§¸t
->
cmsg_Àn
;

1197 
	`mem£t
(
‰eq
, 0, (*freq));

1198 
‰eq
->
Êr_œbñ
 = 
	`ht⁄l
(
Êowœbñ
 & 
IPV6_FLOWINFO_FLOWLABEL
);

1199 
‰eq
->
Êr_a˘i⁄
 = 
IPV6_FL_A_GET
;

1200 
‰eq
->
Êr_Êags
 = 
IPV6_FL_F_CREATE
;

1201 
‰eq
->
Êr_sh¨e
 = 
IPV6_FL_S_EXCL
;

1202 
	`mem˝y
(&
‰eq
->
Êr_d°
, &
whîëo
.
sö6_addr
, 16);

1203 #ifde‡
ENABLE_PING6_RTHDR


1204 i‡(
§¸t
)

1205 
	`mem˝y
(
‰eq_buf
 + 
	`CMSG_ALIGN
((*
‰eq
)), 
§¸t
, sr¸t->
cmsg_Àn
);

1207 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_FLOWLABEL_MGR
,

1208 
‰eq
, 
‰eq_Àn
) == -1) {

1209 
	`≥º‹
 ("can't set flowlabel");

1210 
	`exô
(2);

1212 
Êowœbñ
 = 
‰eq
->
Êr_œbñ
;

1213 #ifde‡
ENABLE_PING6_RTHDR


1214 i‡(
§¸t
) {

1215 
cmsgÀn
 = (*)
§¸t
 - (*)
cmsgbuf
;

1216 
§¸t
 = 
NULL
;

1220 
	`Ârötf
(
°dîr
, "FlowÜabelsáreÇot supported.\n");

1221 
	`exô
(2);

1224 #ifde‡
IPV6_FLOWINFO_SEND


1225 
whîëo
.
sö6_Êowöfo
 = 
Êowœbñ
;

1226 i‡(
	`£tsock›t
(
icmp_sock
, 
IPPROTO_IPV6
, 
IPV6_FLOWINFO_SEND
,

1227 &
⁄
, (on)) == -1) {

1228 
	`≥º‹
 ("can't send flowinfo");

1229 
	`exô
(2);

1232 
	`Ârötf
(
°dîr
, "Flowinfo isÇot supported.\n");

1233 
	`exô
(2);

1237 
	`¥ötf
("PING %s(%sË", 
ho°«me
, 
	`¥_addr
(&
whîëo
.
sö6_addr
));

1238 i‡(
Êowœbñ
)

1239 
	`¥ötf
(", flow 0x%05x, ", ()
	`¡ohl
(
Êowœbñ
));

1240 i‡(
devi˚
 || (
›ti⁄s
&
F_STRICTSOURCE
)) {

1241 
	`¥ötf
("from %s %s: ",

1242 
	`¥_addr_n
(&
sour˚
.
sö6_addr
), 
devi˚
 ? : "");

1244 
	`¥ötf
("%d d©®byãs\n", 
d©Æí
);

1246 
	`£tup
(
icmp_sock
);

1248 
	`dr›_ˇ∑bûôõs
();

1250 
	`maö_lo›
(
icmp_sock
, 
∑ckë
, 
∑ckÀn
);

1251 
	}
}

1253 
	$ª˚ive_îr‹_msg
()

1255 
ªs
;

1256 
cbuf
[512];

1257 
iovec
 
iov
;

1258 
msghdr
 
msg
;

1259 
cmsghdr
 *
cmsg
;

1260 
sock_exãnded_îr
 *
e
;

1261 
icmp6_hdr
 
icmph
;

1262 
sockaddr_ö6
 
èrgë
;

1263 
√t_îr‹s
 = 0;

1264 
loˇl_îr‹s
 = 0;

1265 
ßved_î∫o
 = 
î∫o
;

1267 
iov
.
iov_ba£
 = &
icmph
;

1268 
iov
.
iov_Àn
 = (
icmph
);

1269 
msg
.
msg_«me
 = (*)&
èrgë
;

1270 
msg
.
msg_«mñí
 = (
èrgë
);

1271 
msg
.
msg_iov
 = &
iov
;

1272 
msg
.
msg_iovÀn
 = 1;

1273 
msg
.
msg_Êags
 = 0;

1274 
msg
.
msg_c⁄åﬁ
 = 
cbuf
;

1275 
msg
.
msg_c⁄åﬁÀn
 = (
cbuf
);

1277 
ªs
 = 
	`ªcvmsg
(
icmp_sock
, &
msg
, 
MSG_ERRQUEUE
|
MSG_DONTWAIT
);

1278 i‡(
ªs
 < 0)

1279 
out
;

1281 
e
 = 
NULL
;

1282 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg; cmsg = 
	`CMSG_NXTHDR
(&msg, cmsg)) {

1283 i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_IPV6
) {

1284 i‡(
cmsg
->
cmsg_ty≥
 =
IPV6_RECVERR
)

1285 
e
 = (
sock_exãnded_îr
 *)
	`CMSG_DATA
(
cmsg
);

1288 i‡(
e
 =
NULL
)

1289 
	`ab‹t
();

1291 i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_LOCAL
) {

1292 
loˇl_îr‹s
++;

1293 i‡(
›ti⁄s
 & 
F_QUIET
)

1294 
out
;

1295 i‡(
›ti⁄s
 & 
F_FLOOD
)

1296 
	`wrôe_°dout
("E", 1);

1297 i‡(
e
->
ì_î∫o
 !
EMSGSIZE
)

1298 
	`Ârötf
(
°dîr
, "pög:Üoˇ»îr‹: %s\n", 
	`°ªº‹
(
e
->
ì_î∫o
));

1300 
	`Ârötf
(
°dîr
, "pög:Üoˇ»îr‹: Mesßgêtoÿl⁄g, mtu=%u\n", 
e
->
ì_öfo
);

1301 
√º‹s
++;

1302 } i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP6
) {

1303 
sockaddr_ö6
 *
sö6
 = (sockaddr_ö6*)(
e
+1);

1305 i‡(
ªs
 < (
icmph
) ||

1306 
	`memcmp
(&
èrgë
.
sö6_addr
, &
whîëo
.sin6_addr, 16) ||

1307 
icmph
.
icmp6_ty≥
 !
ICMP6_ECHO_REQUEST
 ||

1308 
icmph
.
icmp6_id
 !
idít
) {

1310 
ßved_î∫o
 = 0;

1311 
out
;

1314 
√t_îr‹s
++;

1315 
√º‹s
++;

1316 i‡(
›ti⁄s
 & 
F_QUIET
)

1317 
out
;

1318 i‡(
›ti⁄s
 & 
F_FLOOD
) {

1319 
	`wrôe_°dout
("\bE", 2);

1321 
	`¥öt_time°amp
();

1322 
	`¥ötf
("From %†icmp_£q=%u ", 
	`¥_addr
(&
sö6
->
sö6_addr
), 
	`¡ohs
(
icmph
.
icmp6_£q
));

1323 
	`¥_icmph
(
e
->
ì_ty≥
,É->
ì_code
,É->
ì_öfo
);

1324 
	`putch¨
('\n');

1325 
	`fÊush
(
°dout
);

1329 
out
:

1330 
î∫o
 = 
ßved_î∫o
;

1331  
√t_îr‹s
 ? : -
loˇl_îr‹s
;

1332 
	}
}

1342 
	$buûd_echo
(
__u8
 *
_icmph
)

1344 
icmp6_hdr
 *
icmph
;

1345 
cc
;

1347 
icmph
 = (
icmp6_hdr
 *)
_icmph
;

1348 
icmph
->
icmp6_ty≥
 = 
ICMP6_ECHO_REQUEST
;

1349 
icmph
->
icmp6_code
 = 0;

1350 
icmph
->
icmp6_cksum
 = 0;

1351 
icmph
->
icmp6_£q
 = 
	`ht⁄s
(
¡ønsmôãd
+1);

1352 
icmph
->
icmp6_id
 = 
idít
;

1354 i‡(
timög
)

1355 
	`gëtimeofday
((
timevÆ
 *)&
ouçack
[8],

1356 (
timez⁄e
 *)
NULL
);

1358 
cc
 = 
d©Æí
 + 8;

1360  
cc
;

1361 
	}
}

1364 
	$buûd_niquîy
(
__u8
 *
_nih
)

1366 
ni_hdr
 *
nih
;

1367 
cc
;

1369 
nih
 = (
ni_hdr
 *)
_nih
;

1370 
nih
->
ni_cksum
 = 0;

1372 
nih
->
ni_ty≥
 = 
ICMPV6_NI_QUERY
;

1373 
cc
 = (*
nih
);

1374 
d©Æí
 = 0;

1376 
	`niquîy_fûl_n⁄˚
(
¡ønsmôãd
 + 1, 
nih
->
ni_n⁄˚
);

1377 
nih
->
ni_code
 = 
ni_subje˘_ty≥
;

1378 
nih
->
ni_qty≥
 = 
	`ht⁄s
(
ni_quîy
);

1379 
nih
->
ni_Êags
 = 
ni_Êag
;

1380 
	`mem˝y
(
nih
 + 1, 
ni_subje˘
, 
ni_subje˘_Àn
);

1381 
cc
 +
ni_subje˘_Àn
;

1383  
cc
;

1384 
	}
}

1386 
	$£nd_¥obe
()

1388 
Àn
, 
cc
;

1390 
	`rcvd_˛ór
(
¡ønsmôãd
 + 1);

1392 i‡(
	`niquîy_is_íabÀd
())

1393 
Àn
 = 
	`buûd_niquîy
(
ouçack
);

1395 
Àn
 = 
	`buûd_echo
(
ouçack
);

1397 i‡(
cmsgÀn
 == 0) {

1398 
cc
 = 
	`£ndto
(
icmp_sock
, (*)
ouçack
, 
Àn
, 
c⁄fúm
,

1399 (
sockaddr
 *Ë&
whîëo
,

1400 (
sockaddr_ö6
));

1402 
msghdr
 
mhdr
;

1403 
iovec
 
iov
;

1405 
iov
.
iov_Àn
 = 
Àn
;

1406 
iov
.
iov_ba£
 = 
ouçack
;

1408 
	`mem£t
(&
mhdr
, 0, (mhdr));

1409 
mhdr
.
msg_«me
 = &
whîëo
;

1410 
mhdr
.
msg_«mñí
 = (
sockaddr_ö6
);

1411 
mhdr
.
msg_iov
 = &
iov
;

1412 
mhdr
.
msg_iovÀn
 = 1;

1413 
mhdr
.
msg_c⁄åﬁ
 = 
cmsgbuf
;

1414 
mhdr
.
msg_c⁄åﬁÀn
 = 
cmsgÀn
;

1416 
cc
 = 
	`£ndmsg
(
icmp_sock
, &
mhdr
, 
c⁄fúm
);

1418 
c⁄fúm
 = 0;

1420  (
cc
 =
Àn
 ? 0 : cc);

1421 
	}
}

1423 
	$¥_echo_ª∂y
(
__u8
 *
_icmph
, 
cc
)

1425 
icmp6_hdr
 *
icmph
 = (icmp6_hd∏*Ë
_icmph
;

1426 
	`¥ötf
(" icmp_£q=%u", 
	`¡ohs
(
icmph
->
icmp6_£q
));

1427 
	}
};

1429 
	$putch¨_ß„
(
c
)

1431 i‡(
	`i•röt
(
c
))

1432 
	`putch¨
(
c
);

1434 
	`¥ötf
("\\%03o", 
c
);

1435 
	}
}

1437 
	$¥_niquîy_ª∂y_«me
(
ni_hdr
 *
nih
, 
Àn
)

1439 
__u8
 *
h
 = (__u8 *)(
nih
 + 1);

1440 
__u8
 *
p
 = 
h
 + 4;

1441 
__u8
 *
íd
 = (__u8 *)
nih
 + 
Àn
;

1442 
c⁄töued
 = 0;

1443 
buf
[1024];

1444 
ªt
;

1446 
Àn
 -(
ni_hdr
) + 4;

1448 i‡(
Àn
 < 0) {

1449 
	`¥ötf
("ÖarseÉrror (too short)");

1452 
p
 < 
íd
) {

1453 
fqdn
 = 1;

1454 
i
;

1456 
	`mem£t
(
buf
, 0xff, (buf));

1458 i‡(
c⁄töued
)

1459 
	`putch¨
(',');

1461 
ªt
 = 
	`dn_ex∑nd
(
h
, 
íd
, 
p
, 
buf
, (buf));

1462 i‡(
ªt
 < 0) {

1463 
	`¥ötf
("ÖarseÉrror (truncated)");

1466 i‡(
p
 + 
ªt
 < 
íd
 && *(p +Ñet) == '\0')

1467 
fqdn
 = 0;

1469 
	`putch¨
(' ');

1470 
i
 = 0; i < 
	`°æí
(
buf
); i++)

1471 
	`putch¨_ß„
(
buf
[
i
]);

1472 i‡(
fqdn
)

1473 
	`putch¨
('.');

1475 
p
 +
ªt
 + !
fqdn
;

1477 
c⁄töued
 = 1;

1479 
	}
}

1481 
	$¥_niquîy_ª∂y_addr
(
ni_hdr
 *
nih
, 
Àn
)

1483 
__u8
 *
h
 = (__u8 *)(
nih
 + 1);

1484 
__u8
 *
p
 = 
h
 + 4;

1485 
__u8
 *
íd
 = (__u8 *)
nih
 + 
Àn
;

1486 
af
;

1487 
aÊí
;

1488 
c⁄töued
 = 0;

1489 
åunˇãd
;

1490 
buf
[1024];

1492 
	`¡ohs
(
nih
->
ni_qty≥
)) {

1493 
NI_QTYPE_IPV4ADDR
:

1494 
af
 = 
AF_INET
;

1495 
aÊí
 = (
ö_addr
);

1496 
åunˇãd
 = 
nih
->
ni_Êags
 & 
NI_IPV6ADDR_F_TRUNCATE
;

1498 
NI_QTYPE_IPV6ADDR
:

1499 
af
 = 
AF_INET6
;

1500 
aÊí
 = (
ö6_addr
);

1501 
åunˇãd
 = 
nih
->
ni_Êags
 & 
NI_IPV4ADDR_F_TRUNCATE
;

1505 
af
 = 
aÊí
 = 
åunˇãd
 = 0;

1507 
p
 = 
h
;

1508 i‡(
Àn
 < 0) {

1509 
	`¥ötf
("ÖarseÉrror (too short)");

1513 
p
 < 
íd
) {

1514 i‡(
c⁄töued
)

1515 
	`putch¨
(',');

1517 i‡(
p
 + (
__u32
Ë+ 
aÊí
 > 
íd
) {

1518 
	`¥ötf
("ÖarseÉrror (truncated)");

1521 i‡(!
	`öë_¡›
(
af
, 
p
 + (
__u32
), 
buf
, (buf)))

1522 
	`¥ötf
(" unexpecedÉrror in inet_ntop(%s)",

1523 
	`°ªº‹
(
î∫o
));

1525 
	`¥ötf
(" %s", 
buf
);

1526 
p
 +(
__u32
Ë+ 
aÊí
;

1528 
c⁄töued
 = 1;

1530 i‡(
åunˇãd
)

1531 
	`¥ötf
(" (truncated)");

1532 
	}
}

1534 
	$¥_niquîy_ª∂y
(
__u8
 *
_nih
, 
Àn
)

1536 
ni_hdr
 *
nih
 = (ni_hd∏*)
_nih
;

1538 
nih
->
ni_code
) {

1539 
NI_SUCCESS
:

1540 
	`¡ohs
(
nih
->
ni_qty≥
)) {

1541 
NI_QTYPE_NAME
:

1542 
	`¥_niquîy_ª∂y_«me
(
nih
, 
Àn
);

1544 
NI_QTYPE_IPV4ADDR
:

1545 
NI_QTYPE_IPV6ADDR
:

1546 
	`¥_niquîy_ª∂y_addr
(
nih
, 
Àn
);

1549 
	`¥ötf
(" unknow¿qty≥(0x%02x)", 
	`¡ohs
(
nih
->
ni_qty≥
));

1552 
NI_REFUSED
:

1553 
	`¥ötf
("Ñefused");

1555 
NI_UNKNOWN
:

1556 
	`¥ötf
(" unknown");

1559 
	`¥ötf
(" unknow¿code(%02x)", 
	`¡ohs
(
nih
->
ni_code
));

1561 
	`¥ötf
("; seq=%u;", 
	`¡oh•
((
__u16
*)
nih
->
ni_n⁄˚
));

1562 
	}
}

1572 
	$∑r£_ª∂y
(
msghdr
 *
msg
, 
cc
, *
addr
, 
timevÆ
 *
tv
)

1574 
sockaddr_ö6
 *
‰om
 = 
addr
;

1575 
__u8
 *
buf
 = 
msg
->
msg_iov
->
iov_ba£
;

1576 
cmsghdr
 *
c
;

1577 
icmp6_hdr
 *
icmph
;

1578 
h›s
 = -1;

1580 
c
 = 
	`CMSG_FIRSTHDR
(
msg
); c; c = 
	`CMSG_NXTHDR
(msg, c)) {

1581 i‡(
c
->
cmsg_Àvñ
 !
SOL_IPV6
)

1583 
c
->
cmsg_ty≥
) {

1584 
IPV6_HOPLIMIT
:

1585 #ifde‡
IPV6_2292HOPLIMIT


1586 
IPV6_2292HOPLIMIT
:

1588 i‡(
c
->
cmsg_Àn
 < 
	`CMSG_LEN
(()))

1590 
	`mem˝y
(&
h›s
, 
	`CMSG_DATA
(
c
), (hops));

1597 
icmph
 = (
icmp6_hdr
 *Ë
buf
;

1598 i‡(
cc
 < 8) {

1599 i‡(
›ti⁄s
 & 
F_VERBOSE
)

1600 
	`Ârötf
(
°dîr
, "pög:ÖackëÅoÿsh‹à(%d byãs)\n", 
cc
);

1604 i‡(
icmph
->
icmp6_ty≥
 =
ICMP6_ECHO_REPLY
) {

1605 i‡(
icmph
->
icmp6_id
 !
idít
)

1607 i‡(
	`g©hî_°©i°ics
((
__u8
*)
icmph
, (*icmph), 
cc
,

1608 
	`¡ohs
(
icmph
->
icmp6_£q
),

1609 
h›s
, 0, 
tv
, 
	`¥_addr
(&
‰om
->
sö6_addr
),

1610 
¥_echo_ª∂y
)) {

1611 
	`fÊush
(
°dout
);

1614 } i‡(
icmph
->
icmp6_ty≥
 =
ICMPV6_NI_REPLY
) {

1615 
ni_hdr
 *
nih
 = (ni_hd∏*)
icmph
;

1616 
£q
 = 
	`niquîy_check_n⁄˚
(
nih
->
ni_n⁄˚
);

1617 i‡(
£q
 < 0)

1619 i‡(
	`g©hî_°©i°ics
((
__u8
*)
icmph
, (*icmph), 
cc
,

1620 
£q
,

1621 
h›s
, 0, 
tv
, 
	`¥_addr
(&
‰om
->
sö6_addr
),

1622 
¥_niquîy_ª∂y
))

1625 
√xthdr
;

1626 
ù6_hdr
 *
ùh1
 = (ù6_hdr*)(
icmph
+1);

1627 
icmp6_hdr
 *
icmph1
 = (icmp6_hd∏*)(
ùh1
+1);

1636 i‡(
cc
 < 8+(
ù6_hdr
)+8)

1639 i‡(
	`memcmp
(&
ùh1
->
ù6_d°
, &
whîëo
.
sö6_addr
, 16))

1642 
√xthdr
 = 
ùh1
->
ù6_nxt
;

1644 i‡(
√xthdr
 == 44) {

1645 
√xthdr
 = *(
__u8
*)
icmph1
;

1646 
icmph1
++;

1648 i‡(
√xthdr
 =
IPPROTO_ICMPV6
) {

1649 i‡(
icmph1
->
icmp6_ty≥
 !
ICMP6_ECHO_REQUEST
 ||

1650 
icmph1
->
icmp6_id
 !
idít
)

1652 
	`acknowÀdge
(
	`¡ohs
(
icmph1
->
icmp6_£q
));

1653 i‡(
w‹kög_ªcvîr
)

1655 
√º‹s
++;

1656 i‡(
›ti⁄s
 & 
F_FLOOD
) {

1657 
	`wrôe_°dout
("\bE", 2);

1660 
	`¥öt_time°amp
();

1661 
	`¥ötf
("From %s: icmp_£q=%u ", 
	`¥_addr
(&
‰om
->
sö6_addr
), 
	`¡ohs
(
icmph1
->
icmp6_£q
));

1664 i‡(!(
›ti⁄s
 & 
F_VERBOSE
Ë|| 
uid
)

1666 
	`¥öt_time°amp
();

1667 
	`¥ötf
("From %s: ", 
	`¥_addr
(&
‰om
->
sö6_addr
));

1669 
	`¥_icmph
(
icmph
->
icmp6_ty≥
, icmph->
icmp6_code
, 
	`¡ohl
(icmph->
icmp6_mtu
));

1672 i‡(
›ti⁄s
 & 
F_AUDIBLE
) {

1673 
	`putch¨
('\a');

1674 if(
›ti⁄s
 & 
F_FLOOD
)

1675 
	`fÊush
(
°dout
);

1677 i‡(!(
›ti⁄s
 & 
F_FLOOD
)) {

1678 
	`putch¨
('\n');

1679 
	`fÊush
(
°dout
);

1682 
	}
}

1685 
	$¥_icmph
(
__u8
 
ty≥
, __u8 
code
, 
__u32
 
öfo
)

1687 
ty≥
) {

1688 
ICMP6_DST_UNREACH
:

1689 
	`¥ötf
("Destination unreachable: ");

1690 
code
) {

1691 
ICMP6_DST_UNREACH_NOROUTE
:

1692 
	`¥ötf
("NoÑoute");

1694 
ICMP6_DST_UNREACH_ADMIN
:

1695 
	`¥ötf
("AdministrativelyÖrohibited");

1697 
ICMP6_DST_UNREACH_BEYONDSCOPE
:

1698 
	`¥ötf
("Beyond scope of sourceáddress");

1700 
ICMP6_DST_UNREACH_ADDR
:

1701 
	`¥ötf
("Address unreachable");

1703 
ICMP6_DST_UNREACH_NOPORT
:

1704 
	`¥ötf
("Port unreachable");

1707 
	`¥ötf
("Unknow¿codê%d", 
code
);

1711 
ICMP6_PACKET_TOO_BIG
:

1712 
	`¥ötf
("PackëÅoÿbig: mtu=%u", 
öfo
);

1713 i‡(
code
)

1714 
	`¥ötf
(", code=%d", 
code
);

1716 
ICMP6_TIME_EXCEEDED
:

1717 
	`¥ötf
("TimeÉxceeded: ");

1718 i‡(
code
 =
ICMP6_TIME_EXCEED_TRANSIT
)

1719 
	`¥ötf
("HopÜimit");

1720 i‡(
code
 =
ICMP6_TIME_EXCEED_REASSEMBLY
)

1721 
	`¥ötf
("Defragmentation failure");

1723 
	`¥ötf
("codê%d", 
code
);

1725 
ICMP6_PARAM_PROB
:

1726 
	`¥ötf
("ParameterÖroblem: ");

1727 i‡(
code
 =
ICMP6_PARAMPROB_HEADER
)

1728 
	`¥ötf
("Wrong header field ");

1729 i‡(
code
 =
ICMP6_PARAMPROB_NEXTHEADER
)

1730 
	`¥ötf
("Unknown header ");

1731 i‡(
code
 =
ICMP6_PARAMPROB_OPTION
)

1732 
	`¥ötf
("Unknown option ");

1734 
	`¥ötf
("codê%d ", 
code
);

1735 
	`¥ötf
 ("© %u", 
öfo
);

1737 
ICMP6_ECHO_REQUEST
:

1738 
	`¥ötf
("EchoÑequest");

1740 
ICMP6_ECHO_REPLY
:

1741 
	`¥ötf
("EchoÑeply");

1743 
MLD_LISTENER_QUERY
:

1744 
	`¥ötf
("MLD Query");

1746 
MLD_LISTENER_REPORT
:

1747 
	`¥ötf
("MLD Report");

1749 
MLD_LISTENER_REDUCTION
:

1750 
	`¥ötf
("MLD Reduction");

1753 
	`¥ötf
("unknow¿icm∞ty≥: %u", 
ty≥
);

1757 
	}
}

1759 
	~<löux/fûãr.h
>

1761 
	$ö°Æl_fûãr
()

1763 
⁄˚
;

1764 
sock_fûãr
 
ö¢s
[] = {

1765 
	`BPF_STMT
(
BPF_LD
|
BPF_H
|
BPF_ABS
, 4),

1766 
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 0xAAAA, 0, 1),

1767 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, ~0U),

1768 
	`BPF_STMT
(
BPF_LD
|
BPF_B
|
BPF_ABS
, 0),

1769 
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 
ICMP6_ECHO_REPLY
, 1, 0),

1770 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, ~0U),

1771 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, 0),

1773 
sock_Ârog
 
fûãr
 = {

1774  
ö¢s
 / (insns[0]),

1775 
ö¢s


1778 i‡(
⁄˚
)

1780 
⁄˚
 = 1;

1783 
ö¢s
[1] = (
sock_fûãr
)
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 
	`ht⁄s
(
idít
), 0, 1);

1785 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_ATTACH_FILTER
, &
fûãr
, (filter)))

1786 
	`≥º‹
("WARNING: failedÅo install socket filter\n");

1787 
	}
}

1795 * 
	$¥_addr
(
ö6_addr
 *
addr
)

1797 
ho°ít
 *
hp
 = 
NULL
;

1798 *
s
;

1799 
ö6_addr
 
œ°_addr
;

1801 #ifde‡
USE_IDN


1802 
	`‰ì
(
s
);

1805 
ö_¥_addr
 = !
	`£tjmp
(
¥_addr_jmp
);

1807 i‡(!(
hp
 && 
	`memcmp
(
addr
, &
œ°_addr
, (
ö6_addr
))) &&

1808 !(
exôög
 || 
›ti⁄s
&
F_NUMERIC
)) {

1809 
hp
 = 
	`gëho°byaddr
((
__u8
*)
addr
, (
ö6_addr
), 
AF_INET6
);

1810 
	`mem˝y
(&
œ°_addr
, 
addr
, (
ö6_addr
));

1813 
ö_¥_addr
 = 0;

1815 i‡(!
hp


1816 #ifde‡
USE_IDN


1817 || 
	`id«_to_unicode_lzlz
(
hp
->
h_«me
, &
s
, 0Ë!
IDNA_SUCCESS


1820 
s
 = 
NULL
;

1822  
hp
 ? (
s
 ? s : hp->
h_«me
Ë: 
	`¥_addr_n
(
addr
);

1823 
	}
}

1825 * 
	$¥_addr_n
(
ö6_addr
 *
addr
)

1827 
°r
[64];

1828 
	`öë_¡›
(
AF_INET6
, 
addr
, 
°r
, (str));

1829  
°r
;

1830 
	}
}

1832 
	#USAGE_NEWLINE
 "\¿ "

	)

1834 
	$ußge
()

1836 
	`Ârötf
(
°dîr
,

1844 
USAGE_NEWLINE


1848 
USAGE_NEWLINE


1853 
USAGE_NEWLINE


1858 
USAGE_NEWLINE


1860 #ifde‡
ENABLE_PING6_RTHDR


1866 
	`exô
(2);

1867 
	}
}

	@iputils-s20140519/ping6_niquery.h

1 
	~<asm/byã‹dî.h
>

3 
	#NI_NONCE_SIZE
 8

	)

6 
	sni_hdr
 {

7 
icmp6_hdr
 
	mni_u
;

8 
__u8
 
	mni_n⁄˚
[
NI_NONCE_SIZE
];

11 
	#ni_ty≥
 
ni_u
.
icmp6_ty≥


	)

12 
	#ni_code
 
ni_u
.
icmp6_code


	)

13 
	#ni_cksum
 
ni_u
.
icmp6_cksum


	)

14 
	#ni_qty≥
 
ni_u
.
icmp6_d©a16
[0]

	)

15 
	#ni_Êags
 
ni_u
.
icmp6_d©a16
[1]

	)

18 #i‚de‡
ICMPV6_NI_QUERY


19 
	#ICMPV6_NI_QUERY
 139

	)

20 
	#ICMPV6_NI_REPLY
 140

	)

24 
	#NI_SUBJ_IPV6
 0

	)

25 
	#NI_SUBJ_NAME
 1

	)

26 
	#NI_SUBJ_IPV4
 2

	)

29 
	#NI_SUCCESS
 0

	)

30 
	#NI_REFUSED
 1

	)

31 
	#NI_UNKNOWN
 2

	)

34 
	#NI_QTYPE_NOOP
 0

	)

35 
	#NI_QTYPE_NAME
 2

	)

36 
	#NI_QTYPE_IPV6ADDR
 3

	)

37 
	#NI_QTYPE_IPV4ADDR
 4

	)

40 
	#NI_IPV6ADDR_F_TRUNCATE
 
	`__c⁄°™t_˝u_to_be16
(0x0001)

	)

41 
	#NI_IPV6ADDR_F_ALL
 
	`__c⁄°™t_˝u_to_be16
(0x0002)

	)

42 
	#NI_IPV6ADDR_F_COMPAT
 
	`__c⁄°™t_˝u_to_be16
(0x0004)

	)

43 
	#NI_IPV6ADDR_F_LINKLOCAL
 
	`__c⁄°™t_˝u_to_be16
(0x0008)

	)

44 
	#NI_IPV6ADDR_F_SITELOCAL
 
	`__c⁄°™t_˝u_to_be16
(0x0010)

	)

45 
	#NI_IPV6ADDR_F_GLOBAL
 
	`__c⁄°™t_˝u_to_be16
(0x0020)

	)

47 
	#NI_IPV4ADDR_F_TRUNCATE
 
NI_IPV6ADDR_F_TRUNCATE


	)

48 
	#NI_IPV4ADDR_F_ALL
 
NI_IPV6ADDR_F_ALL


	)

	@iputils-s20140519/ping_common.c

1 
	~"pög_comm⁄.h
"

2 
	~<˘y≥.h
>

3 
	~<sched.h
>

4 
	~<m©h.h
>

6 #i‚de‡
HZ


7 
	#HZ
 
	`sysc⁄f
(
_SC_CLK_TCK
)

	)

10 
	g›ti⁄s
;

12 
	gm¨k
;

13 
	g¢dbuf
;

14 
	gâl
;

15 
	gπt
;

16 
	gπt_addíd
;

17 
__u16
 
	gacked
;

19 
rcvd_èbÀ
 
	grcvd_tbl
;

23 
	g≈ackës
;

24 
	gƒe˚ived
;

25 
	gƒïóts
;

26 
	g¡ønsmôãd
;

27 
	gnchecksum
;

28 
	g√º‹s
;

29 
	göãrvÆ
 = 1000;

30 
	g¥ñﬂd
;

31 
	gdódlöe
 = 0;

32 
	glögîtime
 = 
MAXWAIT
*1000;

33 
timevÆ
 
	g°¨t_time
, 
	gcur_time
;

34 vﬁ©ûê
	gexôög
;

35 vﬁ©ûê
	g°©us_¢≠shŸ
;

36 
	gc⁄fúm
 = 0;

37 vﬁ©ûê
	gö_¥_addr
 = 0;

38 
jmp_buf
 
	g¥_addr_jmp
;

43 
	gc⁄fúm_Êag
 = 
MSG_CONFIRM
;

46 
	gw‹kög_ªcvîr
;

49 
	gtimög
;

50 
	gtmö
 = 
LONG_MAX
;

51 
	gtmax
;

57 
	gtsum
;

58 
	gtsum2
;

59 
	gpùesize
 = -1;

61 
	gd©Æí
 = 
DEFDATALEN
;

63 *
	gho°«me
;

64 
	guid
;

65 
uid_t
 
	geuid
;

66 
	gidít
;

68 
	gs¸ìn_width
 = 
INT_MAX
;

70 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

72 #ifde‡
CAPABILITIES


73 
ˇp_vÆue_t
 
	gˇp_øw
 = 
CAP_NET_RAW
;

74 
ˇp_vÆue_t
 
	gˇp_admö
 = 
CAP_NET_ADMIN
;

77 
	$limô_ˇ∑bûôõs
()

79 #ifde‡
CAPABILITIES


80 
ˇp_t
 
ˇp_cur_p
;

81 
ˇp_t
 
ˇp_p
;

82 
ˇp_Êag_vÆue_t
 
ˇp_ok
;

84 
ˇp_cur_p
 = 
	`ˇp_gë_¥oc
();

85 i‡(!
ˇp_cur_p
) {

86 
	`≥º‹
("ping: cap_get_proc");

87 
	`exô
(-1);

90 
ˇp_p
 = 
	`ˇp_öô
();

91 i‡(!
ˇp_p
) {

92 
	`≥º‹
("ping: cap_init");

93 
	`exô
(-1);

96 
ˇp_ok
 = 
CAP_CLEAR
;

97 
	`ˇp_gë_Êag
(
ˇp_cur_p
, 
CAP_NET_ADMIN
, 
CAP_PERMITTED
, &
ˇp_ok
);

99 i‡(
ˇp_ok
 !
CAP_CLEAR
)

100 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_PERMITTED
, 1, &
ˇp_admö
, 
CAP_SET
);

102 
ˇp_ok
 = 
CAP_CLEAR
;

103 
	`ˇp_gë_Êag
(
ˇp_cur_p
, 
CAP_NET_RAW
, 
CAP_PERMITTED
, &
ˇp_ok
);

105 i‡(
ˇp_ok
 !
CAP_CLEAR
)

106 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_PERMITTED
, 1, &
ˇp_øw
, 
CAP_SET
);

108 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

109 
	`≥º‹
("ping: cap_set_proc");

110 
	`exô
(-1);

113 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 1) < 0) {

114 
	`≥º‹
("ping:Örctl");

115 
	`exô
(-1);

118 i‡(
	`£tuid
(
	`gëuid
()) < 0) {

119 
	`≥º‹
("setuid");

120 
	`exô
(-1);

123 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 0) < 0) {

124 
	`≥º‹
("ping:Örctl");

125 
	`exô
(-1);

128 
	`ˇp_‰ì
(
ˇp_p
);

129 
	`ˇp_‰ì
(
ˇp_cur_p
);

131 
uid
 = 
	`gëuid
();

132 
euid
 = 
	`gëeuid
();

133 #i‚de‡
CAPABILITIES


134 i‡(
	`£ãuid
(
uid
)) {

135 
	`≥º‹
("ping: setuid");

136 
	`exô
(-1);

139 
	}
}

141 #ifde‡
CAPABILITIES


142 
	$modify_ˇ∑bûôy
(
ˇp_vÆue_t
 
ˇp
, 
ˇp_Êag_vÆue_t
 
⁄
)

144 
ˇp_t
 
ˇp_p
 = 
	`ˇp_gë_¥oc
();

145 
ˇp_Êag_vÆue_t
 
ˇp_ok
;

146 
rc
 = -1;

148 i‡(!
ˇp_p
) {

149 
	`≥º‹
("ping: cap_get_proc");

150 
out
;

153 
ˇp_ok
 = 
CAP_CLEAR
;

154 
	`ˇp_gë_Êag
(
ˇp_p
, 
ˇp
, 
CAP_PERMITTED
, &
ˇp_ok
);

155 i‡(
ˇp_ok
 =
CAP_CLEAR
) {

156 
rc
 = 
⁄
 ? -1 : 0;

157 
out
;

160 
	`ˇp_£t_Êag
(
ˇp_p
, 
CAP_EFFECTIVE
, 1, &
ˇp
, 
⁄
);

162 i‡(
	`ˇp_£t_¥oc
(
ˇp_p
) < 0) {

163 
	`≥º‹
("ping: cap_set_proc");

164 
out
;

167 
	`ˇp_‰ì
(
ˇp_p
);

169 
rc
 = 0;

170 
out
:

171 i‡(
ˇp_p
)

172 
	`ˇp_‰ì
(
ˇp_p
);

173  
rc
;

174 
	}
}

176 
	$modify_ˇ∑bûôy
(
⁄
)

178 i‡(
	`£ãuid
(
⁄
 ? 
euid
 : 
	`gëuid
())) {

179 
	`≥º‹
("seteuid");

184 
	}
}

187 
	$dr›_ˇ∑bûôõs
()

189 #ifde‡
CAPABILITIES


190 
ˇp_t
 
ˇp
 = 
	`ˇp_öô
();

191 i‡(
	`ˇp_£t_¥oc
(
ˇp
) < 0) {

192 
	`≥º‹
("ping: cap_set_proc");

193 
	`exô
(-1);

195 
	`ˇp_‰ì
(
ˇp
);

197 i‡(
	`£tuid
(
	`gëuid
())) {

198 
	`≥º‹
("ping: setuid");

199 
	`exô
(-1);

202 
	}
}

207 
	$fûl
(*
∑ç
)

209 
ii
, 
jj
, 
kk
;

210 
∑t
[16];

211 *
˝
;

212 *
bp
 = 
ouçack
+8;

214 #ifde‡
USE_IDN


215 
	`£éoˇÀ
(
LC_ALL
, "C");

218 
˝
 = 
∑ç
; *cp; cp++) {

219 i‡(!
	`isxdigô
(*
˝
)) {

220 
	`Ârötf
(
°dîr
,

222 
	`exô
(2);

225 
ii
 = 
	`ssˇnf
(
∑ç
,

227 &
∑t
[0], &pat[1], &pat[2], &pat[3], &pat[4], &pat[5], &pat[6],

228 &
∑t
[7], &pat[8], &pat[9], &pat[10], &pat[11], &pat[12],

229 &
∑t
[13], &pat[14], &pat[15]);

231 i‡(
ii
 > 0) {

232 
kk
 = 0; kk <
max∑ckë
 - (8 + 
ii
); kk += ii)

233 
jj
 = 0; jj < 
ii
; ++jj)

234 
bp
[
jj
 + 
kk
] = 
∑t
[jj];

236 i‡(!(
›ti⁄s
 & 
F_QUIET
)) {

237 
	`¥ötf
("PATTERN: 0x");

238 
jj
 = 0; jj < 
ii
; ++jj)

239 
	`¥ötf
("%02x", 
bp
[
jj
] & 0xFF);

240 
	`¥ötf
("\n");

243 #ifde‡
USE_IDN


244 
	`£éoˇÀ
(
LC_ALL
, "");

246 
	}
}

248 
	$comm⁄_›ti⁄s
(
ch
)

250 
ch
) {

252 
›ti⁄s
 |
F_AUDIBLE
;

255 
›ti⁄s
 |
F_ADAPTIVE
;

258 
≈ackës
 = 
	`©oi
(
›èrg
);

259 i‡(
≈ackës
 <= 0) {

260 
	`Ârötf
(
°dîr
, "ping: badÇumber ofÖacketsÅoÅransmit.\n");

261 
	`exô
(2);

265 
›ti⁄s
 |
F_SO_DEBUG
;

268 
›ti⁄s
 |
F_PTIMEOFDAY
;

272 
dbl
;

273 *
ï
;

275 
î∫o
 = 0;

276 
dbl
 = 
	`°πod
(
›èrg
, &
ï
);

278 i‡(
î∫o
 || *
ï
 != '\0' ||

279 !
	`föôe
(
dbl
Ë|| db»< 0.0 || db»>()
INT_MAX
 / 1000 - 1.0) {

280 
	`Ârötf
(
°dîr
, "ping: badÅiming interval\n");

281 
	`exô
(2);

284 
öãrvÆ
 = ()(
dbl
 * 1000);

286 
›ti⁄s
 |
F_INTERVAL
;

291 *
ídp
;

292 
m¨k
 = ()
	`°πoul
(
›èrg
, &
ídp
, 10);

293 i‡(
m¨k
 < 0 || *
ídp
 != '\0') {

294 
	`Ârötf
(
°dîr
, "mark cannot beÇegative\n");

295 
	`exô
(2);

297 
›ti⁄s
 |
F_MARK
;

301 
dódlöe
 = 
	`©oi
(
›èrg
);

302 i‡(
dódlöe
 < 0) {

303 
	`Ârötf
(
°dîr
, "ping: bad waitÅime.\n");

304 
	`exô
(2);

308 
¥ñﬂd
 = 
	`©oi
(
›èrg
);

309 i‡(
¥ñﬂd
 <= 0) {

310 
	`Ârötf
(
°dîr
, "pög: badÖªlﬂd vÆue, should bê1..%d\n", 
MAX_DUP_CHK
);

311 
	`exô
(2);

313 i‡(
¥ñﬂd
 > 
MAX_DUP_CHK
)

314 
¥ñﬂd
 = 
MAX_DUP_CHK
;

315 i‡(
uid
 && 
¥ñﬂd
 > 3) {

316 
	`Ârötf
(
°dîr
, "ping: cannot setÖreloadÅo value > 3\n");

317 
	`exô
(2);

321 
›ti⁄s
 |
F_OUTSTANDING
;

324 
¢dbuf
 = 
	`©oi
(
›èrg
);

325 i‡(
¢dbuf
 <= 0) {

326 
	`Ârötf
(
°dîr
, "ping: bad sndbuf value.\n");

327 
	`exô
(2);

331 
›ti⁄s
 |
F_FLOOD
;

332 
	`£tbuf
(
°dout
, (*)
NULL
);

335 
›ti⁄s
 |
F_NUMERIC
;

338 
›ti⁄s
 |
F_PINGFILLED
;

339 
	`fûl
(
›èrg
);

342 
›ti⁄s
 |
F_QUIET
;

345 
›ti⁄s
 |
F_SO_DONTROUTE
;

348 
d©Æí
 = 
	`©oi
(
›èrg
);

349 i‡(
d©Æí
 < 0) {

350 
	`Ârötf
(
°dîr
, "pög: iŒegÆÇeg©ivê∑ckë sizê%d.\n", 
d©Æí
);

351 
	`exô
(2);

353 i‡(
d©Æí
 > 
max∑ckë
 - 8) {

354 
	`Ârötf
(
°dîr
, "ping:Öacket sizeÅooÜarge: %d\n",

355 
d©Æí
);

356 
	`exô
(2);

360 
›ti⁄s
 |
F_VERBOSE
;

363 
›ti⁄s
 |
F_NOLOOP
;

366 
›ti⁄s
 |
F_TTL
;

367 
âl
 = 
	`©oi
(
›èrg
);

368 i‡(
âl
 < 0 ||Åtl > 255) {

369 
	`Ârötf
(
°dîr
, "pög:Åé %u ouào‡ønge\n", 
âl
);

370 
	`exô
(2);

374 
›ti⁄s
 |
F_LATENCY
;

377 
›ti⁄s
 |
F_STRICTSOURCE
;

380 
lögîtime
 = 
	`©oi
(
›èrg
);

381 i‡(
lögîtime
 < 0 ||Üögîtimê> 
INT_MAX
/1000000) {

382 
	`Ârötf
(
°dîr
, "ping: badÜingerÅime.\n");

383 
	`exô
(2);

385 
lögîtime
 *= 1000;

388 
	`¥ötf
("pög utûôy, iputûs-%s\n", 
SNAPSHOT
);

389 
	`exô
(0);

391 
	`ab‹t
();

393 
	}
}

396 
	$sigexô
(
signo
)

398 
exôög
 = 1;

399 i‡(
ö_¥_addr
)

400 
	`l⁄gjmp
(
¥_addr_jmp
, 0);

401 
	}
}

403 
	$sig°©us
(
signo
)

405 
°©us_¢≠shŸ
 = 1;

406 
	}
}

409 
	$__scheduÀ_exô
(
√xt
)

411 
waôtime
;

412 
ôimîvÆ
 
ô
;

414 i‡(
waôtime
)

415  
√xt
;

417 i‡(
ƒe˚ived
) {

418 
waôtime
 = 2 * 
tmax
;

419 i‡(
waôtime
 < 1000*
öãrvÆ
)

420 
waôtime
 = 1000*
öãrvÆ
;

422 
waôtime
 = 
lögîtime
*1000;

424 i‡(
√xt
 < 0 ||Çexà< 
waôtime
/1000)

425 
√xt
 = 
waôtime
/1000;

427 
ô
.
ô_öãrvÆ
.
tv_£c
 = 0;

428 
ô
.
ô_öãrvÆ
.
tv_u£c
 = 0;

429 
ô
.
ô_vÆue
.
tv_£c
 = 
waôtime
/1000000;

430 
ô
.
ô_vÆue
.
tv_u£c
 = 
waôtime
%1000000;

431 
	`£tôimî
(
ITIMER_REAL
, &
ô
, 
NULL
);

432  
√xt
;

433 
	}
}

435 
ölöe
 
	$upd©e_öãrvÆ
()

437 
e°
 = 
πt
 ?Ñâ/8 : 
öãrvÆ
*1000;

439 
öãrvÆ
 = (
e°
+
πt_addíd
+500)/1000;

440 i‡(
uid
 && 
öãrvÆ
 < 
MINUSERINTERVAL
)

441 
öãrvÆ
 = 
MINUSERINTERVAL
;

442 
	}
}

447 
	$¥öt_time°amp
()

449 i‡(
›ti⁄s
 & 
F_PTIMEOFDAY
) {

450 
timevÆ
 
tv
;

451 
	`gëtimeofday
(&
tv
, 
NULL
);

452 
	`¥ötf
("[%lu.%06lu] ",

453 ()
tv
.
tv_£c
, (Èv.
tv_u£c
);

455 
	}
}

465 
	$pögî
()

467 
oom_cou¡
;

468 
tokís
;

469 
i
;

472 i‡(
exôög
 || (
≈ackës
 && 
¡ønsmôãd
 >≈ackë†&& !
dódlöe
))

476 i‡(
cur_time
.
tv_£c
 == 0) {

477 
	`gëtimeofday
(&
cur_time
, 
NULL
);

478 
tokís
 = 
öãrvÆ
*(
¥ñﬂd
-1);

480 
¡okís
;

481 
timevÆ
 
tv
;

483 
	`gëtimeofday
(&
tv
, 
NULL
);

484 
¡okís
 = (
tv
.
tv_£c
 - 
cur_time
.tv_sec)*1000 +

485 (
tv
.
tv_u£c
-
cur_time
.tv_usec)/1000;

486 i‡(!
öãrvÆ
) {

489 i‡(
¡okís
 < 
MININTERVAL
 && 
	`ö_Êight
(Ë>
¥ñﬂd
)

490  
MININTERVAL
-
¡okís
;

492 
¡okís
 +
tokís
;

493 i‡(
¡okís
 > 
öãrvÆ
*
¥ñﬂd
)

494 
¡okís
 = 
öãrvÆ
*
¥ñﬂd
;

495 i‡(
¡okís
 < 
öãrvÆ
)

496  
öãrvÆ
 - 
¡okís
;

498 
cur_time
 = 
tv
;

499 
tokís
 = 
¡okís
 - 
öãrvÆ
;

502 i‡(
›ti⁄s
 & 
F_OUTSTANDING
) {

503 i‡(
¡ønsmôãd
 > 0 && !
	`rcvd_ã°
(ntransmitted)) {

504 
	`¥öt_time°amp
();

505 
	`¥ötf
("nÿ™swî yë f‹ icmp_£q=%lu\n", (
¡ønsmôãd
 % 
MAX_DUP_CHK
));

506 
	`fÊush
(
°dout
);

510 
ª£nd
:

511 
i
 = 
	`£nd_¥obe
();

513 i‡(
i
 == 0) {

514 
oom_cou¡
 = 0;

515 
	`adv™˚_¡ønsmôãd
();

516 i‡(!(
›ti⁄s
 & 
F_QUIET
Ë&& (›ti⁄†& 
F_FLOOD
)) {

519 i‡((
¥ñﬂd
 < 
s¸ìn_width
 && 
pùesize
 < screen_width) ||

520 
	`ö_Êight
(Ë< 
s¸ìn_width
)

521 
	`wrôe_°dout
(".", 1);

523  
öãrvÆ
 - 
tokís
;

527 i‡(
i
 > 0) {

529 
	`ab‹t
();

530 } i‡(
î∫o
 =
ENOBUFS
 ||Éºnÿ=
ENOMEM
 ||Éºnÿ=
EPERM
) {

531 
n‹es_öãrvÆ
;

535 
tokís
 = 0;

537 
πt_addíd
 +(
πt
 < 8*50000 ?Ñtt/8 : 50000);

538 i‡(
›ti⁄s
&
F_ADAPTIVE
)

539 
	`upd©e_öãrvÆ
();

540 
n‹es_öãrvÆ
 = 
	`SCHINT
(
öãrvÆ
/2);

541 i‡(
n‹es_öãrvÆ
 > 500)

542 
n‹es_öãrvÆ
 = 500;

543 i‡(
î∫o
 !
EPERM
)

544 
oom_cou¡
++;

545 i‡(
oom_cou¡
*
n‹es_öãrvÆ
 < 
lögîtime
)

546  
n‹es_öãrvÆ
;

547 
i
 = 0;

552 } i‡(
î∫o
 =
EAGAIN
) {

554 
tokís
 +
öãrvÆ
;

555  
MININTERVAL
;

557 i‡((
i
=
	`ª˚ive_îr‹_msg
()) > 0) {

559 
tokís
 +
öãrvÆ
;

560  
MININTERVAL
;

563 i‡(
i
 =0 && 
c⁄fúm_Êag
 && 
î∫o
 =
EINVAL
) {

564 
c⁄fúm_Êag
 = 0;

565 
î∫o
 = 0;

567 i‡(!
î∫o
)

568 
ª£nd
;

572 
	`adv™˚_¡ønsmôãd
();

574 i‡(
i
 =0 && !(
›ti⁄s
 & 
F_QUIET
)) {

575 i‡(
›ti⁄s
 & 
F_FLOOD
)

576 
	`wrôe_°dout
("E", 1);

578 
	`≥º‹
("ping: sendmsg");

580 
tokís
 = 0;

581  
	`SCHINT
(
öãrvÆ
);

582 
	}
}

586 
	$sock_£tbufs
(
icmp_sock
, 
Æloc
)

588 
rcvbuf
, 
hﬁd
;

589 
sockÀn_t
 
tm∂í
 = (
hﬁd
);

591 i‡(!
¢dbuf
)

592 
¢dbuf
 = 
Æloc
;

593 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
¢dbuf
, (sndbuf));

595 
rcvbuf
 = 
hﬁd
 = 
Æloc
 * 
¥ñﬂd
;

596 i‡(
hﬁd
 < 65536)

597 
hﬁd
 = 65536;

598 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
hﬁd
, (hold));

599 i‡(
	`gësock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
hﬁd
, &
tm∂í
) == 0) {

600 i‡(
hﬁd
 < 
rcvbuf
)

601 
	`Ârötf
(
°dîr
, "WARNING:Örobably,Ñcvbuf isÇotÉnoughÅo holdÖreload.\n");

603 
	}
}

607 
	$£tup
(
icmp_sock
)

609 
hﬁd
;

610 
timevÆ
 
tv
;

611 
sig£t_t
 
s£t
;

613 i‡((
›ti⁄s
 & 
F_FLOOD
Ë&& !(›ti⁄†& 
F_INTERVAL
))

614 
öãrvÆ
 = 0;

616 i‡(
uid
 && 
öãrvÆ
 < 
MINUSERINTERVAL
) {

617 
	`Ârötf
(
°dîr
, "pög: c™nŸ flood; möimÆ i¡îvÆáŒowed f‹ u£∏i†%dms\n", 
MINUSERINTERVAL
);

618 
	`exô
(2);

621 i‡(
öãrvÆ
 >
INT_MAX
/
¥ñﬂd
) {

622 
	`Ârötf
(
°dîr
, "ping: illegalÖreloadánd/or interval\n");

623 
	`exô
(2);

626 
hﬁd
 = 1;

627 i‡(
›ti⁄s
 & 
F_SO_DEBUG
)

628 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_DEBUG
, (*)&
hﬁd
, (hold));

629 i‡(
›ti⁄s
 & 
F_SO_DONTROUTE
)

630 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_DONTROUTE
, (*)&
hﬁd
, (hold));

632 #ifde‡
SO_TIMESTAMP


633 i‡(!(
›ti⁄s
&
F_LATENCY
)) {

634 
⁄
 = 1;

635 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_TIMESTAMP
, &
⁄
, (on)))

636 
	`Ârötf
(
°dîr
, "Warning:Ço SO_TIMESTAMP support, falling backÅo SIOCGSTAMP\n");

639 #ifde‡
SO_MARK


640 i‡(
›ti⁄s
 & 
F_MARK
) {

641 
ªt
;

643 
	`íabÀ_ˇ∑bûôy_admö
();

644 
ªt
 = 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_MARK
, &
m¨k
, (mark));

645 
	`dißbÀ_ˇ∑bûôy_admö
();

647 i‡(
ªt
 == -1) {

651 
	`Ârötf
(
°dîr
, "W¨nög: FaûedÅÿ£àm¨k %d\n", 
m¨k
);

660 
tv
.
tv_£c
 = 1;

661 
tv
.
tv_u£c
 = 0;

662 i‡(
öãrvÆ
 < 1000) {

663 
tv
.
tv_£c
 = 0;

664 
tv
.
tv_u£c
 = 1000 * 
	`SCHINT
(
öãrvÆ
);

666 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (*)&
tv
, (tv));

670 
tv
.
tv_£c
 = 
	`SCHINT
(
öãrvÆ
)/1000;

671 
tv
.
tv_u£c
 = 1000*(
	`SCHINT
(
öãrvÆ
)%1000);

672 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
tv
, (tv)))

673 
›ti⁄s
 |
F_FLOOD_POLL
;

675 i‡(!(
›ti⁄s
 & 
F_PINGFILLED
)) {

676 
i
;

677 *
p
 = 
ouçack
+8;

682 
i
 = 0; i < 
d©Æí
; ++i)

683 *
p
++ = 
i
;

686 
idít
 = 
	`ht⁄s
(
	`gëpid
() & 0xFFFF);

688 
	`£t_sig«l
(
SIGINT
, 
sigexô
);

689 
	`£t_sig«l
(
SIGALRM
, 
sigexô
);

690 
	`£t_sig«l
(
SIGQUIT
, 
sig°©us
);

692 
	`sigem±y£t
(&
s£t
);

693 
	`sig¥ocmask
(
SIG_SETMASK
, &
s£t
, 
NULL
);

695 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

697 i‡(
dódlöe
) {

698 
ôimîvÆ
 
ô
;

700 
ô
.
ô_öãrvÆ
.
tv_£c
 = 0;

701 
ô
.
ô_öãrvÆ
.
tv_u£c
 = 0;

702 
ô
.
ô_vÆue
.
tv_£c
 = 
dódlöe
;

703 
ô
.
ô_vÆue
.
tv_u£c
 = 0;

704 
	`£tôimî
(
ITIMER_REAL
, &
ô
, 
NULL
);

707 i‡(
	`ißây
(
STDOUT_FILENO
)) {

708 
wösize
 
w
;

710 i‡(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
w
) != -1) {

711 i‡(
w
.
ws_cﬁ
 > 0)

712 
s¸ìn_width
 = 
w
.
ws_cﬁ
;

715 
	}
}

717 
	$maö_lo›
(
icmp_sock
, 
__u8
 *
∑ckë
, 
∑ckÀn
)

719 
addrbuf
[128];

720 
™s_d©a
[4096];

721 
iovec
 
iov
;

722 
msghdr
 
msg
;

723 
cmsghdr
 *
c
;

724 
cc
;

725 
√xt
;

726 
pﬁlög
;

728 
iov
.
iov_ba£
 = (*)
∑ckë
;

732 i‡(
exôög
)

734 i‡(
≈ackës
 && 
ƒe˚ived
 + 
√º‹s
 >=Çpackets)

736 i‡(
dódlöe
 && 
√º‹s
)

739 i‡(
°©us_¢≠shŸ
)

740 
	`°©us
();

744 
√xt
 = 
	`pögî
();

745 
√xt
 = 
	`scheduÀ_exô
(next);

746 } 
√xt
 <= 0);

758 
pﬁlög
 = 0;

759 i‡((
›ti⁄s
 & (
F_ADAPTIVE
|
F_FLOOD_POLL
)Ë|| 
√xt
<
	`SCHINT
(
öãrvÆ
)) {

760 
ªcv_ex≥˘ed
 = 
	`ö_Êight
();

764 i‡(1000 % 
HZ
 =0 ? 
√xt
 <1000 / HZ : (√xà< 
INT_MAX
 / HZ &&Çext * HZ <= 1000)) {

768 i‡(
ªcv_ex≥˘ed
) {

769 
√xt
 = 
MININTERVAL
;

771 
√xt
 = 0;

774 
pﬁlög
 = 
MSG_DONTWAIT
;

776 
	`sched_yõld
();

780 i‡(!
pﬁlög
 &&

781 ((
›ti⁄s
 & (
F_ADAPTIVE
|
F_FLOOD_POLL
)Ë|| 
öãrvÆ
)) {

782 
pﬁlfd
 
p£t
;

783 
p£t
.
fd
 = 
icmp_sock
;

784 
p£t
.
evíts
 = 
POLLIN
|
POLLERR
;

785 
p£t
.
ªvíts
 = 0;

786 i‡(
	`pﬁl
(&
p£t
, 1, 
√xt
) < 1 ||

787 !(
p£t
.
ªvíts
&(
POLLIN
|
POLLERR
)))

789 
pﬁlög
 = 
MSG_DONTWAIT
;

794 
timevÆ
 *
ªcv_timï
 = 
NULL
;

795 
timevÆ
 
ªcv_time
;

796 
nŸ_ours
 = 0;

799 
iov
.
iov_Àn
 = 
∑ckÀn
;

800 
	`mem£t
(&
msg
, 0, (msg));

801 
msg
.
msg_«me
 = 
addrbuf
;

802 
msg
.
msg_«mñí
 = (
addrbuf
);

803 
msg
.
msg_iov
 = &
iov
;

804 
msg
.
msg_iovÀn
 = 1;

805 
msg
.
msg_c⁄åﬁ
 = 
™s_d©a
;

806 
msg
.
msg_c⁄åﬁÀn
 = (
™s_d©a
);

808 
cc
 = 
	`ªcvmsg
(
icmp_sock
, &
msg
, 
pﬁlög
);

809 
pﬁlög
 = 
MSG_DONTWAIT
;

811 i‡(
cc
 < 0) {

812 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

814 i‡(!
	`ª˚ive_îr‹_msg
()) {

815 i‡(
î∫o
) {

816 
	`≥º‹
("ping:Ñecvmsg");

819 
nŸ_ours
 = 1;

823 #ifde‡
SO_TIMESTAMP


824 
c
 = 
	`CMSG_FIRSTHDR
(&
msg
); c; c = 
	`CMSG_NXTHDR
(&msg, c)) {

825 i‡(
c
->
cmsg_Àvñ
 !
SOL_SOCKET
 ||

826 
c
->
cmsg_ty≥
 !
SO_TIMESTAMP
)

828 i‡(
c
->
cmsg_Àn
 < 
	`CMSG_LEN
((
timevÆ
)))

830 
ªcv_timï
 = (
timevÆ
*)
	`CMSG_DATA
(
c
);

834 i‡((
›ti⁄s
&
F_LATENCY
Ë|| 
ªcv_timï
 =
NULL
) {

835 i‡((
›ti⁄s
&
F_LATENCY
) ||

836 
	`io˘l
(
icmp_sock
, 
SIOCGSTAMP
, &
ªcv_time
))

837 
	`gëtimeofday
(&
ªcv_time
, 
NULL
);

838 
ªcv_timï
 = &
ªcv_time
;

841 
nŸ_ours
 = 
	`∑r£_ª∂y
(&
msg
, 
cc
, 
addrbuf
, 
ªcv_timï
);

845 i‡(
nŸ_ours
)

846 
	`ö°Æl_fûãr
();

849 i‡(
	`ö_Êight
() == 0)

858 
	`föish
();

859 
	}
}

861 
g©hî_°©i°ics
(
__u8
 *
icmph
, 
icm∂í
,

862 
cc
, 
__u16
 
£q
, 
h›s
,

863 
csÁûed
, 
timevÆ
 *
tv
, *
‰om
,

864 (*
¥_ª∂y
)(
__u8
 *
icmph
, 
cc
))

866 
dupÊag
 = 0;

867 
åùtime
 = 0;

868 
__u8
 *
±r
 = 
icmph
 + 
icm∂í
;

870 ++
ƒe˚ived
;

871 i‡(!
csÁûed
)

872 
	`acknowÀdge
(
£q
);

874 i‡(
timög
 && 
cc
 >8+(
timevÆ
)) {

875 
timevÆ
 
tmp_tv
;

876 
	`mem˝y
(&
tmp_tv
, 
±r
, (tmp_tv));

878 
ª°amp
:

879 
	`tvsub
(
tv
, &
tmp_tv
);

880 
åùtime
 = 
tv
->
tv_£c
 * 1000000 +Åv->
tv_u£c
;

881 i‡(
åùtime
 < 0) {

882 
	`Ârötf
(
°dîr
, "W¨nög:Åimêo‡day g€†back (%ldus),Åakög cou¡îmósuªs.\n", 
åùtime
);

883 
åùtime
 = 0;

884 i‡(!(
›ti⁄s
 & 
F_LATENCY
)) {

885 
	`gëtimeofday
(
tv
, 
NULL
);

886 
›ti⁄s
 |
F_LATENCY
;

887 
ª°amp
;

890 i‡(!
csÁûed
) {

891 
tsum
 +
åùtime
;

892 
tsum2
 +()
åùtime
 * ()triptime;

893 i‡(
åùtime
 < 
tmö
)

894 
tmö
 = 
åùtime
;

895 i‡(
åùtime
 > 
tmax
)

896 
tmax
 = 
åùtime
;

897 i‡(!
πt
)

898 
πt
 = 
åùtime
*8;

900 
πt
 +
åùtime
-rtt/8;

901 i‡(
›ti⁄s
&
F_ADAPTIVE
)

902 
	`upd©e_öãrvÆ
();

906 i‡(
csÁûed
) {

907 ++
nchecksum
;

908 --
ƒe˚ived
;

909 } i‡(
	`rcvd_ã°
(
£q
)) {

910 ++
ƒïóts
;

911 --
ƒe˚ived
;

912 
dupÊag
 = 1;

914 
	`rcvd_£t
(
£q
);

915 
dupÊag
 = 0;

917 
c⁄fúm
 = 
c⁄fúm_Êag
;

919 i‡(
›ti⁄s
 & 
F_QUIET
)

922 i‡(
›ti⁄s
 & 
F_FLOOD
) {

923 i‡(!
csÁûed
)

924 
	`wrôe_°dout
("\b \b", 3);

926 
	`wrôe_°dout
("\bC", 2);

928 
i
;

929 
__u8
 *
˝
, *
dp
;

931 
	`¥öt_time°amp
();

932 
	`¥ötf
("%d byã†‰om %s:", 
cc
, 
‰om
);

934 i‡(
¥_ª∂y
)

935 
	`¥_ª∂y
(
icmph
, 
cc
);

937 i‡(
h›s
 >= 0)

938 
	`¥ötf
("Åé=%d", 
h›s
);

940 i‡(
cc
 < 
d©Æí
+8) {

941 
	`¥ötf
(" (truncated)\n");

944 i‡(
timög
) {

945 i‡(
åùtime
 >= 100000)

946 
	`¥ötf
("Åime=%ld ms", 
åùtime
/1000);

947 i‡(
åùtime
 >= 10000)

948 
	`¥ötf
("Åime=%ld.%01ld ms", 
åùtime
/1000,

949 (
åùtime
%1000)/100);

950 i‡(
åùtime
 >= 1000)

951 
	`¥ötf
("Åime=%ld.%02ld ms", 
åùtime
/1000,

952 (
åùtime
%1000)/10);

954 
	`¥ötf
("Åime=%ld.%03ld ms", 
åùtime
/1000,

955 
åùtime
%1000);

957 i‡(
dupÊag
)

958 
	`¥ötf
(" (DUP!)");

959 i‡(
csÁûed
)

960 
	`¥ötf
(" (BAD CHECKSUM!)");

963 
˝
 = ((*)
±r
Ë+ (
timevÆ
);

964 
dp
 = &
ouçack
[8 + (
timevÆ
)];

965 
i
 = (
timevÆ
); i < 
d©Æí
; ++i, ++
˝
, ++
dp
) {

966 i‡(*
˝
 !*
dp
) {

967 
	`¥ötf
("\nwrong data byte #%d should be 0x%x but was 0x%x",

968 
i
, *
dp
, *
˝
);

969 
˝
 = (*)
±r
 + (
timevÆ
);

970 
i
 = (
timevÆ
); i < 
d©Æí
; ++i, ++
˝
) {

971 i‡((
i
 % 32Ë=(
timevÆ
))

972 
	`¥ötf
("\n#%d\t", 
i
);

973 
	`¥ötf
("%x ", *
˝
);

980 
	}
}

982 
	$Œsqπ
(
a
)

984 
¥ev
 = ~(()1 << 63);

985 
x
 = 
a
;

987 i‡(
x
 > 0) {

988 
x
 < 
¥ev
) {

989 
¥ev
 = 
x
;

990 
x
 = (x+(
a
/x))/2;

994  ()
x
;

995 
	}
}

1001 
	$föish
()

1003 
timevÆ
 
tv
 = 
cur_time
;

1004 *
comma
 = "";

1006 
	`tvsub
(&
tv
, &
°¨t_time
);

1008 
	`putch¨
('\n');

1009 
	`fÊush
(
°dout
);

1010 
	`¥ötf
("--- %†pög sèti°ic†---\n", 
ho°«me
);

1011 
	`¥ötf
("%ldÖackë†å™smôãd, ", 
¡ønsmôãd
);

1012 
	`¥ötf
("%ldÑe˚ived", 
ƒe˚ived
);

1013 i‡(
ƒïóts
)

1014 
	`¥ötf
(", +%ld du∂iˇãs", 
ƒïóts
);

1015 i‡(
nchecksum
)

1016 
	`¥ötf
(", +%ld c‹ru±ed", 
nchecksum
);

1017 i‡(
√º‹s
)

1018 
	`¥ötf
(", +%ldÉº‹s", 
√º‹s
);

1019 i‡(
¡ønsmôãd
) {

1020 
	`¥ötf
(", %d%%ÖacketÜoss",

1021 (Ë(((()(
¡ønsmôãd
 - 
ƒe˚ived
)) * 100) /

1022 
¡ønsmôãd
));

1023 
	`¥ötf
(",Åimê%ldms", 1000*
tv
.
tv_£c
+tv.
tv_u£c
/1000);

1025 
	`putch¨
('\n');

1027 i‡(
ƒe˚ived
 && 
timög
) {

1028 
tmdev
;

1030 
tsum
 /
ƒe˚ived
 + 
ƒïóts
;

1031 
tsum2
 /
ƒe˚ived
 + 
ƒïóts
;

1032 
tmdev
 = 
	`Œsqπ
(
tsum2
 - 
tsum
 *Åsum);

1034 
	`¥ötf
("rtt min/avg/max/mdev = %ld.%03ld/%lu.%03ld/%ld.%03ld/%ld.%03ld ms",

1035 ()
tmö
/1000, ()tmin%1000,

1036 ()(
tsum
/1000), ()(tsum%1000),

1037 ()
tmax
/1000, ()tmax%1000,

1038 ()
tmdev
/1000, ()tmdev%1000

1040 
comma
 = ", ";

1042 i‡(
pùesize
 > 1) {

1043 
	`¥ötf
("%•ùê%d", 
comma
, 
pùesize
);

1044 
comma
 = ", ";

1046 i‡(
ƒe˚ived
 && (!
öãrvÆ
 || (
›ti⁄s
&(
F_FLOOD
|
F_ADAPTIVE
))Ë&& 
¡ønsmôãd
 > 1) {

1047 
ùg
 = (1000000*()
tv
.
tv_£c
+tv.
tv_u£c
)/(
¡ønsmôãd
-1);

1048 
	`¥ötf
("%sipg/ewma %d.%03d/%d.%03d ms",

1049 
comma
, 
ùg
/1000, ipg%1000, 
πt
/8000, (rtt/8)%1000);

1051 
	`putch¨
('\n');

1052 
	`exô
(!
ƒe˚ived
 || (
dódlöe
 &&Çª˚ived < 
≈ackës
));

1053 
	}
}

1056 
	$°©us
()

1058 
loss
 = 0;

1059 
èvg
 = 0;

1061 
°©us_¢≠shŸ
 = 0;

1063 i‡(
¡ønsmôãd
)

1064 
loss
 = ((()(
¡ønsmôãd
 - 
ƒe˚ived
)) * 100) /Çtransmitted;

1066 
	`Ârötf
(
°dîr
, "\r%ld/%ldÖackës, %d%%Üoss", 
¡ønsmôãd
, 
ƒe˚ived
, 
loss
);

1068 i‡(
ƒe˚ived
 && 
timög
) {

1069 
èvg
 = 
tsum
 / (
ƒe˚ived
 + 
ƒïóts
);

1071 
	`Ârötf
(
°dîr
, ", min/avg/ewma/max = %ld.%03ld/%lu.%03ld/%d.%03d/%ld.%03ld ms",

1072 ()
tmö
/1000, ()tmin%1000,

1073 
èvg
/1000,Åavg%1000,

1074 
πt
/8000, (rtt/8)%1000,

1075 ()
tmax
/1000, ()tmax%1000

1078 
	`Ârötf
(
°dîr
, "\n");

1079 
	}
}

	@iputils-s20140519/ping_common.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<time.h
>

5 
	~<sig«l.h
>

6 
	~<pﬁl.h
>

7 
	~<sys/∑øm.h
>

8 
	~<sys/sockë.h
>

9 
	~<löux/sockios.h
>

10 
	~<sys/fûe.h
>

11 
	~<sys/time.h
>

12 
	~<sys/io˘l.h
>

13 
	~<√t/if.h
>

14 
	~<sys/uio.h
>

15 
	~<˘y≥.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

18 
	~<√tdb.h
>

19 
	~<£tjmp.h
>

21 #ifde‡
CAPABILITIES


22 
	~<sys/¥˘l.h
>

23 
	~<sys/ˇ∑bûôy.h
>

26 #ifde‡
USE_IDN


27 
	~<loˇÀ.h
>

28 
	~<id«.h
>

31 
	~<√töë/ö.h
>

32 
	~<¨∑/öë.h
>

33 
	~<löux/ty≥s.h
>

34 
	~<löux/îrqueue.h
>

36 
	~"SNAPSHOT.h
"

38 
	#DEFDATALEN
 (64 - 8Ë

	)

40 
	#MAXWAIT
 10

	)

41 
	#MININTERVAL
 10

	)

42 
	#MINUSERINTERVAL
 200

	)

44 
	#SCHINT
(
a
Ë((◊Ë<
MININTERVAL
Ë? MININTERVAL : (a))

	)

47 
›ti⁄s
;

48 
	#F_FLOOD
 0x001

	)

49 
	#F_INTERVAL
 0x002

	)

50 
	#F_NUMERIC
 0x004

	)

51 
	#F_PINGFILLED
 0x008

	)

52 
	#F_QUIET
 0x010

	)

53 
	#F_RROUTE
 0x020

	)

54 
	#F_SO_DEBUG
 0x040

	)

55 
	#F_SO_DONTROUTE
 0x080

	)

56 
	#F_VERBOSE
 0x100

	)

57 
	#F_TIMESTAMP
 0x200

	)

58 
	#F_FLOWINFO
 0x200

	)

59 
	#F_SOURCEROUTE
 0x400

	)

60 
	#F_TCLASS
 0x400

	)

61 
	#F_FLOOD_POLL
 0x800

	)

62 
	#F_LATENCY
 0x1000

	)

63 
	#F_AUDIBLE
 0x2000

	)

64 
	#F_ADAPTIVE
 0x4000

	)

65 
	#F_STRICTSOURCE
 0x8000

	)

66 
	#F_NOLOOP
 0x10000

	)

67 
	#F_TTL
 0x20000

	)

68 
	#F_MARK
 0x40000

	)

69 
	#F_PTIMEOFDAY
 0x80000

	)

70 
	#F_OUTSTANDING
 0x100000

	)

76 
	#MAX_DUP_CHK
 0x10000

	)

78 #i‡
deföed
(
__WORDSIZE
) && __WORDSIZE == 64

79 
	#USE_BITMAP64


	)

82 #ifde‡
USE_BITMAP64


83 
__u64
 
	tbôm≠_t
;

84 
	#BITMAP_SHIFT
 6

	)

86 
__u32
 
	tbôm≠_t
;

87 
	#BITMAP_SHIFT
 5

	)

90 #i‡((
MAX_DUP_CHK
 >> (
BITMAP_SHIFT
 + 3)) << (BITMAP_SHIFT + 3)) != MAX_DUP_CHK

91 #îr‹ 
PÀa£
 
MAX_DUP_CHK
 
™d
/
‹
 
BITMAP_SHIFT


94 
	srcvd_èbÀ
 {

95 
bôm≠_t
 
	mbôm≠
[
MAX_DUP_CHK
 / ((bitmap_t) * 8)];

98 
rcvd_èbÀ
 
rcvd_tbl
;

100 
	#A
(
bô
Ë(
rcvd_tbl
.
bôm≠
[(bôË>> 
BITMAP_SHIFT
]Ë

	)

101 
	#B
(
bô
Ë(((
bôm≠_t
)1Ë<< ((bôË& ((1 << 
BITMAP_SHIFT
Ë- 1))Ë

	)

103 
ölöe
 
	$rcvd_£t
(
__u16
 
£q
)

105 
bô
 = 
£q
 % 
MAX_DUP_CHK
;

106 
	`A
(
bô
Ë|
	`B
(bit);

107 
	}
}

109 
ölöe
 
	$rcvd_˛ór
(
__u16
 
£q
)

111 
bô
 = 
£q
 % 
MAX_DUP_CHK
;

112 
	`A
(
bô
Ë&~
	`B
(bit);

113 
	}
}

115 
ölöe
 
bôm≠_t
 
	$rcvd_ã°
(
__u16
 
£q
)

117 
bô
 = 
£q
 % 
MAX_DUP_CHK
;

118  
	`A
(
bô
Ë& 
	`B
(bit);

119 
	}
}

121 
ouçack
[];

122 
max∑ckë
;

124 
d©Æí
;

125 *
ho°«me
;

126 
uid
;

127 
idít
;

129 
¢dbuf
;

130 
âl
;

132 
≈ackës
;

133 
ƒe˚ived
;

134 
ƒïóts
;

135 
¡ønsmôãd
;

136 
nchecksum
;

137 
√º‹s
;

138 
öãrvÆ
;

139 
¥ñﬂd
;

140 
dódlöe
;

141 
lögîtime
;

142 
timevÆ
 
°¨t_time
, 
cur_time
;

143 vﬁ©ûê
exôög
;

144 vﬁ©ûê
°©us_¢≠shŸ
;

145 
c⁄fúm
;

146 
c⁄fúm_Êag
;

147 
w‹kög_ªcvîr
;

149 vﬁ©ûê
ö_¥_addr
;

150 
jmp_buf
 
¥_addr_jmp
;

152 #i‚de‡
MSG_CONFIRM


153 
	#MSG_CONFIRM
 0

	)

158 
timög
;

159 
tmö
;

160 
tmax
;

161 
tsum
;

162 
tsum2
;

163 
πt
;

164 
__u16
 
acked
;

165 
pùesize
;

167 
	#COMMON_OPTIONS
 \

173 'D': 'O':

	)

175 
	#COMMON_OPTSTR
 "h?VQ:I:M:aUc:dfi:w:l:S:≈:qrs:vLt:AW:Bm:DO"

	)

180 
ölöe
 
	$wrôe_°dout
(c⁄° *
°r
, 
size_t
 
Àn
)

182 
size_t
 
o
 = 0;

183 
ssize_t
 
cc
;

185 
cc
 = 
	`wrôe
(
STDOUT_FILENO
, 
°r
 + 
o
, 
Àn
 - o);

186 
o
 +
cc
;

187 } 
Àn
 > 
o
 || 
cc
 < 0);

188 
	}
}

195 
ölöe
 
	$tvsub
(
timevÆ
 *
out
, timevÆ *
ö
)

197 i‡((
out
->
tv_u£c
 -
ö
->tv_usec) < 0) {

198 --
out
->
tv_£c
;

199 
out
->
tv_u£c
 += 1000000;

201 
out
->
tv_£c
 -
ö
->tv_sec;

202 
	}
}

204 
ölöe
 
£t_sig«l
(
signo
, (*
h™dÀr
)())

206 
siga˘i⁄
 
ß
;

208 
	`mem£t
(&
ß
, 0, (sa));

210 
ß
.
ß_h™dÀr
 = ((*)())
h™dÀr
;

211 #ifde‡
SA_INTERRUPT


212 
ß
.
ß_Êags
 = 
SA_INTERRUPT
;

214 
	`siga˘i⁄
(
signo
, &
ß
, 
NULL
);

215 
	}
}

217 
__scheduÀ_exô
(
√xt
);

219 
ölöe
 
	$scheduÀ_exô
(
√xt
)

221 i‡(
≈ackës
 && 
¡ønsmôãd
 >≈ackë†&& !
dódlöe
)

222 
√xt
 = 
	`__scheduÀ_exô
(next);

223  
√xt
;

224 
	}
}

226 
ölöe
 
	$ö_Êight
()

228 
__u16
 
diff
 = (__u16)
¡ønsmôãd
 - 
acked
;

229  (
diff
<=0x7FFFË? dif‡: 
¡ønsmôãd
-
ƒe˚ived
-
√º‹s
;

230 
	}
}

232 
ölöe
 
	$acknowÀdge
(
__u16
 
£q
)

234 
__u16
 
diff
 = (__u16)
¡ønsmôãd
 - 
£q
;

235 i‡(
diff
 <= 0x7FFF) {

236 i‡(()
diff
+1 > 
pùesize
)

237 
pùesize
 = ()
diff
+1;

238 i‡((
__s16
)(
£q
 - 
acked
) > 0 ||

239 (
__u16
)
¡ønsmôãd
 - 
acked
 > 0x7FFF)

240 
acked
 = 
£q
;

242 
	}
}

244 
ölöe
 
	$adv™˚_¡ønsmôãd
()

246 
¡ønsmôãd
++;

248 i‡((
__u16
)
¡ønsmôãd
 - 
acked
 > 0x7FFF)

249 
acked
 = (
__u16
)
¡ønsmôãd
 + 1;

250 
	}
}

252 
limô_ˇ∑bûôõs
();

253 
íabÀ_ˇ∑bûôy_øw
();

254 
dißbÀ_ˇ∑bûôy_øw
();

255 
íabÀ_ˇ∑bûôy_admö
();

256 
dißbÀ_ˇ∑bûôy_admö
();

257 #ifde‡
CAPABILITIES


258 
modify_ˇ∑bûôy
(
ˇp_vÆue_t
, 
ˇp_Êag_vÆue_t
);

259 
ölöe
 
	$íabÀ_ˇ∑bûôy_øw
(Ë{  
	`modify_ˇ∑bûôy
(
CAP_NET_RAW
, 
CAP_SET
); 
	}
};

260 
ölöe
 
	$dißbÀ_ˇ∑bûôy_øw
(Ë{  
	`modify_ˇ∑bûôy
(
CAP_NET_RAW
, 
CAP_CLEAR
); 
	}
};

261 
ölöe
 
	$íabÀ_ˇ∑bûôy_admö
(Ë{  
	`modify_ˇ∑bûôy
(
CAP_NET_ADMIN
, 
CAP_SET
); 
	}
};

262 
ölöe
 
	$dißbÀ_ˇ∑bûôy_admö
(Ë{  
	`modify_ˇ∑bûôy
(
CAP_NET_ADMIN
, 
CAP_CLEAR
); 
	}
};

264 
modify_ˇ∑bûôy
();

265 
ölöe
 
	$íabÀ_ˇ∑bûôy_øw
(Ë{  
	`modify_ˇ∑bûôy
(1); 
	}
};

266 
ölöe
 
	$dißbÀ_ˇ∑bûôy_øw
(Ë{  
	`modify_ˇ∑bûôy
(0); 
	}
};

267 
ölöe
 
	$íabÀ_ˇ∑bûôy_admö
(Ë{  
	`modify_ˇ∑bûôy
(1); 
	}
};

268 
ölöe
 
	$dißbÀ_ˇ∑bûôy_admö
(Ë{  
	`modify_ˇ∑bûôy
(0); 
	}
};

270 
dr›_ˇ∑bûôõs
();

272 
£nd_¥obe
();

273 
ª˚ive_îr‹_msg
();

274 
∑r£_ª∂y
(
msghdr
 *
msg
, 
Àn
, *
addr
, 
timevÆ
 *);

275 
ö°Æl_fûãr
();

277 
pögî
();

278 
sock_£tbufs
(
icmp_sock
, 
Æloc
);

279 
£tup
(
icmp_sock
);

280 
	$maö_lo›
(
icmp_sock
, 
__u8
 *
buf
, 
buÊí
Ë
	`__©åibuã__
((
n‹ëu∫
));

281 
	$föish
(Ë
	`__©åibuã__
((
n‹ëu∫
));

282 
	`°©us
();

283 
	`comm⁄_›ti⁄s
(
ch
);

284 
	`g©hî_°©i°ics
(
__u8
 *
±r
, 
icm∂í
,

285 
cc
, 
__u16
 
£q
, 
h›s
,

286 
csÁûed
, 
timevÆ
 *
tv
, *
‰om
,

287 (*
¥_ª∂y
)(
__u8
 *
±r
, 
cc
));

288 
	`¥öt_time°amp
();

	@iputils-s20140519/rarpd.c

12 
	~<°dio.h
>

13 
	~<sy¶og.h
>

14 
	~<dúít.h
>

15 
	~<mÆloc.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<√tdb.h
>

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<sig«l.h
>

23 
	~<pﬁl.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√töë/ö.h
>

26 
	~<löux/if.h
>

27 
	~<löux/if_¨p.h
>

28 
	~<löux/if_∑ckë.h
>

29 
	~<löux/fûãr.h
>

30 
	~<sys/io˘l.h
>

31 
	~<sys/sockë.h
>

34 
	gdo_ªlﬂd
 = 1;

36 
	gdebug
;

37 
	gvîbo£
;

38 
	gifidx
;

39 
	gÆlow_ofÊök
;

40 
	g⁄ly_ëhîs
;

41 
	gÆl_iÁ˚s
;

42 
	gli°í_¨p
;

43 *
	gi‚ame
;

44 *
	gt·p_dú
 = "/etc/tftpboot";

46 
ëhî_¡oho°
(*
«me
, *
ó
);

47 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

49 
	siÊök


51 
iÊök
 *
√xt
;

52 
ödex
;

53 
h©y≥
;

54 
Œaddr
[16];

55 
«me
[
IFNAMSIZ
];

56 
iÁddr
 *
iÁ_li°
;

57 } *
iÊ_li°
;

59 
	siÁddr


61 
iÁddr
 *
√xt
;

62 
__u32
 
¥efix
;

63 
__u32
 
mask
;

64 
__u32
 
loˇl
;

67 
	søΩ_m≠


69 
øΩ_m≠
 *
√xt
;

71 
ifödex
;

72 
¨p_ty≥
;

73 
Œaddr_Àn
;

74 
Œaddr
[16];

75 
__u32
 
ùaddr
;

76 } *
øΩ_db
;

78 
	$ußge
()

80 
	`Ârötf
(
°dîr
, "Usage:Ñarpd [ -dveaA ] [ -bÅftpdir ] [ interface]\n");

81 
	`exô
(1);

82 
	}
}

84 
	$lﬂd_db
()

86 
	}
}

88 
	$lﬂd_if
()

90 
fd
;

91 
i‰eq
 *
i‰p
, *
i„nd
;

92 
iÊök
 *
iÊ
;

93 
iÁddr
 *
iÁ
;

94 
ifc⁄f
 
ifc
;

95 
i‰eq
 
ibuf
[256];

97 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

98 
	`sy¶og
(
LOG_ERR
, "socket: %m");

102 
ifc
.
ifc_Àn
 =  
ibuf
;

103 
ifc
.
ifc_buf
 = (*)
ibuf
;

104 i‡(
	`io˘l
(
fd
, 
SIOCGIFCONF
, (*)&
ifc
) < 0 ||

105 
ifc
.
ifc_Àn
 < ()(
i‰eq
)) {

106 
	`sy¶og
(
LOG_ERR
, "SIOCGIFCONF: %m");

107 
	`˛o£
(
fd
);

111 (
iÊ
 = 
iÊ_li°
Ë!
NULL
) {

112 (
iÁ
 = 
iÊ
->
iÁ_li°
Ë!
NULL
) {

113 
iÊ
->
iÁ_li°
 = 
iÁ
->
√xt
;

114 
	`‰ì
(
iÁ
);

116 
iÊ_li°
 = 
iÊ
->
√xt
;

117 
	`‰ì
(
iÊ
);

120 
i„nd
 = (
i‰eq
 *)((*)
ibuf
 + 
ifc
.
ifc_Àn
);

121 
i‰p
 = 
ibuf
; i‰∞< 
i„nd
; ifrp++) {

122 
__u32
 
addr
;

123 
__u32
 
mask
;

124 
__u32
 
¥efix
;

126 i‡(
i‰p
->
i‰_addr
.
ß_Ámûy
 !
AF_INET
)

128 
addr
 = ((
sockaddr_ö
*)&
i‰p
->
i‰_addr
)->
sö_addr
.
s_addr
;

129 i‡(
addr
 == 0)

131 i‡(
	`io˘l
(
fd
, 
SIOCGIFINDEX
, 
i‰p
)) {

132 
	`sy¶og
(
LOG_ERR
, "ioctl(SIOCGIFNAME): %m");

135 i‡(
ifidx
 && 
i‰p
->
i‰_ifödex
 != ifidx)

137 
iÊ
 = 
iÊ_li°
; iÊ; iÊ = iÊ->
√xt
)

138 i‡(
iÊ
->
ödex
 =
i‰p
->
i‰_ifödex
)

140 i‡(
iÊ
 =
NULL
) {

141 *
p
;

142 
ödex
 = 
i‰p
->
i‰_ifödex
;

144 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, 
i‰p
)) {

145 
	`sy¶og
(
LOG_ERR
, "ioctl(SIOCGIFHWADDR): %m");

149 
iÊ
 = (
iÊök
*)
	`mÆloc
((*ifl));

150 i‡(
iÊ
 =
NULL
)

152 
	`mem£t
(
iÊ
, 0, (*ifl));

153 
iÊ
->
√xt
 = 
iÊ_li°
;

154 
iÊ_li°
 = 
iÊ
;

155 
iÊ
->
ödex
 = index;

156 
iÊ
->
h©y≥
 = 
i‰p
->
i‰_hwaddr
.
ß_Ámûy
;

157 
	`mem˝y
(
iÊ
->
Œaddr
, 
i‰p
->
i‰_hwaddr
.
ß_d©a
, 14);

158 
	`°∫˝y
(
iÊ
->
«me
, 
i‰p
->
i‰_«me
, 
IFNAMSIZ
);

159 
p
 = 
	`°rchr
(
iÊ
->
«me
, ':');

160 i‡(
p
)

161 *
p
 = 0;

162 i‡(
vîbo£
)

163 
	`sy¶og
(
LOG_INFO
, "lök %s", 
iÊ
->
«me
);

165 i‡(
	`io˘l
(
fd
, 
SIOCGIFNETMASK
, 
i‰p
)) {

166 
	`sy¶og
(
LOG_ERR
, "ioctl(SIOCGIFMASK): %m");

169 
mask
 = ((
sockaddr_ö
*)&
i‰p
->
i‰_√tmask
)->
sö_addr
.
s_addr
;

170 i‡(
	`io˘l
(
fd
, 
SIOCGIFDSTADDR
, 
i‰p
)) {

171 
	`sy¶og
(
LOG_ERR
, "ioctl(SIOCGIFDSTADDR): %m");

174 
¥efix
 = ((
sockaddr_ö
*)&
i‰p
->
i‰_d°addr
)->
sö_addr
.
s_addr
;

175 
iÁ
 = 
iÊ
->
iÁ_li°
; iÁ; iÁ = iÁ->
√xt
) {

176 i‡(
iÁ
->
loˇl
 =
addr
 &&

177 
iÁ
->
¥efix
 ==Örefix &&

178 
iÁ
->
mask
 == mask)

181 i‡(
iÁ
 =
NULL
) {

182 i‡(
mask
 =0 || 
¥efix
 == 0)

184 
iÁ
 = (
iÁddr
*)
	`mÆloc
((*ifa));

185 
	`mem£t
(
iÁ
, 0, (*ifa));

186 
iÁ
->
loˇl
 = 
addr
;

187 
iÁ
->
¥efix
 =Örefix;

188 
iÁ
->
mask
 = mask;

189 
iÁ
->
√xt
 = 
iÊ
->
iÁ_li°
;

190 
iÊ
->
iÁ_li°
 = 
iÁ
;

192 i‡(
vîbo£
) {

193 
i
;

194 
__u32
 
m
 = ~0U;

195 
i
=32; i>=0; i--) {

196 i‡(
	`ht⁄l
(
m
Ë=
mask
)

198 
m
 <<= 1;

200 i‡(
addr
 =
¥efix
) {

201 
	`sy¶og
(
LOG_INFO
, "áddr %s/%d on %s\n",

202 
	`öë_¡ﬂ
(*(
ö_addr
*)&
addr
), 
i
, 
iÊ
->
«me
);

204 
tm∑
[64];

205 
	`•rötf
(
tm∑
, "%s", 
	`öë_¡ﬂ
(*(
ö_addr
*)&
addr
));

206 
	`sy¶og
(
LOG_INFO
, "ádd∏%†%s/%d o¿%s\n", 
tm∑
,

207 
	`öë_¡ﬂ
(*(
ö_addr
*)&
¥efix
), 
i
, 
iÊ
->
«me
);

212 
	}
}

214 
	$c⁄figuª
()

216 
	`lﬂd_if
();

217 
	`lﬂd_db
();

218 
	}
}

220 
	$boŸabÀ
(
__u32
 
addr
)

222 
dúít
 *
dít
;

223 
DIR
 *
d
;

224 
«me
[9];

226 
	`•rötf
(
«me
, "%08X", (
__u32
)
	`¡ohl
(
addr
));

227 
d
 = 
	`›ídú
(
t·p_dú
);

228 i‡(
d
 =
NULL
) {

229 
	`sy¶og
(
LOG_ERR
, "opendir: %m");

232 (
dít
 = 
	`ªaddú
(
d
)Ë!
NULL
) {

233 i‡(
	`°∫cmp
(
dít
->
d_«me
, 
«me
, 8) == 0)

236 
	`˛o£dú
(
d
);

237  
dít
 !
NULL
;

238 
	}
}

240 
iÁddr
 *
	$£À˘_ùaddr
(
ifödex
, 
__u32
 *
£l_addr
, __u32 **
Æi°
)

242 
iÊök
 *
iÊ
;

243 
iÁddr
 *
iÁ
;

244 
ªåy
 = 0;

245 
i
;

247 
ªåy
:

248 
iÊ
=
iÊ_li°
; iÊ; iÊ=iÊ->
√xt
)

249 i‡(
iÊ
->
ödex
 =
ifödex
)

251 i‡(
iÊ
 =
NULL
 && !
ªåy
) {

252 
ªåy
++;

253 
	`lﬂd_if
();

254 
ªåy
;

256 i‡(
iÊ
 =
NULL
)

257  
NULL
;

259 
i
=0; 
Æi°
[i]; i++) {

260 
__u32
 
addr
 = *(
Æi°
[
i
]);

261 
iÁ
=
iÊ
->
iÁ_li°
; iÁ; iÁ=iÁ->
√xt
) {

262 i‡(!((
iÁ
->
¥efix
^
addr
)&iÁ->
mask
)) {

263 *
£l_addr
 = 
addr
;

264  
iÁ
;

267 i‡(
iÁ
 =
NULL
 && 
ªåy
==0) {

268 
ªåy
++;

269 
	`lﬂd_if
();

270 
ªåy
;

273 i‡(
i
==1 && 
Ælow_ofÊök
) {

274 *
£l_addr
 = *(
Æi°
[0]);

275  
iÊ
->
iÁ_li°
;

277 
	`sy¶og
(
LOG_ERR
, "Off-lökÑeque° o¿%s", 
iÊ
->
«me
);

278  
NULL
;

279 
	}
}

281 
øΩ_m≠
 *
	$øΩ_lookup
(
ifödex
, 
h©y≥
,

282 
hÆí
, *
Œaddr
)

284 
øΩ_m≠
 *
r
;

286 
r
=
øΩ_db
;Ñ;ÑÙ->
√xt
) {

287 i‡(
r
->
¨p_ty≥
 !
h©y≥
 &&Ñ->arp_type != -1)

289 i‡(
r
->
Œaddr_Àn
 !
hÆí
)

291 i‡(
r
->
ifödex
 != ifindex &&Ñ->ifindex != 0)

293 i‡(
	`memcmp
(
r
->
Œaddr
,Üœddr, 
hÆí
) == 0)

297 i‡(
r
 =
NULL
) {

298 i‡(
h©y≥
 =
ARPHRD_ETHER
 && 
hÆí
 == 6) {

299 
iÁddr
 *
iÁ
;

300 
ho°ít
 *
hp
;

301 
íame
[256];

302 
øΩ_m≠
 
em≠
 = {

303 
NULL
,

305 
ARPHRD_ETHER
,

309 i‡(
	`ëhî_¡oho°
(
íame
, 
Œaddr
) != 0 ||

310 (
hp
 = 
	`gëho°by«me
(
íame
)Ë=
NULL
) {

311 i‡(
vîbo£
)

312 
	`sy¶og
(
LOG_INFO
, "not found in /etc/ethers");

313  
NULL
;

315 i‡(
hp
->
h_addπy≥
 !
AF_INET
) {

316 
	`sy¶og
(
LOG_ERR
, "no IPáddress");

317  
NULL
;

319 
iÁ
 = 
	`£À˘_ùaddr
(
ifödex
, &
em≠
.
ùaddr
, (
__u32
 **)
hp
->
h_addr_li°
);

320 i‡(
iÁ
) {

321 
	`mem˝y
(
em≠
.
Œaddr
,Üladdr, 6);

322 i‡(
⁄ly_ëhîs
 || 
	`boŸabÀ
(
em≠
.
ùaddr
))

323  &
em≠
;

324 i‡(
vîbo£
)

325 
	`sy¶og
(
LOG_INFO
, "not bootable");

329  
r
;

330 
	}
}

332 
	$lﬂd_¨p_bpÊë
(
fd
)

334 
sock_fûãr
 
ö¢s
[] = {

335 
	`BPF_STMT
(
BPF_LD
|
BPF_H
|
BPF_ABS
, 6),

336 
	`BPF_JUMP
(
BPF_JMP
|
BPF_JEQ
|
BPF_K
, 
ARPOP_RREQUEST
, 0, 1),

337 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, 1024),

338 
	`BPF_STMT
(
BPF_RET
|
BPF_K
, 0),

340 
sock_Ârog
 
fûãr
 = {

341  
ö¢s
 / (insns[0]),

342 
ö¢s


345  
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_ATTACH_FILTER
, &
fûãr
, (filter));

346 
	}
}

348 
	$put_myŒaddr
(**
±r_p
, 
ifödex
, 
Æí
)

350 
iÊök
 *
iÊ
;

352 
iÊ
=
iÊ_li°
; iÊ; iÊ = iÊ->
√xt
)

353 i‡(
iÊ
->
ödex
 =
ifödex
)

356 i‡(
iÊ
==
NULL
)

359 
	`mem˝y
(*
±r_p
, 
iÊ
->
Œaddr
, 
Æí
);

360 *
±r_p
 +
Æí
;

362 
	}
}

364 
	$put_myùaddr
(**
±r_p
, 
ifödex
, 
__u32
 
hisùaddr
)

366 
__u32
 
œddr
 = 0;

367 
iÊök
 *
iÊ
;

368 
iÁddr
 *
iÁ
;

370 
iÊ
=
iÊ_li°
; iÊ; iÊ = iÊ->
√xt
)

371 i‡(
iÊ
->
ödex
 =
ifödex
)

374 i‡(
iÊ
==
NULL
)

377 
iÁ
=
iÊ
->
iÁ_li°
; iÁ; iÁ=iÁ->
√xt
) {

378 i‡(!((
iÁ
->
¥efix
^
hisùaddr
)&iÁ->
mask
)) {

379 
œddr
 = 
iÁ
->
loˇl
;

383 
	`mem˝y
(*
±r_p
, &
œddr
, 4);

384 *
±r_p
 += 4;

386 
	}
}

388 
	$¨p_advi£
(
ifödex
, *
Œaddr
, 
ŒÀn
, 
__u32
 
ùaddr
)

390 
fd
;

391 
¨¥eq
 
ªq
;

392 
sockaddr_ö
 *
sö
;

393 
iÊök
 *
iÊ
;

395 
iÊ
=
iÊ_li°
; iÊ; iÊ = iÊ->
√xt
)

396 i‡(
iÊ
->
ödex
 =
ifödex
)

399 i‡(
iÊ
 =
NULL
)

402 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

403 
	`mem£t
(&
ªq
, 0, (req));

404 
ªq
.
¨p_Êags
 = 
ATF_COM
;

405 
sö
 = (
sockaddr_ö
 *)&
ªq
.
¨p_∑
;

406 
sö
->
sö_Ámûy
 = 
AF_INET
;

407 
sö
->
sö_addr
.
s_addr
 = 
ùaddr
;

408 
ªq
.
¨p_ha
.
ß_Ámûy
 = 
iÊ
->
h©y≥
;

409 
	`mem˝y
(
ªq
.
¨p_ha
.
ß_d©a
, 
Œaddr
, 
ŒÀn
);

410 
	`mem˝y
(
ªq
.
¨p_dev
, 
iÊ
->
«me
, 
IFNAMSIZ
);

412 i‡(
	`io˘l
(
fd
, 
SIOCSARP
, &
ªq
))

413 
	`sy¶og
(
LOG_ERR
, "SIOCSARP: %m");

414 
	`˛o£
(
fd
);

415 
	}
}

417 
	$£rve_ô
(
fd
)

419 
buf
[1024];

420 
sockaddr_Œ
 
¶l
;

421 
sockÀn_t
 
¶l_Àn
 = (
¶l
);

422 
¨phdr
 *
a
 = (¨phdr*)
buf
;

423 
øΩ_m≠
 *
rm≠
;

424 *
±r
;

425 
n
;

427 
n
 = 
	`ªcv‰om
(
fd
, 
buf
, (buf), 
MSG_DONTWAIT
, (
sockaddr
*)&
¶l
, &
¶l_Àn
);

428 i‡(
n
<0) {

429 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
)

430 
	`sy¶og
(
LOG_ERR
, "recvfrom: %m");

435 i‡(
¶l
.
¶l_pkây≥
 !
PACKET_BROADCAST
 &&

436 
¶l
.
¶l_pkây≥
 !
PACKET_MULTICAST
 &&

437 
¶l
.
¶l_pkây≥
 !
PACKET_HOST
)

440 i‡(
ifidx
 && 
¶l
.
¶l_ifödex
 != ifidx)

443 i‡(
n
<(*
a
)) {

444 
	`sy¶og
(
LOG_ERR
, "åunˇãdáΩÖackë;Üí=%d", 
n
);

449 i‡(
a
->
¨_›
 !
	`ht⁄s
(
ARPOP_RREQUEST
))

452 i‡(
vîbo£
) {

453 
i
;

454 
tmpbuf
[16*3];

455 *
±r
 = 
tmpbuf
;

456 
i
=0; i<
¶l
.
¶l_hÆí
; i++) {

457 i‡(
i
) {

458 
	`•rötf
(
±r
, ":%02x", 
¶l
.
¶l_addr
[
i
]);

459 
±r
++;

461 
	`•rötf
(
±r
, "%02x", 
¶l
.
¶l_addr
[
i
]);

462 
±r
 += 2;

464 
	`sy¶og
(
LOG_INFO
, "RARPÑeque° from %†⁄ if%d", 
tmpbuf
, 
¶l
.
¶l_ifödex
);

470 i‡(
a
->
¨_∂n
 != 4) {

471 
	`sy¶og
(
LOG_ERR
, "öãª°ögÑ¨p_ªqÖÀn=%d", 
a
->
¨_∂n
);

475 i‡(
a
->
¨_¥o
 !
	`ht⁄s
(
ETH_P_IP
)) {

476 
	`sy¶og
(
LOG_ERR
, "øΩÖrŸocﬁ i†nŸ IP %04x", 
	`¡ohs
(
a
->
¨_¥o
));

480 i‡(
	`ht⁄s
(
¶l
.
¶l_h©y≥
Ë!
a
->
¨_hrd
) {

481 
¶l
.
¶l_h©y≥
) {

482 
ARPHRD_FDDI
:

483 i‡(
a
->
¨_hrd
 =
	`ht⁄s
(
ARPHRD_ETHER
) ||

484 
a
->
¨_hrd
 =
	`ht⁄s
(
ARPHRD_IEEE802
))

487 
	`sy¶og
(
LOG_ERR
, "rarp htype mismatch");

492 i‡(
a
->
¨_h 
 !
¶l
.
¶l_hÆí
) {

493 
	`sy¶og
(
LOG_ERR
, "rarp hlen mismatch");

497 i‡((*
a
Ë+ 2*4 + 2*a->
¨_h 
 > 
n
) {

498 
	`sy¶og
(
LOG_ERR
, "åunˇãdÑ¨∞ªque°;Üí=%d", 
n
);

504 i‡(
	`memcmp
(
¶l
.
¶l_addr
, 
a
+1, sŒ.
¶l_hÆí
)) {

505 
	`sy¶og
(
LOG_ERR
, "this guy set different hisÜladdrs inárpánd header");

511 
rm≠
 = 
	`øΩ_lookup
(
¶l
.
¶l_ifödex
, sŒ.
¶l_h©y≥
,

512 
¶l
.
¶l_hÆí
, (*)(
a
+1) + sll.sll_halen + 4);

513 i‡(
rm≠
 =
NULL
)

521 
a
->
¨_›
 = 
	`ht⁄s
(
ARPOP_RREPLY
);

522 
±r
 = (*)(
a
+1);

523 i‡(
	`put_myŒaddr
(&
±r
, 
¶l
.
¶l_ifödex
, 
rm≠
->
Œaddr_Àn
))

525 i‡(
	`put_myùaddr
(&
±r
, 
¶l
.
¶l_ifödex
, 
rm≠
->
ùaddr
))

528 
±r
 +
rm≠
->
Œaddr_Àn
;

529 
	`mem˝y
(
±r
, &
rm≠
->
ùaddr
, 4);

530 
±r
 += 4;

535 
	`¨p_advi£
(
¶l
.
¶l_ifödex
, 
rm≠
->
Œaddr
,Ñm≠->
Œaddr_Àn
,Ñm≠->
ùaddr
);

538 
	`Æ¨m
(5);

539 
	`£ndto
(
fd
, 
buf
, 
±r
 - buf, 0, (
sockaddr
*)&
¶l
, (sll));

540 
	`Æ¨m
(0);

541 
	}
}

543 
ˇtch_sig«l
(
sig
, (*
h™dÀr
)())

545 
siga˘i⁄
 
ß
;

547 
	`mem£t
(&
ß
, 0, (sa));

548 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

549 #ifde‡
SA_INTERRUPT


550 
ß
.
ß_Êags
 = 
SA_INTERRUPT
;

552 
	`siga˘i⁄
(
sig
, &
ß
, 
NULL
);

553 
	}
}

555 
	$sig_Æ¨m
(
signo
)

557 
	}
}

559 
	$sig_hup
(
signo
)

561 
do_ªlﬂd
 = 1;

562 
	}
}

564 
	$maö
(
¨gc
, **
¨gv
)

566 
pﬁlfd
 
p£t
[2];

567 
psize
;

568 
›t
;

571 
›ãº
 = 0;

572 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "aAb:dv€")Ë!
EOF
) {

573 
›t
) {

575 ++
Æl_iÁ˚s
;

579 ++
li°í_¨p
;

583 ++
debug
;

587 ++
vîbo£
;

591 ++
Ælow_ofÊök
;

595 ++
⁄ly_ëhîs
;

599 
t·p_dú
 = 
›èrg
;

603 
	`ußge
();

606 i‡(
¨gc
 > 
›töd
) {

607 i‡(
¨gc
 > 
›töd
+1)

608 
	`ußge
();

609 
i‚ame
 = 
¨gv
[
›töd
];

612 
psize
 = 1;

613 
p£t
[0].
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 0);

615 i‡(
i‚ame
) {

616 
i‰eq
 
i‰
;

617 
	`mem£t
(&
i‰
, 0, (ifr));

618 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

619 i‡(
	`io˘l
(
p£t
[0].
fd
, 
SIOCGIFINDEX
, &
i‰
)) {

620 
	`≥º‹
("ioctl(SIOCGIFINDEX)");

621 
	`ußge
();

623 
ifidx
 = 
i‰
.
i‰_ifödex
;

626 
p£t
[1].
fd
 = -1;

627 i‡(
li°í_¨p
) {

628 
p£t
[1].
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 0);

629 i‡(
p£t
[1].
fd
 >= 0) {

630 
	`lﬂd_¨p_bpÊë
(
p£t
[1].
fd
);

631 
psize
 = 1;

635 i‡(
p£t
[1].
fd
 >= 0) {

636 
sockaddr_Œ
 
¶l
;

637 
	`mem£t
(&
¶l
, 0, (sll));

638 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

639 
¶l
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ARP
);

640 
¶l
.
¶l_ifödex
 = 
Æl_iÁ˚s
 ? 0 : 
ifidx
;

641 i‡(
	`böd
(
p£t
[1].
fd
, (
sockaddr
*)&
¶l
, (sll)) < 0) {

642 
	`˛o£
(
p£t
[1].
fd
);

643 
p£t
[1].
fd
 = -1;

644 
psize
 = 1;

647 i‡(
p£t
[0].
fd
 >= 0) {

648 
sockaddr_Œ
 
¶l
;

649 
	`mem£t
(&
¶l
, 0, (sll));

650 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

651 
¶l
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_RARP
);

652 
¶l
.
¶l_ifödex
 = 
Æl_iÁ˚s
 ? 0 : 
ifidx
;

653 i‡(
	`böd
(
p£t
[0].
fd
, (
sockaddr
*)&
¶l
, (sll)) < 0) {

654 
	`˛o£
(
p£t
[0].
fd
);

655 
p£t
[0].
fd
 = -1;

658 i‡(
p£t
[0].
fd
 < 0) {

659 
p£t
[0] =Öset[1];

660 
psize
--;

662 i‡(
psize
 == 0) {

663 
	`Ârötf
(
°dîr
, "failedÅo bindány socket. Aborting.\n");

664 
	`exô
(1);

667 i‡(!
debug
) {

668 
fd
;

669 
pid_t
 
pid
 = 
	`f‹k
();

671 i‡(
pid
 > 0)

672 
	`exô
(0);

673 i‡(
pid
 == -1) {

674 
	`≥º‹
("rarpd: fork");

675 
	`exô
(1);

678 i‡(
	`chdú
("/") < 0) {

679 
	`≥º‹
("rarpd: chdir");

680 
	`exô
(1);

683 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

684 i‡(
fd
 >= 0) {

685 
	`dup2
(
fd
, 0);

686 
	`dup2
(
fd
, 1);

687 
	`dup2
(
fd
, 2);

688 i‡(
fd
 > 2)

689 
	`˛o£
(
fd
);

691 
	`£tsid
();

694 
	`›ílog
("øΩd", 
LOG_PID
 | 
LOG_CONS
, 
LOG_DAEMON
);

695 
	`ˇtch_sig«l
(
SIGALRM
, 
sig_Æ¨m
);

696 
	`ˇtch_sig«l
(
SIGHUP
, 
sig_hup
);

699 
i
;

701 i‡(
do_ªlﬂd
) {

702 
	`c⁄figuª
();

703 
do_ªlﬂd
 = 0;

706 
	#EVENTS
 (
POLLIN
|
POLLPRI
|
POLLERR
|
POLLHUP
)

	)

707 
p£t
[0].
evíts
 = 
EVENTS
;

708 
p£t
[0].
ªvíts
 = 0;

709 
p£t
[1].
evíts
 = 
EVENTS
;

710 
p£t
[1].
ªvíts
 = 0;

712 
i
 = 
	`pﬁl
(
p£t
, 
psize
, -1);

713 i‡(
i
 <= 0) {

714 i‡(
î∫o
 !
EINTR
 && 
i
<0) {

715 
	`sy¶og
(
LOG_ERR
, "pollÑeturned some crap: %m\n");

716 
	`¶ìp
(10);

720 
i
=0; i<
psize
; i++) {

721 i‡(
p£t
[
i
].
ªvíts
&
EVENTS
)

722 
	`£rve_ô
(
p£t
[
i
].
fd
);

725 
	}
}

	@iputils-s20140519/rdisc.c

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

32 
	~<°dlib.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/time.h
>

36 
	~<löux/limôs.h
>

38 
	~<sys/∑øm.h
>

39 
	~<sys/sockë.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/fûe.h
>

42 
	~<mÆloc.h
>

44 
	~<sys/io˘l.h
>

45 
	~<löux/if.h
>

46 
	~<löux/rouã.h
>

48 
	~<√töë/ö.h
>

49 
	~<√töë/ù.h
>

50 
	~<√töë/ù_icmp.h
>

59 
	~<√tdb.h
>

60 
	~<¨∑/öë.h
>

62 
	~<°rög.h
>

63 
	~<sy¶og.h
>

65 
	~"SNAPSHOT.h
"

67 
	söãrÁ˚


69 
ö_addr
 
	maddªss
;

70 
ö_addr
 
	mloˇœddr
;

71 
	m¥e„ªn˚
;

72 
	mÊags
;

73 
ö_addr
 
	mbˇ°addr
;

74 
ö_addr
 
	mªmŸóddr
;

75 
ö_addr
 
	m√tmask
;

76 
	mifödex
;

77 
	m«me
[
IFNAMSIZ
];

86 
	#ALLIGN
(
±r
Ë’å)

	)

88 
joö
(
sock
, 
sockaddr_ö
 *
sö
);

89 
sﬁicô‹
(
sockaddr_ö
 *);

90 #ifde‡
RDISC_SERVER


91 
advîti£
(
sockaddr_ö
 *, 
l·
);

93 *
¥_«me
(
ö_addr
 
addr
);

94 
¥_∑ck
(*
buf
, 
cc
, 
sockaddr_ö
 *
‰om
);

95 
age_èbÀ
(
time
);

96 
ªc‹d_rouãr
(
ö_addr
 
rouãr
, 
¥e„ªn˚
, 
âl
);

97 
add_rouã
(
ö_addr
 
addr
);

98 
dñ_rouã
(
ö_addr
 
addr
);

99 
πio˘l
(
ö_addr
 
addr
, 
›
);

100 
suµ‹t_mu…iˇ°
();

101 
£ndbˇ°
(
s
, *
∑ckë
, 
∑ckëÀn
);

102 
£ndmˇ°
(
s
, *
∑ckë
, 
∑ckëÀn
, 
sockaddr_ö
 *);

103 
£ndbˇ°if
(
s
, *
∑ckë
, 
∑ckëÀn
, 
öãrÁ˚
 *
iÂ
);

104 
£ndmˇ°if
(
s
, *
∑ckë
, 
∑ckëÀn
, 
sockaddr_ö
 *
sö
, 
öãrÁ˚
 *
iÂ
);

105 
is_dúe˘ly_c⁄√˘ed
(
ö_addr
 
ö
);

106 
öôlog
();

107 
disˇrd_èbÀ
();

108 
öô
();

110 
	#ICMP_ROUTER_ADVERTISEMENT
 9

	)

111 
	#ICMP_ROUTER_SOLICITATION
 10

	)

113 
	#ALL_HOSTS_ADDRESS
 "224.0.0.1"

	)

114 
	#ALL_ROUTERS_ADDRESS
 "224.0.0.2"

	)

116 
	#MAXIFS
 32

	)

118 #i‡
deföed
(
__GLIBC__
) && __GLIBC__ < 2

120 
	sicmp_ø


122 
	micmp_ty≥
;

123 
	micmp_code
;

124 
	micmp_cksum
;

125 
	micmp_num_addrs
;

126 
	micmp_w∑
;

127 
	micmp_li„time
;

130 
	sicmp_ø_addr


132 
__u32
 
	múa_addr
;

133 
__u32
 
	múa_¥e„ªn˚
;

136 
	#icmp_ø
 
icmp


	)

140 
	#MAX_INITIAL_ADVERT_INTERVAL
 16

	)

141 
	#MAX_INITIAL_ADVERTISEMENTS
 3

	)

142 
	#MAX_RESPONSE_DELAY
 2

	)

145 
	#MAX_SOLICITATIONS
 3

	)

146 
	#SOLICITATION_INTERVAL
 3

	)

147 
	#MAX_SOLICITATION_DELAY
 1

	)

149 
	#INELIGIBLE_PREF
 0x80000000

	)

151 
	#MAX_ADV_INT
 600

	)

154 
	gnum_öãrÁ˚s
;

156 
öãrÁ˚
 *
	göãrÁ˚s
;

157 
	göãrÁ˚s_size
;

160 
	#MAXPACKET
 4096

	)

163 
	gdebugfûe
;

165 c⁄° 
	gußge
[] =

167 #ifde‡
RDISC_SERVER


174 
	gs
;

175 
sockaddr_ö
 
	gwhîëo
;

178 
	gvîbo£
 = 0;

179 
	gdebug
 = 0;

180 
	gåa˚
 = 0;

181 
	gsﬁicô
 = 0;

182 
	g¡ønsmôãd
 = 0;

183 
	gƒe˚ived
 = 0;

184 
	gf‹evî
 = 0;

188 #ifde‡
RDISC_SERVER


190 
	gª•⁄dî
;

191 
	gmax_adv_öt
 = 
MAX_ADV_INT
;

192 
	gmö_adv_öt
;

193 
	gli„time
;

194 
	göôül_advît_öãrvÆ
 = 
MAX_INITIAL_ADVERT_INTERVAL
;

195 
	göôül_advîti£míts
 = 
MAX_INITIAL_ADVERTISEMENTS
;

196 
	g¥e„ªn˚
 = 0;

200 
	gmax_sﬁicô©i⁄s
 = 
MAX_SOLICITATIONS
;

201 
	gsﬁicô©i⁄_öãrvÆ
 = 
SOLICITATION_INTERVAL
;

202 
	gbe°_¥e„ªn˚
 = 1;

207 
gø˚ful_föish
();

208 
föish
();

209 
timî
();

210 
öôifs
();

211 
ö_cksum
(*
addr
, 
Àn
);

213 
	gloggög
 = 0;

215 
	#logîr
(
fmt
...Ë({ i‡(
loggög
Ë
	`sy¶og
(
LOG_ERR
, fmt); \

216 
	`Ârötf
(
°dîr
, 
fmt
); })

	)

217 
	#logåa˚
(
fmt
...Ë({ i‡(
loggög
Ë
	`sy¶og
(
LOG_INFO
, fmt); \

218 
	`Ârötf
(
°dîr
, 
fmt
); })

	)

219 
	#logdebug
(
fmt
...Ë({ i‡(
loggög
Ë
	`sy¶og
(
LOG_DEBUG
, fmt); \

220 
	`Ârötf
(
°dîr
, 
fmt
); })

	)

221 
log≥º‹
(*
°r
);

223 
__ölöe__
 
	$isbrﬂdˇ°
(
sockaddr_ö
 *
sö
)

225  (
sö
->
sö_addr
.
s_addr
 =
INADDR_BROADCAST
);

226 
	}
}

228 
__ölöe__
 
	$ismu…iˇ°
(
sockaddr_ö
 *
sö
)

230  
	`IN_CLASSD
(
	`¡ohl
(
sö
->
sö_addr
.
s_addr
));

231 
	}
}

233 
	$¥ußge
()

235 
	`Âuts
(
ußge
, 
°dîr
);

236 
	`exô
(1);

237 
	}
}

239 
	$do_f‹k
()

241 
t
;

242 
pid_t
 
pid
;

243 
›í_max
;

245 i‡(
åa˚
)

247 i‡((
›í_max
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
)) == -1) {

248 i‡(
î∫o
 == 0) {

249 (Ë
	`Ârötf
(
°dîr
, "OPEN_MAX isÇot supported\n");

252 (Ë
	`Ârötf
(
°dîr
, "sysconf()Érror\n");

254 
	`exô
(1);

258 i‡((
pid
=
	`f‹k
()) != 0)

259 
	`exô
(0);

261 
t
 = 0;Å < 
›í_max
;Å++)

262 i‡(
t
 !
s
)

263 
	`˛o£
(
t
);

265 
	`£tsid
();

266 
	`öôlog
();

267 
	}
}

269 
sig«l_£tup
(
signo
, (*
h™dÀr
)())

271 
siga˘i⁄
 
ß
;

273 
	`mem£t
(&
ß
, 0, (sa));

275 
ß
.
ß_h™dÀr
 = ((*)())
h™dÀr
;

276 #ifde‡
SA_INTERRUPT


277 
ß
.
ß_Êags
 = 
SA_INTERRUPT
;

279 
	`siga˘i⁄
(
signo
, &
ß
, 
NULL
);

280 
	}
}

285 *
	g£ndaddªss
, *
	gªcvaddªss
;

287 
	$maö
(
¨gc
, **
¨gv
)

289 
sockaddr_ö
 
‰om
;

290 **
av
 = 
¨gv
;

291 
sockaddr_ö
 *
to
 = &
whîëo
;

292 
sockaddr_ö
 
joöaddr
;

293 
sig£t_t
 
s£t
, 
s£t_em±y
;

294 #ifde‡
RDISC_SERVER


295 
vÆ
;

297 
mö_adv_öt
 =–
max_adv_öt
 * 3 / 4);

298 
li„time
 = (3*
max_adv_öt
);

301 
¨gc
--, 
av
++;

302 
¨gc
 > 0 && *
av
[0] == '-') {

303 *++
av
[0]) {

304 *
av
[0]) {

306 
debug
 = 1;

309 
åa˚
 = 1;

312 
vîbo£
++;

315 
sﬁicô
 = 1;

317 #ifde‡
RDISC_SERVER


319 
ª•⁄dî
 = 1;

323 
be°_¥e„ªn˚
 = 0;

326 
be°_¥e„ªn˚
 = 1;

329 
f‹evî
 = 1;

332 
	`¥ötf
("rdis¯utûôy, iputûs-%s\n", 
SNAPSHOT
);

333 
	`exô
(0);

334 #ifde‡
RDISC_SERVER


336 
¨gc
--, 
av
++;

337 i‡(
¨gc
 != 0) {

338 
vÆ
 = 
	`°πﬁ
(
av
[0], (**)
NULL
, 0);

339 i‡(
vÆ
 < 4 || val > 1800) {

340 (Ë
	`Ârötf
(
°dîr
,

342 
	`exô
(1);

344 
max_adv_öt
 = 
vÆ
;

345 
mö_adv_öt
 =–
max_adv_öt
 * 3 / 4);

346 
li„time
 = (3*
max_adv_öt
);

348 
	`¥ußge
();

351 
√xt
;

353 
¨gc
--, 
av
++;

354 i‡(
¨gc
 != 0) {

355 
vÆ
 = 
	`°πﬁ
(
av
[0], (**)
NULL
, 0);

356 
¥e„ªn˚
 = 
vÆ
;

358 
	`¥ußge
();

361 
√xt
;

364 
	`¥ußge
();

368 #ifde‡
RDISC_SERVER


369 
√xt
:

371 
¨gc
--, 
av
++;

373 if–
¨gc
 < 1) {

374 i‡(
	`suµ‹t_mu…iˇ°
()) {

375 
£ndaddªss
 = 
ALL_ROUTERS_ADDRESS
;

376 #ifde‡
RDISC_SERVER


377 i‡(
ª•⁄dî
)

378 
£ndaddªss
 = 
ALL_HOSTS_ADDRESS
;

381 
£ndaddªss
 = "255.255.255.255";

383 
£ndaddªss
 = 
av
[0];

384 
¨gc
--;

387 i‡(
¨gc
 < 1) {

388 i‡(
	`suµ‹t_mu…iˇ°
()) {

389 
ªcvaddªss
 = 
ALL_HOSTS_ADDRESS
;

390 #ifde‡
RDISC_SERVER


391 i‡(
ª•⁄dî
)

392 
ªcvaddªss
 = 
ALL_ROUTERS_ADDRESS
;

395 
ªcvaddªss
 = "255.255.255.255";

397 
ªcvaddªss
 = 
av
[0];

398 
¨gc
--;

400 i‡(
¨gc
 != 0) {

401 (Ë
	`Ârötf
(
°dîr
, "ExtraÖarameters\n");

402 
	`¥ußge
();

406 #ifde‡
RDISC_SERVER


407 i‡(
sﬁicô
 && 
ª•⁄dî
) {

408 
	`¥ußge
();

413 i‡(!(
sﬁicô
 && !
f‹evî
)) {

414 
	`do_f‹k
();

419 
f‹evî
 = 1;

422 
	`mem£t
–(*)&
whîëo
, 0, (
sockaddr_ö
) );

423 
to
->
sö_Ámûy
 = 
AF_INET
;

424 
to
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
£ndaddªss
);

426 
	`mem£t
–(*)&
joöaddr
, 0, (
sockaddr_ö
) );

427 
joöaddr
.
sö_Ámûy
 = 
AF_INET
;

428 
joöaddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ªcvaddªss
);

430 #ifde‡
RDISC_SERVER


431 i‡(
ª•⁄dî
)

432 
	`§™dom
(()
	`gëho°id
());

435 i‡((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
)) < 0) {

436 
	`log≥º‹
("socket");

437 
	`exô
(5);

440 
	`£éöebuf
–
°dout
 );

442 
	`sig«l_£tup
(
SIGINT
, 
föish
 );

443 
	`sig«l_£tup
(
SIGTERM
, 
gø˚ful_föish
 );

444 
	`sig«l_£tup
(
SIGHUP
, 
öôifs
 );

445 
	`sig«l_£tup
(
SIGALRM
, 
timî
 );

447 
	`sigem±y£t
(&
s£t
);

448 
	`sigem±y£t
(&
s£t_em±y
);

449 
	`sigadd£t
(&
s£t
, 
SIGALRM
);

450 
	`sigadd£t
(&
s£t
, 
SIGHUP
);

451 
	`sigadd£t
(&
s£t
, 
SIGTERM
);

452 
	`sigadd£t
(&
s£t
, 
SIGINT
);

454 
	`öô
();

455 i‡(
	`joö
(
s
, &
joöaddr
) < 0) {

456 
	`logîr
("Failed joiningáddresses\n");

457 
	`exô
 (2);

460 
	`timî
();

463 
∑ckë
[
MAXPACKET
];

464 
Àn
 =  (
∑ckë
);

465 
sockÀn_t
 
‰omÀn
 =  (
‰om
);

466 
cc
;

468 
cc
=
	`ªcv‰om
(
s
, (*)
∑ckë
, 
Àn
, 0,

469 (
sockaddr
 *)&
‰om
, &
‰omÀn
);

470 i‡(
cc
<0) {

471 i‡(
î∫o
 =
EINTR
)

473 
	`log≥º‹
("recvfrom");

477 
	`sig¥ocmask
(
SIG_SETMASK
, &
s£t
, 
NULL
);

478 
	`¥_∑ck
–(*)
∑ckë
, 
cc
, &
‰om
 );

479 
	`sig¥ocmask
(
SIG_SETMASK
, &
s£t_em±y
, 
NULL
);

482 
	}
}

484 
	#TIMER_INTERVAL
 3

	)

485 
	#GETIFCONF_TIMER
 30

	)

487 
	gÀ·_u¡û_advîti£
;

490 
	$timî
()

492 
time
;

493 
À·_u¡û_gëifc⁄f
;

494 
À·_u¡û_sﬁicô
;

497 
time
 +
TIMER_INTERVAL
;

499 
À·_u¡û_gëifc⁄f
 -
TIMER_INTERVAL
;

500 
À·_u¡û_advîti£
 -
TIMER_INTERVAL
;

501 
À·_u¡û_sﬁicô
 -
TIMER_INTERVAL
;

503 i‡(
À·_u¡û_gëifc⁄f
 < 0) {

504 
	`öôifs
();

505 
À·_u¡û_gëifc⁄f
 = 
GETIFCONF_TIMER
;

507 #ifde‡
RDISC_SERVER


508 i‡(
ª•⁄dî
 && 
À·_u¡û_advîti£
 <= 0) {

509 
¡ønsmôãd
++;

510 
	`advîti£
(&
whîëo
, 
li„time
);

511 i‡(
¡ønsmôãd
 < 
öôül_advîti£míts
)

512 
À·_u¡û_advîti£
 = 
öôül_advît_öãrvÆ
;

514 
À·_u¡û_advîti£
 = 
mö_adv_öt
 +

515 ((
max_adv_öt
 - 
mö_adv_öt
) *

516 (
	`øndom
() % 1000)/1000);

519 i‡(
sﬁicô
 && 
À·_u¡û_sﬁicô
 <= 0) {

520 
¡ønsmôãd
++;

521 
	`sﬁicô‹
(&
whîëo
);

522 i‡(
¡ønsmôãd
 < 
max_sﬁicô©i⁄s
)

523 
À·_u¡û_sﬁicô
 = 
sﬁicô©i⁄_öãrvÆ
;

525 
sﬁicô
 = 0;

526 i‡(!
f‹evî
 && 
ƒe˚ived
 == 0)

527 
	`exô
(5);

530 
	`age_èbÀ
(
TIMER_INTERVAL
);

531 
	`Æ¨m
(
TIMER_INTERVAL
);

532 
	}
}

541 
	$sﬁicô‹
(
sockaddr_ö
 *
sö
)

543 
ouçack
[
MAXPACKET
];

544 
icmphdr
 *
i˝
 = (icmphd∏*Ë
	`ALLIGN
(
ouçack
);

545 
∑ckëÀn
, 
i
;

547 i‡(
vîbo£
) {

548 
	`logåa˚
("Sending solicitationÅo %s\n",

549 
	`¥_«me
(
sö
->
sö_addr
));

551 
i˝
->
ty≥
 = 
ICMP_ROUTER_SOLICITATION
;

552 
i˝
->
code
 = 0;

553 
i˝
->
checksum
 = 0;

554 
i˝
->
un
.
g©eway
 = 0;

555 
∑ckëÀn
 = 8;

558 
i˝
->
checksum
 = 
	`ö_cksum
–(*)i˝, 
∑ckëÀn
 );

560 i‡(
	`isbrﬂdˇ°
(
sö
))

561 
i
 = 
	`£ndbˇ°
(
s
, (*)
ouçack
, 
∑ckëÀn
);

562 i‡(
	`ismu…iˇ°
(
sö
))

563 
i
 = 
	`£ndmˇ°
(
s
, (*)
ouçack
, 
∑ckëÀn
, 
sö
);

565 
i
 = 
	`£ndto
–
s
, (*)
ouçack
, 
∑ckëÀn
, 0,

566 (
sockaddr
 *)
sö
, (sockaddr));

568 if–
i
 < 0 || i !
∑ckëÀn
 ) {

569 if–
i
<0 ) {

570 
	`log≥º‹
("solicitor:sendto");

572 
	`logîr
("wrote %s %d chars,Ñet=%d\n",

573 
£ndaddªss
, 
∑ckëÀn
, 
i
 );

575 
	}
}

577 #ifde‡
RDISC_SERVER


585 
	$advîti£
(
sockaddr_ö
 *
sö
, 
l·
)

587 
ouçack
[
MAXPACKET
];

588 
icmp_ø
 *
øp
 = (icmp_ø *Ë
	`ALLIGN
(
ouçack
);

589 
icmp_ø_addr
 *
≠
;

590 
∑ckëÀn
, 
i
, 
cc
;

592 i‡(
vîbo£
) {

593 
	`logåa˚
("SendingádvertisementÅo %s\n",

594 
	`¥_«me
(
sö
->
sö_addr
));

597 
i
 = 0; i < 
num_öãrÁ˚s
; i++) {

598 
øp
->
icmp_ty≥
 = 
ICMP_ROUTER_ADVERTISEMENT
;

599 
øp
->
icmp_code
 = 0;

600 
øp
->
icmp_cksum
 = 0;

601 
øp
->
icmp_num_addrs
 = 0;

602 
øp
->
icmp_w∑
 = 2;

603 
øp
->
icmp_li„time
 = 
	`ht⁄s
(
l·
);

604 
∑ckëÀn
 = 8;

611 
≠
 = (
icmp_ø_addr
 *)
	`ALLIGN
(
ouçack
 + 
ICMP_MINLEN
);

612 
≠
->
úa_addr
 = 
öãrÁ˚s
[
i
].
loˇœddr
.
s_addr
;

613 
≠
->
úa_¥e„ªn˚
 = 
	`ht⁄l
(
öãrÁ˚s
[
i
].
¥e„ªn˚
);

614 
∑ckëÀn
 +
øp
->
icmp_w∑
 * 4;

615 
øp
->
icmp_num_addrs
++;

618 
øp
->
icmp_cksum
 = 
	`ö_cksum
–(*Ï≠, 
∑ckëÀn
 );

620 i‡(
	`isbrﬂdˇ°
(
sö
))

621 
cc
 = 
	`£ndbˇ°if
(
s
, (*)
ouçack
, 
∑ckëÀn
,

622 &
öãrÁ˚s
[
i
]);

623 i‡(
	`ismu…iˇ°
(
sö
))

624 
cc
 = 
	`£ndmˇ°if
–
s
, (*)
ouçack
, 
∑ckëÀn
, 
sö
,

625 &
öãrÁ˚s
[
i
]);

627 
öãrÁ˚
 *
iÂ
 = &
öãrÁ˚s
[
i
];

632 i‡((
sö
->
sö_addr
.
s_addr
 & 
iÂ
->
√tmask
.s_addr) ==

633 (
iÂ
->
addªss
.
s_addr
 & iÂ->
√tmask
.s_addr)) {

634 i‡(
debug
) {

635 
	`logdebug
("UnicastÅo %s ",

636 
	`¥_«me
(
sö
->
sö_addr
));

637 
	`logdebug
("on interface %s, %s\n",

638 
iÂ
->
«me
,

639 
	`¥_«me
(
iÂ
->
addªss
));

641 
cc
 = 
	`£ndto
–
s
, (*)
ouçack
, 
∑ckëÀn
, 0,

642 (
sockaddr
 *)
sö
,

643 (
sockaddr
));

645 
cc
 = 
∑ckëÀn
;

647 if–
cc
 < 0 || c¯!
∑ckëÀn
 ) {

648 i‡(
cc
 < 0) {

649 
	`log≥º‹
("sendto");

651 
	`logîr
("wrote %s %d chars,Ñet=%d\n",

652 
£ndaddªss
, 
∑ckëÀn
, 
cc
 );

656 
	}
}

665 
	$¥_ty≥
(
t
)

667 *
âab
[] = {

689 i‡–
t
 < 0 ||Å > 16 )

692 (
âab
[
t
]);

693 
	}
}

700 *
	$¥_«me
(
ö_addr
 
addr
)

702 
ho°ít
 *
phe
;

703 
buf
[80];

705 
phe
 = 
	`gëho°byaddr
((*)&
addr
.
s_addr
, 4, 
AF_INET
);

706 i‡(
phe
 =
NULL
)

707 –
	`öë_¡ﬂ
(
addr
));

708 
	`¢¥ötf
(
buf
, (buf), "%†(%s)", 
phe
->
h_«me
, 
	`öë_¡ﬂ
(
addr
));

709 (
buf
);

710 
	}
}

721 
	$¥_∑ck
(*
buf
, 
cc
, 
sockaddr_ö
 *
‰om
)

723 
ùhdr
 *
ù
;

724 
icmphdr
 *
i˝
;

725 
i
;

726 
hÀn
;

728 
ù
 = (
ùhdr
 *Ë
	`ALLIGN
(
buf
);

729 
hÀn
 = 
ù
->
ihl
 << 2;

730 i‡(
cc
 < 
hÀn
 + 8) {

731 i‡(
vîbo£
)

732 
	`logåa˚
("∑ckëÅoÿsh‹à(%d byãsË‰om %s\n", 
cc
,

733 
	`¥_«me
(
‰om
->
sö_addr
));

736 
cc
 -
hÀn
;

737 
i˝
 = (
icmphdr
 *)
	`ALLIGN
(
buf
 + 
hÀn
);

739 
i˝
->
ty≥
) {

740 
ICMP_ROUTER_ADVERTISEMENT
:

742 
icmp_ø
 *
øp
 = (icmp_ø *)
	`ALLIGN
(
i˝
);

743 
icmp_ø_addr
 *
≠
;

745 #ifde‡
RDISC_SERVER


746 i‡(
ª•⁄dî
)

752 i‡(
	`ö_cksum
((*)
	`ALLIGN
(
buf
+
hÀn
), 
cc
)) {

753 i‡(
vîbo£
)

754 
	`logåa˚
("ICMP %s from %s: Bad checksum\n",

755 
	`¥_ty≥
(()
øp
->
icmp_ty≥
),

756 
	`¥_«me
(
‰om
->
sö_addr
));

759 i‡(
øp
->
icmp_code
 != 0) {

760 i‡(
vîbo£
)

761 
	`logåa˚
("ICMP %s from %s: Code = %d\n",

762 
	`¥_ty≥
(()
øp
->
icmp_ty≥
),

763 
	`¥_«me
(
‰om
->
sö_addr
),

764 
øp
->
icmp_code
);

767 i‡(
øp
->
icmp_num_addrs
 < 1) {

768 i‡(
vîbo£
)

769 
	`logåa˚
("ICMP %s from %s: Noáddresses\n",

770 
	`¥_ty≥
(()
øp
->
icmp_ty≥
),

771 
	`¥_«me
(
‰om
->
sö_addr
));

774 i‡(
øp
->
icmp_w∑
 < 2) {

775 i‡(
vîbo£
)

776 
	`logåa˚
("ICMP %s from %s: Words/addr = %d\n",

777 
	`¥_ty≥
(()
øp
->
icmp_ty≥
),

778 
	`¥_«me
(
‰om
->
sö_addr
),

779 
øp
->
icmp_w∑
);

782 i‡(()
cc
 <

783 8 + 
øp
->
icmp_num_addrs
 *Ñ≠->
icmp_w∑
 * 4) {

784 i‡(
vîbo£
)

785 
	`logåa˚
("ICMP %s from %s: Too short %d, %d\n",

786 
	`¥_ty≥
(()
øp
->
icmp_ty≥
),

787 
	`¥_«me
(
‰om
->
sö_addr
),

788 
cc
,

789 8 + 
øp
->
icmp_num_addrs
 *Ñ≠->
icmp_w∑
 * 4);

793 i‡(
vîbo£
)

794 
	`logåa˚
("ICMP %s from %s,Üifetime %d\n",

795 
	`¥_ty≥
(()
øp
->
icmp_ty≥
),

796 
	`¥_«me
(
‰om
->
sö_addr
),

797 
	`¡ohs
(
øp
->
icmp_li„time
));

802 
i
 = 0; ()ò< 
øp
->
icmp_num_addrs
; i++) {

803 
ö_addr
 
öa
;

804 
≠
 = (
icmp_ø_addr
 *)

805 
	`ALLIGN
(
buf
 + 
hÀn
 + 8 +

806 
i
 * 
øp
->
icmp_w∑
 * 4);

807 
öa
.
s_addr
 = 
≠
->
úa_addr
;

808 i‡(
vîbo£
)

809 
	`logåa˚
("\taddress %s,Öreference 0x%x\n",

810 
	`¥_«me
(
öa
),

811 ()
	`¡ohl
(
≠
->
úa_¥e„ªn˚
));

812 i‡(
	`is_dúe˘ly_c⁄√˘ed
(
öa
))

813 
	`ªc‹d_rouãr
(
öa
,

814 
	`¡ohl
(
≠
->
úa_¥e„ªn˚
),

815 
	`¡ohs
(
øp
->
icmp_li„time
));

817 
ƒe˚ived
++;

818 i‡(!
f‹evî
) {

819 
	`do_f‹k
();

820 
f‹evî
 = 1;

825 (Ë
	`Æ¨m
(
TIMER_INTERVAL
);

830 #ifde‡
RDISC_SERVER


831 
ICMP_ROUTER_SOLICITATION
:

833 
sockaddr_ö
 
sö
;

835 i‡(!
ª•⁄dî
)

841 i‡(
	`ö_cksum
((*)
	`ALLIGN
(
buf
+
hÀn
), 
cc
)) {

842 i‡(
vîbo£
)

843 
	`logåa˚
("ICMP %s from %s: Bad checksum\n",

844 
	`¥_ty≥
(()
i˝
->
ty≥
),

845 
	`¥_«me
(
‰om
->
sö_addr
));

848 i‡(
i˝
->
code
 != 0) {

849 i‡(
vîbo£
)

850 
	`logåa˚
("ICMP %s from %s: Code = %d\n",

851 
	`¥_ty≥
(()
i˝
->
ty≥
),

852 
	`¥_«me
(
‰om
->
sö_addr
),

853 
i˝
->
code
);

857 i‡(
cc
 < 
ICMP_MINLEN
) {

858 i‡(
vîbo£
)

859 
	`logåa˚
("ICMP %s from %s: Too short %d, %d\n",

860 
	`¥_ty≥
(()
i˝
->
ty≥
),

861 
	`¥_«me
(
‰om
->
sö_addr
),

862 
cc
,

863 
ICMP_MINLEN
);

867 i‡(
vîbo£
)

868 
	`logåa˚
("ICMP %s from %s\n",

869 
	`¥_ty≥
(()
i˝
->
ty≥
),

870 
	`¥_«me
(
‰om
->
sö_addr
));

875 
sö
.
sö_Ámûy
 = 
AF_INET
;

876 i‡(
ù
->
ßddr
 == 0) {

880 i‡(
	`IN_CLASSD
(
	`¡ohl
(
ù
->
daddr
)))

881 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0xe0000001);

883 
sö
.
sö_addr
.
s_addr
 = 
INADDR_BROADCAST
;

885 
À·_u¡û_advîti£
 = 
mö_adv_öt
 +

886 ((
max_adv_öt
 - 
mö_adv_öt
)

887 * (
	`øndom
() % 1000)/1000);

889 
sö
.
sö_addr
.
s_addr
 = 
ù
->
ßddr
;

890 i‡(!
	`is_dúe˘ly_c⁄√˘ed
(
sö
.
sö_addr
)) {

891 i‡(
vîbo£
)

892 
	`logåa˚
("ICMP %s from %s: sourceÇot directly connected\n",

893 
	`¥_ty≥
(()
i˝
->
ty≥
),

894 
	`¥_«me
(
‰om
->
sö_addr
));

898 
ƒe˚ived
++;

899 
¡ønsmôãd
++;

900 
	`advîti£
(&
sö
, 
li„time
);

905 
	}
}

914 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


915 
	#ODDBYTE
(
v
Ë(v)

	)

916 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


917 
	#ODDBYTE
(
v
Ë(()(vË<< 8)

	)

919 
	#ODDBYTE
(
v
Ë
	`ht⁄s
(()(vË<< 8)

	)

922 
	$ö_cksum
(*
addr
, 
Àn
)

924 
∆e·
 = 
Àn
;

925 *
w
 = 
addr
;

926 
™swî
;

927 
sum
 = 0;

935  
∆e·
 > 1 ) {

936 
sum
 +*
w
++;

937 
∆e·
 -= 2;

941 if–
∆e·
 == 1 )

942 
sum
 +
	`ODDBYTE
(*(*)
w
);

947 
sum
 = (sum >> 16) + (sum & 0xffff);

948 
sum
 += (sum >> 16);

949 
™swî
 = ~
sum
;

950  (
™swî
);

951 
	}
}

963 
	$föish
()

965 #ifde‡
RDISC_SERVER


966 i‡(
ª•⁄dî
) {

973 
	`logîr
("terminated\n");

974 
¡ønsmôãd
++;

975 
	`advîti£
(&
whîëo
, 0);

978 
	`logåa˚
("\n----%†rdis¯Sèti°ics----\n", 
£ndaddªss
 );

979 
	`logåa˚
("%dÖackë†å™smôãd, ", 
¡ønsmôãd
 );

980 
	`logåa˚
("%dÖackë†ª˚ived, ", 
ƒe˚ived
 );

981 
	`logåa˚
("\n");

982 (Ë
	`fÊush
(
°dout
);

983 
	`exô
(0);

984 
	}
}

987 
	$gø˚ful_föish
()

989 
	`disˇrd_èbÀ
();

990 
	`föish
();

991 
	`exô
(0);

992 
	}
}

998 
	$£ndbˇ°
(
s
, *
∑ckë
, 
∑ckëÀn
)

1000 
i
, 
cc
;

1002 
i
 = 0; i < 
num_öãrÁ˚s
; i++) {

1003 i‡((
öãrÁ˚s
[
i
].
Êags
 & (
IFF_BROADCAST
|
IFF_POINTOPOINT
)) == 0)

1005 
cc
 = 
	`£ndbˇ°if
(
s
, 
∑ckë
, 
∑ckëÀn
, &
öãrÁ˚s
[
i
]);

1006 i‡(
cc
!
∑ckëÀn
) {

1007  (
cc
);

1010  (
∑ckëÀn
);

1011 
	}
}

1014 
	$£ndbˇ°if
(
s
, *
∑ckë
, 
∑ckëÀn
, 
öãrÁ˚
 *
iÂ
)

1016 
⁄
;

1017 
cc
;

1018 
sockaddr_ö
 
baddr
;

1020 
baddr
.
sö_Ámûy
 = 
AF_INET
;

1021 
baddr
.
sö_addr
 = 
iÂ
->
bˇ°addr
;

1022 i‡(
debug
)

1023 
	`logdebug
("BroadcastÅo %s\n",

1024 
	`¥_«me
(
baddr
.
sö_addr
));

1025 
⁄
 = 1;

1026 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
⁄
, (on));

1027 
cc
 = 
	`£ndto
(
s
, 
∑ckë
, 
∑ckëÀn
, 0,

1028 (
sockaddr
 *)&
baddr
,  (sockaddr));

1029 i‡(
cc
!
∑ckëÀn
) {

1030 
	`log≥º‹
("sendbcast: sendto");

1031 
	`logîr
("Cannot send broadcastÖacketÅo %s\n",

1032 
	`¥_«me
(
baddr
.
sö_addr
));

1034 
⁄
 = 0;

1035 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
⁄
, (on));

1036  (
cc
);

1037 
	}
}

1040 
	$£ndmˇ°
(
s
, *
∑ckë
, 
∑ckëÀn
, 
sockaddr_ö
 *
sö
)

1042 
i
, 
cc
;

1044 
i
 = 0; i < 
num_öãrÁ˚s
; i++) {

1045 i‡((
öãrÁ˚s
[
i
].
Êags
 & (
IFF_BROADCAST
|
IFF_POINTOPOINT
|
IFF_MULTICAST
)) == 0)

1047 
cc
 = 
	`£ndmˇ°if
(
s
, 
∑ckë
, 
∑ckëÀn
, 
sö
, &
öãrÁ˚s
[
i
]);

1048 i‡(
cc
!
∑ckëÀn
) {

1049  (
cc
);

1052  (
∑ckëÀn
);

1053 
	}
}

1056 
	$£ndmˇ°if
(
s
, *
∑ckë
, 
∑ckëÀn
, 
sockaddr_ö
 *
sö
,

1057 
öãrÁ˚
 *
iÂ
)

1059 
cc
;

1060 
ù_mªqn
 
mªq
;

1062 
	`mem£t
(&
mªq
, 0, (mreq));

1063 
mªq
.
imr_ifödex
 = 
iÂ
->
ifödex
;

1064 
mªq
.
imr_addªss
 = 
iÂ
->
loˇœddr
;

1065 i‡(
debug
)

1066 
	`logdebug
("MulticastÅo interface %s, %s\n",

1067 
iÂ
->
«me
,

1068 
	`¥_«me
(
mªq
.
imr_addªss
));

1069 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
,

1070 (*)&
mªq
,

1071 (
mªq
)) < 0) {

1072 
	`log≥º‹
("setsockopt (IP_MULTICAST_IF)");

1073 
	`logîr
("Cannot send multicastÖacket over interface %s, %s\n",

1074 
iÂ
->
«me
,

1075 
	`¥_«me
(
mªq
.
imr_addªss
));

1078 
cc
 = 
	`£ndto
(
s
, 
∑ckë
, 
∑ckëÀn
, 0,

1079 (
sockaddr
 *)
sö
,  (sockaddr));

1080 i‡(
cc
!
∑ckëÀn
) {

1081 
	`log≥º‹
("sendmcast: sendto");

1082 
	`logîr
("Cannot send multicastÖacket over interface %s, %s\n",

1083 
iÂ
->
«me
, 
	`¥_«me
(
mªq
.
imr_addªss
));

1085  (
cc
);

1086 
	}
}

1089 
	$öô
()

1091 
	`öôifs
();

1092 #ifde‡
RDISC_SERVER


1094 
i
;

1095 
i
 = 0; i < 
öãrÁ˚s_size
; i++)

1096 
öãrÁ˚s
[
i
].
¥e„ªn˚
 =Öreference;

1099 
	}
}

1102 
	$öôifs
()

1104 
sock
;

1105 
ifc⁄f
 
ifc
;

1106 
i‰eq
 i‰eq, *
i‰
;

1107 
sockaddr_ö
 *
sö
;

1108 
n
, 
i
;

1109 *
buf
;

1110 
numifs
;

1111 
bufsize
;

1113 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1114 i‡(
sock
 < 0) {

1115 
	`log≥º‹
("initifs: socket");

1118 #ifde‡
SIOCGIFNUM


1119 i‡(
	`io˘l
(
sock
, 
SIOCGIFNUM
, (*)&
numifs
) < 0) {

1120 
numifs
 = 
MAXIFS
;

1123 
numifs
 = 
MAXIFS
;

1125 
bufsize
 = 
numifs
 * (
i‰eq
);

1126 
buf
 = (*)
	`mÆloc
(
bufsize
);

1127 i‡(
buf
 =
NULL
) {

1128 
	`logîr
("out of memory\n");

1129 (Ë
	`˛o£
(
sock
);

1132 i‡(
öãrÁ˚s
 !
NULL
)

1133 (Ë
	`‰ì
(
öãrÁ˚s
);

1134 
öãrÁ˚s
 = (
öãrÁ˚
 *)
	`ALLIGN
(
	`mÆloc
(
numifs
 *

1135 (
öãrÁ˚
)));

1136 i‡(
öãrÁ˚s
 =
NULL
) {

1137 
	`logîr
("out of memory\n");

1138 (Ë
	`˛o£
(
sock
);

1139 (Ë
	`‰ì
(
buf
);

1142 
öãrÁ˚s_size
 = 
numifs
;

1144 
ifc
.
ifc_Àn
 = 
bufsize
;

1145 
ifc
.
ifc_buf
 = 
buf
;

1146 i‡(
	`io˘l
(
sock
, 
SIOCGIFCONF
, (*)&
ifc
) < 0) {

1147 
	`log≥º‹
("initifs: ioctl (get interface configuration)");

1148 (Ë
	`˛o£
(
sock
);

1149 (Ë
	`‰ì
(
buf
);

1152 
i‰
 = 
ifc
.
ifc_ªq
;

1153 
i
 = 0, 
n
 = 
ifc
.
ifc_Àn
/ (
i‰eq
);Ç > 0;Ç--, 
i‰
++) {

1154 
i‰eq
 = *
i‰
;

1155 i‡(
	`°æí
(
i‰eq
.
i‰_«me
Ë>
IFNAMSIZ
)

1157 i‡(
	`io˘l
(
sock
, 
SIOCGIFFLAGS
, (*)&
i‰eq
) < 0) {

1158 
	`log≥º‹
("initifs: ioctl (get interface flags)");

1161 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 !
AF_INET
)

1163 i‡((
i‰eq
.
i‰_Êags
 & 
IFF_UP
) == 0)

1165 i‡(
i‰eq
.
i‰_Êags
 & 
IFF_LOOPBACK
)

1167 i‡((
i‰eq
.
i‰_Êags
 & (
IFF_MULTICAST
|
IFF_BROADCAST
|
IFF_POINTOPOINT
)) == 0)

1169 
	`°∫˝y
(
öãrÁ˚s
[
i
].
«me
, 
i‰
->
i‰_«me
, 
IFNAMSIZ
-1);

1171 
sö
 = (
sockaddr_ö
 *)
	`ALLIGN
(&
i‰
->
i‰_addr
);

1172 
öãrÁ˚s
[
i
].
loˇœddr
 = 
sö
->
sö_addr
;

1173 
öãrÁ˚s
[
i
].
Êags
 = 
i‰eq
.
i‰_Êags
;

1174 
öãrÁ˚s
[
i
].
√tmask
.
s_addr
 = (
__u32
)0xffffffff;

1175 i‡(
	`io˘l
(
sock
, 
SIOCGIFINDEX
, (*)&
i‰eq
) < 0) {

1176 
	`log≥º‹
("initifs: ioctl (get ifindex)");

1179 
öãrÁ˚s
[
i
].
ifödex
 = 
i‰eq
.
i‰_ifödex
;

1180 i‡(
i‰eq
.
i‰_Êags
 & 
IFF_POINTOPOINT
) {

1181 i‡(
	`io˘l
(
sock
, 
SIOCGIFDSTADDR
, (*)&
i‰eq
) < 0) {

1182 
	`log≥º‹
("initifs: ioctl (get destinationáddr)");

1185 
sö
 = (
sockaddr_ö
 *)
	`ALLIGN
(&
i‰eq
.
i‰_addr
);

1187 
öãrÁ˚s
[
i
].
addªss
 = 
sö
->
sö_addr
;

1188 
öãrÁ˚s
[
i
].
ªmŸóddr
 = 
sö
->
sö_addr
;

1190 
öãrÁ˚s
[
i
].
bˇ°addr
 = 
sö
->
sö_addr
;

1191 
öãrÁ˚s
[
i
].
Êags
 |
IFF_BROADCAST
;

1194 
öãrÁ˚s
[
i
].
addªss
 = i¡îÁ˚s[i].
loˇœddr
;

1195 
öãrÁ˚s
[
i
].
ªmŸóddr
 = i¡îÁ˚s[i].
addªss
;

1196 i‡(
	`io˘l
(
sock
, 
SIOCGIFNETMASK
, (*)&
i‰eq
) < 0) {

1197 
	`log≥º‹
("initifs: ioctl (getÇetmask)");

1200 
sö
 = (
sockaddr_ö
 *)
	`ALLIGN
(&
i‰eq
.
i‰_addr
);

1201 
öãrÁ˚s
[
i
].
√tmask
 = 
sö
->
sö_addr
;

1202 i‡(
i‰eq
.
i‰_Êags
 & 
IFF_BROADCAST
) {

1203 i‡(
	`io˘l
(
sock
, 
SIOCGIFBRDADDR
, (*)&
i‰eq
) < 0) {

1204 
	`log≥º‹
("initifs: ioctl (get broadcastáddress)");

1207 
sö
 = (
sockaddr_ö
 *)
	`ALLIGN
(&
i‰eq
.
i‰_addr
);

1208 
öãrÁ˚s
[
i
].
bˇ°addr
 = 
sö
->
sö_addr
;

1211 #ifde‡
nŸdef


1212 i‡(
debug
)

1213 
	`logdebug
("Found interface %s, flags 0x%x\n",

1214 
	`¥_«me
(
öãrÁ˚s
[
i
].
loˇœddr
),

1215 
öãrÁ˚s
[
i
].
Êags
);

1217 
i
++;

1219 
num_öãrÁ˚s
 = 
i
;

1220 #ifde‡
nŸdef


1221 i‡(
debug
)

1222 
	`logdebug
("Found %d i¡îÁ˚s\n", 
num_öãrÁ˚s
);

1224 (Ë
	`˛o£
(
sock
);

1225 (Ë
	`‰ì
(
buf
);

1226 
	}
}

1229 
	$joö
(
sock
, 
sockaddr_ö
 *
sö
)

1231 
i
, 
j
;

1232 
ù_mªqn
 
mªq
;

1233 
joöed
[
num_öãrÁ˚s
];

1235 
	`mem£t
(
joöed
, 0, (joined));

1237 i‡(
	`isbrﬂdˇ°
(
sö
))

1240 
mªq
.
imr_mu…üddr
 = 
sö
->
sö_addr
;

1241 
i
 = 0; i < 
num_öãrÁ˚s
; i++) {

1242 
j
 = 0; j < 
i
; j++) {

1243 i‡(
joöed
[
j
] =
öãrÁ˚s
[
i
].
ifödex
)

1246 i‡(
j
 !
i
)

1249 
mªq
.
imr_ifödex
 = 
öãrÁ˚s
[
i
].
ifödex
;

1250 
mªq
.
imr_addªss
.
s_addr
 = 0;

1252 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
,

1253 (*)&
mªq
, (mreq)) < 0) {

1254 
	`log≥º‹
("setsockopt (IP_ADD_MEMBERSHIP)");

1258 
joöed
[
i
] = 
öãrÁ˚s
[i].
ifödex
;

1261 
	}
}

1263 
	$suµ‹t_mu…iˇ°
()

1265 
sock
;

1266 
âl
 = 1;

1268 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1269 i‡(
sock
 < 0) {

1270 
	`log≥º‹
("support_multicast: socket");

1274 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
,

1275 (*)&
âl
, (ttl)) < 0) {

1276 (Ë
	`˛o£
(
sock
);

1279 (Ë
	`˛o£
(
sock
);

1281 
	}
}

1284 
	$is_dúe˘ly_c⁄√˘ed
(
ö_addr
 
ö
)

1286 
i
;

1288 
i
 = 0; i < 
num_öãrÁ˚s
; i++) {

1291 i‡((
ö
.
s_addr
 & 
öãrÁ˚s
[
i
].
√tmask
.s_addr ) ==

1292 (
öãrÁ˚s
[
i
].
ªmŸóddr
.
s_addr
 & i¡îÁ˚s[i].
√tmask
.s_addr))

1296 
	}
}

1301 
	sèbÀ
 {

1302 
ö_addr
 
	mrouãr
;

1303 
	m¥e„ªn˚
;

1304 
	mªmaöög_time
;

1305 
	mö_kî√l
;

1306 
èbÀ
 *
	m√xt
;

1309 
èbÀ
 *
	gèbÀ
;

1311 
èbÀ
 *

1312 
	$föd_rouãr
(
ö_addr
 
addr
)

1314 
èbÀ
 *
ç
;

1316 
ç
 = 
èbÀ
;

1317 
ç
) {

1318 i‡(
ç
->
rouãr
.
s_addr
 =
addr
.s_addr)

1319  (
ç
);

1320 
ç
 =Åp->
√xt
;

1322  (
NULL
);

1323 
	}
}

1325 
	$max_¥e„ªn˚
()

1327 
èbÀ
 *
ç
;

1328 
max
 = ()
INELIGIBLE_PREF
;

1330 
ç
 = 
èbÀ
;

1331 
ç
) {

1332 i‡(
ç
->
¥e„ªn˚
 > 
max
)

1333 
max
 = 
ç
->
¥e„ªn˚
;

1334 
ç
 =Åp->
√xt
;

1336  (
max
);

1337 
	}
}

1342 
	$age_èbÀ
(
time
)

1344 
èbÀ
 **
çp
, *
ç
;

1345 
ªˇlcuœã_max
 = 0;

1346 
max
 = 
	`max_¥e„ªn˚
();

1348 
çp
 = &
èbÀ
;

1349 *
çp
 !
NULL
) {

1350 
ç
 = *
çp
;

1351 
ç
->
ªmaöög_time
 -
time
;

1352 i‡(
ç
->
ªmaöög_time
 <= 0) {

1353 *
çp
 = 
ç
->
√xt
;

1354 i‡(
ç
->
ö_kî√l
)

1355 
	`dñ_rouã
(
ç
->
rouãr
);

1356 i‡(
be°_¥e„ªn˚
 &&

1357 
ç
->
¥e„ªn˚
 =
max
)

1358 
ªˇlcuœã_max
++;

1359 
	`‰ì
((*)
ç
);

1361 
çp
 = &
ç
->
√xt
;

1364 i‡(
ªˇlcuœã_max
) {

1365 
max
 = 
	`max_¥e„ªn˚
();

1367 i‡(
max
 !
INELIGIBLE_PREF
) {

1368 
ç
 = 
èbÀ
;

1369 
ç
) {

1370 i‡(
ç
->
¥e„ªn˚
 =
max
 && !ç->
ö_kî√l
) {

1371 
	`add_rouã
(
ç
->
rouãr
);

1372 
ç
->
ö_kî√l
++;

1374 
ç
 =Åp->
√xt
;

1378 
	}
}

1380 
	$disˇrd_èbÀ
()

1382 
èbÀ
 **
çp
, *
ç
;

1384 
çp
 = &
èbÀ
;

1385 *
çp
 !
NULL
) {

1386 
ç
 = *
çp
;

1387 *
çp
 = 
ç
->
√xt
;

1388 i‡(
ç
->
ö_kî√l
)

1389 
	`dñ_rouã
(
ç
->
rouãr
);

1390 
	`‰ì
((*)
ç
);

1392 
	}
}

1396 
	$ªc‹d_rouãr
(
ö_addr
 
rouãr
, 
¥e„ªn˚
, 
âl
)

1398 
èbÀ
 *
ç
;

1399 
ﬁd_max
 = 
	`max_¥e„ªn˚
();

1400 
ch™ged_up
 = 0;

1401 
ch™ged_down
 = 0;

1403 i‡(
âl
 < 4)

1404 
¥e„ªn˚
 = 
INELIGIBLE_PREF
;

1406 i‡(
debug
)

1407 
	`logdebug
("Recording %s,Åtl %d,Öreference 0x%x\n",

1408 
	`¥_«me
(
rouãr
),

1409 
âl
,

1410 
¥e„ªn˚
);

1411 
ç
 = 
	`föd_rouãr
(
rouãr
);

1412 i‡(
ç
) {

1413 i‡(
ç
->
¥e„ªn˚
 >Öreference &&

1414 
ç
->
¥e„ªn˚
 =
ﬁd_max
)

1415 
ch™ged_down
++;

1416 i‡(
¥e„ªn˚
 > 
ç
->preference)

1417 
ch™ged_up
++;

1418 
ç
->
¥e„ªn˚
 =Öreference;

1419 
ç
->
ªmaöög_time
 = 
âl
;

1421 i‡(
¥e„ªn˚
 > 
ﬁd_max
)

1422 
ch™ged_up
++;

1423 
ç
 = (
èbÀ
 *)
	`ALLIGN
(
	`mÆloc
((table)));

1424 i‡(
ç
 =
NULL
) {

1425 
	`logîr
("Out of memory\n");

1428 
ç
->
rouãr
 =Ñouter;

1429 
ç
->
¥e„ªn˚
 =Öreference;

1430 
ç
->
ªmaöög_time
 = 
âl
;

1431 
ç
->
ö_kî√l
 = 0;

1432 
ç
->
√xt
 = 
èbÀ
;

1433 
èbÀ
 = 
ç
;

1435 i‡(!
ç
->
ö_kî√l
 &&

1436 (!
be°_¥e„ªn˚
 || 
ç
->
¥e„ªn˚
 =
	`max_¥e„ªn˚
()) &&

1437 
ç
->
¥e„ªn˚
 !
INELIGIBLE_PREF
) {

1438 
	`add_rouã
(
ç
->
rouãr
);

1439 
ç
->
ö_kî√l
++;

1441 i‡(
ç
->
¥e„ªn˚
 =
INELIGIBLE_PREF
 &&Åp->
ö_kî√l
) {

1442 
	`dñ_rouã
(
ç
->
rouãr
);

1443 
ç
->
ö_kî√l
 = 0;

1445 i‡(
be°_¥e„ªn˚
 && 
ch™ged_down
) {

1447 
√w_max
 = 
	`max_¥e„ªn˚
();

1448 i‡(
√w_max
 !
INELIGIBLE_PREF
) {

1449 
ç
 = 
èbÀ
;

1450 
ç
) {

1451 i‡(
ç
->
¥e„ªn˚
 =
√w_max
 &&

1452 !
ç
->
ö_kî√l
) {

1453 
	`add_rouã
(
ç
->
rouãr
);

1454 
ç
->
ö_kî√l
++;

1456 
ç
 =Åp->
√xt
;

1460 i‡(
be°_¥e„ªn˚
 && (
ch™ged_up
 || 
ch™ged_down
)) {

1462 
√w_max
 = 
	`max_¥e„ªn˚
();

1463 
ç
 = 
èbÀ
;

1464 
ç
) {

1465 i‡(
ç
->
¥e„ªn˚
 < 
√w_max
 &&Åp->
ö_kî√l
) {

1466 
	`dñ_rouã
(
ç
->
rouãr
);

1467 
ç
->
ö_kî√l
 = 0;

1469 
ç
 =Åp->
√xt
;

1472 
	}
}

1475 
	$add_rouã
(
ö_addr
 
addr
)

1477 i‡(
debug
)

1478 
	`logdebug
("Add deÁu…ÑouãÅÿ%s\n", 
	`¥_«me
(
addr
));

1479 
	`πio˘l
(
addr
, 
SIOCADDRT
);

1480 
	}
}

1483 
	$dñ_rouã
(
ö_addr
 
addr
)

1485 i‡(
debug
)

1486 
	`logdebug
("DñëêdeÁu…ÑouãÅÿ%s\n", 
	`¥_«me
(
addr
));

1487 
	`πio˘l
(
addr
, 
SIOCDELRT
);

1488 
	}
}

1491 
	$πio˘l
(
ö_addr
 
addr
, 
›
)

1493 
sock
;

1494 
πíåy
 
π
;

1495 
sockaddr_ö
 *
sö
;

1497 
	`mem£t
((*)&
π
, 0, (
πíåy
));

1498 
π
.
π_d°
.
ß_Ámûy
 = 
AF_INET
;

1499 
π
.
π_g©eway
.
ß_Ámûy
 = 
AF_INET
;

1500 
π
.
π_gímask
.
ß_Ámûy
 = 
AF_INET
;

1501 
sö
 = (
sockaddr_ö
 *)
	`ALLIGN
(&
π
.
π_g©eway
);

1502 
sö
->
sö_addr
 = 
addr
;

1503 
π
.
π_Êags
 = 
RTF_UP
 | 
RTF_GATEWAY
;

1505 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1506 i‡(
sock
 < 0) {

1507 
	`log≥º‹
("rtioctl: socket");

1510 i‡(
	`io˘l
(
sock
, 
›
, (*)&
π
) < 0) {

1511 i‡(!(
›
 =
SIOCADDRT
 && 
î∫o
 =
EEXIST
))

1512 
	`log≥º‹
("ioctl (add/deleteÑoute)");

1514 (Ë
	`˛o£
(
sock
);

1515 
	}
}

1521 
	$öôlog
()

1523 
loggög
++;

1524 
	`›ílog
("ö.rdiscd", 
LOG_PID
 | 
LOG_CONS
, 
LOG_DAEMON
);

1525 
	}
}

1529 
	$log≥º‹
(*
°r
)

1531 i‡(
loggög
)

1532 
	`sy¶og
(
LOG_ERR
, "%s: %m", 
°r
);

1534 (Ë
	`Ârötf
(
°dîr
, "%s: %s\n", 
°r
, 
	`°ªº‹
(
î∫o
));

1535 
	}
}

	@iputils-s20140519/tftp.h

36 #i‚de‡
_ARPA_TFTP_H


37 
	#_ARPA_TFTP_H


	)

41 
	#SEGSIZE
 512

	)

46 
	#RRQ
 01

	)

47 
	#WRQ
 02

	)

48 
	#DATA
 03

	)

49 
	#ACK
 04

	)

50 
	#ERROR
 05

	)

52 
	st·phdr
 {

53 
	mth_›code
;

55 
	mtu_block
;

56 
	mtu_code
;

57 
	mtu_°uff
[1];

58 } 
	mth_u
;

59 
	mth_d©a
[1];

62 
	#th_block
 
th_u
.
tu_block


	)

63 
	#th_code
 
th_u
.
tu_code


	)

64 
	#th_°uff
 
th_u
.
tu_°uff


	)

65 
	#th_msg
 
th_d©a


	)

70 
	#EUNDEF
 0

	)

71 
	#ENOTFOUND
 1

	)

72 
	#EACCESS
 2

	)

73 
	#ENOSPACE
 3

	)

74 
	#EBADOP
 4

	)

75 
	#EBADID
 5

	)

76 
	#EEXISTS
 6

	)

77 
	#ENOUSER
 7

	)

80 
ªadô
(
FILE
 * 
fûe
, 
t·phdr
 **
dµ
, 
c⁄vît
);

81 
ªad_ahód
(
FILE
 *
fûe
, 
c⁄vît
);

82 
wrôeô
(
FILE
 *
fûe
, 
t·phdr
 **
dµ
, 
˘
, 
c⁄vît
);

83 
wrôe_behöd
(
FILE
 *
fûe
, 
c⁄vît
);

84 
synch√t
(
f
);

85 
t·phdr
 *
w_öô
();

86 
t·phdr
 *
r_öô
();

	@iputils-s20140519/tftpd.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/io˘l.h
>

41 
	~<sys/°©.h
>

42 
	~<uni°d.h
>

43 
	~<sig«l.h
>

44 
	~<f˙é.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<√tdb.h
>

50 
	~<£tjmp.h
>

51 
	~<sy¶og.h
>

52 
	~<°dio.h
>

53 
	~<î∫o.h
>

54 
	~<˘y≥.h
>

55 
	~<°rög.h
>

56 
	~<°dlib.h
>

58 
	~"t·p.h
"

60 #i‚de‡
MSG_CONFIRM


61 
	#MSG_CONFIRM
 0

	)

62 #w¨nög 
PÀa£
, 
upgøde
 
kî√l
, 
Ÿhîwi£
 
this
 
t·pd
 
has
 
no
 
adv™èges
.

65 
	#TIMEOUT
 5

	)

67 
	g≥î
;

68 
	gªxmtvÆ
 = 
TIMEOUT
;

69 
	gmaxtimeout
 = 5*
TIMEOUT
;

71 
	#PKTSIZE
 
SEGSIZE
+4

	)

72 
	gbuf
[
PKTSIZE
];

73 
	gackbuf
[
PKTSIZE
];

75 
sockaddr
 
	mß
;

76 
sockaddr_ö
 
	msö
;

77 
sockaddr_ö6
 
	msö6
;

78 } 
	g‰om
;

79 
sockÀn_t
 
	g‰omÀn
;

81 
	#MAXARG
 1

	)

82 *
	gdús
[
MAXARG
+1];

84 
	$t·p
(
t·phdr
 *
ç
, 
size
Ë
	`__©åibuã__
((
n‹ëu∫
));

85 
	`«k
(
îr‹
);

86 
	`vÆid©e_ac˚ss
(*
fûíame
, 
mode
);

88 
f‹m©s
;

90 
	`£ndfûe
(
f‹m©s
 *
pf
);

91 
	`ªcvfûe
(
f‹m©s
 *
pf
);

94 
	$maö
(
ac
, **
av
)

96 
t·phdr
 *
ç
;

97 
n
 = 0;

98 
⁄
 = 1;

100 
	`›ílog
("t·pd", 
LOG_PID
, 
LOG_DAEMON
);

103 i‡(
	`gëeuid
() == 0) {

104 i‡(
	`£tgid
(65534Ë|| 
	`£tuid
(65534)) {

105 
	`sy¶og
(
LOG_ERR
, "set*id failed: %m\n");

106 
	`exô
(1);

110 
ac
--; 
av
++;

111 
ac
-- > 0 && 
n
 < 
MAXARG
)

112 
dús
[
n
++] = *
av
++;

114 i‡(
	`io˘l
(0, 
FIONBIO
, &
⁄
) < 0) {

115 
	`sy¶og
(
LOG_ERR
, "ioctl(FIONBIO): %m\n");

116 
	`exô
(1);

118 
‰omÀn
 =  (
‰om
);

119 
n
 = 
	`ªcv‰om
(0, 
buf
,  (buf), 0,

120 (
sockaddr
 *)&
‰om
, &
‰omÀn
);

121 i‡(
n
 < 0) {

122 i‡(
î∫o
 !
EAGAIN
)

123 
	`sy¶og
(
LOG_ERR
, "recvfrom: %m\n");

124 
	`exô
(1);

141 
pid
;

142 
i
;

143 
sockÀn_t
 
j
;

145 
i
 = 1; i < 20; i++) {

146 
pid
 = 
	`f‹k
();

147 i‡(
pid
 < 0) {

148 
	`¶ìp
(
i
);

159 
j
 =  
‰om
;

160 
i
 = 
	`ªcv‰om
(0, 
buf
,  (buf), 0,

161 (
sockaddr
 *)&
‰om
, &
j
);

162 i‡(
i
 > 0) {

163 
n
 = 
i
;

164 
‰omÀn
 = 
j
;

170 i‡(
pid
 < 0) {

171 
	`sy¶og
(
LOG_ERR
, "fork: %m\n");

172 
	`exô
(1);

173 } i‡(
pid
 != 0) {

174 
	`exô
(0);

177 
	`Æ¨m
(0);

178 
	`˛o£
(0);

179 
	`˛o£
(1);

180 
≥î
 = 
	`sockë
(
‰om
.
ß
.
ß_Ámûy
, 
SOCK_DGRAM
, 0);

181 i‡(
≥î
 < 0) {

182 
	`sy¶og
(
LOG_ERR
, "socket: %m\n");

183 
	`exô
(1);

185 i‡(
	`c⁄√˘
(
≥î
, (
sockaddr
 *)&
‰om
, (from)) < 0) {

186 
	`sy¶og
(
LOG_ERR
, "connect: %m\n");

187 
	`exô
(1);

189 
ç
 = (
t·phdr
 *)
buf
;

190 
ç
->
th_›code
 = 
	`¡ohs
(tp->th_opcode);

191 i‡(
ç
->
th_›code
 =
RRQ
 ||Åp->th_›codê=
WRQ
)

192 
	`t·p
(
ç
, 
n
);

193 
	`exô
(1);

194 
	}
}

196 
	sf‹m©s
 {

197 *
	mf_mode
;

198 (*
	mf_vÆid©e
)(*
	mfûíame
, 
	mmode
);

199 (*
	mf_£nd
)(
	mf‹m©s
*);

200 (*
	mf_ªcv
)(
	mf‹m©s
*);

201 
	mf_c⁄vît
;

202 } 
	gf‹m©s
[] = {

203 { "√èscii", 
vÆid©e_ac˚ss
, 
£ndfûe
, 
ªcvfûe
, 1 },

204 { "o˘ë", 
vÆid©e_ac˚ss
, 
£ndfûe
, 
ªcvfûe
, 0 },

205 #ifde‡
nŸdef


206 { "maû", 
vÆid©e_u£r
, 
£ndmaû
, 
ªcvmaû
, 1 },

214 
	$t·p
(
t·phdr
 *
ç
, 
size
)

216 *
˝
;

217 
fú°
 = 1, 
ecode
;

218 
f‹m©s
 *
pf
;

219 *
fûíame
, *
mode
 = 
NULL
;

221 
fûíame
 = 
˝
 = 
ç
->
th_°uff
;

222 
agaö
:

223 
˝
 < 
buf
 + 
size
) {

224 i‡(*
˝
 == '\0')

226 
˝
++;

228 i‡(*
˝
 != '\0') {

229 
	`«k
(
EBADOP
);

230 
	`exô
(1);

232 i‡(
fú°
) {

233 
mode
 = ++
˝
;

234 
fú°
 = 0;

235 
agaö
;

237 
˝
 = 
mode
; *cp; cp++)

238 i‡(
	`isuµî
(*
˝
))

239 *
˝
 = 
	`tﬁowî
(*cp);

240 
pf
 = 
f‹m©s
;Öf->
f_mode
;Öf++)

241 i‡(
	`°rcmp
(
pf
->
f_mode
, 
mode
) == 0)

243 i‡(
pf
->
f_mode
 == 0) {

244 
	`«k
(
EBADOP
);

245 
	`exô
(1);

247 
ecode
 = (*
pf
->
f_vÆid©e
)(
fûíame
, 
ç
->
th_›code
);

248 i‡(
ecode
) {

249 
	`«k
(
ecode
);

250 
	`exô
(1);

252 i‡(
ç
->
th_›code
 =
WRQ
)

253 (*
pf
->
f_ªcv
)(pf);

255 (*
pf
->
f_£nd
)(pf);

256 
	`exô
(0);

257 
	}
}

260 
FILE
 *
	gfûe
;

273 
	$vÆid©e_ac˚ss
(*
fûíame
, 
mode
)

275 
°©
 
°buf
;

276 
fd
;

277 *
˝
;

278 
‚amebuf
[1024+512];

280 
˝
 = 
fûíame
; *cp; cp++) {

281 if(*
˝
 ='.' && (˝ =
fûíame
 || 
	`°∫cmp
(cp-1, "/../", 4) == 0)) {

282 
	`sy¶og
(
LOG_ERR
, "badÖ©h %s", 
fûíame
);

283 (
EACCESS
);

287 i‡(*
fûíame
 == '/')

288 
fûíame
++;

290 i‡(!*
dús
) {

291 
	`sy¶og
(
LOG_ERR
, "no dirs");

292  
EACCESS
;

294 
	`¢¥ötf
(
‚amebuf
, (‚amebuf)-1, "%s/%s", *
dús
, 
fûíame
);

295 
fûíame
 = 
‚amebuf
;

297 i‡(
	`°©
(
fûíame
, &
°buf
) < 0) {

298 
	`sy¶og
(
LOG_ERR
, "°© %†: %m", 
fûíame
);

299  (
î∫o
 =
ENOENT
 ? 
ENOTFOUND
 : 
EACCESS
);

301 i‡(
mode
 =
RRQ
) {

302 i‡((
°buf
.
°_mode
&(
S_IREAD
 >> 6)) == 0) {

303 
	`sy¶og
(
LOG_ERR
, "nŸÑódabÀ %s", 
fûíame
);

304  (
EACCESS
);

307 i‡((
°buf
.
°_mode
&(
S_IWRITE
 >> 6)) == 0) {

308 
	`sy¶og
(
LOG_ERR
, "nŸ wrôabÀ %s", 
fûíame
);

309  (
EACCESS
);

312 
fd
 = 
	`›í
(
fûíame
, 
mode
 =
RRQ
 ? 0 : 1);

313 i‡(
fd
 < 0) {

314 
	`sy¶og
(
LOG_ERR
, "ˇ¬Ÿ o≥¿%s: %m", 
fûíame
);

315  (
î∫o
 + 100);

317 
fûe
 = 
	`fd›í
(
fd
, (
mode
 =
RRQ
)? "r":"w");

318 i‡(
fûe
 =
NULL
) {

319  
î∫o
+100;

322 
	}
}

324 
	gc⁄fúmed
;

325 
	gtimeout
;

326 
jmp_buf
 
	gtimeoutbuf
;

328 
	$timî
(
signo
)

330 
c⁄fúmed
 = 0;

331 
timeout
 +
ªxmtvÆ
;

332 i‡(
timeout
 >
maxtimeout
)

333 
	`exô
(1);

334 
	`l⁄gjmp
(
timeoutbuf
, 1);

335 
	}
}

340 
	$£ndfûe
(
f‹m©s
 *
pf
)

342 
t·phdr
 *
dp
;

343 
t·phdr
 *
≠
;

344 vﬁ©ûê
block
 = 1;

345 
size
, 
n
;

347 
c⁄fúmed
 = 0;

348 
	`sig«l
(
SIGALRM
, 
timî
);

349 
dp
 = 
	`r_öô
();

350 
≠
 = (
t·phdr
 *)
ackbuf
;

352 
size
 = 
	`ªadô
(
fûe
, &
dp
, 
pf
->
f_c⁄vît
);

353 i‡(
size
 < 0) {

354 
	`«k
(
î∫o
 + 100);

355 
ab‹t
;

357 
dp
->
th_›code
 = 
	`ht⁄s
(()
DATA
);

358 
dp
->
th_block
 = 
	`ht⁄s
(()
block
);

359 
timeout
 = 0;

360 (Ë
	`£tjmp
(
timeoutbuf
);

362 
£nd_d©a
:

363 i‡(
	`£nd
(
≥î
, 
dp
, 
size
 + 4, 
c⁄fúmed
) != size + 4) {

364 
	`sy¶og
(
LOG_ERR
, "tftpd: write: %m\n");

365 
ab‹t
;

367 
c⁄fúmed
 = 0;

368 
	`ªad_ahód
(
fûe
, 
pf
->
f_c⁄vît
);

370 
	`Æ¨m
(
ªxmtvÆ
);

371 
n
 = 
	`ªcv
(
≥î
, 
ackbuf
,  (ackbuf), 0);

372 
	`Æ¨m
(0);

373 i‡(
n
 < 0) {

374 
	`sy¶og
(
LOG_ERR
, "tftpd:Ñead: %m\n");

375 
ab‹t
;

377 
≠
->
th_›code
 = 
	`¡ohs
(()ap->th_opcode);

378 
≠
->
th_block
 = 
	`¡ohs
(()ap->th_block);

380 i‡(
≠
->
th_›code
 =
ERROR
)

381 
ab‹t
;

383 i‡(
≠
->
th_›code
 =
ACK
) {

384 i‡(
≠
->
th_block
 =
block
) {

385 
c⁄fúmed
 = 
MSG_CONFIRM
;

389 
	`synch√t
(
≥î
);

390 i‡(
≠
->
th_block
 =(
block
 -1)) {

391 
£nd_d©a
;

396 
block
++;

397 } 
size
 =
SEGSIZE
);

398 
ab‹t
:

399 (Ë
	`f˛o£
(
fûe
);

400 
	}
}

402 
	$ju°quô
(
signo
)

404 
	`exô
(0);

405 
	}
}

411 
	$ªcvfûe
(
f‹m©s
 *
pf
)

413 
t·phdr
 *
dp
;

414 
t·phdr
 *
≠
;

415 vﬁ©ûê
block
 = 0, 
n
, 
size
;

417 
c⁄fúmed
 = 0;

418 
	`sig«l
(
SIGALRM
, 
timî
);

419 
dp
 = 
	`w_öô
();

420 
≠
 = (
t·phdr
 *)
ackbuf
;

422 
timeout
 = 0;

423 
≠
->
th_›code
 = 
	`ht⁄s
(()
ACK
);

424 
≠
->
th_block
 = 
	`ht⁄s
(()
block
);

425 
block
++;

426 (Ë
	`£tjmp
(
timeoutbuf
);

427 
£nd_ack
:

428 i‡(
	`£nd
(
≥î
, 
ackbuf
, 4, 
c⁄fúmed
) != 4) {

429 
	`sy¶og
(
LOG_ERR
, "tftpd: write: %m\n");

430 
ab‹t
;

432 
c⁄fúmed
 = 0;

433 
	`wrôe_behöd
(
fûe
, 
pf
->
f_c⁄vît
);

435 
	`Æ¨m
(
ªxmtvÆ
);

436 
n
 = 
	`ªcv
(
≥î
, 
dp
, 
PKTSIZE
, 0);

437 
	`Æ¨m
(0);

438 i‡(
n
 < 0) {

439 
	`sy¶og
(
LOG_ERR
, "tftpd:Ñead: %m\n");

440 
ab‹t
;

442 
dp
->
th_›code
 = 
	`¡ohs
(()dp->th_opcode);

443 
dp
->
th_block
 = 
	`¡ohs
(()dp->th_block);

444 i‡(
dp
->
th_›code
 =
ERROR
)

445 
ab‹t
;

446 i‡(
dp
->
th_›code
 =
DATA
) {

447 i‡(
dp
->
th_block
 =
block
) {

448 
c⁄fúmed
 = 
MSG_CONFIRM
;

452 (Ë
	`synch√t
(
≥î
);

453 i‡(
dp
->
th_block
 =(
block
-1))

454 
£nd_ack
;

458 
size
 = 
	`wrôeô
(
fûe
, &
dp
, 
n
 - 4, 
pf
->
f_c⁄vît
);

459 i‡(
size
 !(
n
-4)) {

460 i‡(
size
 < 0Ë
	`«k
(
î∫o
 + 100);

461 
	`«k
(
ENOSPACE
);

462 
ab‹t
;

464 } 
size
 =
SEGSIZE
);

465 
	`wrôe_behöd
(
fûe
, 
pf
->
f_c⁄vît
);

466 (Ë
	`f˛o£
(
fûe
);

468 
≠
->
th_›code
 = 
	`ht⁄s
(()
ACK
);

469 
≠
->
th_block
 = 
	`ht⁄s
(()(
block
));

470 (Ë
	`£nd
(
≥î
, 
ackbuf
, 4, 
c⁄fúmed
);

472 
	`sig«l
(
SIGALRM
, 
ju°quô
);

473 
	`Æ¨m
(
ªxmtvÆ
);

474 
n
 = 
	`ªcv
(
≥î
, 
buf
,  (buf), 0);

475 
	`Æ¨m
(0);

476 i‡(
n
 >= 4 &&

477 
dp
->
th_›code
 =
DATA
 &&

478 
block
 =
dp
->
th_block
) {

479 (Ë
	`£nd
(
≥î
, 
ackbuf
, 4, 0);

481 
ab‹t
:

483 
	}
}

485 
	sîrmsg
 {

486 
	me_code
;

487 *
	me_msg
;

488 } 
	gîrmsgs
[] = {

489 { 
EUNDEF
, "UndefinedÉrror code" },

490 { 
ENOTFOUND
, "FileÇot found" },

491 { 
EACCESS
, "Access violation" },

492 { 
ENOSPACE
, "Disk full orállocationÉxceeded" },

493 { 
EBADOP
, "Illegal TFTP operation" },

494 { 
EBADID
, "UnknownÅransfer ID" },

495 { 
EEXISTS
, "FileálreadyÉxists" },

496 { 
ENOUSER
, "No such user" },

506 
	$«k
(
îr‹
)

508 
t·phdr
 *
ç
;

509 
Àngth
;

510 
îrmsg
 *
≥
;

512 
ç
 = (
t·phdr
 *)
buf
;

513 
ç
->
th_›code
 = 
	`ht⁄s
(()
ERROR
);

514 
ç
->
th_code
 = 
	`ht⁄s
(()
îr‹
);

515 
≥
 = 
îrmsgs
;Öe->
e_code
 >= 0;Öe++)

516 i‡(
≥
->
e_code
 =
îr‹
)

518 i‡(
≥
->
e_code
 < 0) {

519 
≥
->
e_msg
 = 
	`°ªº‹
(
îr‹
 - 100);

520 
ç
->
th_code
 = 
EUNDEF
;

522 
	`°r˝y
(
ç
->
th_msg
, 
≥
->
e_msg
);

523 
Àngth
 = 
	`°æí
(
≥
->
e_msg
);

524 
ç
->
th_msg
[
Àngth
] = '\0';

525 
Àngth
 += 5;

526 i‡(
	`£nd
(
≥î
, 
buf
, 
Àngth
, 0) !=Üength)

527 
	`sy¶og
(
LOG_ERR
, "nak: %m\n");

528 
	}
}

	@iputils-s20140519/tftpsubs.c

44 
	~<sys/ty≥s.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/io˘l.h
>

47 
	~<√töë/ö.h
>

48 
	~<uni°d.h
>

49 
	~<°dio.h
>

51 
	~"t·p.h
"

53 
	#PKTSIZE
 
SEGSIZE
+4

	)

55 
	sbf
 {

56 
	mcou¡î
;

57 
	mbuf
[
PKTSIZE
];

58 } 
	gbfs
[2];

61 
	#BF_ALLOC
 -3

	)

62 
	#BF_FREE
 -2

	)

65 
	g√xt⁄e
;

66 
	gcuºít
;

69 
	g√wlöe
 = 0;

70 
	g¥evch¨
 = -1;

72 
t·phdr
 *
rw_öô
();

74 
t·phdr
 *
	$w_öô
(Ë{  
	`rw_öô
(0); 
	}
}

75 
t·phdr
 *
	$r_öô
(Ë{  
	`rw_öô
(1); 
	}
}

79 
t·phdr
 *
	$rw_öô
(
x
)

81 
√wlöe
 = 0;

82 
¥evch¨
 = -1;

83 
bfs
[0].
cou¡î
 = 
BF_ALLOC
;

84 
cuºít
 = 0;

85 
bfs
[1].
cou¡î
 = 
BF_FREE
;

86 
√xt⁄e
 = 
x
;

87  (
t·phdr
 *)
bfs
[0].
buf
;

88 
	}
}

94 
	$ªadô
(
FILE
 * 
fûe
, 
t·phdr
 **
dµ
, 
c⁄vît
)

96 
bf
 *
b
;

98 
bfs
[
cuºít
].
cou¡î
 = 
BF_FREE
;

99 
cuºít
 = !current;

101 
b
 = &
bfs
[
cuºít
];

102 i‡(
b
->
cou¡î
 =
BF_FREE
)

103 
	`ªad_ahód
(
fûe
, 
c⁄vît
);

105 
	`as£π
(
b
->
cou¡î
 !
BF_FREE
);

107 *
dµ
 = (
t·phdr
 *)
b
->
buf
;

108  
b
->
cou¡î
;

109 
	}
}

115 
	$ªad_ahód
(
FILE
 *
fûe
, 
c⁄vît
)

117 
i
;

118 *
p
;

119 
c
;

120 
bf
 *
b
;

121 
t·phdr
 *
dp
;

123 
b
 = &
bfs
[
√xt⁄e
];

124 i‡(
b
->
cou¡î
 !
BF_FREE
)

126 
√xt⁄e
 = !nextone;

128 
dp
 = (
t·phdr
 *)
b
->
buf
;

130 i‡(
c⁄vît
 == 0) {

131 
b
->
cou¡î
 = 
	`ªad
(
	`fûío
(
fûe
), 
dp
->
th_d©a
, 
SEGSIZE
);

135 
p
 = 
dp
->
th_d©a
;

136 
i
 = 0 ; i < 
SEGSIZE
; i++) {

137 i‡(
√wlöe
) {

138 i‡(
¥evch¨
 == '\n')

139 
c
 = '\n';

140 
c
 = '\0';

141 
√wlöe
 = 0;

144 
c
 = 
	`gëc
(
fûe
);

145 i‡(
c
 =
EOF
) ;

146 i‡(
c
 == '\n' || c == '\r') {

147 
¥evch¨
 = 
c
;

148 
c
 = '\r';

149 
√wlöe
 = 1;

152 *
p
++ = 
c
;

154 
b
->
cou¡î
 = ()(
p
 - 
dp
->
th_d©a
);

155 
	}
}

161 
	$wrôeô
(
FILE
 *
fûe
, 
t·phdr
 **
dµ
, 
˘
, 
c⁄vît
)

163 
bfs
[
cuºít
].
cou¡î
 = 
˘
;

164 
cuºít
 = !current;

165 i‡(
bfs
[
cuºít
].
cou¡î
 !
BF_FREE
)

166 
	`wrôe_behöd
(
fûe
, 
c⁄vît
);

167 
bfs
[
cuºít
].
cou¡î
 = 
BF_ALLOC
;

168 *
dµ
 = (
t·phdr
 *)
bfs
[
cuºít
].
buf
;

169  
˘
;

170 
	}
}

178 
	$wrôe_behöd
(
FILE
 *
fûe
, 
c⁄vît
)

180 *
buf
;

181 
cou¡
;

182 
˘
;

183 *
p
;

184 
c
;

185 
bf
 *
b
;

186 
t·phdr
 *
dp
;

188 
b
 = &
bfs
[
√xt⁄e
];

189 i‡(
b
->
cou¡î
 < -1)

192 
cou¡
 = 
b
->
cou¡î
;

193 
b
->
cou¡î
 = 
BF_FREE
;

194 
dp
 = (
t·phdr
 *)
b
->
buf
;

195 
√xt⁄e
 = !nextone;

196 
buf
 = 
dp
->
th_d©a
;

198 i‡(
cou¡
 <= 0)  -1;

200 i‡(
c⁄vît
 == 0)

201  
	`wrôe
(
	`fûío
(
fûe
), 
buf
, 
cou¡
);

203 
p
 = 
buf
;

204 
˘
 = 
cou¡
;

205 
˘
--) {

206 
c
 = *
p
++;

207 i‡(
¥evch¨
 == '\r') {

208 i‡(
c
 == '\n')

209 
	`f£ek
(
fûe
, -1, 1);

211 i‡(
c
 == '\0')

212 
skùô
;

215 
	`putc
(
c
, 
fûe
);

216 
skùô
:

217 
¥evch¨
 = 
c
;

219  
cou¡
;

220 
	}
}

234 
	$synch√t
(
f
)

236 
j
 = 0;

237 
dummy
;

240 i‡(
	`ªcv
(
f
, &
dummy
, 1, 
MSG_DONTWAIT
) < 0)

242 
j
++;

244  
j
;

245 
	}
}

	@iputils-s20140519/tracepath.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sys/sockë.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/îrqueue.h
>

18 
	~<î∫o.h
>

19 
	~<°rög.h
>

20 
	~<√tdb.h
>

21 
	~<limôs.h
>

22 
	~<√töë/ö.h
>

23 
	~<ªsﬁv.h
>

24 
	~<sys/time.h
>

25 
	~<sys/uio.h
>

26 
	~<¨∑/öë.h
>

27 #ifde‡
USE_IDN


28 
	~<id«.h
>

29 
	~<loˇÀ.h
>

32 #i‚de‡
IP_PMTUDISC_PROBE


33 
	#IP_PMTUDISC_PROBE
 3

	)

36 
	#MAX_HOPS_LIMIT
 255

	)

37 
	#MAX_HOPS_DEFAULT
 30

	)

39 
	shhi°‹y


41 
	mh›s
;

42 
timevÆ
 
	m£ndtime
;

45 
hhi°‹y
 
	ghis
[64];

46 
	ghi•å
;

48 
sockaddr_ö
 
	gèrgë
;

49 
__u16
 
	gba£_p‹t
;

50 
	gmax_h›s
 = 
MAX_HOPS_DEFAULT
;

52 c⁄° 
	govîhód
 = 28;

53 
	gmtu
 = 65535;

54 *
	gpktbuf
;

55 
	gh›s_to
 = -1;

56 
	gh›s_‰om
 = -1;

57 
	gno_ªsﬁve
 = 0;

58 
	gshow_bŸh
 = 0;

60 
	#HOST_COLUMN_SIZE
 52

	)

62 
	s¥obehdr


64 
__u32
 
	mâl
;

65 
timevÆ
 
	mtv
;

68 
	$d©a_waô
(
fd
)

70 
fd_£t
 
fds
;

71 
timevÆ
 
tv
;

72 
	`FD_ZERO
(&
fds
);

73 
	`FD_SET
(
fd
, &
fds
);

74 
tv
.
tv_£c
 = 1;

75 
tv
.
tv_u£c
 = 0;

76 
	`£À˘
(
fd
+1, &
fds
, 
NULL
, NULL, &
tv
);

77 
	}
}

79 
	$¥öt_ho°
(c⁄° *
a
, c⁄° *
b
, 
bŸh
)

81 
∂í
;

82 
∂í
 = 
	`¥ötf
("%s", 
a
);

83 i‡(
bŸh
)

84 
∂í
 +
	`¥ötf
(" (%s)", 
b
);

85 i‡(
∂í
 >
HOST_COLUMN_SIZE
)

86 
∂í
 = 
HOST_COLUMN_SIZE
 - 1;

87 
	`¥ötf
("%*s", 
HOST_COLUMN_SIZE
 - 
∂í
, "");

88 
	}
}

90 
	$ªcvîr
(
fd
, 
âl
)

92 
ªs
;

93 
¥obehdr
 
rcvbuf
;

94 
cbuf
[512];

95 
iovec
 
iov
;

96 
msghdr
 
msg
;

97 
cmsghdr
 *
cmsg
;

98 
sock_exãnded_îr
 *
e
;

99 
sockaddr_ö
 
addr
;

100 
timevÆ
 
tv
;

101 
timevÆ
 *
ªâv
;

102 
¶Ÿ
;

103 
ªth›s
;

104 
¢dh›s
;

105 
¥ogªss
 = -1;

106 
brokí_rouãr
;

108 
ª°¨t
:

109 
	`mem£t
(&
rcvbuf
, -1, (rcvbuf));

110 
iov
.
iov_ba£
 = &
rcvbuf
;

111 
iov
.
iov_Àn
 = (
rcvbuf
);

112 
msg
.
msg_«me
 = (
__u8
*)&
addr
;

113 
msg
.
msg_«mñí
 = (
addr
);

114 
msg
.
msg_iov
 = &
iov
;

115 
msg
.
msg_iovÀn
 = 1;

116 
msg
.
msg_Êags
 = 0;

117 
msg
.
msg_c⁄åﬁ
 = 
cbuf
;

118 
msg
.
msg_c⁄åﬁÀn
 = (
cbuf
);

120 
	`gëtimeofday
(&
tv
, 
NULL
);

121 
ªs
 = 
	`ªcvmsg
(
fd
, &
msg
, 
MSG_ERRQUEUE
);

122 i‡(
ªs
 < 0) {

123 i‡(
î∫o
 =
EAGAIN
)

124  
¥ogªss
;

125 
ª°¨t
;

128 
¥ogªss
 = 
mtu
;

130 
ªth›s
 = -1;

131 
¢dh›s
 = -1;

132 
e
 = 
NULL
;

133 
ªâv
 = 
NULL
;

134 
¶Ÿ
 = 
	`¡ohs
(
addr
.
sö_p‹t
Ë- 
ba£_p‹t
;

135 i‡(
¶Ÿ
>=0 && slŸ < 63 && 
his
[¶Ÿ].
h›s
) {

136 
¢dh›s
 = 
his
[
¶Ÿ
].
h›s
;

137 
ªâv
 = &
his
[
¶Ÿ
].
£ndtime
;

138 
his
[
¶Ÿ
].
h›s
 = 0;

140 
brokí_rouãr
 = 0;

141 i‡(
ªs
 =(
rcvbuf
)) {

142 i‡(
rcvbuf
.
âl
 =0 ||Ñcvbuf.
tv
.
tv_£c
 == 0) {

143 
brokí_rouãr
 = 1;

145 
¢dh›s
 = 
rcvbuf
.
âl
;

146 
ªâv
 = &
rcvbuf
.
tv
;

150 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg; cmsg = 
	`CMSG_NXTHDR
(&msg, cmsg)) {

151 i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_IP
) {

152 i‡(
cmsg
->
cmsg_ty≥
 =
IP_RECVERR
) {

153 
e
 = (
sock_exãnded_îr
 *Ë
	`CMSG_DATA
(
cmsg
);

154 } i‡(
cmsg
->
cmsg_ty≥
 =
IP_TTL
) {

155 
	`mem˝y
(&
ªth›s
, 
	`CMSG_DATA
(
cmsg
), (rethops));

157 
	`¥ötf
("cmsg:%d\¿", 
cmsg
->
cmsg_ty≥
);

161 i‡(
e
 =
NULL
) {

162 
	`¥ötf
("no info\n");

165 i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_LOCAL
) {

166 
	`¥ötf
("%2d?: %*†", 
âl
, -(
HOST_COLUMN_SIZE
 - 1), "[LOCALHOST]");

167 } i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP
) {

168 
abuf
[128];

169 
sockaddr_ö
 *
sö
 = (sockaddr_ö*)(
e
+1);

170 
ho°ít
 *
h
 = 
NULL
;

171 *
idn
 = 
NULL
;

173 
	`öë_¡›
(
AF_INET
, &
sö
->
sö_addr
, 
abuf
, (abuf));

175 i‡(
¢dh›s
>0)

176 
	`¥ötf
("%2d: ", 
¢dh›s
);

178 
	`¥ötf
("%2d?: ", 
âl
);

180 i‡(!
no_ªsﬁve
 || 
show_bŸh
) {

181 
	`fÊush
(
°dout
);

182 
h
 = 
	`gëho°byaddr
((*Ë&
sö
->
sö_addr
, (sö->sö_addr), 
AF_INET
);

185 #ifde‡
USE_IDN


186 i‡(
h
 && 
	`id«_to_unicode_lzlz
(h->
h_«me
, &
idn
, 0Ë!
IDNA_SUCCESS
)

187 
idn
 = 
NULL
;

189 i‡(
no_ªsﬁve
)

190 
	`¥öt_ho°
(
abuf
, 
h
 ? (
idn
 ? id¿: h->
h_«me
Ë:ábuf, 
show_bŸh
);

192 
	`¥öt_ho°
(
h
 ? (
idn
 ? id¿: h->
h_«me
Ë: 
abuf
,ábuf, 
show_bŸh
);

194 #ifde‡
USE_IDN


195 
	`‰ì
(
idn
);

199 i‡(
ªâv
) {

200 
diff
 = (
tv
.
tv_£c
-
ªâv
->tv_£c)*1000000+—v.
tv_u£c
-rettv->tv_usec);

201 
	`¥ötf
("%3d.%03dm†", 
diff
/1000, diff%1000);

202 i‡(
brokí_rouãr
)

203 
	`¥ötf
("(This brokenÑouterÑeturned corruptedÖayload) ");

206 i‡(
ªth›s
<=64)

207 
ªth›s
 = 65-rethops;

208 i‡(
ªth›s
<=128)

209 
ªth›s
 = 129-rethops;

211 
ªth›s
 = 256-rethops;

213 
e
->
ì_î∫o
) {

214 
ETIMEDOUT
:

215 
	`¥ötf
("\n");

217 
EMSGSIZE
:

218 
	`¥ötf
("pmtu %d\n", 
e
->
ì_öfo
);

219 
mtu
 = 
e
->
ì_öfo
;

220 
¥ogªss
 = 
mtu
;

222 
ECONNREFUSED
:

223 
	`¥ötf
("reached\n");

224 
h›s_to
 = 
¢dh›s
<0 ? 
âl
 : sndhops;

225 
h›s_‰om
 = 
ªth›s
;

227 
EPROTO
:

228 
	`¥ötf
("!P\n");

230 
EHOSTUNREACH
:

231 i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP
 &&

232 
e
->
ì_ty≥
 == 11 &&

233 
e
->
ì_code
 == 0) {

234 i‡(
ªth›s
>=0) {

235 i‡(
¢dh›s
>=0 && 
ªth›s
 != sndhops)

236 
	`¥ötf
("asymm %2d ", 
ªth›s
);

237 i‡(
¢dh›s
<0 && 
ªth›s
 !
âl
)

238 
	`¥ötf
("asymm %2d ", 
ªth›s
);

240 
	`¥ötf
("\n");

243 
	`¥ötf
("!H\n");

245 
ENETUNREACH
:

246 
	`¥ötf
("!N\n");

248 
EACCES
:

249 
	`¥ötf
("!A\n");

252 
	`¥ötf
("\n");

253 
î∫o
 = 
e
->
ì_î∫o
;

254 
	`≥º‹
("NET ERROR");

257 
ª°¨t
;

258 
	}
}

260 
	$¥obe_âl
(
fd
, 
âl
)

262 
i
;

263 
¥obehdr
 *
hdr
 = 
pktbuf
;

265 
	`mem£t
(
pktbuf
, 0, 
mtu
);

266 
ª°¨t
:

267 
i
=0; i<10; i++) {

268 
ªs
;

270 
hdr
->
âl
 =Åtl;

271 
èrgë
.
sö_p‹t
 = 
	`ht⁄s
(
ba£_p‹t
 + 
hi•å
);

272 
	`gëtimeofday
(&
hdr
->
tv
, 
NULL
);

273 
his
[
hi•å
].
h›s
 = 
âl
;

274 
his
[
hi•å
].
£ndtime
 = 
hdr
->
tv
;

275 i‡(
	`£ndto
(
fd
, 
pktbuf
, 
mtu
-
ovîhód
, 0, (
sockaddr
*)&
èrgë
, (target)) > 0)

277 
ªs
 = 
	`ªcvîr
(
fd
, 
âl
);

278 
his
[
hi•å
].
h›s
 = 0;

279 i‡(
ªs
==0)

281 i‡(
ªs
 > 0)

282 
ª°¨t
;

284 
hi•å
 = (hisptr + 1)&63;

286 i‡(
i
<10) {

287 
	`d©a_waô
(
fd
);

288 i‡(
	`ªcv
(
fd
, 
pktbuf
, 
mtu
, 
MSG_DONTWAIT
) > 0) {

289 
	`¥ötf
("%2d?:ÑïlyÑe˚ived 8)\n", 
âl
);

292  
	`ªcvîr
(
fd
, 
âl
);

295 
	`¥ötf
("%2d: síd faûed\n", 
âl
);

297 
	}
}

299 
	$ußge
(Ë
	`__©åibuã
((
n‹ëu∫
));

301 
	$ußge
()

303 
	`Ârötf
(
°dîr
, "Usage:Åracepath [-n] [-b] [-l <len>] [-pÖort] <destination>\n");

304 
	`exô
(-1);

305 
	}
}

308 
	$maö
(
¨gc
, **
¨gv
)

310 
ho°ít
 *
he
;

311 
fd
;

312 
⁄
;

313 
âl
;

314 *
p
;

315 
ch
;

316 #ifde‡
USE_IDN


317 
rc
;

318 
	`£éoˇÀ
(
LC_ALL
, "");

321 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "nbh?l:m:p:")Ë!
EOF
) {

322 
ch
) {

324 
no_ªsﬁve
 = 1;

327 
show_bŸh
 = 1;

330 i‡((
mtu
 = 
	`©oi
(
›èrg
)Ë<
ovîhód
) {

331 
	`Ârötf
(
°dîr
, "Error:Öktlen must be > %dánd <= %d.\n",

332 
ovîhód
, 
INT_MAX
);

333 
	`exô
(1);

337 
max_h›s
 = 
	`©oi
(
›èrg
);

338 i‡(
max_h›s
 < 0 || max_h›†> 
MAX_HOPS_LIMIT
) {

339 
	`Ârötf
(
°dîr
,

341 
MAX_HOPS_LIMIT
);

345 
ba£_p‹t
 = 
	`©oi
(
›èrg
);

348 
	`ußge
();

352 
¨gc
 -
›töd
;

353 
¨gv
 +
›töd
;

355 i‡(
¨gc
 != 1)

356 
	`ußge
();

358 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

359 i‡(
fd
 < 0) {

360 
	`≥º‹
("socket");

361 
	`exô
(1);

363 
èrgë
.
sö_Ámûy
 = 
AF_INET
;

366 i‡(!
ba£_p‹t
) {

367 
p
 = 
	`°rchr
(
¨gv
[0], '/');

368 i‡(
p
) {

369 *
p
 = 0;

370 
ba£_p‹t
 = 
	`©oi
(
p
+1);

372 
ba£_p‹t
 = 44444;

375 
p
 = 
¨gv
[0];

376 #ifde‡
USE_IDN


377 
rc
 = 
	`id«_to_ascii_lz
(
¨gv
[0], &
p
, 0);

378 i‡(
rc
 !
IDNA_SUCCESS
) {

379 
	`Ârötf
(
°dîr
, "IDNAÉncodög faûed: %s\n", 
	`id«_°ªº‹
(
rc
));

380 
	`exô
(2);

384 
he
 = 
	`gëho°by«me2
(
p
, 
AF_INET
);

385 i‡(
he
 =
NULL
) {

386 
	`hîr‹
("gethostbyname2");

387 
	`exô
(1);

390 #ifde‡
USE_IDN


391 
	`‰ì
(
p
);

394 
	`mem˝y
(&
èrgë
.
sö_addr
, 
he
->
h_addr
, 4);

396 
⁄
 = 
IP_PMTUDISC_PROBE
;

397 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_MTU_DISCOVER
, &
⁄
, (on)) &&

398 (
⁄
 = 
IP_PMTUDISC_DO
,

399 
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_MTU_DISCOVER
, &
⁄
, (on)))) {

400 
	`≥º‹
("IP_MTU_DISCOVER");

401 
	`exô
(1);

403 
⁄
 = 1;

404 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_RECVERR
, &
⁄
, (on))) {

405 
	`≥º‹
("IP_RECVERR");

406 
	`exô
(1);

408 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_RECVTTL
, &
⁄
, (on))) {

409 
	`≥º‹
("IP_RECVTTL");

410 
	`exô
(1);

413 
pktbuf
 = 
	`mÆloc
(
mtu
);

414 i‡(!
pktbuf
) {

415 
	`≥º‹
("malloc");

416 
	`exô
(1);

419 
âl
 = 1;Åé <
max_h›s
;Åtl++) {

420 
ªs
;

421 
i
;

423 
⁄
 = 
âl
;

424 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_TTL
, &
⁄
, (on))) {

425 
	`≥º‹
("IP_TTL");

426 
	`exô
(1);

429 
ª°¨t
:

430 
i
=0; i<3; i++) {

431 
ﬁd_mtu
;

433 
ﬁd_mtu
 = 
mtu
;

434 
ªs
 = 
	`¥obe_âl
(
fd
, 
âl
);

435 i‡(
mtu
 !
ﬁd_mtu
)

436 
ª°¨t
;

437 i‡(
ªs
 == 0)

438 
d⁄e
;

439 i‡(
ªs
 > 0)

443 i‡(
ªs
 < 0)

444 
	`¥ötf
("%2d:Çÿª∂y\n", 
âl
);

446 
	`¥ötf
(" Toÿm™y h›s:Ömtu %d\n", 
mtu
);

447 
d⁄e
:

448 
	`¥ötf
(" Resume:Ömtu %d ", 
mtu
);

449 i‡(
h›s_to
>=0)

450 
	`¥ötf
("h›†%d ", 
h›s_to
);

451 i‡(
h›s_‰om
>=0)

452 
	`¥ötf
("back %d ", 
h›s_‰om
);

453 
	`¥ötf
("\n");

454 
	`exô
(0);

455 
	}
}

	@iputils-s20140519/tracepath6.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<√töë/icmp6.h
>

19 
	~<löux/ty≥s.h
>

20 
	~<löux/îrqueue.h
>

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

23 
	~<√tdb.h
>

24 
	~<limôs.h
>

25 
	~<ªsﬁv.h
>

26 
	~<sys/time.h
>

27 
	~<sys/uio.h
>

28 
	~<¨∑/öë.h
>

30 #ifde‡
USE_IDN


31 
	~<id«.h
>

32 
	~<loˇÀ.h
>

35 #i‚de‡
SOL_IPV6


36 
	#SOL_IPV6
 
IPPROTO_IPV6


	)

39 #i‚de‡
IP_PMTUDISC_DO


40 
	#IP_PMTUDISC_DO
 3

	)

42 #i‚de‡
IPV6_PMTUDISC_DO


43 
	#IPV6_PMTUDISC_DO
 3

	)

46 
	#MAX_HOPS_LIMIT
 255

	)

47 
	#MAX_HOPS_DEFAULT
 30

	)

49 
	shhi°‹y


51 
	mh›s
;

52 
timevÆ
 
	m£ndtime
;

55 
hhi°‹y
 
	ghis
[64];

56 
	ghi•å
;

58 
ß_Ámûy_t
 
	gÁmûy
 = 
AF_INET6
;

59 
sockaddr_°‹age
 
	gèrgë
;

60 
sockÀn_t
 
	gèrgëÀn
;

61 
__u16
 
	gba£_p‹t
;

62 
	gmax_h›s
 = 
MAX_HOPS_DEFAULT
;

64 
	govîhód
;

65 
	gmtu
;

66 *
	gpktbuf
;

67 
	gh›s_to
 = -1;

68 
	gh›s_‰om
 = -1;

69 
	gno_ªsﬁve
 = 0;

70 
	gshow_bŸh
 = 0;

71 
	gm≠≥d
;

73 
	#HOST_COLUMN_SIZE
 52

	)

75 
	s¥obehdr


77 
__u32
 
	mâl
;

78 
timevÆ
 
	mtv
;

81 
	$d©a_waô
(
fd
)

83 
fd_£t
 
fds
;

84 
timevÆ
 
tv
;

85 
	`FD_ZERO
(&
fds
);

86 
	`FD_SET
(
fd
, &
fds
);

87 
tv
.
tv_£c
 = 1;

88 
tv
.
tv_u£c
 = 0;

89 
	`£À˘
(
fd
+1, &
fds
, 
NULL
, NULL, &
tv
);

90 
	}
}

92 
	$¥öt_ho°
(c⁄° *
a
, c⁄° *
b
, 
bŸh
)

94 
∂í
;

95 
∂í
 = 
	`¥ötf
("%s", 
a
);

96 i‡(
bŸh
)

97 
∂í
 +
	`¥ötf
(" (%s)", 
b
);

98 i‡(
∂í
 >
HOST_COLUMN_SIZE
)

99 
∂í
 = 
HOST_COLUMN_SIZE
 - 1;

100 
	`¥ötf
("%*s", 
HOST_COLUMN_SIZE
 - 
∂í
, "");

101 
	}
}

103 
	$ªcvîr
(
fd
, 
âl
)

105 
ªs
;

106 
¥obehdr
 
rcvbuf
;

107 
cbuf
[512];

108 
iovec
 
iov
;

109 
msghdr
 
msg
;

110 
cmsghdr
 *
cmsg
;

111 
sock_exãnded_îr
 *
e
;

112 
sockaddr_°‹age
 
addr
;

113 
timevÆ
 
tv
;

114 
timevÆ
 *
ªâv
;

115 
¶Ÿ
 = 0;

116 
ªth›s
;

117 
¢dh›s
;

118 
¥ogªss
 = -1;

119 
brokí_rouãr
;

121 
ª°¨t
:

122 
	`mem£t
(&
rcvbuf
, -1, (rcvbuf));

123 
iov
.
iov_ba£
 = &
rcvbuf
;

124 
iov
.
iov_Àn
 = (
rcvbuf
);

125 
msg
.
msg_«me
 = (
ˇddr_t
)&
addr
;

126 
msg
.
msg_«mñí
 = (
addr
);

127 
msg
.
msg_iov
 = &
iov
;

128 
msg
.
msg_iovÀn
 = 1;

129 
msg
.
msg_Êags
 = 0;

130 
msg
.
msg_c⁄åﬁ
 = 
cbuf
;

131 
msg
.
msg_c⁄åﬁÀn
 = (
cbuf
);

133 
	`gëtimeofday
(&
tv
, 
NULL
);

134 
ªs
 = 
	`ªcvmsg
(
fd
, &
msg
, 
MSG_ERRQUEUE
);

135 i‡(
ªs
 < 0) {

136 i‡(
î∫o
 =
EAGAIN
)

137  
¥ogªss
;

138 
ª°¨t
;

141 
¥ogªss
 = 
mtu
;

143 
ªth›s
 = -1;

144 
¢dh›s
 = -1;

145 
e
 = 
NULL
;

146 
ªâv
 = 
NULL
;

148 
¶Ÿ
 = -
ba£_p‹t
;

149 
Ámûy
) {

150 
AF_INET6
:

151 
¶Ÿ
 +
	`¡ohs
(((
sockaddr_ö6
 *)&
addr
)->
sö6_p‹t
);

153 
AF_INET
:

154 
¶Ÿ
 +
	`¡ohs
(((
sockaddr_ö
 *)&
addr
)->
sö_p‹t
);

158 i‡(
¶Ÿ
 >0 && slŸ < 63 && 
his
[¶Ÿ].
h›s
) {

159 
¢dh›s
 = 
his
[
¶Ÿ
].
h›s
;

160 
ªâv
 = &
his
[
¶Ÿ
].
£ndtime
;

161 
his
[
¶Ÿ
].
h›s
 = 0;

163 
brokí_rouãr
 = 0;

164 i‡(
ªs
 =(
rcvbuf
)) {

165 i‡(
rcvbuf
.
âl
 =0 ||Ñcvbuf.
tv
.
tv_£c
 == 0)

166 
brokí_rouãr
 = 1;

168 
¢dh›s
 = 
rcvbuf
.
âl
;

169 
ªâv
 = &
rcvbuf
.
tv
;

173 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg; cmsg = 
	`CMSG_NXTHDR
(&msg, cmsg)) {

174 
cmsg
->
cmsg_Àvñ
) {

175 
SOL_IPV6
:

176 
cmsg
->
cmsg_ty≥
) {

177 
IPV6_RECVERR
:

178 
e
 = (
sock_exãnded_îr
 *)
	`CMSG_DATA
(
cmsg
);

180 
IPV6_HOPLIMIT
:

181 #ifde‡
IPV6_2292HOPLIMIT


182 
IPV6_2292HOPLIMIT
:

184 
	`mem˝y
(&
ªth›s
, 
	`CMSG_DATA
(
cmsg
), (rethops));

187 
	`¥ötf
("cmsg6:%d\¿", 
cmsg
->
cmsg_ty≥
);

190 
SOL_IP
:

191 
cmsg
->
cmsg_ty≥
) {

192 
IP_RECVERR
:

193 
e
 = (
sock_exãnded_îr
 *)
	`CMSG_DATA
(
cmsg
);

195 
IP_TTL
:

196 
ªth›s
 = *(
__u8
*)
	`CMSG_DATA
(
cmsg
);

199 
	`¥ötf
("cmsg4:%d\¿", 
cmsg
->
cmsg_ty≥
);

203 i‡(
e
 =
NULL
) {

204 
	`¥ötf
("no info\n");

207 i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_LOCAL
)

208 
	`¥ötf
("%2d?: %-32†", 
âl
, "[LOCALHOST]");

209 i‡(
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP6
 ||

210 
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP
) {

211 
abuf
[
NI_MAXHOST
], 
hbuf
[NI_MAXHOST];

212 
sockaddr
 *
ß
 = (sockadd∏*)(
e
 + 1);

213 
sockÀn_t
 
ßÀn
;

215 i‡(
¢dh›s
>0)

216 
	`¥ötf
("%2d: ", 
¢dh›s
);

218 
	`¥ötf
("%2d?: ", 
âl
);

220 
ß
->
ß_Ámûy
) {

221 
AF_INET6
:

222 
ßÀn
 = (
sockaddr_ö6
);

224 
AF_INET
:

225 
ßÀn
 = (
sockaddr_ö
);

228 
ßÀn
 = 0;

231 i‡(
no_ªsﬁve
 || 
show_bŸh
) {

232 i‡(
	`gë«meöfo
(
ß
, 
ßÀn
,

233 
abuf
, ◊buf), 
NULL
, 0,

234 
NI_NUMERICHOST
))

235 
	`°r˝y
(
abuf
, "???");

237 
abuf
[0] = 0;

239 i‡(!
no_ªsﬁve
 || 
show_bŸh
) {

240 
	`fÊush
(
°dout
);

241 i‡(
	`gë«meöfo
(
ß
, 
ßÀn
,

242 
hbuf
, (hbuf), 
NULL
, 0,

244 #ifde‡
USE_IDN


245 | 
NI_IDN


248 
	`°r˝y
(
hbuf
, "???");

250 
hbuf
[0] = 0;

252 i‡(
no_ªsﬁve
)

253 
	`¥öt_ho°
(
abuf
, 
hbuf
, 
show_bŸh
);

255 
	`¥öt_ho°
(
hbuf
, 
abuf
, 
show_bŸh
);

258 i‡(
ªâv
) {

259 
diff
 = (
tv
.
tv_£c
-
ªâv
->tv_£c)*1000000+—v.
tv_u£c
-rettv->tv_usec);

260 
	`¥ötf
("%3d.%03dm†", 
diff
/1000, diff%1000);

261 i‡(
brokí_rouãr
)

262 
	`¥ötf
("(This brokenÑouterÑeturned corruptedÖayload) ");

265 i‡(
ªth›s
<=64)

266 
ªth›s
 = 65-rethops;

267 i‡(
ªth›s
<=128)

268 
ªth›s
 = 129-rethops;

270 
ªth›s
 = 256-rethops;

272 
e
->
ì_î∫o
) {

273 
ETIMEDOUT
:

274 
	`¥ötf
("\n");

276 
EMSGSIZE
:

277 
	`¥ötf
("pmtu %d\n", 
e
->
ì_öfo
);

278 
mtu
 = 
e
->
ì_öfo
;

279 
¥ogªss
 = 
mtu
;

281 
ECONNREFUSED
:

282 
	`¥ötf
("reached\n");

283 
h›s_to
 = 
¢dh›s
<0 ? 
âl
 : sndhops;

284 
h›s_‰om
 = 
ªth›s
;

286 
EPROTO
:

287 
	`¥ötf
("!P\n");

289 
EHOSTUNREACH
:

290 i‡((
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP
 &&

291 
e
->
ì_ty≥
 == 11 &&

292 
e
->
ì_code
 == 0) ||

293 (
e
->
ì_‹igö
 =
SO_EE_ORIGIN_ICMP6
 &&

294 
e
->
ì_ty≥
 == 3 &&

295 
e
->
ì_code
 == 0)) {

296 i‡(
ªth›s
>=0) {

297 i‡(
¢dh›s
>=0 && 
ªth›s
 != sndhops)

298 
	`¥ötf
("asymm %2d ", 
ªth›s
);

299 i‡(
¢dh›s
<0 && 
ªth›s
 !
âl
)

300 
	`¥ötf
("asymm %2d ", 
ªth›s
);

302 
	`¥ötf
("\n");

305 
	`¥ötf
("!H\n");

307 
ENETUNREACH
:

308 
	`¥ötf
("!N\n");

310 
EACCES
:

311 
	`¥ötf
("!A\n");

314 
	`¥ötf
("\n");

315 
î∫o
 = 
e
->
ì_î∫o
;

316 
	`≥º‹
("NET ERROR");

319 
ª°¨t
;

320 
	}
}

322 
	$¥obe_âl
(
fd
, 
âl
)

324 
i
;

325 
¥obehdr
 *
hdr
 = 
pktbuf
;

327 
	`mem£t
(
pktbuf
, 0, 
mtu
);

328 
ª°¨t
:

330 
i
=0; i<10; i++) {

331 
ªs
;

333 
hdr
->
âl
 =Åtl;

334 
Ámûy
) {

335 
AF_INET6
:

336 ((
sockaddr_ö6
 *)&
èrgë
)->
sö6_p‹t
 = 
	`ht⁄s
(
ba£_p‹t
 + 
hi•å
);

338 
AF_INET
:

339 ((
sockaddr_ö
 *)&
èrgë
)->
sö_p‹t
 = 
	`ht⁄s
(
ba£_p‹t
 + 
hi•å
);

342 
	`gëtimeofday
(&
hdr
->
tv
, 
NULL
);

343 
his
[
hi•å
].
h›s
 = 
âl
;

344 
his
[
hi•å
].
£ndtime
 = 
hdr
->
tv
;

345 i‡(
	`£ndto
(
fd
, 
pktbuf
, 
mtu
-
ovîhód
, 0, (
sockaddr
 *)&
èrgë
, 
èrgëÀn
) > 0)

347 
ªs
 = 
	`ªcvîr
(
fd
, 
âl
);

348 
his
[
hi•å
].
h›s
 = 0;

349 i‡(
ªs
==0)

351 i‡(
ªs
 > 0)

352 
ª°¨t
;

354 
hi•å
 = (hisptr + 1) & 63;

356 i‡(
i
<10) {

357 
	`d©a_waô
(
fd
);

358 i‡(
	`ªcv
(
fd
, 
pktbuf
, 
mtu
, 
MSG_DONTWAIT
) > 0) {

359 
	`¥ötf
("%2d?:ÑïlyÑe˚ived 8)\n", 
âl
);

362  
	`ªcvîr
(
fd
, 
âl
);

365 
	`¥ötf
("%2d: síd faûed\n", 
âl
);

367 
	}
}

369 
	$ußge
(Ë
	`__©åibuã
((
n‹ëu∫
));

371 
	$ußge
()

373 
	`Ârötf
(
°dîr
, "Usage:Åracepath6 [-n] [-b] [-l <len>] [-pÖort] <destination>\n");

374 
	`exô
(-1);

375 
	}
}

378 
	$maö
(
¨gc
, **
¨gv
)

380 
fd
;

381 
⁄
;

382 
âl
;

383 *
p
;

384 
addröfo
 
höts
, *
ai
, *
ai0
;

385 
ch
;

386 
gai
;

387 
pbuf
[
NI_MAXSERV
];

389 #ifde‡
USE_IDN


390 
	`£éoˇÀ
(
LC_ALL
, "");

393 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "nbh?l:m:p:")Ë!
EOF
) {

394 
ch
) {

396 
no_ªsﬁve
 = 1;

399 
show_bŸh
 = 1;

402 
mtu
 = 
	`©oi
(
›èrg
);

405 
max_h›s
 = 
	`©oi
(
›èrg
);

406 i‡(
max_h›s
 < 0 || max_h›†> 
MAX_HOPS_LIMIT
) {

407 
	`Ârötf
(
°dîr
,

409 
MAX_HOPS_LIMIT
);

413 
ba£_p‹t
 = 
	`©oi
(
›èrg
);

416 
	`ußge
();

420 
¨gc
 -
›töd
;

421 
¨gv
 +
›töd
;

423 i‡(
¨gc
 != 1)

424 
	`ußge
();

427 i‡(!
ba£_p‹t
) {

428 
p
 = 
	`°rchr
(
¨gv
[0], '/');

429 i‡(
p
) {

430 *
p
 = 0;

431 
ba£_p‹t
 = ()
	`©oi
(
p
+1);

433 
ba£_p‹t
 = 44444;

436 
	`•rötf
(
pbuf
, "%u", 
ba£_p‹t
);

438 
	`mem£t
(&
höts
, 0, (hints));

439 
höts
.
ai_Ámûy
 = 
Ámûy
;

440 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

441 
höts
.
ai_¥Ÿocﬁ
 = 
IPPROTO_UDP
;

442 #ifde‡
USE_IDN


443 
höts
.
ai_Êags
 = 
AI_IDN
;

445 
gai
 = 
	`gëaddröfo
(
¨gv
[0], 
pbuf
, &
höts
, &
ai0
);

446 i‡(
gai
) {

447 
	`Ârötf
(
°dîr
, "gëaddröfo: %s\n", 
	`gai_°ªº‹
(
gai
));

448 
	`exô
(1);

451 
fd
 = -1;

452 
ai
 = 
ai0
;ái;áòai->
ai_√xt
) {

454 i‡(
Ámûy
 && 
ai
->
ai_Ámûy
 != family)

456 i‡(
ai
->
ai_Ámûy
 !
AF_INET6
 &&

457 
ai
->
ai_Ámûy
 !
AF_INET
)

459 
Ámûy
 = 
ai
->
ai_Ámûy
;

460 
fd
 = 
	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,ái->
ai_¥Ÿocﬁ
);

461 i‡(
fd
 < 0)

463 
	`mem˝y
(&
èrgë
, 
ai
->
ai_addr
, (target));

464 
èrgëÀn
 = 
ai
->
ai_addæí
;

467 i‡(
fd
 < 0) {

468 
	`≥º‹
("socket/connect");

469 
	`exô
(1);

471 
	`‰ìaddröfo
(
ai0
);

473 
Ámûy
) {

474 
AF_INET6
:

475 
ovîhód
 = 48;

476 i‡(!
mtu
)

477 
mtu
 = 128000;

478 i‡(
mtu
 <
ovîhód
)

479 
pkéí_îr‹
;

481 
⁄
 = 
IPV6_PMTUDISC_DO
;

482 i‡(
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_MTU_DISCOVER
, &
⁄
, (on)) &&

483 (
⁄
 = 
IPV6_PMTUDISC_DO
,

484 
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_MTU_DISCOVER
, &
⁄
, (on)))) {

485 
	`≥º‹
("IPV6_MTU_DISCOVER");

486 
	`exô
(1);

488 
⁄
 = 1;

489 i‡(
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_RECVERR
, &
⁄
, (on))) {

490 
	`≥º‹
("IPV6_RECVERR");

491 
	`exô
(1);

494 #ifde‡
IPV6_RECVHOPLIMIT


495 
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_HOPLIMIT
, &
⁄
, (on)) &&

496 
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_2292HOPLIMIT
, &
⁄
, (on))

498 
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_HOPLIMIT
, &
⁄
, (on))

501 
	`≥º‹
("IPV6_HOPLIMIT");

502 
	`exô
(1);

504 i‡(!
	`IN6_IS_ADDR_V4MAPPED
(&(((
sockaddr_ö6
 *)&
èrgë
)->
sö6_addr
)))

506 
m≠≥d
 = 1;

508 
AF_INET
:

509 
ovîhód
 = 28;

510 i‡(!
mtu
)

511 
mtu
 = 65535;

512 i‡(
mtu
 <
ovîhód
)

513 
pkéí_îr‹
;

515 
⁄
 = 
IP_PMTUDISC_DO
;

516 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_MTU_DISCOVER
, &
⁄
, (on))) {

517 
	`≥º‹
("IP_MTU_DISCOVER");

518 
	`exô
(1);

520 
⁄
 = 1;

521 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_RECVERR
, &
⁄
, (on))) {

522 
	`≥º‹
("IP_RECVERR");

523 
	`exô
(1);

525 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_RECVTTL
, &
⁄
, (on))) {

526 
	`≥º‹
("IP_RECVTTL");

527 
	`exô
(1);

531 
pktbuf
 = 
	`mÆloc
(
mtu
);

532 i‡(!
pktbuf
) {

533 
	`≥º‹
("malloc");

534 
	`exô
(1);

537 
âl
 = 1;Åé <
max_h›s
;Åtl++) {

538 
ªs
;

539 
i
;

541 
⁄
 = 
âl
;

542 
Ámûy
) {

543 
AF_INET6
:

544 i‡(
	`£tsock›t
(
fd
, 
SOL_IPV6
, 
IPV6_UNICAST_HOPS
, &
⁄
, (on))) {

545 
	`≥º‹
("IPV6_UNICAST_HOPS");

546 
	`exô
(1);

548 i‡(!
m≠≥d
)

551 
AF_INET
:

552 i‡(
	`£tsock›t
(
fd
, 
SOL_IP
, 
IP_TTL
, &
⁄
, (on))) {

553 
	`≥º‹
("IP_TTL");

554 
	`exô
(1);

558 
ª°¨t
:

559 
i
=0; i<3; i++) {

560 
ﬁd_mtu
;

562 
ﬁd_mtu
 = 
mtu
;

563 
ªs
 = 
	`¥obe_âl
(
fd
, 
âl
);

564 i‡(
mtu
 !
ﬁd_mtu
)

565 
ª°¨t
;

566 i‡(
ªs
 == 0)

567 
d⁄e
;

568 i‡(
ªs
 > 0)

572 i‡(
ªs
 < 0)

573 
	`¥ötf
("%2d:Çÿª∂y\n", 
âl
);

575 
	`¥ötf
(" Toÿm™y h›s:Ömtu %d\n", 
mtu
);

577 
d⁄e
:

578 
	`¥ötf
(" Resume:Ömtu %d ", 
mtu
);

579 i‡(
h›s_to
>=0)

580 
	`¥ötf
("h›†%d ", 
h›s_to
);

581 i‡(
h›s_‰om
>=0)

582 
	`¥ötf
("back %d ", 
h›s_‰om
);

583 
	`¥ötf
("\n");

584 
	`exô
(0);

586 
pkéí_îr‹
:

587 
	`Ârötf
(
°dîr
, "Error:Öktlen must be > %dánd <= %d\n",

588 
ovîhód
, 
INT_MAX
);

589 
	`exô
(1);

590 
	}
}

	@iputils-s20140519/traceroute6.c

226 
	~<sys/∑øm.h
>

227 
	~<sys/time.h
>

228 
	~<sys/sockë.h
>

229 
	~<sys/fûe.h
>

230 
	~<sys/io˘l.h
>

231 
	~<√t/if.h
>

233 #i‡
__löux__


234 
	~<ídün.h
>

236 
	~<√töë/ö_sy°m.h
>

237 
	~<√töë/ö.h
>

238 
	~<√töë/ù.h
>

239 
	~<√töë/ù_icmp.h
>

240 
	~<√töë/udp.h
>

242 
	~<√töë/ù6.h
>

243 
	~<√töë/icmp6.h
>

244 
	~<löux/ty≥s.h
>

245 #ifde‡
CAPABILITIES


246 
	~<sys/ˇ∑bûôy.h
>

249 #ifde‡
USE_IDN


250 
	~<id«.h
>

251 
	~<loˇÀ.h
>

254 
	~<¨∑/öë.h
>

256 
	~<√tdb.h
>

257 
	~<°dio.h
>

258 
	~<î∫o.h
>

259 
	~<°dlib.h
>

260 
	~<°rög.h
>

261 
	~<uni°d.h
>

263 
	~"SNAPSHOT.h
"

265 #i‚de‡
SOL_IPV6


266 
	#SOL_IPV6
 
IPPROTO_IPV6


	)

269 
	#MAXPACKET
 65535

	)

270 
	#MAX_HOSTNAMELEN
 
NI_MAXHOST


	)

272 #i‚de‡
FD_SET


273 
	#NFDBITS
 (8*(
fd_£t
))

	)

274 
	#FD_SETSIZE
 
NFDBITS


	)

275 
	#FD_SET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] |(1 << (“Ë% NFDBITS)))

	)

276 
	#FD_CLR
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] &~(1 << (“Ë% NFDBITS)))

	)

277 
	#FD_ISSET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] & (1 << (“Ë% NFDBITS)))

	)

278 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’), 0, (*’)))

	)

281 
	#F¥ötf
 ()
Ârötf


	)

282 
	#Prötf
 ()
¥ötf


	)

284 
	g∑ckë
[512];

286 
waô_f‹_ª∂y
(, 
sockaddr_ö6
 *, 
ö6_addr
 *, );

287 
∑ckë_ok
(*
buf
, 
cc
, 
sockaddr_ö6
 *
‰om
,

288 
ö6_addr
 *
to
, 
£q
, 
timevÆ
 *);

289 
£nd_¥obe
(
£q
, 
âl
);

290 
dñèT
 (
timevÆ
 *, timeval *);

291 
¥öt
(*
buf
, 
cc
, 
sockaddr_ö6
 *
‰om
);

292 
tvsub
 (
timevÆ
 *, timeval *);

293 
ußge
();

295 
	gicmp_sock
;

296 
	g¢dsock
;

297 
timez⁄e
 
	gtz
;

299 
sockaddr_ö6
 
	gwhîëo
;

301 
sockaddr_ö6
 
	gßddr
;

302 
sockaddr_ö6
 
	gfú°h›
;

303 *
	gsour˚
 = 
NULL
;

304 *
	gdevi˚
 = 
NULL
;

305 *
	gho°«me
;

307 
	g≈robes
 = 3;

308 
	gmax_âl
 = 30;

309 
pid_t
 
	gidít
;

310 
	gp‹t
 = 32768+666;

311 
	g›ti⁄s
;

312 
	gvîbo£
;

313 
	gwaôtime
 = 5;

314 
	gnÊag
;

317 
	spkt_f‹m©


319 
__u32
 
	midít
;

320 
__u32
 
	m£q
;

321 
timevÆ
 
	mtv
;

324 *
	g£ndbuff
;

325 
	gd©Æí
 = (
pkt_f‹m©
);

329 
	$maö
(
¨gc
, *
¨gv
[])

331 
∑
[
MAX_HOSTNAMELEN
];

332 *
›èrg
;

333 
›töd
;

334 
ho°ít
 *
hp
;

335 
sockaddr_ö6
 
‰om
, *
to
;

336 
ch
, 
i
, 
⁄
, 
¥obe
, 
£q
, 
tos
, 
âl
;

337 
sockë_î∫o
;

339 
icmp_sock
 = 
	`sockë
(
AF_INET6
, 
SOCK_RAW
, 
IPPROTO_ICMPV6
);

340 
sockë_î∫o
 = 
î∫o
;

342 i‡(
	`£tuid
(
	`gëuid
())) {

343 
	`≥º‹
("traceroute6: setuid");

344 
	`exô
(-1);

346 #ifde‡
CAPABILITIES


348 
ˇp_t
 
ˇps
 = 
	`ˇp_öô
();

349 i‡(
	`ˇp_£t_¥oc
(
ˇps
)) {

350 
	`≥º‹
("traceroute6: cap_set_proc");

351 
	`exô
(-1);

353 
	`ˇp_‰ì
(
ˇps
);

357 #ifde‡
USE_IDN


358 
	`£éoˇÀ
(
LC_ALL
, "");

361 
⁄
 = 1;

362 
£q
 = 
tos
 = 0;

363 
to
 = (
sockaddr_ö6
 *)&
whîëo
;

364 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dm:≈:q:rs:t:w:vi:g:V")Ë!
EOF
) {

365 
ch
) {

367 
›ti⁄s
 |
SO_DEBUG
;

370 
max_âl
 = 
	`©oi
(
›èrg
);

371 i‡(
max_âl
 <= 1) {

372 
	`F¥ötf
(
°dîr
,

374 
	`exô
(1);

378 
nÊag
++;

381 
p‹t
 = 
	`©oi
(
›èrg
);

382 i‡(
p‹t
 < 1) {

383 
	`F¥ötf
(
°dîr
,

385 
	`exô
(1);

389 
≈robes
 = 
	`©oi
(
›èrg
);

390 i‡(
≈robes
 < 1) {

391 
	`F¥ötf
(
°dîr
,

393 
	`exô
(1);

397 
›ti⁄s
 |
SO_DONTROUTE
;

404 
sour˚
 = 
›èrg
;

407 
devi˚
 = 
›èrg
;

410 
	`F¥ötf
(
°dîr
, "Sorry,Ñthdr isÇot yet supported\n");

413 
vîbo£
++;

416 
waôtime
 = 
	`©oi
(
›èrg
);

417 i‡(
waôtime
 <= 1) {

418 
	`F¥ötf
(
°dîr
,

420 
	`exô
(1);

424 
	`¥ötf
("åa˚rouã6 utûôy, iputûs-%s\n", 
SNAPSHOT
);

425 
	`exô
(0);

427 
	`ußge
();

430 
¨gc
 -
›töd
;

431 
¨gv
 +
›töd
;

433 i‡(
¨gc
 < 1)

434 
	`ußge
();

436 
	`£éöebuf
 (
°dout
);

438 (Ë
	`mem£t
((*)&
whîëo
, 0, (whereto));

440 
to
->
sö6_Ámûy
 = 
AF_INET6
;

441 
to
->
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

443 i‡(
	`öë_±⁄
(
AF_INET6
, *
¨gv
, &
to
->
sö6_addr
) > 0) {

444 
ho°«me
 = *
¨gv
;

446 *
idn
 = 
NULL
;

447 #ifde‡
USE_IDN


448 i‡(
	`id«_to_ascii_lz
(*
¨gv
, &
idn
, 0Ë!
IDNA_SUCCESS
)

449 
idn
 = 
NULL
;

451 
hp
 = 
	`gëho°by«me2
(
idn
 ? id¿: *
¨gv
, 
AF_INET6
);

452 i‡(
hp
) {

453 
	`memmove
((
ˇddr_t
)&
to
->
sö6_addr
, 
hp
->
h_addr
, (to->sin6_addr));

454 
ho°«me
 = (*)
hp
->
h_«me
;

456 ()
	`Ârötf
(
°dîr
,

457 "åa˚rouã: unknow¿ho° %s\n", *
¨gv
);

458 
	`exô
(1);

461 
fú°h›
 = *
to
;

462 i‡(*++
¨gv
) {

463 
d©Æí
 = 
	`©oi
(*
¨gv
);

467 i‡(
d©Æí
 == 0)

468 
d©Æí
 = (
pkt_f‹m©
);

469 i‡(
d©Æí
 < ()(
pkt_f‹m©
) ||

470 
d©Æí
 >
MAXPACKET
) {

471 
	`F¥ötf
(
°dîr
,

473 ()(
pkt_f‹m©
), 
MAXPACKET
);

474 
	`exô
(1);

478 
idít
 = 
	`gëpid
();

480 
£ndbuff
 = 
	`mÆloc
(
d©Æí
);

481 i‡(
£ndbuff
 =
NULL
) {

482 
	`Ârötf
(
°dîr
, "malloc failed\n");

483 
	`exô
(1);

486 i‡(
icmp_sock
 < 0) {

487 
î∫o
 = 
sockë_î∫o
;

488 
	`≥º‹
("traceroute6: icmp socket");

489 
	`exô
(1);

492 #ifde‡
IPV6_RECVPKTINFO


493 
	`£tsock›t
(
icmp_sock
, 
SOL_IPV6
, 
IPV6_RECVPKTINFO
, &
⁄
, (on));

494 
	`£tsock›t
(
icmp_sock
, 
SOL_IPV6
, 
IPV6_2292PKTINFO
, &
⁄
, (on));

496 
	`£tsock›t
(
icmp_sock
, 
SOL_IPV6
, 
IPV6_PKTINFO
, &
⁄
, (on));

499 i‡(
›ti⁄s
 & 
SO_DEBUG
)

500 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_DEBUG
,

501 (*)&
⁄
, (on));

502 i‡(
›ti⁄s
 & 
SO_DONTROUTE
)

503 
	`£tsock›t
(
icmp_sock
, 
SOL_SOCKET
, 
SO_DONTROUTE
,

504 (*)&
⁄
, (on));

506 #ifde‡
__löux__


507 
⁄
 = 2;

508 i‡(
	`£tsock›t
(
icmp_sock
, 
SOL_RAW
, 
IPV6_CHECKSUM
, &
⁄
, (on)) < 0) {

512 
	`Ârötf
(
°dîr
, "setsockopt(RAW_CHECKSUM) failed -ÅryÅo continue.");

516 i‡((
¢dsock
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0)) < 0) {

517 
	`≥º‹
("traceroute: UDP socket");

518 
	`exô
(5);

520 #ifde‡
SO_SNDBUF


521 i‡(
	`£tsock›t
(
¢dsock
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
d©Æí
,

522 (
d©Æí
)) < 0) {

523 
	`≥º‹
("traceroute: SO_SNDBUF");

524 
	`exô
(6);

528 i‡(
›ti⁄s
 & 
SO_DEBUG
)

529 (Ë
	`£tsock›t
(
¢dsock
, 
SOL_SOCKET
, 
SO_DEBUG
,

530 (*)&
⁄
, (on));

531 i‡(
›ti⁄s
 & 
SO_DONTROUTE
)

532 (Ë
	`£tsock›t
(
¢dsock
, 
SOL_SOCKET
, 
SO_DONTROUTE
,

533 (*)&
⁄
, (on));

535 i‡(
sour˚
 =
NULL
) {

536 
sockÀn_t
 
Æí
;

537 
¥obe_fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

539 i‡(
¥obe_fd
 < 0) {

540 
	`≥º‹
("socket");

541 
	`exô
(1);

543 i‡(
devi˚
) {

544 i‡(
	`£tsock›t
(
¥obe_fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
devi˚
, 
	`°æí
(device)+1) == -1)

545 
	`≥º‹
("WARNING: interface is ignored");

547 
fú°h›
.
sö6_p‹t
 = 
	`ht⁄s
(1025);

548 i‡(
	`c⁄√˘
(
¥obe_fd
, (
sockaddr
*)&
fú°h›
, (firsthop)) == -1) {

549 
	`≥º‹
("connect");

550 
	`exô
(1);

552 
Æí
 = (
ßddr
);

553 i‡(
	`gësock«me
(
¥obe_fd
, (
sockaddr
*)&
ßddr
, &
Æí
) == -1) {

554 
	`≥º‹
("getsockname");

555 
	`exô
(1);

557 
ßddr
.
sö6_p‹t
 = 0;

558 
	`˛o£
(
¥obe_fd
);

560 (Ë
	`mem£t
((*)&
ßddr
, 0, (saddr));

561 
ßddr
.
sö6_Ámûy
 = 
AF_INET6
;

562 i‡(
	`öë_±⁄
(
AF_INET6
, 
sour˚
, &
ßddr
.
sö6_addr
) <= 0)

564 
	`Prötf
("åa˚rouã: unknow¿add∏%s\n", 
sour˚
);

565 
	`exô
(1);

569 i‡(
	`böd
(
¢dsock
, (
sockaddr
 *)&
ßddr
, (saddr)) < 0) {

570 
	`≥º‹
 ("traceroute: bind sending socket");

571 
	`exô
 (1);

573 i‡(
	`böd
(
icmp_sock
, (
sockaddr
 *)&
ßddr
, (saddr)) < 0) {

574 
	`≥º‹
 ("traceroute: bind icmp6 socket");

575 
	`exô
 (1);

578 
	`F¥ötf
(
°dîr
, "åa˚rouãÅÿ%†(%s)", 
ho°«me
,

579 
	`öë_¡›
(
AF_INET6
, &
to
->
sö6_addr
, 
∑
, (pa)));

581 
	`F¥ötf
(
°dîr
, " from %s",

582 
	`öë_¡›
(
AF_INET6
, &
ßddr
.
sö6_addr
, 
∑
, (pa)));

583 
	`F¥ötf
(
°dîr
, ", %d h›†max, %d byãÖackës\n", 
max_âl
, 
d©Æí
);

584 (Ë
	`fÊush
(
°dîr
);

586 
âl
 = 1;Åé <
max_âl
; ++ttl) {

587 
ö6_addr
 
œ°addr
 = {{{0,}}};

588 
gŸ_thîe
 = 0;

589 
uƒóchabÀ
 = 0;

591 
	`Prötf
("%2d ", 
âl
);

592 
¥obe
 = 0;Örobê< 
≈robes
; ++probe) {

593 
cc
, 
ª£t_timî
;

594 
timevÆ
 
t1
, 
t2
;

595 
timez⁄e
 
tz
;

596 
ö6_addr
 
to
;

598 
	`gëtimeofday
(&
t1
, &
tz
);

599 
	`£nd_¥obe
(++
£q
, 
âl
);

600 
ª£t_timî
 = 1;

602 (
cc
 = 
	`waô_f‹_ª∂y
(
icmp_sock
, &
‰om
, &
to
, 
ª£t_timî
)) != 0) {

603 
	`gëtimeofday
(&
t2
, &
tz
);

604 i‡((
i
 = 
	`∑ckë_ok
(
∑ckë
, 
cc
, &
‰om
, &
to
, 
£q
, &
t1
))) {

605 
ª£t_timî
 = 1;

606 i‡(
	`memcmp
(&
‰om
.
sö6_addr
, &
œ°addr
, (from.sin6_addr))) {

607 
	`¥öt
(
∑ckë
, 
cc
, &
‰om
);

608 
	`mem˝y
(&
œ°addr
,

609 &
‰om
.
sö6_addr
,

610 (
œ°addr
));

612 
	`Prötf
(" %g ms", 
	`dñèT
(&
t1
, &
t2
));

613 
i
 - 1) {

614 
ICMP6_DST_UNREACH_NOPORT
:

615 ++
gŸ_thîe
;

618 
ICMP6_DST_UNREACH_NOROUTE
:

619 ++
uƒóchabÀ
;

620 
	`Prötf
(" !N");

622 
ICMP6_DST_UNREACH_ADDR
:

623 ++
uƒóchabÀ
;

624 
	`Prötf
(" !H");

627 
ICMP6_DST_UNREACH_ADMIN
:

628 ++
uƒóchabÀ
;

629 
	`Prötf
(" !S");

634 
ª£t_timî
 = 0;

636 i‡(
cc
 <= 0)

637 
	`Prötf
(" *");

638 (Ë
	`fÊush
(
°dout
);

640 
	`putch¨
('\n');

641 i‡(
gŸ_thîe
 ||

642 (
uƒóchabÀ
 > 0 && uƒóchabÀ >
≈robes
-1))

643 
	`exô
(0);

647 
	}
}

650 
	$waô_f‹_ª∂y
(
sock
, 
‰om
, 
to
, 
ª£t_timî
)

651 
sock
;

652 
sockaddr_ö6
 *
‰om
;

653 
ö6_addr
 *
to
;

654 
ª£t_timî
;

656 
fd_£t
 
fds
;

657 
timevÆ
 
waô
;

658 
cc
 = 0;

659 
cbuf
[512];

661 
	`FD_ZERO
(&
fds
);

662 
	`FD_SET
(
sock
, &
fds
);

663 i‡(
ª£t_timî
) {

676 
waô
.
tv_£c
 = 
waôtime
;

677 
waô
.
tv_u£c
 = 0;

680 i‡(
	`£À˘
(
sock
+1, &
fds
, (
fd_£t
 *)0, (fd_£à*)0, &
waô
) > 0) {

681 
iovec
 
iov
;

682 
msghdr
 
msg
;

683 
iov
.
iov_ba£
 = 
∑ckë
;

684 
iov
.
iov_Àn
 = (
∑ckë
);

685 
msg
.
msg_«me
 = (*)
‰om
;

686 
msg
.
msg_«mñí
 = (*
‰om
);

687 
msg
.
msg_iov
 = &
iov
;

688 
msg
.
msg_iovÀn
 = 1;

689 
msg
.
msg_Êags
 = 0;

690 
msg
.
msg_c⁄åﬁ
 = 
cbuf
;

691 
msg
.
msg_c⁄åﬁÀn
 = (
cbuf
);

693 
cc
 = 
	`ªcvmsg
(
icmp_sock
, &
msg
, 0);

694 i‡(
cc
 >= 0) {

695 
cmsghdr
 *
cmsg
;

696 
ö6_pktöfo
 *
ùi
;

698 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

699 
cmsg
;

700 
cmsg
 = 
	`CMSG_NXTHDR
(&
msg
, cmsg)) {

701 i‡(
cmsg
->
cmsg_Àvñ
 !
SOL_IPV6
)

703 
cmsg
->
cmsg_ty≥
) {

704 
IPV6_PKTINFO
:

705 #ifde‡
IPV6_2292PKTINFO


706 
IPV6_2292PKTINFO
:

708 
ùi
 = (
ö6_pktöfo
 *)
	`CMSG_DATA
(
cmsg
);

709 
	`mem˝y
(
to
, 
ùi
, (*to));

715 (
cc
);

716 
	}
}

719 
	$£nd_¥obe
(
£q
, 
âl
)

721 
pkt_f‹m©
 *
pkt
 = (pkt_f‹m© *Ë
£ndbuff
;

722 
i
;

724 
pkt
->
idít
 = 
	`ht⁄l
(ident);

725 
pkt
->
£q
 = 
	`ht⁄l
(seq);

726 
	`gëtimeofday
(&
pkt
->
tv
, &
tz
);

728 
i
 = 
	`£tsock›t
(
¢dsock
, 
SOL_IPV6
, 
IPV6_UNICAST_HOPS
, &
âl
, (ttl));

729 i‡(
i
 < 0)

731 
	`≥º‹
("setsockopt");

732 
	`exô
(1);

736 
i
 = 
	`£ndto
(
¢dsock
, 
£ndbuff
, 
d©Æí
, 0,

737 (
sockaddr
 *)&
whîëo
, (whereto));

738 } 
i
<0 && 
î∫o
 =
ECONNREFUSED
);

740 i‡(
i
 < 0 || i !
d©Æí
) {

741 i‡(
i
<0)

742 
	`≥º‹
("sendto");

743 
	`Prötf
("åa˚rouã: wrŸê%†%d ch¨s,Ñë=%d\n", 
ho°«me
,

744 
d©Æí
, 
i
);

745 (Ë
	`fÊush
(
°dout
);

747 
	}
}

750 
	$dñèT
(
timevÆ
 *
t1p
, timevÆ *
t2p
)

752 
dt
;

754 
dt
 = ()(
t2p
->
tv_£c
 - 
t1p
->tv_sec) * 1000.0 +

755 ()(
t2p
->
tv_u£c
 - 
t1p
->tv_usec) / 1000.0;

756  (
dt
);

757 
	}
}

763 * 
	$¥_ty≥
(
t
)

765 
t
) {

814 
	}
}

817 
	$∑ckë_ok
(*
buf
, 
cc
, 
sockaddr_ö6
 *
‰om
,

818 
ö6_addr
 *
to
, 
£q
,

819 
timevÆ
 *
tv
)

821 
icmp6_hdr
 *
i˝
;

822 
ty≥
, 
code
;

824 
i˝
 = (
icmp6_hdr
 *Ë
buf
;

826 
ty≥
 = 
i˝
->
icmp6_ty≥
;

827 
code
 = 
i˝
->
icmp6_code
;

829 i‡((
ty≥
 =
ICMP6_TIME_EXCEEDED
 && 
code
 =
ICMP6_TIME_EXCEED_TRANSIT
) ||

830 
ty≥
 =
ICMP6_DST_UNREACH
)

832 
ù6_hdr
 *
hù
;

833 
udphdr
 *
up
;

834 
√xthdr
;

836 
hù
 = (
ù6_hdr
 *Ë(
i˝
 + 1);

837 
up
 = (
udphdr
 *)(
hù
+1);

838 
√xthdr
 = 
hù
->
ù6_nxt
;

840 i‡(
√xthdr
 == 44) {

841 
√xthdr
 = *(*)
up
;

842 
up
++;

844 i‡(
√xthdr
 =
IPPROTO_UDP
)

846 
pkt_f‹m©
 *
pkt
;

848 
pkt
 = (
pkt_f‹m©
 *Ë(
up
 + 1);

850 i‡(
	`¡ohl
(
pkt
->
idít
) == ident &&

851 
	`¡ohl
(
pkt
->
£q
) == seq)

853 *
tv
 = 
pkt
->tv;

854  (
ty≥
 =
ICMP6_TIME_EXCEEDED
 ? -1 : 
code
+1);

860 i‡(
vîbo£
) {

861 *
p
;

862 
∑1
[
MAX_HOSTNAMELEN
];

863 
∑2
[
MAX_HOSTNAMELEN
];

864 
i
;

866 
p
 = (*Ë(
i˝
 + 1);

868 
	`Prötf
("\n%d byã†‰om %†tÿ%s", 
cc
,

869 
	`öë_¡›
(
AF_INET6
, &
‰om
->
sö6_addr
, 
∑1
, (pa1)),

870 
	`öë_¡›
(
AF_INET6
, 
to
, 
∑2
, (pa2)));

872 
	`Prötf
(": icm∞ty≥ %d (%sËcodê%d\n", 
ty≥
, 
	`¥_ty≥
(type),

873 
i˝
->
icmp6_code
);

875 
cc
 -(
icmp6_hdr
);

876 
i
 = 0; i < 
cc
 ; i++) {

877 i‡(
i
 % 16 == 0)

878 
	`Prötf
("%04x:", 
i
);

879 i‡(
i
 % 4 == 0)

880 
	`Prötf
(" ");

881 
	`Prötf
("%02x", 0xf‡& ()
p
[
i
]);

882 i‡(
i
 % 16 =15 && i + 1 < 
cc
)

883 
	`Prötf
("\n");

885 
	`Prötf
("\n");

889 
	}
}

892 
	$¥öt
(*
buf
, 
cc
, 
sockaddr_ö6
 *
‰om
)

894 
∑
[
MAX_HOSTNAMELEN
];

896 i‡(
nÊag
)

897 
	`Prötf
(" %s", 
	`öë_¡›
(
AF_INET6
, &
‰om
->
sö6_addr
,

898 
∑
, (pa)));

901 c⁄° *
ho°«me
;

902 
ho°ít
 *
hp
;

903 *
s
 = 
NULL
;

905 
ho°«me
 = 
	`öë_¡›
(
AF_INET6
, &
‰om
->
sö6_addr
, 
∑
, (pa));

907 i‡((
hp
 = 
	`gëho°byaddr
((*)&
‰om
->
sö6_addr
,

908 (
‰om
->
sö6_addr
), 
AF_INET6
))) {

909 #ifde‡
USE_IDN


910 i‡(
	`id«_to_unicode_lzlz
(
hp
->
h_«me
, &
s
, 0Ë!
IDNA_SUCCESS
)

911 
s
 = 
NULL
;

915 
	`Prötf
(" %†(%s)", 
hp
 ? (
s
 ? s : hp->
h_«me
Ë: 
ho°«me
, 
∑
);

917 
	`‰ì
(
s
);

919 
	}
}

927 
	$tvsub
(
out
, 
ö
)

928 
timevÆ
 *
out
, *
ö
;

930 i‡((
out
->
tv_u£c
 -
ö
->tv_usec) < 0) {

931 
out
->
tv_£c
--;

932 
out
->
tv_u£c
 += 1000000;

934 
out
->
tv_£c
 -
ö
->tv_sec;

935 
	}
}

937 
	$ußge
()

939 
	`Ârötf
(
°dîr
,

942 
	`exô
(1);

943 
	}
}

	@lib_test/lib.h

1 #i‚de‡
LIB__H


2 
	#LIB__H


	)

4 
foob¨
(
i
);

	@lib_test/lib1.c

1 
	~<°dio.h
>

3 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$öô_fun˘i⁄
()

5 
	`¥ötf
("initÜib1\n");

6 
	}
}

7 
__©åibuã__
((
de°ru˘‹
)Ë
	$föish_fun˘i⁄
()

9 
	`¥ötf
("finishÜib1\n");

10 
	}
}

11 
	$foob¨
(
i
)

13 
	`¥ötf
("¥ötög fromÜib%d.sÿ%d\n", 1, 
i
);

15 
	}
}

	@lib_test/lib2.c

1 
	~<°dio.h
>

3 
	$foob¨
(
i
)

5 
	`¥ötf
("¥ötög fromÜib%d.sÿ%d\n", 2, 
i
);

7 
	}
}

	@lib_test/program1.c

1 
	~"lib.h
"

3 
	$maö
()

5 
	`foob¨
(1);

7 
	}
}

	@lib_test/program2.c

1 
	~"lib.h
"

3 
	$maö
()

5 
	`foob¨
(2);

7 
	}
}

	@lib_test/runsosimple.c

1 
	~<°dio.h
>

2 
	~<dlf˙.h
>

4 
	$maö
(
¨gc
, * 
¨gv
[])

6 * 
h™dÀ
;

7 (*
foob¨
) ();

8 * 
îr‹
;

10 
h™dÀ
 = 
	`dl›í
(
¨gv
[1], 
RTLD_NOW
);

11 if(
h™dÀ
 =
NULL
)

13 
	`¥ötf
("O≥¿libøry %†îr‹: %s\n", 
¨gv
[1], 
	`dÀº‹
());

17 
foob¨
 = 
	`dlsym
(
h™dÀ
, "foobar");

18 if((
îr‹
 = 
	`dÀº‹
()Ë!
NULL
)

20 
	`¥ötf
("Symbﬁ söÇŸ found: %s\n", 
îr‹
);

21 
exô_runso
;

24 
	`¥ötf
("ˇŒedÜib%d\n", 
	`foob¨
(111));

26 
exô_runso
:

27 
	`dl˛o£
(
h™dÀ
);

29 
	}
}

	@module_test/kernel_mod/mymod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/öô.h
>

3 
	~<löux/moduÀ∑øm.h
>

4 
	~<löux/¥oc_fs.h
>

6 
MODULE_AUTHOR
("Ma James");

7 
MODULE_LICENSE
("GPL");

8 *
	gwhom
 = "world";

9 
	ghowm™y
 = 1;

10 
moduÀ_∑øm
(
howm™y
, , 
S_IRUGO
);

11 
moduÀ_∑øm
(
whom
, 
ch¨p
, 
S_IRUGO
);

13 
	$mymod_ªad_¥ocmem
(*
buf
, **
°¨t
, 
off_t
 
off£t
, 
cou¡
, *
eof
, *
d©a
)

15 
Àn
=0;

16 
Àn
 = 
	`•rötf
(
buf
, "thi†i†®ã° from mymod howm™y: %d, whom: %s, maxÜí: %d\n", 
howm™y
, 
whom
, 
cou¡
);

17 *
eof
 = 1;

18  
Àn
;

19 
	}
}

21 
__öô
 
	$möe_öô
()

23 
i
;

24 
i
=0;i<
howm™y
;i++)

25 
	`¥ötk
(
KERN_ALERT
 "Hñlo, Howáª you. %s\n", 
whom
);

28 
	}
}

30 
__exô
 
	$möe_exô
()

32 
	`¥ötk
(
KERN_ALERT
 "Iám goingÅoÜeave, Unloaded\n");

34 
	}
}

35 
EXPORT_SYMBOL
(
whom
);

36 
moduÀ_öô
(
möe_öô
);

37 
moduÀ_exô
(
möe_exô
);

	@module_test/kernel_mod/mymod.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@module_test/netlink/testnetlink.c

1 
	~<löux/öô.h
>

2 
	~<löux/moduÀ.h
>

4 
	~<√t/√éök.h
>

5 
	~<löux/π√éök.h
>

6 
	~<löux/kthªad.h
>

7 
	~<löux/sched.h
>

10 
MODULE_LICENSE
("GPL");

11 
MODULE_AUTHOR
("Ma James");

13 
	gmode
 = 0;

14 
moduÀ_∑øm
(
mode
, , 
S_IRUGO
);

15 
	#MAX_PAYLOAD
 128

	)

17 
√t
 
öô_√t
;

18 
sock
 *
	gã°√éök
 = 
NULL
;

22 
	$ã°√éök_rcv_skb
(
sk_buff
 *
skb
)

24 
∆msghdr
 *
∆h
;

25 
sk_buff
 * 
ª∂y_skb
 = 
NULL
;

26 *
d©a
 = 
NULL
;

27 
tmp
[128];

28 
æí
 = 0, 
rc
 = 0, 
pid
;

30 if(!
mode
){

31 
	`¥ötk
("@@@@###############%s : %d!\n",

32 
__func__
, 
__LINE__
);

33 
	`mem£t
(
tmp
 ,0 ,(tmp));

36 i‡(
skb
->
Àn
 >
	`NLMSG_SPACE
(0)) {

38 
∆h
 = 
	`∆msg_hdr
(
skb
);

40 
æí
 = 
	`∆msg_Àn
(
∆h
);

42 
d©a
 = 
	`∆msg_d©a
(
∆h
);

44 
pid
 = 
∆h
->
∆msg_pid
;

46 
	`°r˝y
(
tmp
, 
d©a
);

47 
	`¥ötk
("@@@@@receive data is %s \n",

48 
tmp
);

54 
ª∂y_skb
 = 
	`Æloc_skb
(
	`NLMSG_SPACE
(
MAX_PAYLOAD
), 
GFP_ATOMIC
);

56 if(!
ª∂y_skb
){

57 
	`¥ötk
("@@@@####reply_skbállocÉrror!\n");

62 
∆h
 = 
	`∆msg_put
(
ª∂y_skb
, 0,0, 0, 
MAX_PAYLOAD
,0);

66 
	`°r˝y
(
	`∆msg_d©a
(
∆h
), "netlinkÑeceived!\n");

68 
rc
 = 
	`√éök_uniˇ°
(
ã°√éök
, 
ª∂y_skb
, 
pid
, 
MSG_DONTWAIT
);

69 if(
rc
 < 0){

70 
	`¥ötk
("netlink unicastÉrror!\n");

74 
	}
}

76 
√éök_kî√l_cfg
 
	gkî√l_cfg
;

79 
	$ã°√éök_öô
()

81 
	`¥ötk
("@@@@###############!\n");

82 
	`mem£t
(&
kî√l_cfg
, 0, (
√éök_kî√l_cfg
));

83 
kî√l_cfg
.
groups
 = 0;

84 
kî√l_cfg
.
Êags
 = 0;

85 
kî√l_cfg
.
öput
 = 
ã°√éök_rcv_skb
;

90 
ã°√éök
 = 
	`√éök_kî√l_¸óã
(&
öô_√t
, 27, &
kî√l_cfg
);

92 if(
ã°√éök
 == 0){

93 
	`¥ötk
("@@@@####can't createÇetlink socket.\n");

97 
	}
}

99 
	$ã°√éök_exô
()

101 
	`√éök_kî√l_ªÀa£
(
ã°√éök
);

102 
	`¥ötk
("Goodbye, cruel world\n");

103 
	}
}

105 
moduÀ_öô
(
ã°√éök_öô
);

106 
moduÀ_exô
(
ã°√éök_exô
);

	@module_test/netlink/testnetlink.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@module_test/netlink/user.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<sys/sockë.h
>

4 
	~<löux/if.h
>

5 
	~<löux/sockios.h
>

6 
	~<î∫o.h
>

7 
	~<löux/π√éök.h
>

8 
	~<°rög.h
>

9 
	#RTNL_RCV_BUF
 16384

	)

10 
	#MAX_PAYLOAD
 128

	)

11 
	sªq
{

12 
∆msghdr
 
	m∆h
;

13 
	mbuf
[
MAX_PAYLOAD
];

16 
	$maö
()

18 
sk
 = 0,
ªt
 = 0;

19 
sockaddr_∆
 
∆addr
, 
to_∆addr
;

20 
msghdr
 
msg
;

21 
∆msghdr
 * 
∆h
;

22 
iovec
 
iov
;

23 
ªq
 
r
;

25 
	`mem£t
(&
msg
 , 0 ,(
msghdr
));

26 
sk
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 27);

28 i‡(
sk
 == -1){

29 
	`¥ötf
("open socketÉrror!\n");

30 
îr‹
;

33 
	`mem£t
(&
∆addr
, 0, (nladdr));

35 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

36 
∆addr
.
∆_groups
 = 0;

37 
∆addr
.
∆_pid
 = 
	`gëpid
();

40 i‡(
	`böd
(
sk
, (
sockaddr
 *)&
∆addr
, (
sockaddr_∆
))< 0){

41 
	`¥ötf
("bindÇetlink socketÉrror!\n");

42 
îr‹
;

45 
	`mem£t
(&
to_∆addr
, 0, (to_nladdr));

48 
to_∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

49 
to_∆addr
.
∆_pid
 = 0;

50 
to_∆addr
.
∆_groups
 = 0;

52 
∆h
=(
∆msghdr
 *)
	`mÆloc
(
	`NLMSG_SPACE
(
MAX_PAYLOAD
));

53 
∆h
->
∆msg_Àn
 =
	`NLMSG_SPACE
(
MAX_PAYLOAD
);

54 
∆h
->
∆msg_pid
 = 
	`gëpid
();

55 
∆h
->
∆msg_Êags
 = 0;

57 
	`°r˝y
(
	`NLMSG_DATA
(
∆h
), "hello ,you!");

61 
r
.
∆h
.
∆msg_Àn
 = 
	`NLMSG_SPACE
(
MAX_PAYLOAD
);

62 
r
.
∆h
.
∆msg_pid
 = 
	`gëpid
();

63 
r
.
∆h
.
∆msg_Êags
 = 0;

64 
	`mem£t
(
r
.
buf
, 0, 
MAX_PAYLOAD
);

66 
	`°r˝y
(
	`NLMSG_DATA
(&(
r
.
∆h
)), "hello ,you!");

69 
iov
.
iov_ba£
 = &
r
;

70 
iov
.
iov_Àn
 = (
r
);

73 
msg
.
msg_«me
 = &
to_∆addr
;

74 
msg
.
msg_«mñí
 = (
to_∆addr
);

75 
msg
.
msg_iov
 = &
iov
;

76 
msg
.
msg_iovÀn
 =1;

79 
ªt
 = 
	`£ndmsg
(
sk
, &
msg
, 0);

81 
	`¥ötf
("@@@@@#####ret is %d,Érrno is %d\n",

82 
ªt
, 
î∫o
);

85 
	`mem£t
(&(
r
.
∆h
), 0 , (r));

87 
	`ªcvmsg
(
sk
, &
msg
, 0);

88 
	`¥ötf
("@@@@######receive data from kernel is %s\n",

89 
	`NLMSG_DATA
(&(
r
.
∆h
)));

90 
	`˛o£
(
sk
);

92 
îr‹
:

94 
	}
}

	@module_test/proc_fs/myproc.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/sched.h
>

3 
	~<löux/uac˚ss.h
>

4 
	~<löux/¥oc_fs.h
>

5 
	~<löux/fs.h
>

6 
	~<löux/£q_fûe.h
>

7 
	~<löux/¶ab.h
>

9 *
	g°r
 = 
NULL
;

14 
	$my_¥oc_show
(
£q_fûe
 *
m
, *
v
)

19 
	`£q_¥ötf
(
m
, "cuºíàkî√»timêi†%ld\n", 
jiffõs
);

20 
	`£q_¥ötf
(
m
, "°∏i†%s\n", 
°r
);

22 
	}
}

27 
ssize_t
 
	$my_¥oc_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
buf„r
,

28 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

30 *
tmp
 = 
	`kzÆloc
((
cou¡
+1), 
GFP_KERNEL
);

31 if(!
tmp
)

32  -
ENOMEM
;

33 if(
	`c›y_‰om_u£r
(
tmp
, 
buf„r
, 
cou¡
))

35 
	`k‰ì
(
tmp
);

36  
EFAULT
;

38 
	`k‰ì
(
°r
);

39 
°r
 = 
tmp
;

40  
cou¡
;

41 
	}
}

43 
	$my_¥oc_›í
(
öode
 *öode, 
fûe
 *file)

66  
	`sögÀ_›í
(
fûe
, 
my_¥oc_show
, 
NULL
);

67 
	}
}

74 
fûe_›î©i⁄s
 
	gmy_f›s
 = {

75 .
ow√r
 = 
THIS_MODULE
,

76 .
	g›í
 = 
my_¥oc_›í
,

77 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

78 .
	gªad
 = 
£q_ªad
,

79 .
	gŒ£ek
 = 
£q_l£ek
,

80 .
	gwrôe
 = 
my_¥oc_wrôe
,

83 
__öô
 
	$my_öô
()

85 
¥oc_dri_íåy
 *
fûe
;

89 
fûe
 = 
	`¥oc_¸óã
("abc_¥oc", 0644, 
NULL
, &
my_f›s
);

90 if(!
fûe
)

91  -
ENOMEM
;

93 
	}
}

96 
__exô
 
	$my_exô
()

98 
	`ªmove_¥oc_íåy
("abc_¥oc", 
NULL
);

99 
	`k‰ì
(
°r
);

100 
	}
}

102 
moduÀ_öô
(
my_öô
);

103 
moduÀ_exô
(
my_exô
);

104 
MODULE_LICENSE
("GPL");

105 
MODULE_AUTHOR
("Ma James");

	@module_test/proc_fs/myproc.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@module_test/rtnetlink/mon_ip.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<√töë/ö.h
>

4 
	~<löux/√éök.h
>

5 
	~<löux/π√éök.h
>

6 
	~<√t/if.h
>

9 
	$maö
()

11 
sockaddr_∆
 
addr
;

12 
∆s
,
Àn
,
πl
;

13 
buf„r
[4096];

14 
∆msghdr
 *
∆h
;

15 
iÁddrmsg
 *
iÁ
;

16 
π©å
 *
πh
;

18 i‡((
∆s
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
)Ë=-1Ë
	`≥º‹
 ("socket failure\n");

20 
	`mem£t
 (&
addr
,0,(addr));

21 
addr
.
∆_Ámûy
 = 
AF_NETLINK
;

22 
addr
.
∆_groups
 = 
RTMGRP_IPV4_IFADDR
;

24 i‡(
	`böd
(
∆s
, (
sockaddr
 *)&
addr
, ◊ddr)Ë=-1Ë
	`≥º‹
 ("bind failure\n");

26 
∆h
 = (
∆msghdr
 *)
buf„r
;

27 (
Àn
 = 
	`ªcv
 (
∆s
,
∆h
,4096,0)) > 0)

29 ;(
	`NLMSG_OK
 (
∆h
, 
Àn
)Ë&& (∆h->
∆msg_ty≥
 !
NLMSG_DONE
);Çlh = 
	`NLMSG_NEXT
(nlh,Üen))

31 i‡(
∆h
->
∆msg_ty≥
 !
RTM_NEWADDR
) ;

33 
iÁ
 = (
iÁddrmsg
 *Ë
	`NLMSG_DATA
 (
∆h
);

35 
πh
 = 
	`IFA_RTA
 (
iÁ
);

36 
πl
 = 
	`IFA_PAYLOAD
 (
∆h
);

37 ;
πl
 && 
	`RTA_OK
 (
πh
,Ñé);Ñth = 
	`RTA_NEXT
 (rth,rtl))

39 
«me
[
IFNAMSIZ
];

40 
uöt32_t
 
ùaddr
;

42 i‡(
πh
->
πa_ty≥
 !
IFA_LOCAL
) ;

44 
ùaddr
 = * ((
uöt32_t
 *)
	`RTA_DATA
(
πh
));

45 
ùaddr
 = 
	`ht⁄l
(ipaddr);

47 
	`Ârötf
 (
°dout
,"%†i†now %X\n",
	`if_ödext⁄ame
(
iÁ
->
iÁ_ödex
,
«me
),
ùaddr
);

51 
	}
}

	@module_test/rtnetlink/rtnetlink.c

1 
	~<î∫o.h
>

2 
	~<îr‹.h
>

3 
	~<√tdb.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<uni°d.h
>

8 
	~<√töë/ö.h
>

9 
	~<sys/sockë.h
>

10 
	~<sys/io˘l.h
>

11 
	~<löux/if.h
>

12 
	~<löux/√éök.h
>

13 
	~<löux/π√éök.h
>

16 
	#NIPQUAD
(
addr
) \

17 ((*)&
addr
)[0], \

18 ((*)&
addr
)[1], \

19 ((*)&
addr
)[2], \

20 ((*)&
addr
)[3]

	)

22 
	#NIPQUAD_FMT
 "%u.%u.%u.%u"

	)

24 
	#NIP6
(
addr
) \

25 
	`¡ohs
((
addr
).
s6_addr16
[0]), \

26 
	`¡ohs
((
addr
).
s6_addr16
[1]), \

27 
	`¡ohs
((
addr
).
s6_addr16
[2]), \

28 
	`¡ohs
((
addr
).
s6_addr16
[3]), \

29 
	`¡ohs
((
addr
).
s6_addr16
[4]), \

30 
	`¡ohs
((
addr
).
s6_addr16
[5]), \

31 
	`¡ohs
((
addr
).
s6_addr16
[6]), \

32 
	`¡ohs
((
addr
).
s6_addr16
[7])

	)

34 
	#NIP6_FMT
 "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x"

	)

36 
	#INFINITY_LIFE_TIME
 0xFFFFFFFFU

	)

38 
	$maö
()

42 
∆msghdr
 
n
;

43 
iÁddrmsg
 
r
;

44 
buf
[1024];

45 } 
ªq
;

47 
π©å
 *
πa
;

48 
sockaddr_ö6
 *
sö6p
;

49 
sockaddr_ö
 *
söp
;

50 
°©us
;

51 
buf
[16384];

52 
∆msghdr
 *
∆mp
;

53 
iÁddrmsg
 *
πmp
;

54 
π©å
 *
π©p
;

55 
π©åÀn
;

56 
ö_addr
 *
öp
;

57 
ö6_addr
 *
ö6p
;

58 
iÁ_ˇcheöfo
 *
ˇche_öfo
;

60 
fd
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_DGRAM
, 
NETLINK_ROUTE
);

71 
	`mem£t
(&
ªq
, 0, (req));

72 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iÁddrmsg
));

73 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ROOT
;

74 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETADDR
;

80 
ªq
.
r
.
iÁ_Ámûy
 = 
AF_INET6
;

87 
πa
 = (
π©å
 *)(((*)&
ªq
Ë+ 
	`NLMSG_ALIGN
‘eq.
n
.
∆msg_Àn
));

88 
πa
->
πa_Àn
 = 
	`RTA_LENGTH
(16);

92 
°©us
 = 
	`£nd
(
fd
, &
ªq
,Ñeq.
n
.
∆msg_Àn
, 0);

94 i‡(
°©us
 < 0) {

95 
	`≥º‹
("send");

99 
°©us
 = 
	`ªcv
(
fd
, 
buf
, (buf), 0);

101 i‡(
°©us
 < 0) {

102 
	`≥º‹
("recv");

106 if(
°©us
 == 0){

107 
	`¥ötf
("EOF\n");

114 
∆mp
 = (
∆msghdr
 *)
buf
; 
°©us
 > (*nlmp);){

115 
Àn
 = 
∆mp
->
∆msg_Àn
;

116 
ªq_Àn
 = 
Àn
 - (*
∆mp
);

118 i‡(
ªq_Àn
<0 || 
Àn
>
°©us
) {

119 
	`¥ötf
("error\n");

123 i‡(!
	`NLMSG_OK
(
∆mp
, 
°©us
)) {

124 
	`¥ötf
("NLMSGÇot OK\n");

128 
πmp
 = (
iÁddrmsg
 *)
	`NLMSG_DATA
(
∆mp
);

129 
π©p
 = (
π©å
 *)
	`IFA_RTA
(
πmp
);

133 
	`¥ötf
("Index O‡IÁ˚%d\n",
πmp
->
iÁ_ödex
);

135 
π©åÀn
 = 
	`IFA_PAYLOAD
(
∆mp
);

137 ; 
	`RTA_OK
(
π©p
, 
π©åÀn
);Ñèç = 
	`RTA_NEXT
(rtatp,Ñtattrlen)) {

153 if(
π©p
->
πa_ty≥
 =
IFA_CACHEINFO
){

154 
ˇche_öfo
 = (
iÁ_ˇcheöfo
 *)
	`RTA_DATA
(
π©p
);

155 i‡(
ˇche_öfo
->
iÁ_vÆid
 =
INFINITY_LIFE_TIME
)

156 
	`¥ötf
("valid_lft forever\n");

158 
	`¥ötf
("vÆid_l· %u£c\n", 
ˇche_öfo
->
iÁ_vÆid
);

160 i‡(
ˇche_öfo
->
iÁ_¥e„ªd
 =
INFINITY_LIFE_TIME
)

161 
	`¥ötf
("Öreferred_lft forever\n");

163 
	`¥ötf
("Öª„ºed_l· %u£c\n",
ˇche_öfo
->
iÁ_¥e„ªd
);

168 if(
π©p
->
πa_ty≥
 =
IFA_ADDRESS
){

170 
ö6p
 = (
ö6_addr
 *)
	`RTA_DATA
(
π©p
);

171 
	`¥ötf
("addr0: " 
NIP6_FMT
 "\n",
	`NIP6
(*
ö6p
));

175 if(
π©p
->
πa_ty≥
 =
IFA_LOCAL
){

177 
ö6p
 = (
ö6_addr
 *)
	`RTA_DATA
(
π©p
);

178 
	`¥ötf
("addr1: " 
NIP6_FMT
 "\n",
	`NIP6
(*
ö6p
));

182 if(
π©p
->
πa_ty≥
 =
IFA_BROADCAST
){

184 
ö6p
 = (
ö6_addr
 *)
	`RTA_DATA
(
π©p
);

185 
	`¥ötf
("bˇèddr: " 
NIP6_FMT
 "\n",
	`NIP6
(*
ö6p
));

189 if(
π©p
->
πa_ty≥
 =
IFA_ANYCAST
){

191 
ö6p
 = (
ö6_addr
 *)
	`RTA_DATA
(
π©p
);

192 
	`¥ötf
("™yˇ°addr: "
NIP6_FMT
"\n",
	`NIP6
(*
ö6p
));

197 
°©us
 -
	`NLMSG_ALIGN
(
Àn
);

198 
∆mp
 = (
∆msghdr
*)((*Ílm∞+ 
	`NLMSG_ALIGN
(
Àn
));

202 
	}
}

	@net-tools-1.60/arp.c

55 
	~<sys/ty≥s.h
>

56 
	~<sys/sockë.h
>

57 
	~<sys/io˘l.h
>

58 
	~<√t/if.h
>

61 
	~<√t/if_¨p.h
>

62 
	~<°dlib.h
>

63 
	~<°dio.h
>

64 
	~<î∫o.h
>

65 
	~<˘y≥.h
>

66 
	~<f˙é.h
>

67 
	~<°rög.h
>

68 
	~<gë›t.h
>

69 
	~<uni°d.h
>

70 
	~"√t-suµ‹t.h
"

71 
	~"∑th«mes.h
"

72 
	~"vîsi⁄.h
"

73 
	~"c⁄fig.h
"

74 
	~"öé.h
"

75 
	~"utû.h
"

77 
	#DFLT_AF
 "öë"

	)

78 
	#DFLT_HW
 "ëhî"

	)

80 
	#FEATURE_ARP


	)

81 
	~"lib/√t-„©uªs.h
"

83 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "arp 1.88 (2001-04-04)";

85 
	g›t_n
 = 0;

86 
	g›t_N
 = 0;

87 
	g›t_v
 = 0;

88 
	g›t_D
 = 0;

89 
	g›t_e
 = 0;

90 
	g›t_a
 = 0;

91 
a·y≥
 *
	g≠
;

92 
hwty≥
 *
	ghw
;

93 
	gsockfd
 = 0;

94 
	ghw_£t
 = 0;

95 
	gdevi˚
[16] = "";

96 
ußge
();

99 
	$¨p_dñ
(**
¨gs
)

101 
ho°
[128];

102 
¨¥eq
 
ªq
;

103 
sockaddr
 
ß
;

104 
Êags
 = 0;

105 
îr
;

107 
	`mem£t
((*Ë&
ªq
, 0, (req));

110 i‡(*
¨gs
 =
NULL
) {

111 
	`Ârötf
(
°dîr
, 
	`_
("arp:Çeed hostÇame\n"));

114 
	`ß„_°∫˝y
(
ho°
, *
¨gs
, ( host));

115 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

116 
≠
->
	`hîr‹
(
ho°
);

120 
	`mem˝y
((*Ë&
ªq
.
¨p_∑
, (*Ë&
ß
, (
sockaddr
));

122 i‡(
hw_£t
)

123 
ªq
.
¨p_ha
.
ß_Ámûy
 = 
hw
->
ty≥
;

125 
ªq
.
¨p_Êags
 = 
ATF_PERM
;

126 
¨gs
++;

127 *
¨gs
 !
NULL
) {

128 i‡(
›t_v
)

129 
	`Ârötf
(
°dîr
, "¨gs=%s\n", *
¨gs
);

130 i‡(!
	`°rcmp
(*
¨gs
, "pub")) {

131 
Êags
 |= 1;

132 
¨gs
++;

135 i‡(!
	`°rcmp
(*
¨gs
, "priv")) {

136 
Êags
 |= 2;

137 
¨gs
++;

140 i‡(!
	`°rcmp
(*
¨gs
, "temp")) {

141 
ªq
.
¨p_Êags
 &~
ATF_PERM
;

142 
¨gs
++;

145 i‡(!
	`°rcmp
(*
¨gs
, "trail")) {

146 
ªq
.
¨p_Êags
 |
ATF_USETRAILERS
;

147 
¨gs
++;

150 i‡(!
	`°rcmp
(*
¨gs
, "dontpub")) {

151 #ifde‡
HAVE_ATF_DONTPUB


152 
ªq
.
¨p_Êags
 |
ATF_DONTPUB
;

154 
	`ENOSUPP
("arp", "ATF_DONTPUB");

156 
¨gs
++;

159 i‡(!
	`°rcmp
(*
¨gs
, "auto")) {

160 #ifde‡
HAVE_ATF_MAGIC


161 
ªq
.
¨p_Êags
 |
ATF_MAGIC
;

163 
	`ENOSUPP
("arp", "ATF_MAGIC");

165 
¨gs
++;

168 i‡(!
	`°rcmp
(*
¨gs
, "dev")) {

169 i‡(*++
¨gs
 =
NULL
)

170 
	`ußge
();

171 
	`ß„_°∫˝y
(
devi˚
, *
¨gs
, (device));

172 
¨gs
++;

175 i‡(!
	`°rcmp
(*
¨gs
, "netmask")) {

176 i‡(*++
¨gs
 =
NULL
)

177 
	`ußge
();

178 i‡(
	`°rcmp
(*
¨gs
, "255.255.255.255") != 0) {

179 
	`°r˝y
(
ho°
, *
¨gs
);

180 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

181 
≠
->
	`hîr‹
(
ho°
);

184 
	`mem˝y
((*Ë&
ªq
.
¨p_√tmask
, (*Ë&
ß
,

185 (
sockaddr
));

186 
ªq
.
¨p_Êags
 |
ATF_NETMASK
;

188 
¨gs
++;

191 
	`ußge
();

193 i‡(
Êags
 == 0)

194 
Êags
 = 3;

196 
	`°r˝y
(
ªq
.
¨p_dev
, 
devi˚
);

198 
îr
 = -1;

201 i‡(
Êags
 & 2) {

202 i‡(
›t_v
)

203 
	`Ârötf
(
°dîr
, "arp: SIOCDARP(nopub)\n");

204 i‡((
îr
 = 
	`io˘l
(
sockfd
, 
SIOCDARP
, &
ªq
) < 0)) {

205 i‡(
î∫o
 =
ENXIO
) {

206 i‡(
Êags
 & 1)

207 
n›ub
;

208 
	`¥ötf
(
	`_
("NÿARPÉ¡ry f‹ %s\n"), 
ho°
);

211 
	`≥º‹
("SIOCDARP(priv)");

215 i‡((
Êags
 & 1Ë&& (
îr
)) {

216 
n›ub
:

217 
ªq
.
¨p_Êags
 |
ATF_PUBL
;

218 i‡(
›t_v
)

219 
	`Ârötf
(
°dîr
, "arp: SIOCDARP(pub)\n");

220 i‡(
	`io˘l
(
sockfd
, 
SIOCDARP
, &
ªq
) < 0) {

221 i‡(
î∫o
 =
ENXIO
) {

222 
	`¥ötf
(
	`_
("NÿARPÉ¡ry f‹ %s\n"), 
ho°
);

225 
	`≥º‹
("SIOCDARP(pub)");

230 
	}
}

233 
	$¨p_gëdevhw
(*
i‚ame
, 
sockaddr
 *
ß
, 
hwty≥
 *
hw
)

235 
i‰eq
 
i‰
;

236 
hwty≥
 *
xhw
;

238 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

239 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

240 
	`Ârötf
(
°dîr
, 
	`_
("¨p: c™àgë HW-Addªs†f‹ `%s': %s.\n"), 
i‚ame
, 
	`°ªº‹
(
î∫o
));

243 i‡(
hw
 && (
i‰
.
i‰_hwaddr
.
ß_Ámûy
 !hw->
ty≥
)) {

244 
	`Ârötf
(
°dîr
, 
	`_
("arp:ÖrotocolÅype mismatch.\n"));

247 
	`mem˝y
((*Ë
ß
, (*Ë&(
i‰
.
i‰_hwaddr
), (
sockaddr
));

249 i‡(
›t_v
) {

250 i‡(!(
xhw
 = 
	`gë_hw¡y≥
(
i‰
.
i‰_hwaddr
.
ß_Ámûy
)Ë|| (xhw->
¥öt
 == 0)) {

251 
xhw
 = 
	`gë_hw¡y≥
(-1);

253 
	`Ârötf
(
°dîr
, 
	`_
("¨p: devi˚ `%s' ha†HWáddªs†%†`%s'.\n"), 
i‚ame
, 
xhw
->
«me
, xhw->
	`¥öt
((*)&
i‰
.
i‰_hwaddr
.
ß_d©a
));

256 
	}
}

259 
	$¨p_£t
(**
¨gs
)

261 
ho°
[128];

262 
¨¥eq
 
ªq
;

263 
sockaddr
 
ß
;

264 
Êags
;

266 
	`mem£t
((*Ë&
ªq
, 0, (req));

269 i‡(*
¨gs
 =
NULL
) {

270 
	`Ârötf
(
°dîr
, 
	`_
("arp:Çeed hostÇame\n"));

273 
	`ß„_°∫˝y
(
ho°
, *
¨gs
++, ( host));

274 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

275 
≠
->
	`hîr‹
(
ho°
);

279 
	`mem˝y
((*Ë&
ªq
.
¨p_∑
, (*Ë&
ß
, (
sockaddr
));

282 i‡(*
¨gs
 =
NULL
) {

283 
	`Ârötf
(
°dîr
, 
	`_
("arp:Çeed hardwareáddress\n"));

286 i‡(
›t_D
) {

287 i‡(
	`¨p_gëdevhw
(*
¨gs
++, &
ªq
.
¨p_ha
, 
hw_£t
 ? 
hw
 : 
NULL
) < 0)

290 i‡(
hw
->
	`öput
(*
¨gs
++, &
ªq
.
¨p_ha
) < 0) {

291 
	`Ârötf
(
°dîr
, 
	`_
("arp: invalid hardwareáddress\n"));

297 
Êags
 = 
ATF_PERM
 | 
ATF_COM
;

298 *
¨gs
 !
NULL
) {

299 i‡(!
	`°rcmp
(*
¨gs
, "temp")) {

300 
Êags
 &~
ATF_PERM
;

301 
¨gs
++;

304 i‡(!
	`°rcmp
(*
¨gs
, "pub")) {

305 
Êags
 |
ATF_PUBL
;

306 
¨gs
++;

309 i‡(!
	`°rcmp
(*
¨gs
, "priv")) {

310 
Êags
 &~
ATF_PUBL
;

311 
¨gs
++;

314 i‡(!
	`°rcmp
(*
¨gs
, "trail")) {

315 
Êags
 |
ATF_USETRAILERS
;

316 
¨gs
++;

319 i‡(!
	`°rcmp
(*
¨gs
, "dontpub")) {

320 #ifde‡
HAVE_ATF_DONTPUB


321 
Êags
 |
ATF_DONTPUB
;

323 
	`ENOSUPP
("arp", "ATF_DONTPUB");

325 
¨gs
++;

328 i‡(!
	`°rcmp
(*
¨gs
, "auto")) {

329 #ifde‡
HAVE_ATF_MAGIC


330 
Êags
 |
ATF_MAGIC
;

332 
	`ENOSUPP
("arp", "ATF_MAGIC");

334 
¨gs
++;

337 i‡(!
	`°rcmp
(*
¨gs
, "dev")) {

338 i‡(*++
¨gs
 =
NULL
)

339 
	`ußge
();

340 
	`ß„_°∫˝y
(
devi˚
, *
¨gs
, (device));

341 
¨gs
++;

344 i‡(!
	`°rcmp
(*
¨gs
, "netmask")) {

345 i‡(*++
¨gs
 =
NULL
)

346 
	`ußge
();

347 i‡(
	`°rcmp
(*
¨gs
, "255.255.255.255") != 0) {

348 
	`°r˝y
(
ho°
, *
¨gs
);

349 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

350 
≠
->
	`hîr‹
(
ho°
);

353 
	`mem˝y
((*Ë&
ªq
.
¨p_√tmask
, (*Ë&
ß
,

354 (
sockaddr
));

355 
Êags
 |
ATF_NETMASK
;

357 
¨gs
++;

360 
	`ußge
();

364 
ªq
.
¨p_Êags
 = 
Êags
;

366 
	`°r˝y
(
ªq
.
¨p_dev
, 
devi˚
);

369 i‡(
›t_v
)

370 
	`Ârötf
(
°dîr
, "arp: SIOCSARP()\n");

371 i‡(
	`io˘l
(
sockfd
, 
SIOCSARP
, &
ªq
) < 0) {

372 
	`≥º‹
("SIOCSARP");

376 
	}
}

380 
	$¨p_fûe
(*
«me
)

382 
buff
[1024];

383 *
•
, *
¨gs
[32];

384 
löír
, 
¨gc
;

385 
FILE
 *
Â
;

387 i‡((
Â
 = 
	`f›í
(
«me
, "r")Ë=
NULL
) {

388 
	`Ârötf
(
°dîr
, 
	`_
("¨p: c™nŸ o≥¿ëhîfûê%†!\n"), 
«me
);

392 
löír
 = 0;

393 
	`fgës
(
buff
, (buff), 
Â
Ë!(*Ë
NULL
) {

394 
löír
++;

395 i‡(
›t_v
 == 1)

396 
	`Ârötf
(
°dîr
, ">> %s", 
buff
);

397 i‡((
•
 = 
	`°rchr
(
buff
, '\n')Ë!(*Ë
NULL
)

398 *
•
 = '\0';

399 i‡(
buff
[0] == '#' || buff[0] == '\0')

402 
¨gc
 = 
	`gë¨gs
(
buff
, 
¨gs
);

403 i‡(
¨gc
 < 2) {

404 
	`Ârötf
(
°dîr
, 
	`_
("arp: formatÉrror onÜine %u ofÉtherfile %s !\n"),

405 
löír
, 
«me
);

408 i‡(
	`°rchr
 (
¨gs
[0], ':'Ë!
NULL
) {

411 *
˝
;

412 
˝
 = 
¨gs
[1];

413 
¨gs
[1] =árgs[0];

414 
¨gs
[0] = 
˝
;

416 i‡(
	`¨p_£t
(
¨gs
) != 0)

417 
	`Ârötf
(
°dîr
, 
	`_
("arp: cannot setÉntry onÜine %u ofÉtherfile %s !\n"),

418 
löír
, 
«me
);

421 (Ë
	`f˛o£
(
Â
);

423 
	}
}

427 
	$¨p_di•_2
(*
«me
, 
ty≥
, 
¨p_Êags
, *
hwa
, *
mask
, *
dev
)

429 
tôÀ
 = 0;

430 
hwty≥
 *
xhw
;

431 
Êags
[10];

433 
xhw
 = 
	`gë_hw¡y≥
(
ty≥
);

434 i‡(
xhw
 =
NULL
)

435 
xhw
 = 
	`gë_hwty≥
(
DFLT_HW
);

437 i‡(
tôÀ
++ == 0) {

438 
	`¥ötf
(
	`_
("Address HWtype HWaddress Flags Mask Iface\n"));

441 
Êags
[0] = '\0';

442 i‡(
¨p_Êags
 & 
ATF_COM
)

443 
	`°rˇt
(
Êags
, "C");

444 i‡(
¨p_Êags
 & 
ATF_PERM
)

445 
	`°rˇt
(
Êags
, "M");

446 i‡(
¨p_Êags
 & 
ATF_PUBL
)

447 
	`°rˇt
(
Êags
, "P");

448 #ifde‡
HAVE_ATF_MAGIC


449 i‡(
¨p_Êags
 & 
ATF_MAGIC
)

450 
	`°rˇt
(
Êags
, "A");

452 #ifde‡
HAVE_ATF_DONTPUB


453 i‡(
¨p_Êags
 & 
ATF_DONTPUB
)

454 
	`°rˇt
(
Êags
, "!");

456 i‡(
¨p_Êags
 & 
ATF_USETRAILERS
)

457 
	`°rˇt
(
Êags
, "T");

459 i‡(!(
¨p_Êags
 & 
ATF_NETMASK
))

460 
mask
 = "";

462 
	`¥ötf
("%-23.23† ", 
«me
);

464 i‡(!(
¨p_Êags
 & 
ATF_COM
)) {

465 i‡(
¨p_Êags
 & 
ATF_PUBL
)

466 
	`¥ötf
("%-8.8s%-20.20s", "*", "*");

468 
	`¥ötf
("%-8.8s%-20.20s", "", 
	`_
("(incomplete)"));

470 
	`¥ötf
("%-8.8s%-20.20s", 
xhw
->
«me
, 
hwa
);

473 
	`¥ötf
("%-6.6s%-15.15†%s\n", 
Êags
, 
mask
, 
dev
);

474 
	}
}

477 
	$¨p_di•
(*
«me
, *
ù
, 
ty≥
, 
¨p_Êags
, *
hwa
, *
mask
, *
dev
)

479 
hwty≥
 *
xhw
;

481 
xhw
 = 
	`gë_hw¡y≥
(
ty≥
);

482 i‡(
xhw
 =
NULL
)

483 
xhw
 = 
	`gë_hwty≥
(
DFLT_HW
);

485 
	`¥ötf
(
	`_
("%†(%sË© "), 
«me
, 
ù
);

487 i‡(!(
¨p_Êags
 & 
ATF_COM
)) {

488 i‡(
¨p_Êags
 & 
ATF_PUBL
)

489 
	`¥ötf
("* ");

491 
	`¥ötf
(
	`_
("<incomplete> "));

493 
	`¥ötf
("%†[%s] ", 
hwa
, 
xhw
->
«me
);

496 i‡(
¨p_Êags
 & 
ATF_NETMASK
)

497 
	`¥ötf
(
	`_
("√tmask %†"), 
mask
);

499 i‡(
¨p_Êags
 & 
ATF_PERM
)

500 
	`¥ötf
("PERM ");

501 i‡(
¨p_Êags
 & 
ATF_PUBL
)

502 
	`¥ötf
("PUP ");

503 #ifde‡
HAVE_ATF_MAGIC


504 i‡(
¨p_Êags
 & 
ATF_MAGIC
)

505 
	`¥ötf
("AUTO ");

507 #ifde‡
HAVE_ATF_DONTPUB


508 i‡(
¨p_Êags
 & 
ATF_DONTPUB
)

509 
	`¥ötf
("DONTPUB ");

511 i‡(
¨p_Êags
 & 
ATF_USETRAILERS
)

512 
	`¥ötf
("TRAIL ");

514 
	`¥ötf
(
	`_
("⁄ %s\n"), 
dev
);

515 
	}
}

519 
	$¨p_show
(*
«me
)

521 
ho°
[100];

522 
sockaddr
 
ß
;

523 
ù
[100];

524 
hwa
[100];

525 
mask
[100];

526 
löe
[200];

527 
dev
[100];

528 
ty≥
, 
Êags
;

529 
FILE
 *
Â
;

530 *
ho°«me
;

531 
num
, 
íåõs
 = 0, 
showed
 = 0;

533 
ho°
[0] = '\0';

535 i‡(
«me
 !
NULL
) {

537 
	`ß„_°∫˝y
(
ho°
, 
«me
, ( host));

538 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

539 
≠
->
	`hîr‹
(
ho°
);

542 
	`ß„_°∫˝y
(
ho°
, 
≠
->
	`•röt
(&
ß
, 1), (host));

545 i‡((
Â
 = 
	`f›í
(
_PATH_PROCNET_ARP
, "r")Ë=
NULL
) {

546 
	`≥º‹
(
_PATH_PROCNET_ARP
);

550 i‡(
	`fgës
(
löe
, ÷öe), 
Â
Ë!(*Ë
NULL
) {

551 
	`°r˝y
(
mask
, "-");

552 
	`°r˝y
(
dev
, "-");

554 ; 
	`fgës
(
löe
, ÷öe), 
Â
);) {

555 
num
 = 
	`ssˇnf
(
löe
, "%s 0x%x 0x%x %100s %100s %100s\n",

556 
ù
, &
ty≥
, &
Êags
, 
hwa
, 
mask
, 
dev
);

557 i‡(
num
 < 4)

560 
íåõs
++;

562 i‡(
hw_£t
 && (
ty≥
 !
hw
->type))

566 i‡(
ho°
[0] && 
	`°rcmp
(
ù
, host))

570 i‡(
devi˚
[0] && 
	`°rcmp
(
dev
, device))

573 
showed
++;

575 i‡(
›t_n
)

576 
ho°«me
 = "?";

578 i‡(
≠
->
	`öput
(0, 
ù
, &
ß
) < 0)

579 
ho°«me
 = 
ù
;

581 
ho°«me
 = 
≠
->
	`•röt
(&
ß
, 
›t_n
 | 0x8000);

582 i‡(
	`°rcmp
(
ho°«me
, 
ù
) == 0)

583 
ho°«me
 = "?";

586 i‡(
›t_e
)

587 
	`¨p_di•_2
(
ho°«me
[0] ='?' ? 
ù
 : ho°«me, 
ty≥
, 
Êags
, 
hwa
, 
mask
, 
dev
);

589 
	`¨p_di•
(
ho°«me
, 
ù
, 
ty≥
, 
Êags
, 
hwa
, 
mask
, 
dev
);

592 i‡(
›t_v
)

593 
	`¥ötf
(
	`_
("E¡rõs: %d\tSkù≥d: %d\tFound: %d\n"), 
íåõs
,É¡rõ†- 
showed
, showed);

595 i‡(!
showed
) {

596 i‡(
ho°
[0] && !
›t_a
)

597 
	`¥ötf
(
	`_
("%†(%sË--Çÿíåy\n"), 
«me
, 
ho°
);

598 i‡(
hw_£t
 || 
ho°
[0] || 
devi˚
[0]) {

599 
	`¥ötf
(
	`_
("¨p: i¿%dÉ¡rõ†nÿm©ch found.\n"), 
íåõs
);

602 (Ë
	`f˛o£
(
Â
);

604 
	}
}

606 
	$vîsi⁄
()

608 
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Fótuªs
);

609 
	`exô
(
E_VERSION
);

610 
	}
}

612 
	$ußge
()

614 
	`Ârötf
(
°dîr
, 
	`_
("Usage:\nárp [-vn] [<HW>] [-i <if>] [-a] [<hostname>] <-Display ARP cache\n"));

615 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [-i <if>] -d <hostname> [pub][nopub] <-Delete ARPÉntry\n"));

616 
	`Ârötf
(
°dîr
, 
	`_
("árp [-vnD] [<HW>] [-i <if>] -f [<filename>] <-AddÉntry from file\n"));

617 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [<HW>] [-i <if>] -s <hostname> <hwaddr> [temp][nopub] <-AddÉntry\n"));

618 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [<HW>] [-i <if>] -s <hostname> <hwaddr> [netmask <nm>]Öub <-''-\n"));

619 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [<HW>] [-i <if>] -Ds <hostname> <if> [netmask <nm>]Öub <-''-\n\n"));

621 
	`Ârötf
(
°dîr
, 
	`_
(" -a display (all) hosts inálternative (BSD) style\n"));

622 
	`Ârötf
(
°dîr
, 
	`_
(" -s, --set setáÇew ARPÉntry\n"));

623 
	`Ârötf
(
°dîr
, 
	`_
(" -d, --delete deleteá specifiedÉntry\n"));

624 
	`Ârötf
(
°dîr
, 
	`_
(" -v, --verbose be verbose\n"));

625 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --numeric don'tÑesolveÇames\n"));

626 
	`Ârötf
(
°dîr
, 
	`_
(" -i, --device specifyÇetwork interface (e.g.Éth0)\n"));

627 
	`Ârötf
(
°dîr
, 
	`_
(" -D, --use-deviceÑead <hwaddr> from given device\n"));

628 
	`Ârötf
(
°dîr
, 
	`_
(" -A, -p, --protocol specifyÖrotocol family\n"));

629 
	`Ârötf
(
°dîr
, 
	`_
(" -f, --fileÑeadÇewÉntries from file or from /etc/ethers\n\n"));

631 
	`Ârötf
(
°dîr
, 
	`_
(" <HW>=U£ '-H <hw>'Åÿ•ecify h¨dw¨êaddªs†ty≥. DeÁu…: %s\n"), 
DFLT_HW
);

632 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossible hardwareÅypes (which support ARP):\n"));

633 
	`¥öt_hwli°
(1);

634 
	`exô
(
E_USAGE
);

635 
	}
}

637 
	$maö
(
¨gc
, **
¨gv
)

639 
i
, 
l›
, 
wh©
;

640 
›ti⁄
 
l⁄g›ts
[] =

655 {
NULL
, 0, 0, 0}

658 #i‡
I18N


659 
	`£éoˇÀ
 (
LC_ALL
, "");

660 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

661 
	`ãxtdomaö
("net-tools");

665 i‡((
hw
 = 
	`gë_hwty≥
(
DFLT_HW
)Ë=
NULL
) {

666 
	`Ârötf
(
°dîr
, 
	`_
("%s: h¨dw¨êty≥ÇŸ suµ‹ãd!\n"), 
DFLT_HW
);

669 i‡((
≠
 = 
	`gë_a·y≥
(
DFLT_AF
)Ë=
NULL
) {

670 
	`Ârötf
(
°dîr
, 
	`_
("%s:áddªs†ÁmûyÇŸ suµ‹ãd!\n"), 
DFLT_AF
);

673 
wh©
 = 0;

677 (
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:H:adÂ:n£i:t:vh?DNV", 
l⁄g›ts
, &
l›
)Ë!
EOF
)

678 
i
) {

680 
wh©
 = 1;

681 
›t_a
 = 1;

684 
wh©
 = 2;

687 
wh©
 = 3;

690 
wh©
 = 4;

695 
›t_e
 = 1;

698 
›t_n
 = 
FLAG_NUM
;

701 
›t_D
 = 1;

704 
›t_N
 = 
FLAG_SYM
;

705 
	`Ârötf
(
°dîr
, 
	`_
("arp: -NÇot yet supported.\n"));

708 
›t_v
 = 1;

713 
≠
 = 
	`gë_a·y≥
(
›èrg
);

714 i‡(
≠
 =
NULL
) {

715 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: unknownáddress family.\n"),

716 
›èrg
);

717 
	`exô
(-1);

722 
hw
 = 
	`gë_hwty≥
(
›èrg
);

723 i‡(
hw
 =
NULL
) {

724 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: unknown hardwareÅype.\n"),

725 
›èrg
);

726 
	`exô
(-1);

728 
hw_£t
 = 1;

731 
	`ß„_°∫˝y
(
devi˚
, 
›èrg
, (device));

735 
	`vîsi⁄
();

739 
	`ußge
();

742 i‡(
≠
->
af
 !
AF_INET
) {

743 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: kernel only supports 'inet'.\n"),

744 
≠
->
«me
);

745 
	`exô
(-1);

749 if(
hw_£t
==0)

750 i‡((
hw
 = 
	`gë_hwty≥
(
DFLT_HW
)Ë=
NULL
) {

751 
	`Ârötf
(
°dîr
, 
	`_
("%s: h¨dw¨êty≥ÇŸ suµ‹ãd!\n"), 
DFLT_HW
);

755 i‡(
hw
->
Æí
 <= 0) {

756 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: hardwareÅype without ARP support.\n"),

757 
hw
->
«me
);

758 
	`exô
(-1);

760 i‡((
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

761 
	`≥º‹
("socket");

762 
	`exô
(-1);

765 
wh©
) {

767 
›t_e
 = 1;

768 
wh©
 = 
	`¨p_show
(
¨gv
[
›töd
]);

772 
wh©
 = 
	`¨p_show
(
¨gv
[
›töd
]);

776 
wh©
 = 
	`¨p_fûe
(
¨gv
[
›töd
] ?árgv[optind] : "/etc/ethers");

780 
wh©
 = 
	`¨p_dñ
(&
¨gv
[
›töd
]);

784 
wh©
 = 
	`¨p_£t
(&
¨gv
[
›töd
]);

788 
	`ußge
();

791 
	`exô
(
wh©
);

792 
	}
}

	@net-tools-1.60/config.h

22 
	#I18N
 0

	)

29 
	#HAVE_AFUNIX
 1

	)

30 
	#HAVE_AFINET
 1

	)

31 
	#HAVE_AFINET6
 0

	)

32 
	#HAVE_AFIPX
 1

	)

33 
	#HAVE_AFATALK
 1

	)

34 
	#HAVE_AFAX25
 1

	)

35 
	#HAVE_AFNETROM
 1

	)

36 
	#HAVE_AFROSE
 0

	)

37 
	#HAVE_AFX25
 1

	)

38 
	#HAVE_AFECONET
 0

	)

39 
	#HAVE_AFDEC√t
 0

	)

40 
	#HAVE_AFASH
 0

	)

47 
	#HAVE_HWETHER
 1

	)

48 
	#HAVE_HWARC
 1

	)

49 
	#HAVE_HWSLIP
 1

	)

50 
	#HAVE_HWPPP
 1

	)

51 
	#HAVE_HWTUNNEL
 1

	)

52 
	#HAVE_HWSTRIP
 1

	)

53 
	#HAVE_HWTR
 1

	)

54 
	#HAVE_HWAX25
 1

	)

55 
	#HAVE_HWROSE
 0

	)

56 
	#HAVE_HWNETROM
 1

	)

57 
	#HAVE_HWX25
 1

	)

58 
	#HAVE_HWFR
 1

	)

59 
	#HAVE_HWSIT
 0

	)

60 
	#HAVE_HWFDDI
 0

	)

61 
	#HAVE_HWHIPPI
 0

	)

62 
	#HAVE_HWASH
 0

	)

63 
	#HAVE_HWHDLCLAPB
 0

	)

64 
	#HAVE_HWIRDA
 1

	)

65 
	#HAVE_HWEC
 0

	)

72 
	#HAVE_FW_MASQUERADE
 0

	)

73 
	#HAVE_IP_TOOLS
 0

	)

74 
	#HAVE_MII
 0

	)

	@net-tools-1.60/hostname.c

33 
	~<°dio.h
>

34 
	~<uni°d.h
>

35 
	~<gë›t.h
>

36 
	~<°rög.h
>

37 
	~<√tdb.h
>

38 
	~<î∫o.h
>

39 
	~<sys/∑øm.h
>

40 
	~<√töë/ö.h
>

41 
	~<¨∑/öë.h
>

42 
	~"c⁄fig.h
"

43 
	~"vîsi⁄.h
"

44 
	~"../öé.h
"

46 #i‡
HAVE_AFDEC√t


47 
	~<√td√t/dn.h
>

50 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "hostname 1.100 (2001-04-14)";

52 *
	g¥ogøm_«me
;

53 
	g›t_v
;

55 
£th«me
(*);

56 
£td«me
(*);

57 
showh«me
(*, );

58 
ußge
();

59 
vîsi⁄
();

60 
£tfûíame
(*, );

62 
	#SETHOST
 1

	)

63 
	#SETDOMAIN
 2

	)

64 
	#SETNODE
 3

	)

66 #i‡
HAVE_AFDEC√t


67 
	$£ä«me
(*
¬ame
)

69 i‡(
›t_v
)

70 
	`Ârötf
(
°dîr
, 
	`_
("SettingÇodenameÅo `%s'\n"),

71 
¬ame
);

72 i‡(
	`£äodíame
(
¬ame
, 
	`°æí
(nname))) {

73 
î∫o
) {

74 
EPERM
:

75 
	`Ârötf
(
°dîr
, 
	`_
("%s: you mu° bêroŸÅÿch™gêthênodê«me\n"), 
¥ogøm_«me
);

77 
EINVAL
:

78 
	`Ârötf
(
°dîr
, 
	`_
("%s:Çamêtoÿl⁄g\n"), 
¥ogøm_«me
);

82 
	`exô
(1);

84 
	}
}

87 
	$£th«me
(*
h«me
)

89 i‡(
›t_v
)

90 
	`Ârötf
(
°dîr
, 
	`_
("Setting hostnameÅo `%s'\n"),

91 
h«me
);

92 i‡(
	`£tho°«me
(
h«me
, 
	`°æí
(hname))) {

93 
î∫o
) {

94 
EPERM
:

95 
	`Ârötf
(
°dîr
, 
	`_
("%s: you mu° bêroŸÅÿch™gêthêho°Çame\n"), 
¥ogøm_«me
);

97 
EINVAL
:

98 
	`Ârötf
(
°dîr
, 
	`_
("%s:Çamêtoÿl⁄g\n"), 
¥ogøm_«me
);

102 
	`exô
(1);

104 
	}
}

106 
	$£td«me
(*
d«me
)

108 i‡(
›t_v
)

109 
	`Ârötf
(
°dîr
, 
	`_
("Setting domainnameÅo `%s'\n"),

110 
d«me
);

111 i‡(
	`£tdomaö«me
(
d«me
, 
	`°æí
(dname))) {

112 
î∫o
) {

113 
EPERM
:

114 
	`Ârötf
(
°dîr
, 
	`_
("%s: you mu° bêroŸÅÿch™gêthêdomaöÇame\n"), 
¥ogøm_«me
);

116 
EINVAL
:

117 
	`Ârötf
(
°dîr
, 
	`_
("%s:Çamêtoÿl⁄g\n"), 
¥ogøm_«me
);

121 
	`exô
(1);

123 
	}
}

125 
	$showh«me
(*
h«me
, 
c
)

127 
ho°ít
 *
hp
;

128 *
p
, **
Æüs
;

129 
ö_addr
 **
ù
;

131 i‡(
›t_v
)

132 
	`Ârötf
(
°dîr
, 
	`_
("Resﬁvög `%s' ...\n"), 
h«me
);

133 i‡(!(
hp
 = 
	`gëho°by«me
(
h«me
))) {

134 
	`hîr‹
(
¥ogøm_«me
);

135 
	`exô
(1);

137 i‡(
›t_v
) {

138 
	`Ârötf
(
°dîr
, 
	`_
("Result: h_name=`%s'\n"),

139 
hp
->
h_«me
);

141 
Æüs
 = 
hp
->
h_Æü£s
;

142 
Æüs
[0])

143 
	`Ârötf
(
°dîr
, 
	`_
("Result: h_aliases=`%s'\n"),

144 *
Æüs
++);

146 
ù
 = (
ö_addr
 **Ë
hp
->
h_addr_li°
;

147 
ù
[0])

148 
	`Ârötf
(
°dîr
, 
	`_
("Result: h_addr_list=`%s'\n"),

149 
	`öë_¡ﬂ
(**
ù
++));

151 i‡(!(
p
 = 
	`°rchr
(
hp
->
h_«me
, '.')Ë&& (
c
 == 'd'))

154 
c
) {

156 
hp
->
h_Æü£s
[0])

157 
	`¥ötf
("%†", *
hp
->
h_Æü£s
++);

158 
	`¥ötf
("\n");

161 
hp
->
h_addr_li°
[0])

162 
	`¥ötf
("%†", 
	`öë_¡ﬂ
(*(
ö_addr
 *Ë*
hp
->
h_addr_li°
++));

163 
	`¥ötf
("\n");

166 
	`¥ötf
("%s\n", ++
p
);

169 
	`¥ötf
("%s\n", 
hp
->
h_«me
);

172 i‡(
p
 !
NULL
)

173 *
p
 = '\0';

174 
	`¥ötf
("%s\n", 
hp
->
h_«me
);

178 
	}
}

180 
	$£tfûíame
(*
«me
, 
wh©
)

182 
FILE
 *
fd
;

183 *
p
;

184 
Êöe
[
MAXHOSTNAMELEN
];

186 i‡((
fd
 = 
	`f›í
(
«me
, "r")Ë!
NULL
) {

187 
	`fgës
(
Êöe
, (Êöe), 
fd
Ë!
NULL
) {

188 i‡((
p
 = 
	`ödex
(
Êöe
, '\n')Ë!
NULL
)

189 *
p
 = '\0';

190 i‡(
›t_v
)

191 
	`Ârötf
(
°dîr
, ">> %s\n", 
Êöe
);

192 i‡(
Êöe
[0] == '#')

194 
wh©
) {

195 
SETHOST
:

196 
	`£th«me
(
Êöe
);

198 
SETDOMAIN
:

199 
	`£td«me
(
Êöe
);

201 #i‡
HAVE_AFDEC√t


202 
SETNODE
:

203 
	`£ä«me
(
Êöe
);

208 (Ë
	`f˛o£
(
fd
);

210 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't open `%s'\n"),

211 
¥ogøm_«me
, 
«me
);

212 
	`exô
(1);

214 
	}
}

216 
	$vîsi⁄
()

218 
	`Ârötf
(
°dîr
, "%s\n%s\n", 
Rñó£
, 
Vîsi⁄
);

219 
	`exô
(5);

220 
	}
}

222 
	$ußge
()

224 
	`Ârötf
(
°dîr
, 
	`_
("Usage: hostname [-v] {hostname|-F file} set hostname (from file)\n"));

225 
	`Ârötf
(
°dîr
, 
	`_
(" domainname [-v] {nisdomain|-F file} set NIS domainname (from file)\n"));

226 #i‡
HAVE_AFDEC√t


227 
	`Ârötf
(
°dîr
, 
	`_
("Çodename [-v] {nodename|-F file} set DECnetÇodeÇame (from file)\n"));

229 
	`Ârötf
(
°dîr
, 
	`_
(" hostname [-v] [-d|-f|-s|-a|-i|-y|-n] display formattedÇame\n"));

230 
	`Ârötf
(
°dîr
, 
	`_
(" hostname [-v] display hostname\n\n"));

231 
	`Ârötf
(
°dîr
, 
	`_
(" hostname -V|--version|-h|--helpÖrint infoándÉxit\n\n"));

232 
	`Ârötf
(
°dîr
, 
	`_
(" dnsdomainname=hostname -d, {yp,nis,}domainname=hostname -y\n\n"));

233 
	`Ârötf
(
°dîr
, 
	`_
(" -s, --short short hostÇame\n"));

234 
	`Ârötf
(
°dîr
, 
	`_
(" -a, --aliasáliasÇames\n"));

235 
	`Ârötf
(
°dîr
, 
	`_
(" -i, --ip-addressáddresses forÅhe hostname\n"));

236 
	`Ârötf
(
°dîr
, 
	`_
(" -f, --fqdn, --longÜong hostÇame (FQDN)\n"));

237 
	`Ârötf
(
°dîr
, 
	`_
(" -d, --domain DNS domainÇame\n"));

238 
	`Ârötf
(
°dîr
, 
	`_
(" -y, --yp, --nis NIS/YP domainname\n"));

239 #i‡
HAVE_AFDEC√t


240 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --node DECnetÇodeÇame\n"));

242 
	`Ârötf
(
°dîr
, 
	`_
(" -F, --fileÑead hostname or NIS domainname from given file\n\n"));

243 
	`Ârötf
(
°dîr
, 
	`_
(

250 
	`exô
(4);

251 
	}
}

254 
	$maö
(
¨gc
, **
¨gv
)

256 
c
;

257 
ty≥
 = '\0';

258 
›ti⁄_ödex
 = 0;

259 
wh©
 = 0;

260 
my«me
[
MAXHOSTNAMELEN
 + 1] =

262 *
fûe
 = 
NULL
;

264 c⁄° 
›ti⁄
 
l⁄g_›ti⁄s
[] =

266 {"domaö", 
no_¨gumít
, 0, 'd'},

267 {"fûe", 
ªquúed_¨gumít
, 0, 'F'},

268 {"fqdn", 
no_¨gumít
, 0, 'f'},

269 {"hñp", 
no_¨gumít
, 0, 'h'},

270 {"l⁄g", 
no_¨gumít
, 0, 'f'},

271 {"sh‹t", 
no_¨gumít
, 0, 's'},

272 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

273 {"vîbo£", 
no_¨gumít
, 0, 'v'},

274 {"Æüs", 
no_¨gumít
, 0, 'a'},

275 {"ù-addªss", 
no_¨gumít
, 0, 'i'},

276 {"nis", 
no_¨gumít
, 0, 'y'},

277 {"yp", 
no_¨gumít
, 0, 'y'},

278 #i‡
HAVE_AFDEC√t


279 {"node", 
no_¨gumít
, 0, 'n'},

283 #i‡
I18N


284 
	`£éoˇÀ
 (
LC_ALL
, "");

285 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

286 
	`ãxtdomaö
("net-tools");

288 
¥ogøm_«me
 = (
	`rödex
(
¨gv
[0], '/')) ?Ñindex(argv[0], '/') + 1 :árgv[0];

290 i‡(!
	`°rcmp
(
¥ogøm_«me
, "ypdomainname") ||

291 !
	`°rcmp
(
¥ogøm_«me
, "domainname") ||

292 !
	`°rcmp
(
¥ogøm_«me
, "nisdomainname"))

293 
wh©
 = 3;

294 i‡(!
	`°rcmp
(
¥ogøm_«me
, "dnsdomainname"))

295 
wh©
 = 2;

296 #i‡
HAVE_AFDEC√t


297 i‡(!
	`°rcmp
(
¥ogøm_«me
, "nodename"))

298 
wh©
 = 4;

301 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "adfF:h?isVvyn", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)Ë!
EOF
)

302 
c
) {

304 
wh©
 = 2;

310 
wh©
 = 1;

311 
ty≥
 = 
c
;

314 
wh©
 = 3;

316 #i‡
HAVE_AFDEC√t


318 
wh©
 = 4;

322 
fûe
 = 
›èrg
;

325 
›t_v
++;

328 
	`vîsi⁄
();

332 
	`ußge
();

337 
wh©
) {

339 i‡(
fûe
 || (
›töd
 < 
¨gc
)) {

340 
	`Ârötf
(
°dîr
, 
	`_
("%s: You c™'àch™gêthêDNS domaöÇamêwôhÅhi†comm™d\n"), 
¥ogøm_«me
);

341 
	`Ârötf
(
°dîr
, 
	`_
("\nUnless youáre using bind or NIS for hostÜookups you can changeÅhe DNS\n"));

342 
	`Ârötf
(
°dîr
, 
	`_
("domainÇame (which isÖart ofÅhe FQDN) inÅhe /etc/hosts file.\n"));

343 
	`exô
(1);

345 
ty≥
 = 'd';

348 i‡(
fûe
) {

349 
	`£tfûíame
(
fûe
, 
SETHOST
);

352 i‡(
›töd
 < 
¨gc
) {

353 
	`£th«me
(
¨gv
[
›töd
]);

357 
	`gëho°«me
(
my«me
, (myname));

358 i‡(
›t_v
)

359 
	`Ârötf
(
°dîr
, 
	`_
("gëho°«me()=`%s'\n"), 
my«me
);

360 i‡(!
ty≥
)

361 
	`¥ötf
("%s\n", 
my«me
);

363 
	`showh«me
(
my«me
, 
ty≥
);

366 i‡(
fûe
) {

367 
	`£tfûíame
(
fûe
, 
SETDOMAIN
);

370 i‡(
›töd
 < 
¨gc
) {

371 
	`£td«me
(
¨gv
[
›töd
]);

374 
	`gëdomaö«me
(
my«me
, (myname));

375 i‡(
›t_v
)

376 
	`Ârötf
(
°dîr
, 
	`_
("gëdomaö«me()=`%s'\n"), 
my«me
);

377 
	`¥ötf
("%s\n", 
my«me
);

379 #i‡
HAVE_AFDEC√t


381 i‡(
fûe
) {

382 
	`£tfûíame
(
fûe
, 
SETNODE
);

385 i‡(
›töd
 < 
¨gc
) {

386 
	`£ä«me
(
¨gv
[
›töd
]);

389 
	`gënodíame
(
my«me
, (myname));

390 i‡(
›t_v
)

391 
	`Ârötf
(
°dîr
, 
	`_
("gënodíame()=`%s'\n"), 
my«me
);

392 
	`¥ötf
("%s\n", 
my«me
);

396 
	`exô
(0);

397 
	}
}

	@net-tools-1.60/ifconfig.c

28 
	#DFLT_AF
 "öë"

	)

30 
	~"c⁄fig.h
"

32 
	~<„©uªs.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/io˘l.h
>

36 
	~<√töë/ö.h
>

37 
	~<√t/if.h
>

38 
	~<√t/if_¨p.h
>

39 
	~<°dio.h
>

40 
	~<î∫o.h
>

41 
	~<f˙é.h
>

42 
	~<˘y≥.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<√tdb.h
>

49 
	~<asm/ty≥s.h
>

52 #ifde‡
HAVE_HWSLIP


53 
	~<löux/if_¶ù.h
>

56 #i‡
HAVE_AFINET6


58 #i‚de‡
_LINUX_IN6_H


63 
	sö6_i‰eq
 {

64 
ö6_addr
 
	mi‰6_addr
;

65 
__u32
 
	mi‰6_¥efixÀn
;

66 
	mi‰6_ifödex
;

73 #i‡
HAVE_AFIPX


74 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

75 
	~<√tùx/ùx.h
>

77 
	~"ùx.h
"

80 
	~"√t-suµ‹t.h
"

81 
	~"∑th«mes.h
"

82 
	~"vîsi⁄.h
"

83 
	~"../öé.h
"

84 
	~"öãrÁ˚.h
"

85 
	~"sockës.h
"

86 
	~"utû.h
"

88 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "ifconfig 1.42 (2001-04-13)";

90 
	g›t_a
 = 0;

91 
	g›t_i
 = 0;

92 
	g›t_v
 = 0;

94 
	gaddr_Ámûy
 = 0;

97 
gë_nmbc_∑ª¡
(*
∑ª¡
, *
nm
,

98 *
bc
);

99 
£t_if°©e
(*
∑ª¡
, 
ù
,

100 
nm
, 
bc
,

101 
Êag
);

103 
	$if_¥öt
(*
i‚ame
)

105 
ªs
;

107 i‡(
i„_sh‹t
)

108 
	`¥ötf
(
	`_
("Iface MTU Met RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg\n"));

110 i‡(!
i‚ame
) {

111 
ªs
 = 
	`f‹_Æl_öãrÁ˚s
(
do_if_¥öt
, &
›t_a
);

113 
öãrÁ˚
 *
i„
;

115 
i„
 = 
	`lookup_öãrÁ˚
(
i‚ame
);

116 
ªs
 = 
	`do_if_„tch
(
i„
);

117 i‡(
ªs
 >= 0)

118 
	`i„_¥öt
(
i„
);

120  
ªs
;

121 
	}
}

124 
	$£t_Êag
(*
i‚ame
, 
Êag
)

126 
i‰eq
 
i‰
;

128 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

129 i‡(
	`io˘l
(
skfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

130 
	`Ârötf
(
°dîr
, 
	`_
("%s: unknown interface: %s\n"),

131 
i‚ame
, 
	`°ªº‹
(
î∫o
));

134 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

135 
i‰
.
i‰_Êags
 |
Êag
;

136 i‡(
	`io˘l
(
skfd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

137 
	`≥º‹
("SIOCSIFFLAGS");

141 
	}
}

144 
	$˛r_Êag
(*
i‚ame
, 
Êag
)

146 
i‰eq
 
i‰
;

147 
fd
;

149 i‡(
	`°rchr
(
i‚ame
, ':')) {

152 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

153 i‡(
fd
 < 0) {

154 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

158 
fd
 = 
skfd
;

160 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

161 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

162 
	`Ârötf
(
°dîr
, 
	`_
("%s: unknown interface: %s\n"),

163 
i‚ame
, 
	`°ªº‹
(
î∫o
));

166 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

167 
i‰
.
i‰_Êags
 &~
Êag
;

168 i‡(
	`io˘l
(
fd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

169 
	`≥º‹
("SIOCSIFFLAGS");

173 
	}
}

175 
	$ußge
()

177 
	`Ârötf
(
°dîr
, 
	`_
("Usage:\n ifconfig [-a] [-i] [-v] [-s] <interface> [[<AF>] <address>]\n"));

178 #i‡
HAVE_AFINET


179 
	`Ârötf
(
°dîr
, 
	`_
(" [add <address>[/<prefixlen>]]\n"));

180 
	`Ârötf
(
°dîr
, 
	`_
(" [del <address>[/<prefixlen>]]\n"));

181 
	`Ârötf
(
°dîr
, 
	`_
(" [[-]broadcast [<address>]] [[-]pointopoint [<address>]]\n"));

182 
	`Ârötf
(
°dîr
, 
	`_
(" [netmask <address>] [dstaddr <address>] [tunnel <address>]\n"));

184 #ifde‡
SIOCSKEEPALIVE


185 
	`Ârötf
(
°dîr
, 
	`_
(" [outfill <NN>] [keepalive <NN>]\n"));

187 
	`Ârötf
(
°dîr
, 
	`_
(" [hw <HW> <address>] [metric <NN>] [mtu <NN>]\n"));

188 
	`Ârötf
(
°dîr
, 
	`_
(" [[-]trailers] [[-]arp] [[-]allmulti]\n"));

189 
	`Ârötf
(
°dîr
, 
	`_
(" [multicast] [[-]promisc]\n"));

190 
	`Ârötf
(
°dîr
, 
	`_
(" [mem_start <NN>] [io_addr <NN>] [irq <NN>] [media <type>]\n"));

191 #ifde‡
HAVE_TXQUEUELEN


192 
	`Ârötf
(
°dîr
, 
	`_
(" [txqueuelen <NN>]\n"));

194 #ifde‡
HAVE_DYNAMIC


195 
	`Ârötf
(
°dîr
, 
	`_
(" [[-]dynamic]\n"));

197 
	`Ârötf
(
°dîr
, 
	`_
(" [up|down] ...\n\n"));

199 
	`Ârötf
(
°dîr
, 
	`_
(" <HW>=Hardware Type.\n"));

200 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossible hardwareÅypes:\n"));

201 
	`¥öt_hwli°
(0);

202 
	`Ârötf
(
°dîr
, 
	`_
(" <AF>=Addªs†Ámûy. DeÁu…: %s\n"), 
DFLT_AF
);

203 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossibleáddress families:\n"));

204 
	`¥öt_aÊi°
(0);

205 
	`exô
(
E_USAGE
);

206 
	}
}

208 
	$vîsi⁄
()

210 
	`Ârötf
(
°dîr
, "%s\n%s\n", 
Rñó£
, 
Vîsi⁄
);

211 
	`exô
(0);

212 
	}
}

214 
	$£t_√tmask
(
skfd
, 
i‰eq
 *
i‰
, 
sockaddr
 *
ß
)

216 
îr
 = 0;

218 
	`mem˝y
((*Ë&
i‰
->
i‰_√tmask
, (*Ë
ß
,

219 (
sockaddr
));

220 i‡(
	`io˘l
(
skfd
, 
SIOCSIFNETMASK
, 
i‰
) < 0) {

221 
	`Ârötf
(
°dîr
, "SIOCSIFNETMASK: %s\n",

222 
	`°ªº‹
(
î∫o
));

223 
îr
 = 1;

226 
	}
}

228 
	$maö
(
¨gc
, **
¨gv
)

230 
sockaddr
 
ß
;

231 
sockaddr_ö
 
sö
;

232 
ho°
[128];

233 
a·y≥
 *
≠
;

234 
hwty≥
 *
hw
;

235 
i‰eq
 
i‰
;

236 
gŸîr
 = 0, 
did√tmask
 = 0;

237 **
•p
;

238 
fd
;

239 #i‡
HAVE_AFINET6


240 
a·y≥
 
öë6_a·y≥
;

241 
sockaddr_ö6
 
ß6
;

242 
ö6_i‰eq
 
i‰6
;

243 
¥efix_Àn
;

244 *
˝
;

246 #i‡
HAVE_AFINET


247 
a·y≥
 
öë_a·y≥
;

250 #i‡
I18N


251 
	`£éoˇÀ
 (
LC_ALL
, "");

252 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

253 
	`ãxtdomaö
("net-tools");

257 
¨gc
--;

258 
¨gv
++;

259 
¨gc
 && *
¨gv
[0] == '-') {

260 i‡(!
	`°rcmp
(*
¨gv
, "-a"))

261 
›t_a
 = 1;

263 i‡(!
	`°rcmp
(*
¨gv
, "-s"))

264 
i„_sh‹t
 = 1;

266 i‡(!
	`°rcmp
(*
¨gv
, "-v"))

267 
›t_v
 = 1;

269 i‡(!
	`°rcmp
(*
¨gv
, "-V") || !strcmp(*argv, "-version") ||

270 !
	`°rcmp
(*
¨gv
, "--version"))

271 
	`vîsi⁄
();

273 i‡(!
	`°rcmp
(*
¨gv
, "-?") || !strcmp(*argv, "-h") ||

274 !
	`°rcmp
(*
¨gv
, "-help") || !strcmp(*argv, "--help"))

275 
	`ußge
();

278 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: option `%s'ÇotÑecognised.\n"),

279 
¨gv
[0]);

280 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: `--help' gives usage information.\n"));

281 
	`exô
(1);

284 
¨gv
++;

285 
¨gc
--;

289 i‡((
skfd
 = 
	`sockës_›í
(0)) < 0) {

290 
	`≥º‹
("socket");

291 
	`exô
(1);

295 i‡(
¨gc
 == 0) {

296 
îr
 = 
	`if_¥öt
((*Ë
NULL
);

297 (Ë
	`˛o£
(
skfd
);

298 
	`exô
(
îr
 < 0);

301 
•p
 = 
¨gv
;

302 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, *
•p
++, 
IFNAMSIZ
);

303 i‡(*
•p
 =(*Ë
NULL
) {

304 
îr
 = 
	`if_¥öt
(
i‰
.
i‰_«me
);

305 (Ë
	`˛o£
(
skfd
);

306 
	`exô
(
îr
 < 0);

310 i‡((
≠
 = 
	`gë_a·y≥
(*
•p
)Ë!
NULL
)

311 
•p
++;

313 
≠
 = 
	`gë_a·y≥
(
DFLT_AF
);

315 i‡(
≠
) {

316 
addr_Ámûy
 = 
≠
->
af
;

317 
skfd
 = 
≠
->
fd
;

321 *
•p
 !(*Ë
NULL
) {

322 i‡(!
	`°rcmp
(*
•p
, "arp")) {

323 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_NOARP
);

324 
•p
++;

327 i‡(!
	`°rcmp
(*
•p
, "-arp")) {

328 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_NOARP
);

329 
•p
++;

332 #ifde‡
IFF_PORTSEL


333 i‡(!
	`°rcmp
(*
•p
, "media") || !strcmp(*spp, "port")) {

334 i‡(*++
•p
 =
NULL
)

335 
	`ußge
();

336 i‡(!
	`°rˇ£cmp
(*
•p
, "auto")) {

337 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_AUTOMEDIA
);

339 
i
, 
j
, 
√wp‹t
;

340 *
ídp
;

341 
√wp‹t
 = 
	`°πﬁ
(*
•p
, &
ídp
, 10);

342 i‡(*
ídp
 != 0) {

343 
√wp‹t
 = -1;

344 
i
 = 0; 
if_p‹t_ãxt
[i][0] && 
√wp‹t
 == -1; i++) {

345 
j
 = 0; 
if_p‹t_ãxt
[
i
][j]; j++) {

346 i‡(!
	`°rˇ£cmp
(*
•p
, 
if_p‹t_ãxt
[
i
][
j
])) {

347 
√wp‹t
 = 
i
;

353 
•p
++;

354 i‡(
√wp‹t
 == -1) {

355 
	`Ârötf
(
°dîr
, 
	`_
("Unknown mediaÅype.\n"));

356 
gŸîr
 = 1;

358 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

359 
	`≥º‹
("port: SIOCGIFMAP");

360 
gŸîr
 = 1;

363 
i‰
.
i‰_m≠
.
p‹t
 = 
√wp‹t
;

364 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

365 
	`≥º‹
("port: SIOCSIFMAP");

366 
gŸîr
 = 1;

374 i‡(!
	`°rcmp
(*
•p
, "trailers")) {

375 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_NOTRAILERS
);

376 
•p
++;

379 i‡(!
	`°rcmp
(*
•p
, "-trailers")) {

380 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_NOTRAILERS
);

381 
•p
++;

384 i‡(!
	`°rcmp
(*
•p
, "promisc")) {

385 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_PROMISC
);

386 
•p
++;

389 i‡(!
	`°rcmp
(*
•p
, "-promisc")) {

390 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_PROMISC
);

391 
•p
++;

394 i‡(!
	`°rcmp
(*
•p
, "multicast")) {

395 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
);

396 
•p
++;

399 i‡(!
	`°rcmp
(*
•p
, "-multicast")) {

400 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
);

401 
•p
++;

404 i‡(!
	`°rcmp
(*
•p
, "allmulti")) {

405 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_ALLMULTI
);

406 
•p
++;

409 i‡(!
	`°rcmp
(*
•p
, "-allmulti")) {

410 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_ALLMULTI
);

411 
•p
++;

414 i‡(!
	`°rcmp
(*
•p
, "up")) {

415 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, (
IFF_UP
 | 
IFF_RUNNING
));

416 
•p
++;

419 i‡(!
	`°rcmp
(*
•p
, "down")) {

420 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_UP
);

421 
•p
++;

424 #ifde‡
HAVE_DYNAMIC


425 i‡(!
	`°rcmp
(*
•p
, "dynamic")) {

426 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_DYNAMIC
);

427 
•p
++;

430 i‡(!
	`°rcmp
(*
•p
, "-dynamic")) {

431 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_DYNAMIC
);

432 
•p
++;

437 i‡(!
	`°rcmp
(*
•p
, "metric")) {

438 i‡(*++
•p
 =
NULL
)

439 
	`ußge
();

440 
i‰
.
i‰_mëric
 = 
	`©oi
(*
•p
);

441 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMETRIC
, &
i‰
) < 0) {

442 
	`Ârötf
(
°dîr
, "SIOCSIFMETRIC: %s\n", 
	`°ªº‹
(
î∫o
));

443 
gŸîr
 = 1;

445 
•p
++;

448 i‡(!
	`°rcmp
(*
•p
, "mtu")) {

449 i‡(*++
•p
 =
NULL
)

450 
	`ußge
();

451 
i‰
.
i‰_mtu
 = 
	`©oi
(*
•p
);

452 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMTU
, &
i‰
) < 0) {

453 
	`Ârötf
(
°dîr
, "SIOCSIFMTU: %s\n", 
	`°ªº‹
(
î∫o
));

454 
gŸîr
 = 1;

456 
•p
++;

459 #ifde‡
SIOCSKEEPALIVE


460 i‡(!
	`°rcmp
(*
•p
, "keepalive")) {

461 i‡(*++
•p
 =
NULL
)

462 
	`ußge
();

463 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë
	`©oi
(*
•p
);

464 i‡(
	`io˘l
(
skfd
, 
SIOCSKEEPALIVE
, &
i‰
) < 0) {

465 
	`Ârötf
(
°dîr
, "SIOCSKEEPALIVE: %s\n", 
	`°ªº‹
(
î∫o
));

466 
gŸîr
 = 1;

468 
•p
++;

473 #ifde‡
SIOCSOUTFILL


474 i‡(!
	`°rcmp
(*
•p
, "outfill")) {

475 i‡(*++
•p
 =
NULL
)

476 
	`ußge
();

477 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë
	`©oi
(*
•p
);

478 i‡(
	`io˘l
(
skfd
, 
SIOCSOUTFILL
, &
i‰
) < 0) {

479 
	`Ârötf
(
°dîr
, "SIOCSOUTFILL: %s\n", 
	`°ªº‹
(
î∫o
));

480 
gŸîr
 = 1;

482 
•p
++;

487 i‡(!
	`°rcmp
(*
•p
, "-broadcast")) {

488 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_BROADCAST
);

489 
•p
++;

492 i‡(!
	`°rcmp
(*
•p
, "broadcast")) {

493 i‡(*++
•p
 !
NULL
) {

494 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

495 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

496 
≠
->
	`hîr‹
(
ho°
);

497 
gŸîr
 = 1;

498 
•p
++;

501 
	`mem˝y
((*Ë&
i‰
.
i‰_brﬂdaddr
, (*Ë&
ß
,

502 (
sockaddr
));

503 i‡(
	`io˘l
(
≠
->
fd
, 
SIOCSIFBRDADDR
, &
i‰
) < 0) {

504 
	`Ârötf
(
°dîr
, "SIOCSIFBRDADDR: %s\n",

505 
	`°ªº‹
(
î∫o
));

506 
gŸîr
 = 1;

508 
•p
++;

510 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_BROADCAST
);

513 i‡(!
	`°rcmp
(*
•p
, "dstaddr")) {

514 i‡(*++
•p
 =
NULL
)

515 
	`ußge
();

516 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

517 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

518 
≠
->
	`hîr‹
(
ho°
);

519 
gŸîr
 = 1;

520 
•p
++;

523 
	`mem˝y
((*Ë&
i‰
.
i‰_d°addr
, (*Ë&
ß
,

524 (
sockaddr
));

525 i‡(
	`io˘l
(
≠
->
fd
, 
SIOCSIFDSTADDR
, &
i‰
) < 0) {

526 
	`Ârötf
(
°dîr
, "SIOCSIFDSTADDR: %s\n",

527 
	`°ªº‹
(
î∫o
));

528 
gŸîr
 = 1;

530 
•p
++;

533 i‡(!
	`°rcmp
(*
•p
, "netmask")) {

534 i‡(*++
•p
 =
NULL
 || 
did√tmask
)

535 
	`ußge
();

536 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

537 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

538 
≠
->
	`hîr‹
(
ho°
);

539 
gŸîr
 = 1;

540 
•p
++;

543 
did√tmask
++;

544 
gŸîr
 = 
	`£t_√tmask
(
≠
->
fd
, &
i‰
, &
ß
);

545 
•p
++;

548 #ifde‡
HAVE_TXQUEUELEN


549 i‡(!
	`°rcmp
(*
•p
, "txqueuelen")) {

550 i‡(*++
•p
 =
NULL
)

551 
	`ußge
();

552 
i‰
.
i‰_qÀn
 = 
	`°πoul
(*
•p
, 
NULL
, 0);

553 i‡(
	`io˘l
(
skfd
, 
SIOCSIFTXQLEN
, &
i‰
) < 0) {

554 
	`Ârötf
(
°dîr
, "SIOCSIFTXQLEN: %s\n", 
	`°ªº‹
(
î∫o
));

555 
gŸîr
 = 1;

557 
•p
++;

562 i‡(!
	`°rcmp
(*
•p
, "mem_start")) {

563 i‡(*++
•p
 =
NULL
)

564 
	`ußge
();

565 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

566 
	`Ârötf
(
°dîr
, "mem_°¨t: SIOCGIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

567 
•p
++;

568 
gŸîr
 = 1;

571 
i‰
.
i‰_m≠
.
mem_°¨t
 = 
	`°πoul
(*
•p
, 
NULL
, 0);

572 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

573 
	`Ârötf
(
°dîr
, "mem_°¨t: SIOCSIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

574 
gŸîr
 = 1;

576 
•p
++;

579 i‡(!
	`°rcmp
(*
•p
, "io_addr")) {

580 i‡(*++
•p
 =
NULL
)

581 
	`ußge
();

582 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

583 
	`Ârötf
(
°dîr
, "io_addr: SIOCGIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

584 
•p
++;

585 
gŸîr
 = 1;

588 
i‰
.
i‰_m≠
.
ba£_addr
 = 
	`°πﬁ
(*
•p
, 
NULL
, 0);

589 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

590 
	`Ârötf
(
°dîr
, "io_addr: SIOCSIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

591 
gŸîr
 = 1;

593 
•p
++;

596 i‡(!
	`°rcmp
(*
•p
, "irq")) {

597 i‡(*++
•p
 =
NULL
)

598 
	`ußge
();

599 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

600 
	`Ârötf
(
°dîr
, "úq: SIOCGIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

601 
gŸîr
 = 1;

602 
•p
++;

605 
i‰
.
i‰_m≠
.
úq
 = 
	`©oi
(*
•p
);

606 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

607 
	`Ârötf
(
°dîr
, "úq: SIOCSIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

608 
gŸîr
 = 1;

610 
•p
++;

613 i‡(!
	`°rcmp
(*
•p
, "-pointopoint")) {

614 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_POINTOPOINT
);

615 
•p
++;

618 i‡(!
	`°rcmp
(*
•p
, "pointopoint")) {

619 i‡(*(
•p
 + 1Ë!
NULL
) {

620 
•p
++;

621 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

622 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
)) {

623 
≠
->
	`hîr‹
(
ho°
);

624 
gŸîr
 = 1;

625 
•p
++;

628 
	`mem˝y
((*Ë&
i‰
.
i‰_d°addr
, (*Ë&
ß
,

629 (
sockaddr
));

630 i‡(
	`io˘l
(
≠
->
fd
, 
SIOCSIFDSTADDR
, &
i‰
) < 0) {

631 
	`Ârötf
(
°dîr
, "SIOCSIFDSTADDR: %s\n",

632 
	`°ªº‹
(
î∫o
));

633 
gŸîr
 = 1;

636 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_POINTOPOINT
);

637 
•p
++;

641 i‡(!
	`°rcmp
(*
•p
, "hw")) {

642 i‡(*++
•p
 =
NULL
)

643 
	`ußge
();

644 i‡((
hw
 = 
	`gë_hwty≥
(*
•p
)Ë=
NULL
)

645 
	`ußge
();

646 i‡(
hw
->
öput
 =
NULL
) {

647 
	`Ârötf
(
°dîr
, 
	`_
("hwáddªs†ty≥ `%s' ha†nÿh™dÀ∏tÿ£àaddªss. faûed.\n"), *
•p
);

648 
•p
+=2;

649 
gŸîr
 = 1;

652 i‡(*++
•p
 =
NULL
)

653 
	`ußge
();

654 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

655 i‡(
hw
->
	`öput
(
ho°
, &
ß
) < 0) {

656 
	`Ârötf
(
°dîr
, 
	`_
("%s: invÆid %†addªss.\n"), 
ho°
, 
hw
->
«me
);

657 
gŸîr
 = 1;

658 
•p
++;

661 
	`mem˝y
((*Ë&
i‰
.
i‰_hwaddr
, (*Ë&
ß
,

662 (
sockaddr
));

663 i‡(
	`io˘l
(
skfd
, 
SIOCSIFHWADDR
, &
i‰
) < 0) {

664 
	`Ârötf
(
°dîr
, "SIOCSIFHWADDR: %s\n",

665 
	`°ªº‹
(
î∫o
));

666 
gŸîr
 = 1;

668 
•p
++;

671 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


672 i‡(!
	`°rcmp
(*
•p
, "add")) {

673 i‡(*++
•p
 =
NULL
)

674 
	`ußge
();

675 #i‡
HAVE_AFINET6


676 i‡(
	`°rchr
(*
•p
, ':')) {

678 i‡((
˝
 = 
	`°rchr
(*
•p
, '/'))) {

679 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

680 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

681 
	`ußge
();

682 *
˝
 = 0;

684 
¥efix_Àn
 = 0;

686 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

687 i‡(
öë6_a·y≥
.
	`öput
(1, 
ho°
,

688 (
sockaddr
 *Ë&
ß6
) < 0) {

689 
öë6_a·y≥
.
	`hîr‹
(
ho°
);

690 
gŸîr
 = 1;

691 
•p
++;

694 
	`mem˝y
((*Ë&
i‰6
.
i‰6_addr
, (*Ë&
ß6
.
sö6_addr
,

695 (
ö6_addr
));

697 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET6
);

698 i‡(
fd
 < 0) {

699 
	`Ârötf
(
°dîr
,

700 
	`_
("No support for INET6 onÅhis system.\n"));

701 
gŸîr
 = 1;

702 
•p
++;

705 i‡(
	`io˘l
(
fd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

706 
	`≥º‹
("SIOGIFINDEX");

707 
gŸîr
 = 1;

708 
•p
++;

711 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

712 
i‰6
.
i‰6_¥efixÀn
 = 
¥efix_Àn
;

713 i‡(
	`io˘l
(
fd
, 
SIOCSIFADDR
, &
i‰6
) < 0) {

714 
	`≥º‹
("SIOCSIFADDR");

715 
gŸîr
 = 1;

717 
•p
++;

721 #ifde‡
HAVE_AFINET


723 
ù
, 
nm
, 
bc
;

724 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

725 i‡(
öë_a·y≥
.
	`öput
(0, 
ho°
, (
sockaddr
 *)&
sö
) < 0) {

726 
≠
->
	`hîr‹
(
ho°
);

727 
gŸîr
 = 1;

728 
•p
++;

731 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

732 i‡(
fd
 < 0) {

733 
	`Ârötf
(
°dîr
,

734 
	`_
("No support for INET onÅhis system.\n"));

735 
gŸîr
 = 1;

736 
•p
++;

740 
	`mem˝y
(&
ù
, &
sö
.
sö_addr
.
s_addr
, ());

742 i‡(
	`gë_nmbc_∑ª¡
(
i‰
.
i‰_«me
, &
nm
, &
bc
) < 0) {

743 
	`Ârötf
(
°dîr
, 
	`_
("Interface %sÇot initialized\n"),

744 
i‰
.
i‰_«me
);

745 
gŸîr
 = 1;

746 
•p
++;

749 
	`£t_if°©e
(
i‰
.
i‰_«me
, 
ù
, 
nm
, 
bc
, 1);

752 
•p
++;

755 
	`Ârötf
(
°dîr
, 
	`_
("Badáddress.\n"));

760 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


761 i‡(!
	`°rcmp
(*
•p
, "del")) {

762 i‡(*++
•p
 =
NULL
)

763 
	`ußge
();

765 #ifde‡
SIOCDIFADDR


766 #i‡
HAVE_AFINET6


767 i‡(
	`°rchr
(*
•p
, ':')) {

768 i‡((
˝
 = 
	`°rchr
(*
•p
, '/'))) {

769 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

770 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

771 
	`ußge
();

772 *
˝
 = 0;

774 
¥efix_Àn
 = 0;

776 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

777 i‡(
öë6_a·y≥
.
	`öput
(1, 
ho°
,

778 (
sockaddr
 *Ë&
ß6
) < 0) {

779 
öë6_a·y≥
.
	`hîr‹
(
ho°
);

780 
gŸîr
 = 1;

781 
•p
++;

784 
	`mem˝y
((*Ë&
i‰6
.
i‰6_addr
, (*Ë&
ß6
.
sö6_addr
,

785 (
ö6_addr
));

787 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET6
);

788 i‡(
fd
 < 0) {

789 
	`Ârötf
(
°dîr
,

790 
	`_
("No support for INET6 onÅhis system.\n"));

791 
gŸîr
 = 1;

792 
•p
++;

795 i‡(
	`io˘l
(
fd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

796 
	`≥º‹
("SIOGIFINDEX");

797 
gŸîr
 = 1;

798 
•p
++;

801 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

802 
i‰6
.
i‰6_¥efixÀn
 = 
¥efix_Àn
;

803 i‡(
	`io˘l
(
fd
, 
SIOCDIFADDR
, &
i‰6
) < 0) {

804 
	`Ârötf
(
°dîr
, "SIOCDIFADDR: %s\n",

805 
	`°ªº‹
(
î∫o
));

806 
gŸîr
 = 1;

808 
•p
++;

812 #ifde‡
HAVE_AFINET


815 
ù
, 
nm
, 
bc
;

816 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

817 i‡(
öë_a·y≥
.
	`öput
(0, 
ho°
, (
sockaddr
 *)&
sö
) < 0) {

818 
≠
->
	`hîr‹
(
ho°
);

819 
gŸîr
 = 1;

820 
•p
++;

823 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

824 i‡(
fd
 < 0) {

825 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

826 
gŸîr
 = 1;

827 
•p
++;

831 
	`mem˝y
(&
ù
, &
sö
.
sö_addr
.
s_addr
, ());

833 i‡(
	`gë_nmbc_∑ª¡
(
i‰
.
i‰_«me
, &
nm
, &
bc
) < 0) {

834 
	`Ârötf
(
°dîr
, 
	`_
("Interface %sÇot initialized\n"),

835 
i‰
.
i‰_«me
);

836 
gŸîr
 = 1;

837 
•p
++;

840 
	`£t_if°©e
(
i‰
.
i‰_«me
, 
ù
, 
nm
, 
bc
, 0);

842 
•p
++;

845 
	`Ârötf
(
°dîr
, 
	`_
("Badáddress.\n"));

848 
	`Ârötf
(
°dîr
, 
	`_
("Address deletionÇot supported onÅhis system.\n"));

852 #i‡
HAVE_AFINET6


853 i‡(!
	`°rcmp
(*
•p
, "tunnel")) {

854 i‡(*++
•p
 =
NULL
)

855 
	`ußge
();

856 i‡((
˝
 = 
	`°rchr
(*
•p
, '/'))) {

857 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

858 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

859 
	`ußge
();

860 *
˝
 = 0;

862 
¥efix_Àn
 = 0;

864 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

865 i‡(
öë6_a·y≥
.
	`öput
(1, 
ho°
, (
sockaddr
 *Ë&
ß6
) < 0) {

866 
öë6_a·y≥
.
	`hîr‹
(
ho°
);

867 
gŸîr
 = 1;

868 
•p
++;

871 
	`mem˝y
((*Ë&
i‰6
.
i‰6_addr
, (*Ë&
ß6
.
sö6_addr
,

872 (
ö6_addr
));

874 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET6
);

875 i‡(
fd
 < 0) {

876 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET6 onÅhis system.\n"));

877 
gŸîr
 = 1;

878 
•p
++;

881 i‡(
	`io˘l
(
fd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

882 
	`≥º‹
("SIOGIFINDEX");

883 
gŸîr
 = 1;

884 
•p
++;

887 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

888 
i‰6
.
i‰6_¥efixÀn
 = 
¥efix_Àn
;

890 i‡(
	`io˘l
(
fd
, 
SIOCSIFDSTADDR
, &
i‰6
) < 0) {

891 
	`Ârötf
(
°dîr
, "SIOCSIFDSTADDR: %s\n",

892 
	`°ªº‹
(
î∫o
));

893 
gŸîr
 = 1;

895 
•p
++;

901 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

905 i‡(
≠
->
gëmask
) {

906 
≠
->
	`gëmask
(
ho°
, &
ß
, 
NULL
)) {

908 
	`ußge
();

911 i‡(
did√tmask
)

912 
	`ußge
();

914 
gŸîr
 = 
	`£t_√tmask
(
skfd
, &
i‰
, &
ß
);

915 
did√tmask
++;

919 i‡(
≠
->
öput
 =
NULL
) {

920 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: Cannot setáddress forÅhisÖrotocol family.\n"));

921 
	`exô
(1);

923 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

924 
≠
->
	`hîr‹
(
ho°
);

925 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: `--help' gives usage information.\n"));

926 
	`exô
(1);

928 
	`mem˝y
((*Ë&
i‰
.
i‰_addr
, (*Ë&
ß
, (
sockaddr
));

930 
r
 = 0;

931 
≠
->
af
) {

932 #i‡
HAVE_AFINET


933 
AF_INET
:

934 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

935 i‡(
fd
 < 0) {

936 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

937 
	`exô
(1);

939 
r
 = 
	`io˘l
(
fd
, 
SIOCSIFADDR
, &
i‰
);

942 #i‡
HAVE_AFECONET


943 
AF_ECONET
:

944 
fd
 = 
	`gë_sockë_f‹_af
(
AF_ECONET
);

945 i‡(
fd
 < 0) {

946 
	`Ârötf
(
°dîr
, 
	`_
("No support for ECONET onÅhis system.\n"));

947 
	`exô
(1);

949 
r
 = 
	`io˘l
(
fd
, 
SIOCSIFADDR
, &
i‰
);

953 
	`Ârötf
(
°dîr
,

954 
	`_
("D⁄'àknow howÅÿ£àaddªs£†f‹ famûy %d.\n"), 
≠
->
af
);

955 
	`exô
(1);

957 i‡(
r
 < 0) {

958 
	`≥º‹
("SIOCSIFADDR");

959 
gŸîr
 = 1;

971 *
±r
;

972 
found_cﬁ⁄
 = 0;

973 
±r
 = 
i‰
.
i‰_«me
; *ptr;Ötr++ )

974 i‡(*
±r
 =':'Ë
found_cﬁ⁄
++;

976 i‡(!(
found_cﬁ⁄
 && *(
±r
 - 1) == '-'))

977 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, (
IFF_UP
 | 
IFF_RUNNING
));

980 
•p
++;

983  (
gŸîr
);

984 
	}
}

986 
	sifcmd
 {

987 
	mÊag
;

988 
	maddr
;

989 *
	mba£
;

990 
	mba£Àn
;

993 
	g£¨chî
[256];

995 
	$£t_ù_usög
(c⁄° *
«me
, 
c
, 
ù
)

997 
i‰eq
 
i‰
;

998 
sockaddr_ö
 
sö
;

1000 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

1001 
	`mem£t
(&
sö
, 0, (
sockaddr
));

1002 
sö
.
sö_Ámûy
 = 
AF_INET
;

1003 
sö
.
sö_addr
.
s_addr
 = 
ù
;

1004 
	`mem˝y
(&
i‰
.
i‰_addr
, &
sö
, (
sockaddr
));

1005 i‡(
	`io˘l
(
skfd
, 
c
, &
i‰
) < 0)

1008 
	}
}

1010 
	$do_ifcmd
(
öãrÁ˚
 *
x
, 
ifcmd
 *
±r
)

1012 *
z
, *
e
;

1013 
sockaddr_ö
 *
sö
;

1014 
i
;

1016 i‡(
	`do_if_„tch
(
x
) < 0)

1018 i‡(
	`°∫cmp
(
x
->
«me
, 
±r
->
ba£
,Öå->
ba£Àn
) != 0)

1020 
z
 = 
	`°rchr
(
x
->
«me
, ':');

1021 i‡(!
z
 || !*z)

1023 
z
++;

1024 
e
 = 
z
; *e;É++)

1025 i‡(*
e
 == '-')

1027 
i
 = 
	`©oi
(
z
);

1028 i‡(
i
 < 0 || i > 255)

1029 
	`ab‹t
();

1030 
£¨chî
[
i
] = 1;

1033 
sö
 = (
sockaddr_ö
 *)&
x
->
d°addr
;

1034 i‡(
sö
->
sö_addr
.
s_addr
 !
±r
->
addr
) {

1038 i‡(
±r
->
Êag
) {

1040 i‡(
	`£t_Êag
(
x
->
«me
, 
IFF_UP
 | 
IFF_RUNNING
) == -1)

1044 i‡(
	`˛r_Êag
(
x
->
«me
, 
IFF_UP
) == -1)

1049 
	}
}

1052 
	$gë_nmbc_∑ª¡
(*
∑ª¡
,

1053 *
nm
, *
bc
)

1055 
öãrÁ˚
 *
i
;

1056 
sockaddr_ö
 *
sö
;

1058 
i
 = 
	`lookup_öãrÁ˚
(
∑ª¡
);

1059 i‡(!
i
)

1061 i‡(
	`do_if_„tch
(
i
) < 0)

1063 
sö
 = (
sockaddr_ö
 *)&
i
->
√tmask
;

1064 
	`mem˝y
(
nm
, &
sö
->
sö_addr
.
s_addr
, ());

1065 
sö
 = (
sockaddr_ö
 *)&
i
->
brﬂdaddr
;

1066 
	`mem˝y
(
bc
, &
sö
->
sö_addr
.
s_addr
, ());

1068 
	}
}

1070 
	$£t_if°©e
(*
∑ª¡
, 
ù
,

1071 
nm
, 
bc
,

1072 
Êag
)

1074 
buf
[
IFNAMSIZ
];

1075 
ifcmd
 
±
;

1076 
i
;

1078 
±
.
ba£
 = 
∑ª¡
;

1079 
±
.
ba£Àn
 = 
	`°æí
(
∑ª¡
);

1080 
±
.
addr
 = 
ù
;

1081 
±
.
Êag
 = flag;

1082 
	`mem£t
(
£¨chî
, 0, (searcher));

1083 
i
 = 
	`f‹_Æl_öãrÁ˚s
(((*)(
öãrÁ˚
 *,*))
do_ifcmd
,

1084 &
±
);

1085 i‡(
i
 == -1)

1087 i‡(
i
 == 1)

1091 
i
 = 0; i < 256; i++)

1092 i‡(
£¨chî
[
i
] == 0)

1095 i‡(
i
 == 256)

1098 i‡(
	`¢¥ötf
(
buf
, 
IFNAMSIZ
, "%s:%d", 
∑ª¡
, 
i
) > IFNAMSIZ)

1100 i‡(
	`£t_ù_usög
(
buf
, 
SIOCSIFADDR
, 
ù
) == -1)

1102 i‡(
	`£t_ù_usög
(
buf
, 
SIOCSIFNETMASK
, 
nm
) == -1)

1104 i‡(
	`£t_ù_usög
(
buf
, 
SIOCSIFBRDADDR
, 
bc
) == -1)

1106 i‡(
	`£t_Êag
(
buf
, 
IFF_BROADCAST
) == -1)

1109 
	}
}

	@net-tools-1.60/include/interface.h

1 
	su£r_√t_devi˚_°©s
 {

2 
	mrx_∑ckës
;

3 
	mtx_∑ckës
;

4 
	mrx_byãs
;

5 
	mtx_byãs
;

6 
	mrx_îr‹s
;

7 
	mtx_îr‹s
;

8 
	mrx_dr›≥d
;

9 
	mtx_dr›≥d
;

10 
	mrx_mu…iˇ°
;

11 
	mrx_com¥es£d
;

12 
	mtx_com¥es£d
;

13 
	mcﬁlisi⁄s
;

16 
	mrx_Àngth_îr‹s
;

17 
	mrx_ovî_îr‹s
;

18 
	mrx_¸c_îr‹s
;

19 
	mrx_‰ame_îr‹s
;

20 
	mrx_fifo_îr‹s
;

21 
	mrx_mis£d_îr‹s
;

23 
	mtx_ab‹ãd_îr‹s
;

24 
	mtx_ˇºõr_îr‹s
;

25 
	mtx_fifo_îr‹s
;

26 
	mtx_hóπbót_îr‹s
;

27 
	mtx_wödow_îr‹s
;

30 
	söãrÁ˚
 {

31 
öãrÁ˚
 *
	m√xt
, *
	m¥ev
;

32 
	m«me
[
IFNAMSIZ
];

33 
	mty≥
;

34 
	mÊags
;

35 
	mmëric
;

36 
	mmtu
;

37 
	mtx_queue_Àn
;

38 
ifm≠
 
	mm≠
;

39 
sockaddr
 
	maddr
;

40 
sockaddr
 
	md°addr
;

41 
sockaddr
 
	mbrﬂdaddr
;

42 
sockaddr
 
	m√tmask
;

43 
sockaddr
 
	mùxaddr_bb
;

44 
sockaddr
 
	mùxaddr_¢
;

45 
sockaddr
 
	mùxaddr_e3
;

46 
sockaddr
 
	mùxaddr_e2
;

47 
sockaddr
 
	mdd∑ddr
;

48 
sockaddr
 
	meˇddr
;

49 
	mhas_ù
;

50 
	mhas_ùx_bb
;

51 
	mhas_ùx_¢
;

52 
	mhas_ùx_e3
;

53 
	mhas_ùx_e2
;

54 
	mhas_ax25
;

55 
	mhas_ddp
;

56 
	mhas_ec⁄ë
;

57 
	mhwaddr
[32];

58 
	m°©i°ics_vÆid
;

59 
u£r_√t_devi˚_°©s
 
	m°©s
;

60 
	mkì∑live
;

61 
	moutfûl
;

64 
if_„tch
(
öãrÁ˚
 *
i„
);

66 
f‹_Æl_öãrÁ˚s
((*)(
öãrÁ˚
 *, *), *);

67 
	`‰ì_öãrÁ˚_li°
();

68 
öãrÁ˚
 *
	`lookup_öãrÁ˚
(*
«me
);

69 
	`if_ªadli°
();

71 
	`do_if_„tch
(
öãrÁ˚
 *
i„
);

72 
	`do_if_¥öt
(
öãrÁ˚
 *
i„
, *
cookõ
);

74 
	`i„_¥öt
(
öãrÁ˚
 *
±r
);

76 
i„_sh‹t
;

78 c⁄° *
if_p‹t_ãxt
[][4];

81 #i‡!
	`deföed
(
SIOCSIFTXQLEN
)

82 
	#SIOCSIFTXQLEN
 0x8943

	)

83 
	#SIOCGIFTXQLEN
 0x8942

	)

86 #i‡!
	`deföed
(
i‰_qÀn
)

88 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_mtu


	)

91 
	#HAVE_TXQUEUELEN


	)

93 
	#HAVE_DYNAMIC


	)

94 #i‚de‡
IFF_DYNAMIC


95 
	#IFF_DYNAMIC
 0x8000

	)

	@net-tools-1.60/include/ipx.h

4 #i‚de‡
_IPX_H_


5 
	#_IPX_H_


	)

7 
	#IPX_NODE_LEN
 6

	)

8 
	#IPX_MTU
 576

	)

10 
	ssockaddr_ùx
 {

11 #i‡
LINUX_VERSION_CODE
 > 131328

12 
ß_Ámûy_t
 
	msùx_Ámûy
;

14 
	msùx_Ámûy
;

16 
	msùx_p‹t
;

17 
	msùx_√tw‹k
;

18 
	msùx_node
[
IPX_NODE_LEN
];

19 
	msùx_ty≥
;

20 
	msùx_zîo
;

23 
	#IPX_FRAME_NONE
 0

	)

24 
	#IPX_FRAME_SNAP
 1

	)

25 
	#IPX_FRAME_8022
 2

	)

26 
	#IPX_FRAME_ETHERII
 3

	)

27 
	#IPX_FRAME_8023
 4

	)

28 
	#IPX_FRAME_TR_8022
 5

	)

	@net-tools-1.60/include/mii.h

9 #i‚de‡
_LINUX_MII_H


10 
	#_LINUX_MII_H


	)

13 #i‚de‡
SIOCGMIIPHY


14 
	#SIOCGMIIPHY
 (
SIOCDEVPRIVATE
Ë

	)

15 
	#SIOCGMIIREG
 (
SIOCDEVPRIVATE
+1Ë

	)

16 
	#SIOCSMIIREG
 (
SIOCDEVPRIVATE
+2Ë

	)

17 
	#SIOCGPARAMS
 (
SIOCDEVPRIVATE
+3Ë

	)

18 
	#SIOCSPARAMS
 (
SIOCDEVPRIVATE
+4Ë

	)

21 
	~<löux/ty≥s.h
>

24 
	smii_d©a
 {

25 
__u16
 
	mphy_id
;

26 
__u16
 
	mªg_num
;

27 
__u16
 
	mvÆ_ö
;

28 
__u16
 
	mvÆ_out
;

32 
	#MII_BMCR
 0x00

	)

33 
	#MII_BMCR_RESET
 0x8000

	)

34 
	#MII_BMCR_LOOPBACK
 0x4000

	)

35 
	#MII_BMCR_100MBIT
 0x2000

	)

36 
	#MII_BMCR_AN_ENA
 0x1000

	)

37 
	#MII_BMCR_ISOLATE
 0x0400

	)

38 
	#MII_BMCR_RESTART
 0x0200

	)

39 
	#MII_BMCR_DUPLEX
 0x0100

	)

40 
	#MII_BMCR_COLTEST
 0x0080

	)

43 
	#MII_BMSR
 0x01

	)

44 
	#MII_BMSR_CAP_MASK
 0xf800

	)

45 
	#MII_BMSR_100BASET4
 0x8000

	)

46 
	#MII_BMSR_100BASETX_FD
 0x4000

	)

47 
	#MII_BMSR_100BASETX_HD
 0x2000

	)

48 
	#MII_BMSR_10BASET_FD
 0x1000

	)

49 
	#MII_BMSR_10BASET_HD
 0x0800

	)

50 
	#MII_BMSR_NO_PREAMBLE
 0x0040

	)

51 
	#MII_BMSR_AN_COMPLETE
 0x0020

	)

52 
	#MII_BMSR_REMOTE_FAULT
 0x0010

	)

53 
	#MII_BMSR_AN_ABLE
 0x0008

	)

54 
	#MII_BMSR_LINK_VALID
 0x0004

	)

55 
	#MII_BMSR_JABBER
 0x0002

	)

56 
	#MII_BMSR_EXT_CAP
 0x0001

	)

58 
	#MII_PHY_ID1
 0x02

	)

59 
	#MII_PHY_ID2
 0x03

	)

62 
	#MII_ANAR
 0x04

	)

64 
	#MII_ANLPAR
 0x05

	)

65 
	#MII_AN_NEXT_PAGE
 0x8000

	)

66 
	#MII_AN_ACK
 0x4000

	)

67 
	#MII_AN_REMOTE_FAULT
 0x2000

	)

68 
	#MII_AN_ABILITY_MASK
 0x07e0

	)

69 
	#MII_AN_FLOW_CONTROL
 0x0400

	)

70 
	#MII_AN_100BASET4
 0x0200

	)

71 
	#MII_AN_100BASETX_FD
 0x0100

	)

72 
	#MII_AN_100BASETX_HD
 0x0080

	)

73 
	#MII_AN_10BASET_FD
 0x0040

	)

74 
	#MII_AN_10BASET_HD
 0x0020

	)

75 
	#MII_AN_PROT_MASK
 0x001f

	)

76 
	#MII_AN_PROT_802_3
 0x0001

	)

79 
	#MII_ANER
 0x06

	)

80 
	#MII_ANER_MULT_FAULT
 0x0010

	)

81 
	#MII_ANER_LP_NP_ABLE
 0x0008

	)

82 
	#MII_ANER_NP_ABLE
 0x0004

	)

83 
	#MII_ANER_PAGE_RX
 0x0002

	)

84 
	#MII_ANER_LP_AN_ABLE
 0x0001

	)

	@net-tools-1.60/include/sockets.h

1 
skfd
, 
ùx_sock
, 
ax25_sock
, 
ro£_sock
, 
x25_sock
, 
öë_sock
, 
öë6_sock
,

2 
ddp_sock
, 
ec_sock
;

4 
sockës_›í
(
Ámûy
);

	@net-tools-1.60/include/util-ank.h

1 #i‚de‡
__UTILS_H__


2 
	#__UTILS_H__
 1

	)

4 
	~<asm/ty≥s.h
>

6 
¥e„ºed_Ámûy
;

7 
show_°©s
;

8 
show_dëaûs
;

9 
show_øw
;

10 
ªsﬁve_ho°s
;

12 #i‚de‡
IPPROTO_ESP


13 
	#IPPROTO_ESP
 50

	)

15 #i‚de‡
IPPROTO_AH


16 
	#IPPROTO_AH
 51

	)

19 
	#SPRINT_BSIZE
 64

	)

20 
	#SPRINT_BUF
(
x
Ëx[
SPRINT_BSIZE
]

	)

23 
	#NEXT_ARG
() \

24 
¨gv
++; \

25 i‡(--
¨gc
 <= 0) \

26 
	`ußge
();

	)

30 
__u8
 
	mÁmûy
;

31 
__u8
 
	mbyãÀn
;

32 
__s16
 
	mbôÀn
;

33 
__u32
 
	md©a
[4];

34 } 
	töë_¥efix
;

36 
__u32
 
gë_addr32
(*
«me
);

37 
gë_addr_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

38 
gë_¥efix_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

39 
gë_addr
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

40 
gë_¥efix
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

42 
sˇn_numbî
(*
¨g
, *
vÆ
);

44 
gë_öãgî
(*
vÆ
, *
¨g
, 
ba£
);

45 
gë_unsig√d
(*
vÆ
, *
¨g
, 
ba£
);

46 
	#gë_byã
 
gë_u8


	)

47 
	#gë_ush‹t
 
gë_u16


	)

48 
	#gë_sh‹t
 
gë_s16


	)

49 
gë_u32
(
__u32
 *
vÆ
, *
¨g
, 
ba£
);

50 
gë_u16
(
__u16
 *
vÆ
, *
¨g
, 
ba£
);

51 
gë_s16
(
__s16
 *
vÆ
, *
¨g
, 
ba£
);

52 
gë_u8
(
__u8
 *
vÆ
, *
¨g
, 
ba£
);

53 
gë_s8
(
__s8
 *
vÆ
, *
¨g
, 
ba£
);

55 
gë_tc_˛assid
(
__u32
 *
h
, *
°r
);

56 
¥öt_tc_˛assid
(*
buf
, 
Àn
, 
__u32
 
h
);

57 * 
•röt_tc_˛assid
(
__u32
 
h
, *
buf
);

60 
	$öv¨g
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

61 
	`m©ches
(*
¨g
, *
∑âîn
);

62 
	`öë_addr_m©ch
(
öë_¥efix
 *
a
, i√t_¥efix *
b
, 
bôs
);

64 
	`ùaddr_li°
(
¨gc
, **
¨gv
);

65 
	`ùrouã_m⁄ô‹
(
¨gc
, **
¨gv
);

66 
	`do_ùaddr
(
¨gc
, **
¨gv
);

67 
	`do_ùrouã
(
¨gc
, **
¨gv
);

68 
	`do_ùruÀ
(
¨gc
, **
¨gv
);

69 
	`do_ù√igh
(
¨gc
, **
¨gv
);

70 
	`do_ùtu¬ñ
(
¨gc
, **
¨gv
);

71 
	`do_ùlök
(
¨gc
, **
¨gv
);

72 
	`do_ùm⁄ô‹
(
¨gc
, **
¨gv
);

73 
	`do_mu…üddr
(
¨gc
, **
¨gv
);

74 
	`do_qdisc
(
¨gc
, **
¨gv
);

75 
	`do_˛ass
(
¨gc
, **
¨gv
);

76 
	`do_fûãr
(
¨gc
, **
¨gv
);

78 c⁄° *
	`f‹m©_ho°
(
af
, *
addr
, 
__u8
 *
abuf
, 
Æí
);

	@net-tools-1.60/intl.h

3 #i‡
I18N


4 
	~<loˇÀ.h
>

5 #unde‡
__OPTIMIZE__


6 
	~<liböé.h
>

7 
	#_
(
Såög
Ë
	`gëãxt
((Såög))

	)

8 
	#N_
(
Såög
Ë(Såög)

	)

10 
	#_
(
Såög
Ë(Såög)

	)

11 
	#N_
(
Såög
Ë(Såög)

	)

	@net-tools-1.60/ipmaddr.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/io˘l.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

27 #i‡
deföed
(
__GLIBC__
Ë&& (__GLIBC__ > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1))

28 
	~<√t/if.h
>

30 
	~<löux/if.h
>

33 
	~"c⁄fig.h
"

34 
	~"öé.h
"

35 
	~"utû-™k.h
"

36 
	~"√t-suµ‹t.h
"

37 
	~"vîsi⁄.h
"

38 
	~"∑th«mes.h
"

40 
	gfûãr_dev
[16];

41 
	gfûãr_Ámûy
;

44 
	#NEWADDR
 1

	)

45 
	#DELADDR
 2

	)

47 *
	gRñó£
 = 
RELEASE
,

48 *
	gVîsi⁄
 = "ipmaddr 1.1",

49 *
	gSig«tuª
 = "Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>";

51 
	$vîsi⁄
()

53 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

54 
	`exô
(
E_VERSION
);

55 
	}
}

57 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

59 
	$ußge
()

61 
	`Ârötf
(
°dîr
, 
	`_
("Usage: ipmaddr [ádd | del ] MULTIADDR dev STRING\n"));

62 
	`Ârötf
(
°dîr
, 
	`_
(" ipmaddr show [ dev STRING ] [ ipv4 | ipv6 |Üink |áll ]\n"));

63 
	`Ârötf
(
°dîr
, 
	`_
(" ipmaddr -V | -version\n"));

64 
	`exô
(-1);

65 
	}
}

67 
	$¥öt_Œa
(
FILE
 *
Â
, 
Àn
, *
addr
)

69 
i
;

70 
i
=0; i<
Àn
; i++) {

71 i‡(
i
==0)

72 
	`Ârötf
(
Â
, "%02x", 
addr
[
i
]);

74 
	`Ârötf
(
Â
, ":%02x", 
addr
[
i
]);

76 
	}
}

78 
	$∑r£_Œa
(*
°r
, *
addr
)

80 
Àn
=0;

82 *
°r
) {

83 
tmp
;

84 i‡(
°r
[0] == ':' || str[0] == '.') {

85 
°r
++;

88 i‡(
°r
[1] == 0)

90 i‡(
	`ssˇnf
(
°r
, "%02x", &
tmp
) != 1)

92 
addr
[
Àn
] = 
tmp
;

93 
Àn
++;

94 
°r
 += 2;

96  
Àn
;

97 
	}
}

99 
	$∑r£_hex
(*
°r
, *
addr
)

101 
Àn
=0;

103 *
°r
) {

104 
tmp
;

105 i‡(
°r
[1] == 0)

107 i‡(
	`ssˇnf
(
°r
, "%02x", &
tmp
) != 1)

109 
addr
[
Àn
] = 
tmp
;

110 
Àn
++;

111 
°r
 += 2;

113  
Àn
;

114 
	}
}

116 
	sma_öfo


118 
ma_öfo
 *
	m√xt
;

119 
	mödex
;

120 
	mu£rs
;

121 *
	m„©uªs
;

122 
	m«me
[
IFNAMSIZ
];

123 
öë_¥efix
 
	maddr
;

126 
	$maddr_ös
(
ma_öfo
 **
l°
, ma_öfÿ*
m
)

128 
ma_öfo
 *
mp
;

130 ; (
mp
=*
l°
Ë!
NULL
;Ü° = &mp->
√xt
) {

131 i‡(
mp
->
ödex
 > 
m
->index)

134 
m
->
√xt
 = *
l°
;

135 *
l°
 = 
m
;

136 
	}
}

138 
	$ªad_dev_mˇ°
(
ma_öfo
 **
ªsu…_p
)

140 
buf
[256];

141 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_DEV_MCAST
, "r");

143 i‡(!
Â
)

146 
	`fgës
(
buf
, (buf), 
Â
)) {

147 
hexa
[256];

148 
ma_öfo
 
m
;

149 
Àn
;

150 
°
;

152 
	`mem£t
(&
m
, 0, (m));

153 
	`ssˇnf
(
buf
, "%d%s%d%d%s", &
m
.
ödex
, m.
«me
, &m.
u£rs
, &
°
,

154 
hexa
);

155 i‡(
fûãr_dev
[0] && 
	`°rcmp
(fûãr_dev, 
m
.
«me
))

158 
m
.
addr
.
Ámûy
 = 
AF_PACKET
;

160 
Àn
 = 
	`∑r£_hex
(
hexa
, (*)&
m
.
addr
.
d©a
);

161 i‡(
Àn
 >= 0) {

162 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

164 
	`mem˝y
(
ma
, &
m
, (m));

165 
ma
->
addr
.
byãÀn
 = 
Àn
;

166 
ma
->
addr
.
bôÀn
 = 
Àn
<<3;

167 i‡(
°
)

168 
ma
->
„©uªs
 = "static";

169 
	`maddr_ös
(
ªsu…_p
, 
ma
);

172 
	`f˛o£
(
Â
);

173 
	}
}

175 
	$ªad_igmp
(
ma_öfo
 **
ªsu…_p
)

177 
ma_öfo
 
m
;

178 
buf
[256];

179 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_IGMP
, "r");

181 i‡(!
Â
)

183 
	`mem£t
(&
m
, 0, (m));

184 
	`fgës
(
buf
, (buf), 
Â
);

186 
m
.
addr
.
Ámûy
 = 
AF_INET
;

187 
m
.
addr
.
bôÀn
 = 32;

188 
m
.
addr
.
byãÀn
 = 4;

190 
	`fgës
(
buf
, (buf), 
Â
)) {

191 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

193 i‡(
buf
[0] != '\t') {

194 
	`ssˇnf
(
buf
, "%d%s", &
m
.
ödex
, m.
«me
);

198 i‡(
fûãr_dev
[0] && 
	`°rcmp
(fûãr_dev, 
m
.
«me
))

201 
	`ssˇnf
(
buf
, "%08x%d", (
__u32
*)&
m
.
addr
.
d©a
, &m.
u£rs
);

203 
ma
 = 
	`mÆloc
((
m
));

204 
	`mem˝y
(
ma
, &
m
, (m));

205 
	`maddr_ös
(
ªsu…_p
, 
ma
);

207 
	`f˛o£
(
Â
);

208 
	}
}

211 
	$ªad_igmp6
(
ma_öfo
 **
ªsu…_p
)

213 
buf
[256];

214 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_IGMP6
, "r");

216 i‡(!
Â
)

219 
	`fgës
(
buf
, (buf), 
Â
)) {

220 
hexa
[256];

221 
ma_öfo
 
m
;

222 
Àn
;

224 
	`mem£t
(&
m
, 0, (m));

225 
	`ssˇnf
(
buf
, "%d%s%s%d", &
m
.
ödex
, m.
«me
, 
hexa
, &m.
u£rs
);

227 i‡(
fûãr_dev
[0] && 
	`°rcmp
(fûãr_dev, 
m
.
«me
))

230 
m
.
addr
.
Ámûy
 = 
AF_INET6
;

232 
Àn
 = 
	`∑r£_hex
(
hexa
, (*)&
m
.
addr
.
d©a
);

233 i‡(
Àn
 >= 0) {

234 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

236 
	`mem˝y
(
ma
, &
m
, (m));

238 
ma
->
addr
.
byãÀn
 = 
Àn
;

239 
ma
->
addr
.
bôÀn
 = 
Àn
<<3;

240 
	`maddr_ös
(
ªsu…_p
, 
ma
);

243 
	`f˛o£
(
Â
);

244 
	}
}

246 
	$¥öt_maddr
(
FILE
 *
Â
, 
ma_öfo
 *
li°
)

248 
	`Ârötf
(
Â
, "\t");

250 i‡(
li°
->
addr
.
Ámûy
 =
AF_PACKET
) {

251 
	`Ârötf
(
Â
, "link ");

252 
	`¥öt_Œa
(
Â
, 
li°
->
addr
.
byãÀn
, (*Ói°->addr.
d©a
);

254 
abuf
[256];

255 
li°
->
addr
.
Ámûy
) {

256 
AF_INET
:

257 
	`Ârötf
(
Â
, "inet ");

259 
AF_INET6
:

260 
	`Ârötf
(
Â
, "inet6 ");

263 
	`Ârötf
(
Â
, 
	`_
("Ámûy %d "), 
li°
->
addr
.
Ámûy
);

266 i‡(
	`f‹m©_ho°
(
li°
->
addr
.
Ámûy
,Üi°->addr.
d©a
, 
abuf
, (abuf)))

267 
	`Ârötf
(
Â
, "%s", 
abuf
);

269 
	`Ârötf
(
Â
, "?");

271 i‡(
li°
->
u£rs
 != 1)

272 
	`Ârötf
(
Â
, 
	`_
(" u£r†%d"), 
li°
->
u£rs
);

273 i‡(
li°
->
„©uªs
)

274 
	`Ârötf
(
Â
, " %s", 
li°
->
„©uªs
);

275 
	`Ârötf
(
Â
, "\n");

276 
	}
}

278 
	$¥öt_mli°
(
FILE
 *
Â
, 
ma_öfo
 *
li°
)

280 
cur_ödex
 = 0;

282 ; 
li°
;Üi° =Üi°->
√xt
) {

283 i‡(
cur_ödex
 !
li°
->
ödex
) {

284 
cur_ödex
 = 
li°
->
ödex
;

285 
	`Ârötf
(
Â
, "%d:\t%s\n", 
cur_ödex
, 
li°
->
«me
);

287 
	`¥öt_maddr
(
Â
, 
li°
);

289 
	}
}

291 
	$mu…üddr_li°
(
¨gc
, **
¨gv
)

293 
ma_öfo
 *
li°
 = 
NULL
;

295 
¨gc
 > 0) {

296 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

297 
	`NEXT_ARG
();

298 i‡(
fûãr_dev
[0])

299 
	`ußge
();

300 
	`°r˝y
(
fûãr_dev
, *
¨gv
);

301 } i‡(
	`°rcmp
(*
¨gv
, "all") == 0) {

302 
fûãr_Ámûy
 = 
AF_UNSPEC
;

303 } i‡(
	`°rcmp
(*
¨gv
, "ipv4") == 0) {

304 
fûãr_Ámûy
 = 
AF_INET
;

305 } i‡(
	`°rcmp
(*
¨gv
, "ipv6") == 0) {

306 
fûãr_Ámûy
 = 
AF_INET6
;

307 } i‡(
	`°rcmp
(*
¨gv
, "link") == 0) {

308 
fûãr_Ámûy
 = 
AF_PACKET
;

310 i‡(
fûãr_dev
[0])

311 
	`ußge
();

312 
	`°r˝y
(
fûãr_dev
, *
¨gv
);

314 
¨gv
++; 
¨gc
--;

317 i‡(!
fûãr_Ámûy
 || fûãr_Ámûy =
AF_PACKET
)

318 
	`ªad_dev_mˇ°
(&
li°
);

319 i‡(!
fûãr_Ámûy
 || fûãr_Ámûy =
AF_INET
)

320 
	`ªad_igmp
(&
li°
);

321 i‡(!
fûãr_Ámûy
 || fûãr_Ámûy =
AF_INET6
)

322 
	`ªad_igmp6
(&
li°
);

323 
	`¥öt_mli°
(
°dout
, 
li°
);

325 
	}
}

327 
	$mu…üddr_modify
(
cmd
, 
¨gc
, **
¨gv
)

329 
i‰eq
 
i‰
;

330 
fd
;

332 
	`mem£t
(&
i‰
, 0, (ifr));

334 i‡(
cmd
 =
NEWADDR
)

335 
cmd
 = 
SIOCADDMULTI
;

337 
cmd
 = 
SIOCDELMULTI
;

339 
¨gc
 > 0) {

340 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

341 
	`NEXT_ARG
();

342 i‡(
i‰
.
i‰_«me
[0])

343 
	`ußge
();

344 
	`°∫˝y
(
i‰
.
i‰_«me
, *
¨gv
, 
IFNAMSIZ
);

346 i‡(
i‰
.
i‰_hwaddr
.
ß_d©a
[0])

347 
	`ußge
();

348 i‡(
	`∑r£_Œa
(*
¨gv
, 
i‰
.
i‰_hwaddr
.
ß_d©a
) < 0)

349 
	`ußge
();

351 
¨gc
--; 
¨gv
++;

353 i‡(
i‰
.
i‰_«me
[0] == 0)

354 
	`ußge
();

356 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

357 i‡(
fd
 < 0) {

358 
	`≥º‹
(
	`_
("Cannot create socket"));

359 
	`exô
(1);

361 i‡(
	`io˘l
(
fd
, 
cmd
, (*)&
i‰
) != 0) {

362 
	`≥º‹
("ioctl");

363 
	`exô
(1);

365 
	`˛o£
(
fd
);

367 
	`exô
(0);

368 
	}
}

371 
	$do_mu…üddr
(
¨gc
, **
¨gv
)

373 i‡(
¨gc
 < 1)

374  
	`mu…üddr_li°
(0, 
NULL
);

375 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

376  
	`mu…üddr_modify
(
NEWADDR
, 
¨gc
-1, 
¨gv
+1);

377 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

378  
	`mu…üddr_modify
(
DELADDR
, 
¨gc
-1, 
¨gv
+1);

379 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

380 || 
	`m©ches
(*
¨gv
, "lst") == 0)

381  
	`mu…üddr_li°
(
¨gc
-1, 
¨gv
+1);

382 
	`ußge
();

383 
	}
}

385 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

386 
	gshow_°©s
 = 0;

387 
	gªsﬁve_ho°s
 = 0;

389 
	$maö
(
¨gc
, **
¨gv
)

391 *
ba£«me
;

393 #i‡
I18N


394 
	`£éoˇÀ
 (
LC_ALL
, "");

395 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

396 
	`ãxtdomaö
("net-tools");

399 
ba£«me
 = 
	`°ºchr
(
¨gv
[0], '/');

400 i‡(
ba£«me
 =
NULL
)

401 
ba£«me
 = 
¨gv
[0];

403 
ba£«me
++;

405 
¨gc
 > 1) {

406 i‡(
¨gv
[1][0] != '-')

408 i‡(
	`m©ches
(
¨gv
[1], "-family") == 0) {

409 
¨gc
--;

410 
¨gv
++;

411 i‡(
¨gc
 <= 1)

412 
	`ußge
();

413 i‡(
	`°rcmp
(
¨gv
[1], "inet") == 0)

414 
¥e„ºed_Ámûy
 = 
AF_INET
;

415 i‡(
	`°rcmp
(
¨gv
[1], "inet6") == 0)

416 
¥e„ºed_Ámûy
 = 
AF_INET6
;

418 
	`ußge
();

419 } i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

420 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

421 ++
show_°©s
;

422 } i‡(
	`m©ches
(
¨gv
[1], "-resolve") == 0) {

423 ++
ªsﬁve_ho°s
;

424 } i‡((
	`m©ches
(
¨gv
[1], "-V") == 0) || matches(argv[1], "--version") == 0) {

425 
	`vîsi⁄
();

427 
	`ußge
();

428 
¨gc
--; 
¨gv
++;

431  
	`do_mu…üddr
(
¨gc
-1, 
¨gv
+1);

432 
	}
}

	@net-tools-1.60/iptunnel.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<sy¶og.h
>

25 
	~<f˙é.h
>

26 
	~<sys/sockë.h
>

27 
	~<sys/io˘l.h
>

28 
	~<√töë/ö.h
>

29 
	~<√töë/ù.h
>

30 
	~<¨∑/öë.h
>

31 #i‡
deföed
(
__GLIBC__
Ë&& (__GLIBC__ > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1))

32 
	~<√t/if.h
>

33 
	~<√t/if_¨p.h
>

35 
	~<löux/if.h
>

36 
	~<löux/if_¨p.h
>

38 
	~<löux/ty≥s.h
>

39 
	~<löux/if_tu¬ñ.h
>

41 
	~"c⁄fig.h
"

42 
	~"öé.h
"

43 
	~"√t-suµ‹t.h
"

44 
	~"vîsi⁄.h
"

45 
	~"utû.h
"

47 #unde‡
GRE_CSUM


48 
	#GRE_CSUM
 
	`ht⁄s
(0x8000)

	)

49 #unde‡
GRE_ROUTING


50 
	#GRE_ROUTING
 
	`ht⁄s
(0x4000)

	)

51 #unde‡
GRE_KEY


52 
	#GRE_KEY
 
	`ht⁄s
(0x2000)

	)

53 #unde‡
GRE_SEQ


54 
	#GRE_SEQ
 
	`ht⁄s
(0x1000)

	)

55 #unde‡
GRE_STRICT


56 
	#GRE_STRICT
 
	`ht⁄s
(0x0800)

	)

57 #unde‡
GRE_REC


58 
	#GRE_REC
 
	`ht⁄s
(0x0700)

	)

59 #unde‡
GRE_FLAGS


60 
	#GRE_FLAGS
 
	`ht⁄s
(0x00F8)

	)

61 #unde‡
GRE_VERSION


62 
	#GRE_VERSION
 
	`ht⁄s
(0x0007)

	)

65 #i‡
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 == 0

66 
	#IPPROTO_GRE
 47

	)

69 
	~"utû-™k.h
"

71 *
	gRñó£
 = 
RELEASE
,

72 *
	gVîsi⁄
 = "iptunnel 1.01",

73 *
	gSig«tuª
 = "Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>";

75 
	$vîsi⁄
()

77 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

78 
	`exô
(
E_VERSION
);

79 
	}
}

81 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

83 
	$ußge
()

85 
	`Ârötf
(
°dîr
, 
	`_
("Usage: iptunnel {ádd | change | del | show } [ NAME ]\n"));

86 
	`Ârötf
(
°dîr
, 
	`_
(" [ mode { ipip | gre | sit } ] [Ñemote ADDR ] [Üocal ADDR ]\n"));

87 
	`Ârötf
(
°dîr
, 
	`_
(" [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n"));

88 
	`Ârötf
(
°dîr
, 
	`_
(" [Åtl TTL ] [Åos TOS ] [Çopmtudisc ] [ dev PHYS_DEV ]\n"));

89 
	`Ârötf
(
°dîr
, 
	`_
(" iptunnel -V | --version\n\n"));

90 
	`Ârötf
(
°dîr
, 
	`_
("Where: NAME := STRING\n"));

91 
	`Ârötf
(
°dîr
, 
	`_
(" ADDR := { IP_ADDRESS |ány }\n"));

92 
	`Ârötf
(
°dîr
, 
	`_
(" TOS := { NUMBER | inherit }\n"));

93 
	`Ârötf
(
°dîr
, 
	`_
(" TTL := { 1..255 | inherit }\n"));

94 
	`Ârötf
(
°dîr
, 
	`_
(" KEY := { DOTTED_QUAD | NUMBER }\n"));

95 
	`exô
(-1);

96 
	}
}

98 
	$do_io˘l_gë_ifödex
(*
dev
)

100 
i‰eq
 
i‰
;

101 
fd
;

102 
îr
;

104 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev
);

105 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

106 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFINDEX
, &
i‰
);

107 i‡(
îr
) {

108 
	`≥º‹
("ioctl");

111 
	`˛o£
(
fd
);

112  
i‰
.
i‰_ifödex
;

113 
	}
}

115 
	$do_io˘l_gë_i·y≥
(*
dev
)

117 
i‰eq
 
i‰
;

118 
fd
;

119 
îr
;

121 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev
);

122 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

123 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
);

124 i‡(
îr
) {

125 
	`≥º‹
("ioctl");

128 
	`˛o£
(
fd
);

129  
i‰
.
i‰_addr
.
ß_Ámûy
;

130 
	}
}

133 * 
	$do_io˘l_gë_i‚ame
(
idx
)

135 
i‰eq
 
i‰
;

136 
fd
;

137 
îr
;

139 
i‰
.
i‰_ifödex
 = 
idx
;

140 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

141 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFNAME
, &
i‰
);

142 i‡(
îr
) {

143 
	`≥º‹
("ioctl");

144  
NULL
;

146 
	`˛o£
(
fd
);

147  
i‰
.
i‰_«me
;

148 
	}
}

152 
	$do_gë_io˘l
(*
ba£dev
, 
ù_tu¬ñ_∑rm
 *
p
)

154 
i‰eq
 
i‰
;

155 
fd
;

156 
îr
;

158 
	`°r˝y
(
i‰
.
i‰_«me
, 
ba£dev
);

159 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

160 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

161 
îr
 = 
	`io˘l
(
fd
, 
SIOCGETTUNNEL
, &
i‰
);

162 i‡(
îr
)

163 
	`≥º‹
("ioctl");

164 
	`˛o£
(
fd
);

165  
îr
;

166 
	}
}

168 
	$do_add_io˘l
(
cmd
, *
ba£dev
, 
ù_tu¬ñ_∑rm
 *
p
)

170 
i‰eq
 
i‰
;

171 
fd
;

172 
îr
;

174 
	`°r˝y
(
i‰
.
i‰_«me
, 
ba£dev
);

175 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

176 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

177 
îr
 = 
	`io˘l
(
fd
, 
cmd
, &
i‰
);

178 i‡(
îr
)

179 
	`≥º‹
("ioctl");

180 
	`˛o£
(
fd
);

181  
îr
;

182 
	}
}

184 
	$do_dñ_io˘l
(*
ba£dev
, 
ù_tu¬ñ_∑rm
 *
p
)

186 
i‰eq
 
i‰
;

187 
fd
;

188 
îr
;

190 
	`°r˝y
(
i‰
.
i‰_«me
, 
ba£dev
);

191 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

192 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

193 
îr
 = 
	`io˘l
(
fd
, 
SIOCDELTUNNEL
, &
i‰
);

194 i‡(
îr
)

195 
	`≥º‹
("ioctl");

196 
	`˛o£
(
fd
);

197  
îr
;

198 
	}
}

200 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, 
ù_tu¬ñ_∑rm
 *
p
)

202 
medium
[
IFNAMSIZ
];

204 
	`mem£t
(
p
, 0, (*p));

205 
	`mem£t
(&
medium
, 0, (medium));

207 
p
->
ùh
.
vîsi⁄
 = 4;

208 
p
->
ùh
.
ihl
 = 5;

209 #i‚de‡
IP_DF


210 
	#IP_DF
 0x4000

	)

212 
p
->
ùh
.
‰ag_off
 = 
	`ht⁄s
(
IP_DF
);

214 
¨gc
 > 0) {

215 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

216 
	`NEXT_ARG
();

217 i‡(
	`°rcmp
(*
¨gv
, "ipip") == 0) {

218 i‡(
p
->
ùh
.
¥Ÿocﬁ
)

219 
	`ußge
();

220 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

221 } i‡(
	`°rcmp
(*
¨gv
, "gre") == 0) {

222 i‡(
p
->
ùh
.
¥Ÿocﬁ
)

223 
	`ußge
();

224 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_GRE
;

225 } i‡(
	`°rcmp
(*
¨gv
, "sit") == 0) {

226 i‡(
p
->
ùh
.
¥Ÿocﬁ
)

227 
	`ußge
();

228 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

230 
	`ußge
();

231 } i‡(
	`°rcmp
(*
¨gv
, "key") == 0) {

232 
uvÆ
;

233 
	`NEXT_ARG
();

234 
p
->
i_Êags
 |
GRE_KEY
;

235 
p
->
o_Êags
 |
GRE_KEY
;

236 i‡(
	`°rchr
(*
¨gv
, '.'))

237 
p
->
i_key
 =Ö->
o_key
 = 
	`gë_addr32
(*
¨gv
);

239 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

240 
	`ußge
();

241 
p
->
i_key
 =Ö->
o_key
 = 
	`ht⁄l
(
uvÆ
);

243 } i‡(
	`°rcmp
(*
¨gv
, "ikey") == 0) {

244 
uvÆ
;

245 
	`NEXT_ARG
();

246 
p
->
i_Êags
 |
GRE_KEY
;

247 i‡(
	`°rchr
(*
¨gv
, '.'))

248 
p
->
o_key
 = 
	`gë_addr32
(*
¨gv
);

250 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

251 
	`ußge
();

252 
p
->
i_key
 = 
	`ht⁄l
(
uvÆ
);

254 } i‡(
	`°rcmp
(*
¨gv
, "okey") == 0) {

255 
uvÆ
;

256 
	`NEXT_ARG
();

257 
p
->
o_Êags
 |
GRE_KEY
;

258 i‡(
	`°rchr
(*
¨gv
, '.'))

259 
p
->
o_key
 = 
	`gë_addr32
(*
¨gv
);

261 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

262 
	`ußge
();

263 
p
->
o_key
 = 
	`ht⁄l
(
uvÆ
);

265 } i‡(
	`°rcmp
(*
¨gv
, "seq") == 0) {

266 
p
->
i_Êags
 |
GRE_SEQ
;

267 
p
->
o_Êags
 |
GRE_SEQ
;

268 } i‡(
	`°rcmp
(*
¨gv
, "iseq") == 0) {

269 
p
->
i_Êags
 |
GRE_SEQ
;

270 } i‡(
	`°rcmp
(*
¨gv
, "oseq") == 0) {

271 
p
->
o_Êags
 |
GRE_SEQ
;

272 } i‡(
	`°rcmp
(*
¨gv
, "csum") == 0) {

273 
p
->
i_Êags
 |
GRE_CSUM
;

274 
p
->
o_Êags
 |
GRE_CSUM
;

275 } i‡(
	`°rcmp
(*
¨gv
, "icsum") == 0) {

276 
p
->
i_Êags
 |
GRE_CSUM
;

277 } i‡(
	`°rcmp
(*
¨gv
, "ocsum") == 0) {

278 
p
->
o_Êags
 |
GRE_CSUM
;

279 } i‡(
	`°rcmp
(*
¨gv
, "nopmtudisc") == 0) {

280 
p
->
ùh
.
‰ag_off
 = 0;

281 } i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

282 
	`NEXT_ARG
();

283 i‡(
	`°rcmp
(*
¨gv
, "any"))

284 
p
->
ùh
.
daddr
 = 
	`gë_addr32
(*
¨gv
);

285 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

286 
	`NEXT_ARG
();

287 i‡(
	`°rcmp
(*
¨gv
, "any"))

288 
p
->
ùh
.
ßddr
 = 
	`gë_addr32
(*
¨gv
);

289 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

290 
	`NEXT_ARG
();

291 
	`ß„_°∫˝y
(
medium
, *
¨gv
, 
IFNAMSIZ
-1);

292 } i‡(
	`°rcmp
(*
¨gv
, "ttl") == 0) {

293 
uvÆ
;

294 
	`NEXT_ARG
();

295 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

296 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

297 
	`ußge
();

298 i‡(
uvÆ
 > 255)

299 
	`ußge
();

300 
p
->
ùh
.
âl
 = 
uvÆ
;

302 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0) {

303 
uvÆ
;

304 
	`NEXT_ARG
();

305 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

306 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

307 
	`ußge
();

308 i‡(
uvÆ
 > 255)

309 
	`ußge
();

310 
p
->
ùh
.
tos
 = 
uvÆ
;

312 
p
->
ùh
.
tos
 = 1;

314 i‡(
p
->
«me
[0])

315 
	`ußge
();

316 
	`ß„_°∫˝y
(
p
->
«me
, *
¨gv
, 
IFNAMSIZ
);

318 
¨gc
--; 
¨gv
++;

321 i‡(
p
->
ùh
.
¥Ÿocﬁ
 == 0) {

322 i‡(
	`memcmp
(
p
->
«me
, "gre", 3) == 0)

323 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_GRE
;

324 i‡(
	`memcmp
(
p
->
«me
, "ipip", 4) == 0)

325 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

326 i‡(
	`memcmp
(
p
->
«me
, "sit", 3) == 0)

327 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

330 i‡(
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPIP
 ||Ö->ùh.¥Ÿocﬁ =
IPPROTO_IPV6
) {

331 i‡((
p
->
i_Êags
 & 
GRE_KEY
Ë|| (p->
o_Êags
 & GRE_KEY)) {

332 
	`Ârötf
(
°dîr
, 
	`_
("KeysáreÇotállowed with ipipánd sit.\n"));

337 i‡(
medium
[0]) {

338 
p
->
lök
 = 
	`do_io˘l_gë_ifödex
(
medium
);

339 i‡(
p
->
lök
 == 0)

343 i‡(
p
->
i_key
 =0 && 
	`IN_MULTICAST
(
	`¡ohl
’->
ùh
.
daddr
))) {

344 
p
->
i_key
 =Ö->
ùh
.
daddr
;

345 
p
->
i_Êags
 |
GRE_KEY
;

347 i‡(
p
->
o_key
 =0 && 
	`IN_MULTICAST
(
	`¡ohl
’->
ùh
.
daddr
))) {

348 
p
->
o_key
 =Ö->
ùh
.
daddr
;

349 
p
->
o_Êags
 |
GRE_KEY
;

351 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
p
->
ùh
.
daddr
)Ë&& !p->ùh.
ßddr
) {

352 
	`Ârötf
(
°dîr
, 
	`_
("BroadcastÅunnelÑequiresá sourceáddress.\n"));

356 
	}
}

359 
	$do_add
(
cmd
, 
¨gc
, **
¨gv
)

361 
ù_tu¬ñ_∑rm
 
p
;

363 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
p
) < 0)

366 i‡(
p
.
ùh
.
âl
 &&Ö.ùh.
‰ag_off
 == 0) {

367 
	`Ârötf
(
°dîr
, 
	`_
("ttl != 0ándÇoptmudiscáre incompatible\n"));

371 
p
.
ùh
.
¥Ÿocﬁ
) {

372 
IPPROTO_IPIP
:

373  
	`do_add_io˘l
(
cmd
, "tu∆0", &
p
);

374 
IPPROTO_GRE
:

375  
	`do_add_io˘l
(
cmd
, "gª0", &
p
);

376 
IPPROTO_IPV6
:

377  
	`do_add_io˘l
(
cmd
, "sô0", &
p
);

379 
	`Ârötf
(
°dîr
, 
	`_
("cannot determineÅunnel mode (ipip, gre or sit)\n"));

383 
	}
}

385 
	$do_dñ
(
¨gc
, **
¨gv
)

387 
ù_tu¬ñ_∑rm
 
p
;

389 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
p
) < 0)

392 
p
.
ùh
.
¥Ÿocﬁ
) {

393 
IPPROTO_IPIP
:

394  
	`do_dñ_io˘l
(
p
.
«me
[0] ?Ö.name : "tunl0", &p);

395 
IPPROTO_GRE
:

396  
	`do_dñ_io˘l
(
p
.
«me
[0] ?Ö.name : "gre0", &p);

397 
IPPROTO_IPV6
:

398  
	`do_dñ_io˘l
(
p
.
«me
[0] ?Ö.name : "sit0", &p);

400  
	`do_dñ_io˘l
(
p
.
«me
, &p);

403 
	}
}

405 
	$¥öt_tu¬ñ
(
ù_tu¬ñ_∑rm
 *
p
)

407 
s1
[256];

408 
s2
[256];

409 
s3
[64];

410 
s4
[64];

412 
	`f‹m©_ho°
(
AF_INET
, &
p
->
ùh
.
daddr
, 
s1
, (s1));

413 
	`f‹m©_ho°
(
AF_INET
, &
p
->
ùh
.
ßddr
, 
s2
, (s2));

414 
	`öë_¡›
(
AF_INET
, &
p
->
i_key
, 
s3
, (s3));

415 
	`öë_¡›
(
AF_INET
, &
p
->
o_key
, 
s4
, (s4));

417 
	`¥ötf
(
	`_
("%s: %s/ipÑemote %sÜocal %s "),

418 
p
->
«me
,

419 
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPIP
 ? "ip" :

420 (
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_GRE
 ? "gre" :

421 (
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPV6
 ? "ùv6" : 
	`_
("unknown"))),

422 
p
->
ùh
.
daddr
 ? 
s1
 : "™y",Ö->ùh.
ßddr
 ? 
s2
 : "any");

423 i‡(
p
->
lök
) {

424 *
n
 = 
	`do_io˘l_gë_i‚ame
(
p
->
lök
);

425 i‡(
n
)

426 
	`¥ötf
(" dev %†", 
n
);

428 i‡(
p
->
ùh
.
âl
)

429 
	`¥ötf
("Åé %d ", 
p
->
ùh
.
âl
);

431 
	`¥ötf
("Åtl inherit ");

432 i‡(
p
->
ùh
.
tos
) {

433 
	`¥ötf
("Åos");

434 i‡(
p
->
ùh
.
tos
&1)

435 
	`¥ötf
(" inherit");

436 i‡(
p
->
ùh
.
tos
&~1)

437 
	`¥ötf
("%c%02x ", 
p
->
ùh
.
tos
&1 ? '/' : ' ',Ö->iph.tos&~1);

439 i‡(!(
p
->
ùh
.
‰ag_off
&
	`ht⁄s
(
IP_DF
)))

440 
	`¥ötf
("Çopmtudisc");

442 i‡((
p
->
i_Êags
&
GRE_KEY
Ë&& (p->
o_Êags
&GRE_KEYË&&Ö->
o_key
 =p->
i_key
)

443 
	`¥ötf
(" key %s", 
s3
);

444 i‡((
p
->
i_Êags
|p->
o_Êags
)&
GRE_KEY
) {

445 i‡(
p
->
i_Êags
&
GRE_KEY
)

446 
	`¥ötf
(" ikey %†", 
s3
);

447 i‡(
p
->
o_Êags
&
GRE_KEY
)

448 
	`¥ötf
(" okey %†", 
s4
);

450 
	`¥ötf
("\n");

452 i‡(
p
->
i_Êags
&
GRE_SEQ
)

453 
	`¥ötf
(
	`_
(" DropÖackets out of sequence.\n"));

454 i‡(
p
->
i_Êags
&
GRE_CSUM
)

455 
	`¥ötf
(
	`_
(" Checksum inÑeceivedÖacket isÑequired.\n"));

456 i‡(
p
->
o_Êags
&
GRE_SEQ
)

457 
	`¥ötf
(
	`_
(" SequenceÖackets on output.\n"));

458 i‡(
p
->
o_Êags
&
GRE_CSUM
)

459 
	`¥ötf
(
	`_
(" Checksum outputÖackets.\n"));

460 
	}
}

462 
	$do_tu¬ñs_li°
(
ù_tu¬ñ_∑rm
 *
p
)

464 
«me
[
IFNAMSIZ
];

465 
rx_byãs
, 
rx_∑ckës
, 
rx_îrs
, 
rx_dr›s
,

466 
rx_fifo
, 
rx_‰ame
,

467 
tx_byãs
, 
tx_∑ckës
, 
tx_îrs
, 
tx_dr›s
,

468 
tx_fifo
, 
tx_cﬁls
, 
tx_ˇºõr
, 
rx_mu…i
;

469 
ty≥
;

470 
ù_tu¬ñ_∑rm
 
p1
;

472 
buf
[512];

473 
FILE
 *
Â
 = 
	`f›í
("/proc/net/dev", "r");

474 i‡(
Â
 =
NULL
) {

475 
	`≥º‹
("fopen");

479 
	`fgës
(
buf
, (buf), 
Â
);

480 
	`fgës
(
buf
, (buf), 
Â
);

482 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

483 *
±r
;

484 
buf
[(buf) - 1] = 0;

485 i‡((
±r
 = 
	`°rchr
(
buf
, ':')Ë=
NULL
 ||

486 (*
±r
++ = 0, 
	`ssˇnf
(
buf
, "%s", 
«me
) != 1)) {

487 
	`Ârötf
(
°dîr
, 
	`_
("Wrong format of /proc/net/dev. Sorry.\n"));

490 i‡(
	`ssˇnf
(
±r
, "%ld%ld%ld%ld%ld%ld%ld%*d%ld%ld%ld%ld%ld%ld%ld",

491 &
rx_byãs
, &
rx_∑ckës
, &
rx_îrs
, &
rx_dr›s
,

492 &
rx_fifo
, &
rx_‰ame
, &
rx_mu…i
,

493 &
tx_byãs
, &
tx_∑ckës
, &
tx_îrs
, &
tx_dr›s
,

494 &
tx_fifo
, &
tx_cﬁls
, &
tx_ˇºõr
) != 14)

496 i‡(
p
->
«me
[0] && 
	`°rcmp
(p->name,Çame))

498 
ty≥
 = 
	`do_io˘l_gë_i·y≥
(
«me
);

499 i‡(
ty≥
 == -1) {

500 
	`Ârötf
(
°dîr
, 
	`_
("FaûedÅÿgëÅy≥ o‡[%s]\n"), 
«me
);

503 i‡(
ty≥
 !
ARPHRD_TUNNEL
 &&Åy≥ !
ARPHRD_IPGRE
 &&Åy≥ !
ARPHRD_SIT
)

505 
	`mem£t
(&
p1
, 0, (p1));

506 i‡(
	`do_gë_io˘l
(
«me
, &
p1
))

508 i‡((
p
->
lök
 && 
p1
.link !=Ö->link) ||

509 (
p
->
«me
[0] && 
	`°rcmp
(
p1
.name,Ö->name)) ||

510 (
p
->
ùh
.
daddr
 && 
p1
.iph.daddr !=Ö->iph.daddr) ||

511 (
p
->
ùh
.
ßddr
 && 
p1
.iph.saddr !=Ö->iph.saddr) ||

512 (
p
->
i_key
 && 
p1
.i_key !=Ö->i_key))

514 
	`¥öt_tu¬ñ
(&
p1
);

515 i‡(
show_°©s
) {

516 
	`¥ötf
(
	`_
("RX: Packets Bytes Errors CsumErrs OutOfSeq Mcasts\n"));

517 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-8ld\n",

518 
rx_∑ckës
, 
rx_byãs
, 
rx_îrs
, 
rx_‰ame
, 
rx_fifo
, 
rx_mu…i
);

519 
	`¥ötf
(
	`_
("TX: Packets Bytes Errors DeadLoop NoRoute NoBufs\n"));

520 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-6ld\n\n",

521 
tx_∑ckës
, 
tx_byãs
, 
tx_îrs
, 
tx_cﬁls
, 
tx_ˇºõr
, 
tx_dr›s
);

525 
	}
}

527 
	$do_show
(
¨gc
, **
¨gv
)

529 
îr
;

530 
ù_tu¬ñ_∑rm
 
p
;

532 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
p
) < 0)

535 
p
.
ùh
.
¥Ÿocﬁ
) {

536 
IPPROTO_IPIP
:

537 
îr
 = 
	`do_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "tunl0", &p);

539 
IPPROTO_GRE
:

540 
îr
 = 
	`do_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "gre0", &p);

542 
IPPROTO_IPV6
:

543 
îr
 = 
	`do_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "sit0", &p);

546 
	`do_tu¬ñs_li°
(&
p
);

549 i‡(
îr
)

552 
	`¥öt_tu¬ñ
(&
p
);

554 
	}
}

556 
	$do_ùtu¬ñ
(
¨gc
, **
¨gv
)

558 i‡(
¨gc
 > 0) {

559 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

560  
	`do_add
(
SIOCADDTUNNEL
, 
¨gc
-1, 
¨gv
+1);

561 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

562  
	`do_add
(
SIOCCHGTUNNEL
, 
¨gc
-1, 
¨gv
+1);

563 i‡(
	`m©ches
(*
¨gv
, "del") == 0)

564  
	`do_dñ
(
¨gc
-1, 
¨gv
+1);

565 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

566 
	`m©ches
(*
¨gv
, "lst") == 0 ||

567 
	`m©ches
(*
¨gv
, "list") == 0)

568  
	`do_show
(
¨gc
-1, 
¨gv
+1);

570  
	`do_show
(0, 
NULL
);

572 
	`ußge
();

573 
	}
}

576 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

577 
	gshow_°©s
 = 0;

578 
	gªsﬁve_ho°s
 = 0;

580 
	$maö
(
¨gc
, **
¨gv
)

582 *
ba£«me
;

584 #i‡
I18N


585 
	`£éoˇÀ
 (
LC_ALL
, "");

586 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

587 
	`ãxtdomaö
("net-tools");

590 
ba£«me
 = 
	`°ºchr
(
¨gv
[0], '/');

591 i‡(
ba£«me
 =
NULL
)

592 
ba£«me
 = 
¨gv
[0];

594 
ba£«me
++;

596 
¨gc
 > 1) {

597 i‡(
¨gv
[1][0] != '-')

599 i‡(
	`m©ches
(
¨gv
[1], "-family") == 0) {

600 
¨gc
--;

601 
¨gv
++;

602 i‡(
¨gc
 <= 1)

603 
	`ußge
();

604 i‡(
	`°rcmp
(
¨gv
[1], "inet") == 0)

605 
¥e„ºed_Ámûy
 = 
AF_INET
;

606 i‡(
	`°rcmp
(
¨gv
[1], "inet6") == 0)

607 
¥e„ºed_Ámûy
 = 
AF_INET6
;

609 
	`ußge
();

610 } i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

611 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

612 ++
show_°©s
;

613 } i‡(
	`m©ches
(
¨gv
[1], "-resolve") == 0) {

614 ++
ªsﬁve_ho°s
;

615 } i‡((
	`m©ches
(
¨gv
[1], "-V") == 0) || (matches(argv[1], "--version") == 0)) {

616 
	`vîsi⁄
();

618 
	`ußge
();

619 
¨gc
--; 
¨gv
++;

622  
	`do_ùtu¬ñ
(
¨gc
-1, 
¨gv
+1);

623 
	}
}

	@net-tools-1.60/lib/activate.c

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~"√t-suµ‹t.h
"

29 
	~"∑th«mes.h
"

30 
	~"vîsi⁄.h
"

31 
	~"c⁄fig.h
"

32 
	~"öé.h
"

34 
hwty≥
 
¶ù_hwty≥
;

35 
hwty≥
 
c¶ù_hwty≥
;

36 
hwty≥
 
¶ù6_hwty≥
;

37 
hwty≥
 
c¶ù6_hwty≥
;

38 
hwty≥
 
ad≠tive_hwty≥
;

39 
hwty≥
 
µp_hwty≥
;

41 
SLIP_a˘iv©e
(
fd
);

42 
CSLIP_a˘iv©e
(
fd
);

43 
SLIP6_a˘iv©e
(
fd
);

44 
CSLIP6_a˘iv©e
(
fd
);

45 
ADAPTIVE_a˘iv©e
(
fd
);

46 
PPP_a˘iv©e
(
fd
);

48 
	$a˘iv©e_öô
()

50 #i‡
HAVE_HWSLIP


51 
¶ù_hwty≥
.
a˘iv©e
 = 
SLIP_a˘iv©e
;

52 
c¶ù_hwty≥
.
a˘iv©e
 = 
CSLIP_a˘iv©e
;

53 
¶ù6_hwty≥
.
a˘iv©e
 = 
SLIP6_a˘iv©e
;

54 
c¶ù6_hwty≥
.
a˘iv©e
 = 
CSLIP6_a˘iv©e
;

55 
ad≠tive_hwty≥
.
a˘iv©e
 = 
ADAPTIVE_a˘iv©e
;

57 #i‡
HAVE_HWPPP


58 
µp_hwty≥
.
a˘iv©e
 = 
PPP_a˘iv©e
;

60 
	}
}

62 
	$a˘iv©e_ld
(c⁄° *
hw«me
, 
fd
)

64 
hwty≥
 *
hw
;

66 
hw
 = 
	`gë_hwty≥
(
hw«me
);

68 i‡(!
hw
) {

69 
	`Ârötf
(
°dîr
, 
	`_
("H¨dw¨êty≥ `%s'ÇŸ suµ‹ãd.\n"), 
hw«me
);

70  (
E_NOSUPP
);

72 i‡(!
hw
->
a˘iv©e
) {

73 
	`Ârötf
(
°dîr
, 
	`_
("C™nŸ ch™gêlöêdiscùlöêtÿ`%s'.\n"), 
hw
->
«me
);

74  (
E_OPTERR
);

76  (
hw
->
	`a˘iv©e
(
fd
));

77 
	}
}

	@net-tools-1.60/lib/af.c

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<î∫o.h
>

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~"c⁄fig.h
"

25 
	~"√t-suµ‹t.h
"

26 
	~"∑th«mes.h
"

27 
	~"öé.h
"

28 
	~"utû.h
"

30 
	gÊag_unx
;

31 
	gÊag_ùx
;

32 
	gÊag_ax25
;

33 
	gÊag_ddp
;

34 
	gÊag_√åom
;

35 
	gÊag_öë
;

36 
	gÊag_öë6
;

37 
	gÊag_ec⁄ë
;

38 
	gÊag_x25
 = 0;

39 
	gÊag_ash
;

42 
	sa·øns_t
 {

43 *
	mÆüs
;

44 *
	m«me
;

45 *
	mÊag
;

46 } 
	ga·øns
[] = {

49 "ax25", "ax25", &
Êag_ax25


52 "ù", "öë", &
Êag_öë


55 "ù6", "öë6", &
Êag_öë6


58 "ùx", "ùx", &
Êag_ùx


61 "≠∂ëÆk", "ddp", &
Êag_ddp


64 "√åom", "√åom", &
Êag_√åom


67 "öë", "öë", &
Êag_öë


70 "öë6", "öë6", &
Êag_öë6


73 "ddp", "ddp", &
Êag_ddp


76 "unix", "unix", &
Êag_unx


79 "t˝ù", "öë", &
Êag_öë


82 "ec⁄ë", "ec", &
Êag_ec⁄ë


85 "x25", "x25", &
Êag_x25


88 "ash", "ash", &
Êag_ash


95 
	ga‚ame
[256] = "";

97 
a·y≥
 
un•ec_a·y≥
;

98 
a·y≥
 
unix_a·y≥
;

99 
a·y≥
 
öë_a·y≥
;

100 
a·y≥
 
öë6_a·y≥
;

101 
a·y≥
 
ax25_a·y≥
;

102 
a·y≥
 
√åom_a·y≥
;

103 
a·y≥
 
ùx_a·y≥
;

104 
a·y≥
 
ddp_a·y≥
;

105 
a·y≥
 
ec_a·y≥
;

106 
a·y≥
 
x25_a·y≥
;

107 
a·y≥
 
ro£_a·y≥
;

108 
a·y≥
 
ash_a·y≥
;

110 
	gsVaföô
 = 0;

112 
a·y≥
 *
	ga·y≥s
[] =

114 #i‡
HAVE_AFUNIX


115 &
unix_a·y≥
,

117 #i‡
HAVE_AFINET


118 &
öë_a·y≥
,

120 #i‡
HAVE_AFINET6


121 &
öë6_a·y≥
,

123 #i‡
HAVE_AFAX25


124 &
ax25_a·y≥
,

126 #i‡
HAVE_AFNETROM


127 &
√åom_a·y≥
,

129 #i‡
HAVE_AFROSE


130 &
ro£_a·y≥
,

132 #i‡
HAVE_AFIPX


133 &
ùx_a·y≥
,

135 #i‡
HAVE_AFATALK


136 &
ddp_a·y≥
,

138 #i‡
HAVE_AFECONET


139 &
ec_a·y≥
,

141 #i‡
HAVE_AFASH


142 &
ash_a·y≥
,

144 #i‡
HAVE_AFX25


145 &
x25_a·y≥
,

147 &
un•ec_a·y≥
,

148 
NULL


151 
	$aföô
()

153 
un•ec_a·y≥
.
tôÀ
 = 
	`_
("UNSPEC");

154 #i‡
HAVE_AFUNIX


155 
unix_a·y≥
.
tôÀ
 = 
	`_
("UNIX Domain");

157 #i‡
HAVE_AFINET


158 
öë_a·y≥
.
tôÀ
 = 
	`_
("DARPA Internet");

160 #i‡
HAVE_AFINET6


161 
öë6_a·y≥
.
tôÀ
 = 
	`_
("IPv6");

163 #i‡
HAVE_AFAX25


164 
ax25_a·y≥
.
tôÀ
 = 
	`_
("AMPR AX.25");

166 #i‡
HAVE_AFNETROM


167 
√åom_a·y≥
.
tôÀ
 = 
	`_
("AMPR NET/ROM");

169 #i‡
HAVE_AFIPX


170 
ùx_a·y≥
.
tôÀ
 = 
	`_
("Novell IPX");

172 #i‡
HAVE_AFATALK


173 
ddp_a·y≥
.
tôÀ
 = 
	`_
("Appletalk DDP");

175 #i‡
HAVE_AFECONET


176 
ec_a·y≥
.
tôÀ
 = 
	`_
("Econet");

178 #i‡
HAVE_AFX25


179 
x25_a·y≥
.
tôÀ
 = 
	`_
("CCITT X.25");

181 #i‡
HAVE_AFROSE


182 
ro£_a·y≥
.
tôÀ
 = 
	`_
("AMPR ROSE");

184 #i‡
HAVE_AFASH


185 
ash_a·y≥
.
tôÀ
 = 
	`_
("Ash");

187 
sVaföô
 = 1;

188 
	}
}

191 
	$a·øns_def
(*
toﬁ
, *
¨gv0
, *
dÊt
)

193 *
tmp
;

194 *
buf
;

196 
	`°r˝y
(
a‚ame
, 
dÊt
);

198 i‡(!(
tmp
 = 
	`°ºchr
(
¨gv0
, '/')))

199 
tmp
 = 
¨gv0
;

201 
tmp
++;

203 i‡(!(
buf
 = 
	`°rdup
(
tmp
)))

206 i‡(
	`°æí
(
toﬁ
Ë>°æí(
tmp
)) {

207 
	`‰ì
(
buf
);

210 
tmp
 = 
buf
 + (
	`°æí
—mpË- såÀn(
toﬁ
));

212 i‡(
	`°rcmp
(
tmp
, 
toﬁ
) != 0) {

213 
	`‰ì
(
buf
);

216 *
tmp
 = '\0';

217 i‡((
tmp
 = 
	`°rchr
(
buf
, '_')))

218 *
tmp
 = '\0';

220 
a‚ame
[0] = '\0';

221 i‡(
	`a·øns_›t
(
buf
))

222 
	`°r˝y
(
a‚ame
, 
buf
);

224 
	`‰ì
(
buf
);

225 
	}
}

229 
a·y≥
 *
	$gë_a·y≥
(c⁄° *
«me
)

231 
a·y≥
 **
aÂ
;

233 i‡(!
sVaföô
)

234 
	`aföô
();

236 
aÂ
 = 
a·y≥s
;

237 *
aÂ
 !
NULL
) {

238 i‡(!
	`°rcmp
((*
aÂ
)->
«me
,Çame))

239  (*
aÂ
);

240 
aÂ
++;

242 i‡(
	`ödex
(
«me
, ','))

243 
	`Ârötf
(
°dîr
, 
	`_
("Please don't supply moreÅhan oneáddress family.\n"));

244  (
NULL
);

245 
	}
}

249 
a·y≥
 *
	$gë_a‚ty≥
(
af
)

251 
a·y≥
 **
aÂ
;

253 i‡(!
sVaföô
)

254 
	`aföô
();

256 
aÂ
 = 
a·y≥s
;

257 *
aÂ
 !
NULL
) {

258 i‡((*
aÂ
)->
af
 ==áf)

259  (*
aÂ
);

260 
aÂ
++;

262  (
NULL
);

263 
	}
}

266 
	$gë_sockë_f‹_af
(
af
)

268 
a·y≥
 **
aÂ
;

270 i‡(!
sVaföô
)

271 
	`aföô
();

273 
aÂ
 = 
a·y≥s
;

274 *
aÂ
 !
NULL
) {

275 i‡((*
aÂ
)->
af
 ==áf)

276  (*
aÂ
)->
fd
;

277 
aÂ
++;

280 
	}
}

282 
	$a·øns_›t
(c⁄° *
¨g
)

284 
a·øns_t
 *
∑·
;

285 *
tmp1
, *
tmp2
;

286 
buf
[256];

288 
	`ß„_°∫˝y
(
buf
, 
¨g
, (buf));

290 
tmp1
 = 
buf
;

292 
tmp1
) {

294 
tmp2
 = 
	`ödex
(
tmp1
, ',');

296 i‡(
tmp2
)

297 *(
tmp2
++) = '\0';

299 
∑·
 = 
a·øns
;

300 
∑·
 = 
a·øns
;Öa·->
Æüs
;Öaft++) {

301 i‡(
	`°rcmp
(
tmp1
, 
∑·
->
Æüs
))

303 i‡(
	`°æí
(
∑·
->
«me
Ë+ såÀn(
a‚ame
) + 1 >= (afname)) {

304 
	`Ârötf
(
°dîr
, 
	`_
("Too mucháddress familyárguments.\n"));

307 i‡(
∑·
->
Êag
)

308 (*
∑·
->
Êag
)++;

309 i‡(
a‚ame
[0])

310 
	`°rˇt
(
a‚ame
, ",");

311 
	`°rˇt
(
a‚ame
, 
∑·
->
«me
);

314 i‡(!
∑·
->
Æüs
) {

315 
	`Ârötf
(
°dîr
, 
	`_
("Unknow¿addªs†Ámûy `%s'.\n"), 
tmp1
);

318 
tmp1
 = 
tmp2
;

322 
	}
}

325 
	$¥öt_aÊi°
(
ty≥
) {

326 
cou¡
 = 0;

327 * 
txt
;

328 
a·y≥
 **
aÂ
;

330 i‡(!
sVaföô
)

331 
	`aföô
();

333 
aÂ
 = 
a·y≥s
;

334 *
aÂ
 !
NULL
) {

335 i‡((
ty≥
 =1 && ((*
aÂ
)->
Ωröt
 =
NULL
)Ë|| ((*aÂ)->
af
 == 0)) {

336 
aÂ
++; ;

338 i‡((
cou¡
 % 3Ë=0Ë
	`Ârötf
(
°dîr
,count?"\n ":" ");

339 
txt
 = (*
aÂ
)->
«me
; if (!txt)Åxt = "..";

340 
	`Ârötf
(
°dîr
,"%†(%sË",
txt
,(*
aÂ
)->
tôÀ
);

341 
cou¡
++;

342 
aÂ
++;

344 
	`Ârötf
(
°dîr
,"\n");

345 
	}
}

	@net-tools-1.60/lib/arcnet.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_HWARC


19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<√t/if_¨p.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

34 
hwty≥
 
¨˙ë_hwty≥
;

38 *
	$¥_¨˙ë
(*
±r
)

40 
buff
[64];

42 
	`¢¥ötf
(
buff
, (buff), "%02X", (
±r
[0] & 0377));

43  (
buff
);

44 
	}
}

48 
	$ö_¨˙ë
(*
buÂ
, 
sockaddr
 *
ßp
)

50 *
±r
;

51 
c
, *
‹ig
;

52 
i
, 
vÆ
;

54 
ßp
->
ß_Ámûy
 = 
¨˙ë_hwty≥
.
ty≥
;

55 
±r
 = 
ßp
->
ß_d©a
;

57 
i
 = 0;

58 
‹ig
 = 
buÂ
;

59 (*
buÂ
 !'\0'Ë&& (
i
 < 1)) {

60 
vÆ
 = 0;

61 
c
 = *
buÂ
++;

62 i‡(
	`isdigô
(
c
))

63 
vÆ
 = 
c
 - '0';

64 i‡(
c
 >= 'a' && c <= 'f')

65 
vÆ
 = 
c
 - 'a' + 10;

66 i‡(
c
 >= 'A' && c <= 'F')

67 
vÆ
 = 
c
 - 'A' + 10;

69 #ifde‡
DEBUG


70 
	`Ârötf
(
°dîr
, 
	`_
("ö_¨˙ë(%s): invÆidár˙ëáddªss!\n"), 
‹ig
);

72 
î∫o
 = 
EINVAL
;

75 
vÆ
 <<= 4;

76 
c
 = *
buÂ
++;

77 i‡(
	`isdigô
(
c
))

78 
vÆ
 |
c
 - '0';

79 i‡(
c
 >= 'a' && c <= 'f')

80 
vÆ
 |
c
 - 'a' + 10;

81 i‡(
c
 >= 'A' && c <= 'F')

82 
vÆ
 |
c
 - 'A' + 10;

84 #ifde‡
DEBUG


85 
	`Ârötf
(
°dîr
, 
	`_
("ö_¨˙ë(%s): invÆidár˙ëáddªss!\n"), 
‹ig
);

87 
î∫o
 = 
EINVAL
;

90 *
±r
++ = (Ë(
vÆ
 & 0377);

91 
i
++;

94 i‡(*
buÂ
 == ':') {

95 i‡(
i
 =
ETH_ALEN
) {

96 #ifde‡
DEBUG


97 
	`Ârötf
(
°dîr
, 
	`_
("in_arcnet(%s):Årailing : ignored!\n"),

98 
‹ig
)

102 
buÂ
++;

107 i‡((
i
 =
ETH_ALEN
Ë&& (*
buÂ
 != '\0')) {

108 #ifde‡
DEBUG


109 
	`Ârötf
(
°dîr
, 
	`_
("ö_¨˙ë(%s):Åøûög junk!\n"), 
‹ig
);

110 
î∫o
 = 
EINVAL
;

114 #ifde‡
DEBUG


115 
	`Ârötf
(
°dîr
, "ö_¨˙ë(%s): %s\n", 
‹ig
, 
	`¥_¨˙ë
(
ßp
->
ß_d©a
));

119 
	}
}

122 
hwty≥
 
	g¨˙ë_hwty≥
 =

124 "¨˙ë", 
NULL
, 
ARPHRD_ARCNET
, 1,

125 
¥_¨˙ë
, 
ö_¨˙ë
, 
NULL


	@net-tools-1.60/lib/ash.c

7 
	~"c⁄fig.h
"

9 #i‡
HAVE_HWASH
 || 
HAVE_AFASH


11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<√t/if_¨p.h
>

14 
	~<°dlib.h
>

15 
	~<°dio.h
>

16 
	~<î∫o.h
>

17 
	~<˘y≥.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~"√t-suµ‹t.h
"

21 
	~"∑th«mes.h
"

22 
	~"öé.h
"

23 
	~"utû.h
"

25 
	#ASH_ALEN
 64

	)

27 
	ghammög
[16] =

35 
	$¥_ash
(*
±r
)

37 
buff
[128];

38 *
p
 = 
buff
;

39 
i
 = 0;

41 
p
[0] = '[';

42 
p
++;

43 
±r
[
i
] !0xc9 &&Öå[i] !0xf‡&& (ò< 
ASH_ALEN
))

44 
	`•rötf
(
p
++, "%1x", 
±r
[
i
++]);

45 *(
p
++) = ']';

46 *
p
 = 0;

48  
buff
;

49 
	}
}

51 #i‡
HAVE_HWASH


53 #i‚de‡
ARPHRD_ASH


55 
	#ARPHRD_ASH
 517

	)

58 
hwty≥
 
	gash_hwty≥
;

61 
	$ö_ash
(*
buÂ
, 
sockaddr
 *
ßp
)

63 *
±r
;

64 
i
 = 0;

66 
ßp
->
ß_Ámûy
 = 
ash_hwty≥
.
ty≥
;

67 
±r
 = 
ßp
->
ß_d©a
;

69 
buÂ
 && 
i
 < 
ASH_ALEN
) {

70 *
√xt
;

71 
h›
 = 
	`°πﬁ
(
buÂ
, &
√xt
, 16);

72 
±r
[
i
++] = 
hammög
[
h›
];

73 *
√xt
) {

75 
buÂ
 = 
√xt
 + 1;

78 
buÂ
 = 
NULL
;

81 
	`Ârötf
(
°dîr
, 
	`_
("Malformed Asháddress"));

82 
	`mem£t
(
±r
, 0xc9, 
ASH_ALEN
);

87 
i
 < 
ASH_ALEN
)

88 
±r
[
i
++] = 0xc9;

91 
	}
}

93 
hwty≥
 
	gash_hwty≥
 =

95 "ash", 
NULL
, 
ARPHRD_ASH
, 
ASH_ALEN
,

96 
¥_ash
, 
ö_ash
, 
NULL
,

102 #i‡
HAVE_AFASH


106 
	$¥_ßsh
(
sockaddr
 *
ßp
, 
numîic
)

108 
buf
[64];

110 i‡(
ßp
->
ß_Ámûy
 !
AF_ASH
)

111  
	`ß„_°∫˝y
(
buf
, "[NONE SET]", 64);

112  
	`¥_ash
(
ßp
->
ß_d©a
);

113 
	}
}

115 
a·y≥
 
	gash_a·y≥
 =

117 "ash", 
NULL
, 
AF_ASH
, 0,

118 
¥_ash
, 
¥_ßsh
, 
NULL
, NULL,

119 
NULL
, NULL, NULL,

	@net-tools-1.60/lib/ax25.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_AFAX25
 || 
HAVE_HWAX25


24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

26 
	~<sys/sockë.h
>

27 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

28 
	~<√èx25/ax25.h
>

30 
	~<löux/ax25.h
>

32 
	~<√t/if_¨p.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

35 
	~<˘y≥.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<°rög.h
>

39 
	~<ãrmios.h
>

40 
	~<uni°d.h
>

41 
	~"√t-suµ‹t.h
"

42 
	~"∑th«mes.h
"

43 
	~"öé.h
"

44 
	~"utû.h
"

46 
	gAX25_îrmsg
[128];

48 
a·y≥
 
ax25_a·y≥
;

50 *
	$AX25_¥öt
(*
±r
)

52 
buff
[8];

53 
i
;

55 
i
 = 0; i < 6; i++) {

56 
buff
[
i
] = ((
±r
[i] & 0377) >> 1);

57 i‡(
buff
[
i
] == ' ')

58 
buff
[
i
] = '\0';

60 
buff
[6] = '\0';

61 
i
 = ((
±r
[6] & 0x1E) >> 1);

62 i‡(
i
 != 0)

63 
	`•rötf
(&
buff
[
	`°æí
(buff)], "-%d", 
i
);

64  (
buff
);

65 
	}
}

70 
	$AX25_•röt
(
sockaddr
 *
ßp
, 
numîic
)

72 
buf
[64];

74 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

75  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

76  (
	`AX25_¥öt
(((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
));

77 
	}
}

80 
	$AX25_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

82 *
±r
;

83 *
‹ig
, 
c
;

84 
i
;

86 
ßp
->
ß_Ámûy
 = 
ax25_a·y≥
.
af
;

87 
±r
 = ((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
;

90 
‹ig
 = 
buÂ
;

91 
i
 = 0;

92 (*
buÂ
 !'\0'Ë&& (*buÂ !'-'Ë&& (
i
 < 6)) {

93 
c
 = *
buÂ
++;

94 i‡(
	`i¶owî
(
c
))

95 
c
 = 
	`touµî
(c);

96 i‡(!(
	`isuµî
(
c
Ë|| 
	`isdigô
(c))) {

97 
	`ß„_°∫˝y
(
AX25_îrmsg
, 
	`_
("Invalid callsign"), (AX25_errmsg));

98 #ifde‡
DEBUG


99 
	`Ârötf
(
°dîr
, "ax25_öput(%s): %†!\n", 
AX25_îrmsg
, 
‹ig
);

101 
î∫o
 = 
EINVAL
;

104 *
±r
++ = (Ë((
c
 << 1) & 0xFE);

105 
i
++;

109 i‡((
i
 =6Ë&& (*
buÂ
 != '-') && (*bufp != '\0')) {

110 
	`°r˝y
(
AX25_îrmsg
, 
	`_
("CallsignÅooÜong"));

111 #ifde‡
DEBUG


112 
	`Ârötf
(
°dîr
, "ax25_öput(%s): %†!\n", 
AX25_îrmsg
, 
‹ig
);

114 
î∫o
 = 
E2BIG
;

118 
i
++ < (
ax25_addªss
) - 1) {

119 *
±r
++ = () ((' ' << 1) & 0xFE);

123 i‡(*
buÂ
 == '-') {

124 
i
 = 
	`©oi
(++
buÂ
);

125 *
±r
 = (Ë((
i
 << 1) & 0xFE);

127 *
±r
 = () '\0';

131 #ifde‡
DEBUG


132 
	`Ârötf
(
°dîr
, "ax25_öput(%s): ", 
‹ig
);

133 
i
 = 0; i < (
ax25_addªss
); i++)

134 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

135 
	`Ârötf
(
°dîr
, "\n");

139 
	}
}

143 
	$AX25_hîr‹
(*
ãxt
)

145 i‡(
ãxt
 =
NULL
)

146 
	`Ârötf
(
°dîr
, "%s\n", 
AX25_îrmsg
);

148 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
AX25_îrmsg
);

149 
	}
}

152 
	$AX25_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

154 i‡(
	`AX25_öput
(0, 
buÂ
, 
ßp
) < 0)

156 
ßp
->
ß_Ámûy
 = 
ARPHRD_AX25
;

158 
	}
}

162 
	$KISS_£t_disc
(
fd
, 
disc
)

164 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0) {

165 
	`Ârötf
(
°dîr
, "KISS_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

166  (-
î∫o
);

169 
	}
}

173 
	$KISS_öô
(
fd
)

175 i‡(
	`KISS_£t_disc
(
fd
, 
N_SLIP
) < 0)

177 i‡(
	`io˘l
(
fd
, 
SIOCSIFENCAP
, 4) < 0)

180 
	}
}

183 
hwty≥
 
	gax25_hwty≥
 =

185 "ax25", 
NULL
, 
ARPHRD_AX25
, 7,

186 
AX25_¥öt
, 
AX25_höput
, 
NULL


189 
a·y≥
 
	gax25_a·y≥
 =

191 "ax25", 
NULL
, 
AF_AX25
, 7,

192 
AX25_¥öt
, 
AX25_•röt
, 
AX25_öput
, 
AX25_hîr‹
,

193 
NULL
, NULL, NULL,

	@net-tools-1.60/lib/ax25_gr.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_AFAX25


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/ax25.h
>

25 
	~<löux/if_¨p.h
>

26 
	~<˘y≥.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°rög.h
>

30 
	~<ãrmios.h
>

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<uni°d.h
>

35 
	~"√t-suµ‹t.h
"

36 
	~"∑th«mes.h
"

37 
	~"öé.h
"

39 
	$AX25_Ωröt
(
›ti⁄s
)

41 
FILE
 *
f
 = 
	`f›í
(
_PATH_PROCNET_AX25_ROUTE
, "r");

42 
buf„r
[256];

43 
u£
;

45 i‡(
f
 =
NULL
) {

46 
	`≥º‹
(
_PATH_PROCNET_AX25_ROUTE
);

47 
	`¥ötf
(
	`_
("AX.25Çot configured inÅhis system.\n"));

50 
	`¥ötf
(
	`_
("Kernel AX.25ÑoutingÅable\n"));

51 
	`¥ötf
(
	`_
("Destination Iface Use\n"));

52 
	`fgës
(
buf„r
, 256, 
f
);

53 
	`fgës
(
buf„r
, 256, 
f
)) {

54 
buf„r
[9] = 0;

55 
buf„r
[14] = 0;

56 
u£
 = 
	`©oi
(
buf„r
 + 15);

57 
	`¥ötf
("%-9s %-5s %5d\n",

58 
buf„r
, buf„∏+ 10, 
u£
);

60 
	`f˛o£
(
f
);

62 
	}
}

	@net-tools-1.60/lib/ddp.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_AFATALK


18 
	~<asm/ty≥s.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<löux/©Æk.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<î∫o.h
>

25 
	~<˘y≥.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<√töë/ö.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

35 *
	$ddp_¥öt
(*
±r
)

37 
buff
[64];

38 
sockaddr_©
 *
ßt
 = (sockaddr_© *Ë(
±r
 - 2);

39 
	`•rötf
(
buff
, "%d/%d", (Ë
	`¡ohs
(
ßt
->
ßt_addr
.
s_√t
), (Ëßt->ßt_addr.
s_node
);

40  (
buff
);

41 
	}
}

45 *
	$ddp_•röt
(
sockaddr
 *
ßp
, 
numîic
)

47 
buf
[64];

49 i‡(
ßp
->
ß_Ámûy
 !
AF_APPLETALK
)

50  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

51  (
	`ddp_¥öt
(
ßp
->
ß_d©a
));

52 
	}
}

55 
a·y≥
 
	gddp_a·y≥
 =

57 "ddp", 
NULL
, 
AF_APPLETALK
, 0,

58 
ddp_¥öt
, 
ddp_•röt
, 
NULL
, NULL,

59 
NULL
 , NULL, NULL,

	@net-tools-1.60/lib/ddp_gr.c

1 
	~"c⁄fig.h
"

3 #i‡
HAVE_AFATALK


4 
	~<asm/ty≥s.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<löux/©Æk.h
>

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<î∫o.h
>

11 
	~<˘y≥.h
>

12 
	~<°rög.h
>

13 
	~<uni°d.h
>

14 
	~<√töë/ö.h
>

15 
	~"√t-suµ‹t.h
"

16 
	~"∑th«mes.h
"

17 
	~"öé.h
"

19 
	$DDP_Ωröt
(
›ti⁄s
)

21 
	`Ârötf
(
°dîr
, 
	`_
("RoutingÅable for `ddp'Çot yet supported.\n"));

23 
	}
}

	@net-tools-1.60/lib/ec_hw.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_HWEC


19 
	~<√t/if_¨p.h
>

20 
	~"√t-suµ‹t.h
"

22 
hwty≥
 
	gec_hwty≥
 =

24 "ec", 
NULL
 , 
ARPHRD_ECONET
, 0,

25 
NULL
, NULL, NULL

	@net-tools-1.60/lib/econet.c

19 
	~"c⁄fig.h
"

21 #i‡
HAVE_AFECONET


23 
	~<sys/ty≥s.h
>

24 
	~<sys/sockë.h
>

25 
	~<°dio.h
>

26 
	~<√ãc⁄ë/ec.h
>

28 
	~"vîsi⁄.h
"

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

36 
	$ec_¥öt
(*
±r
)

38 
buff
[64];

39 
ec_addr
 *
ec
 = (ec_add∏*Ë
±r
;

40 
	`•rötf
(
buff
, "%d.%d", 
ec
->
√t
,Éc->
°©i⁄
);

41  
buff
;

42 
	}
}

47 
	$ec_•röt
(
sockaddr
 *
ßp
, 
numîic
)

49 
sockaddr_ec
 *
£c
 = (sockaddr_e¯*Ë
ßp
;

51 i‡(
ßp
->
ß_Ámûy
 !
AF_ECONET
)

52  
	`_
("[NONE SET]");

54  
	`ec_¥öt
((*Ë&
£c
->
addr
);

55 
	}
}

58 
	$ec_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

60 
sockaddr_ec
 *
£c
 = (sockaddr_e¯*Ë
ßp
;

61 
√t
, 
°n
;

62 
	`ssˇnf
(
buÂ
, "%d.%d", &
√t
, &
°n
)) {

64 
£c
->
addr
.
°©i⁄
 = 
°n
;

65 
£c
->
addr
.
√t
 =Çet;

68 i‡(
	`ssˇnf
(
buÂ
, "%d", &
°n
) == 1) {

69 
£c
->
addr
.
√t
 = 0;

70 
£c
->
addr
.
°©i⁄
 = 
°n
;

75 
	}
}

77 
a·y≥
 
	gec_a·y≥
 =

79 "ec", 
NULL
, 
AF_ECONET
, 0,

80 
ec_¥öt
, 
ec_•röt
, 
ec_öput
, 
NULL
,

81 
NULL
, NULL, NULL,

	@net-tools-1.60/lib/ether.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_HWETHER


19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<√t/if_¨p.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

34 
hwty≥
 
ëhî_hwty≥
;

38 *
	$¥_ëhî
(*
±r
)

40 
buff
[64];

42 
	`¢¥ötf
(
buff
, (buff), "%02X:%02X:%02X:%02X:%02X:%02X",

43 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

44 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

46  (
buff
);

47 
	}
}

51 
	$ö_ëhî
(*
buÂ
, 
sockaddr
 *
ßp
)

53 *
±r
;

54 
c
, *
‹ig
;

55 
i
;

56 
vÆ
;

58 
ßp
->
ß_Ámûy
 = 
ëhî_hwty≥
.
ty≥
;

59 
±r
 = 
ßp
->
ß_d©a
;

61 
i
 = 0;

62 
‹ig
 = 
buÂ
;

63 (*
buÂ
 !'\0'Ë&& (
i
 < 
ETH_ALEN
)) {

64 
vÆ
 = 0;

65 
c
 = *
buÂ
++;

66 i‡(
	`isdigô
(
c
))

67 
vÆ
 = 
c
 - '0';

68 i‡(
c
 >= 'a' && c <= 'f')

69 
vÆ
 = 
c
 - 'a' + 10;

70 i‡(
c
 >= 'A' && c <= 'F')

71 
vÆ
 = 
c
 - 'A' + 10;

73 #ifde‡
DEBUG


74 
	`Ârötf
(
°dîr
, 
	`_
("ö_ëhî(%s): invÆidÉthîáddªss!\n"), 
‹ig
);

76 
î∫o
 = 
EINVAL
;

79 
vÆ
 <<= 4;

80 
c
 = *
buÂ
;

81 i‡(
	`isdigô
(
c
))

82 
vÆ
 |
c
 - '0';

83 i‡(
c
 >= 'a' && c <= 'f')

84 
vÆ
 |
c
 - 'a' + 10;

85 i‡(
c
 >= 'A' && c <= 'F')

86 
vÆ
 |
c
 - 'A' + 10;

87 i‡(
c
 == ':' || c == 0)

88 
vÆ
 >>= 4;

90 #ifde‡
DEBUG


91 
	`Ârötf
(
°dîr
, 
	`_
("ö_ëhî(%s): invÆidÉthîáddªss!\n"), 
‹ig
);

93 
î∫o
 = 
EINVAL
;

96 i‡(
c
 != 0)

97 
buÂ
++;

98 *
±r
++ = (Ë(
vÆ
 & 0377);

99 
i
++;

102 i‡(*
buÂ
 == ':') {

103 i‡(
i
 =
ETH_ALEN
) {

104 #ifde‡
DEBUG


105 
	`Ârötf
(
°dîr
, 
	`_
("in_ether(%s):Årailing : ignored!\n"),

106 
‹ig
)

110 
buÂ
++;

115 i‡((
i
 =
ETH_ALEN
Ë&& (*
buÂ
 != '\0')) {

116 #ifde‡
DEBUG


117 
	`Ârötf
(
°dîr
, 
	`_
("ö_ëhî(%s):Åøûög junk!\n"), 
‹ig
);

118 
î∫o
 = 
EINVAL
;

122 #ifde‡
DEBUG


123 
	`Ârötf
(
°dîr
, "ö_ëhî(%s): %s\n", 
‹ig
, 
	`¥_ëhî
(
ßp
->
ß_d©a
));

127 
	}
}

130 
hwty≥
 
	gëhî_hwty≥
 =

132 "ëhî", 
NULL
, 
ARPHRD_ETHER
, 
ETH_ALEN
,

133 
¥_ëhî
, 
ö_ëhî
, 
NULL


	@net-tools-1.60/lib/fddi.c

17 
	~"c⁄fig.h
"

19 
	~<„©uªs.h
>

21 #i‡
HAVE_HWFDDI


22 
	~<sys/ty≥s.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if_¨p.h
>

25 #i‚de‡
ARPHRD_FDDI


29 #i‡
__GLIBC__
 >= 2

30 
	~<√töë/if_fddi.h
>

32 
	~<löux/if_fddi.h
>

34 
	~<°dlib.h
>

35 
	~<°dio.h
>

36 
	~<î∫o.h
>

37 
	~<˘y≥.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~"√t-suµ‹t.h
"

41 
	~"∑th«mes.h
"

42 
	~"öé.h
"

43 
	~"utû.h
"

45 
hwty≥
 
fddi_hwty≥
;

49 *
	$¥_fddi
(*
±r
)

51 
buff
[64];

53 
	`¢¥ötf
(
buff
, (buff), "%02X-%02X-%02X-%02X-%02X-%02X",

54 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

55 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

57  (
buff
);

58 
	}
}

62 
	$ö_fddi
(*
buÂ
, 
sockaddr
 *
ßp
)

64 *
±r
;

65 
c
, *
‹ig
;

66 
i
, 
vÆ
;

68 
ßp
->
ß_Ámûy
 = 
fddi_hwty≥
.
ty≥
;

69 
±r
 = 
ßp
->
ß_d©a
;

71 
i
 = 0;

72 
‹ig
 = 
buÂ
;

73 (*
buÂ
 !'\0'Ë&& (
i
 < 
FDDI_K_ALEN
)) {

74 
vÆ
 = 0;

75 
c
 = *
buÂ
++;

76 i‡(
	`isdigô
(
c
))

77 
vÆ
 = 
c
 - '0';

78 i‡(
c
 >= 'a' && c <= 'f')

79 
vÆ
 = 
c
 - 'a' + 10;

80 i‡(
c
 >= 'A' && c <= 'F')

81 
vÆ
 = 
c
 - 'A' + 10;

83 #ifde‡
DEBUG


84 
	`Ârötf
(
°dîr
, 
	`_
("ö_fddi(%s): invÆid fddòaddªss!\n"), 
‹ig
);

86 
î∫o
 = 
EINVAL
;

89 
vÆ
 <<= 4;

90 
c
 = *
buÂ
++;

91 i‡(
	`isdigô
(
c
))

92 
vÆ
 |
c
 - '0';

93 i‡(
c
 >= 'a' && c <= 'f')

94 
vÆ
 |
c
 - 'a' + 10;

95 i‡(
c
 >= 'A' && c <= 'F')

96 
vÆ
 |
c
 - 'A' + 10;

98 #ifde‡
DEBUG


99 
	`Ârötf
(
°dîr
, 
	`_
("ö_fddi(%s): invÆid fddòaddªss!\n"), 
‹ig
);

101 
î∫o
 = 
EINVAL
;

104 *
±r
++ = (Ë(
vÆ
 & 0377);

105 
i
++;

108 i‡(*
buÂ
 == ':') {

109 i‡(
i
 =
FDDI_K_ALEN
) {

110 #ifde‡
DEBUG


111 
	`Ârötf
(
°dîr
, 
	`_
("in_fddi(%s):Årailing : ignored!\n"),

112 
‹ig
)

116 
buÂ
++;

121 i‡((
i
 =
FDDI_K_ALEN
Ë&& (*
buÂ
 != '\0')) {

122 #ifde‡
DEBUG


123 
	`Ârötf
(
°dîr
, 
	`_
("ö_fddi(%s):Åøûög junk!\n"), 
‹ig
);

124 
î∫o
 = 
EINVAL
;

128 #ifde‡
DEBUG


129 
	`Ârötf
(
°dîr
, "ö_fddi(%s): %s\n", 
‹ig
, 
	`¥_fddi
(
ßp
->
ß_d©a
));

133 
	}
}

136 
hwty≥
 
	gfddi_hwty≥
 =

138 "fddi", 
NULL
, 
ARPHRD_FDDI
, 
FDDI_K_ALEN
,

139 
¥_fddi
, 
ö_fddi
, 
NULL


	@net-tools-1.60/lib/frame.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_HWFR


25 
	~<sys/ty≥s.h
>

26 
	~<sys/io˘l.h
>

27 
	~<sys/sockë.h
>

28 
	~<√t/if_¨p.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

35 
	~<ãrmios.h
>

36 
	~<uni°d.h
>

37 
	~"√t-suµ‹t.h
"

38 
	~"∑th«mes.h
"

40 *
	$¥_dlci
(*
±r
)

42 
buf
[12];

44 
	`¢¥ötf
(
buf
, (buf), "%i", *(*Ë
±r
);

45  (
buf
);

46 
	}
}

48 
hwty≥
 
	gdlci_hwty≥
 =

50 "dlci", 
NULL
, 
ARPHRD_DLCI
, 3,

51 
¥_dlci
, 
NULL
, NULL, 0

54 
hwty≥
 
	g‰ad_hwty≥
 =

56 "‰ad", 
NULL
, 
ARPHRD_FRAD
, 0,

57 
NULL
, NULL, NULL, 0

	@net-tools-1.60/lib/getargs.c

15 
	~"c⁄fig.h
"

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<√t/if.h
>

19 
	~<î∫o.h
>

20 
	~<sig«l.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~"√t-suµ‹t.h
"

26 
	~"∑th«mes.h
"

30 
	$gë¨gs
(*
°rög
, *
¨gumíts
[])

32 
Àn
 = 
	`°æí
(
°rög
);

33 
ãmp
[
Àn
+1];

34 *
•
, *
±r
;

35 
i
, 
¨gc
;

36 
w™t
;

42 
•
 = 
°rög
;

43 
i
 = 0;

44 
	`°r˝y
(
ãmp
, 
°rög
);

45 
±r
 = 
ãmp
;

51 *
±r
 !'\0' && 
i
 < 31) {

53 *
±r
 == ' ' || *ptr == '\t')

54 
±r
++;

57 
¨gumíts
[
i
++] = 
•
;

60 i‡(*
±r
 == '"' || *ptr == '\'') {

66 
w™t
 = *
±r
++;

67 *
±r
 != '\0') {

68 i‡(*
±r
 =
w™t
 && *(ptr - 1) != '\\') {

69 
±r
++;

72 *
•
++ = *
±r
++;

76 *
±r
 != '\0' && *ptr != ' ' && *ptr != '\t')

77 *
•
++ = *
±r
++;

79 *
•
++ = '\0';

82 i‡(*
±r
 != '\0') {

83 *
±r
 == ' ' || *ptr == '\t')

84 
±r
++;

87 
¨gc
 = 
i
;

88 
i
 < 32)

89 
¨gumíts
[
i
++] = (*Ë
NULL
;

90  (
¨gc
);

91 
	}
}

	@net-tools-1.60/lib/getroute.c

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	~"vîsi⁄.h
"

37 
	~"c⁄fig.h
"

38 
	~"öé.h
"

39 
	~"utû.h
"

41 
a·y≥
 
un•ec_a·y≥
;

42 
a·y≥
 
unix_a·y≥
;

43 
a·y≥
 
öë_a·y≥
;

44 
a·y≥
 
öë6_a·y≥
;

45 
a·y≥
 
ax25_a·y≥
;

46 
a·y≥
 
√åom_a·y≥
;

47 
a·y≥
 
ùx_a·y≥
;

48 
a·y≥
 
ddp_a·y≥
;

49 
a·y≥
 
x25_a·y≥
;

51 
	$gërouã_öô
()

53 #i‡
HAVE_AFINET


54 
öë_a·y≥
.
Ωröt
 = 
INET_Ωröt
;

56 #i‡
HAVE_AFINET6


57 
öë6_a·y≥
.
Ωröt
 = 
INET6_Ωröt
;

59 #i‡
HAVE_AFNETROM


60 
√åom_a·y≥
.
Ωröt
 = 
NETROM_Ωröt
;

62 #i‡
HAVE_AFAX25


63 
ax25_a·y≥
.
Ωröt
 = 
AX25_Ωröt
;

65 #i‡
HAVE_AFIPX


66 
ùx_a·y≥
.
Ωröt
 = 
IPX_Ωröt
;

68 #i‡
HAVE_AFATALK


69 
ddp_a·y≥
.
Ωröt
 = 
DDP_Ωröt
;

71 #i‡
HAVE_AFX25


72 
x25_a·y≥
.
Ωröt
 = 
X25_Ωröt
;

74 
	}
}

76 
	$rouã_öfo
(c⁄° *
a‚ame
, 
›ti⁄s
)

78 
a·y≥
 *
≠
;

79 *
tmp1
, *
tmp2
;

80 
found
 = 
E_NOTFOUND
, 
rc
;

81 
buf
[256];

83 
	`ß„_°∫˝y
(
buf
, 
a‚ame
, (buf));

85 
tmp1
 = 
buf
;

87 
tmp1
) {

89 
≠
 = 
NULL
;

91 i‡((
tmp2
 = 
	`ödex
(
tmp1
, ',')))

92 *
tmp2
++ = '\0';

94 i‡(!
tmp1
[0]) {

95 
tmp1
 = 
tmp2
;

98 
≠
 = 
	`gë_a·y≥
(
tmp1
);

100 i‡(!
≠
) {

101 
	`Ârötf
(
°dîr
, 
	`_
("Addªs†Ámûy `%s'ÇŸ suµ‹ãd.\n"), 
tmp1
);

102  (
E_OPTERR
);

104 
tmp1
 = 
tmp2
;

106 i‡(!
≠
->
Ωröt
) {

107 
	`Ârötf
(
°dîr
, 
	`_
("Nÿroutög f‹áddªs†Ámûy `%s'.\n"), 
≠
->
«me
);

108  (
E_OPTERR
);

110 
found
 = 0;

112 i‡((
rc
 = 
≠
->
	`Ωröt
(
›ti⁄s
)))

113  (
rc
);

116  (
found
);

117 
	}
}

	@net-tools-1.60/lib/hdlclapb.c

20 
	~"c⁄fig.h
"

22 #i‡
HAVE_HWHDLCLAPB


24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

26 
	~<sys/sockë.h
>

27 
	~<√t/if_¨p.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<˘y≥.h
>

31 
	~<î∫o.h
>

32 
	~<f˙é.h
>

33 
	~<°rög.h
>

34 
	~<ãrmios.h
>

35 
	~<uni°d.h
>

36 
	~"√t-suµ‹t.h
"

37 
	~"∑th«mes.h
"

39 #i‚de‡
ARPHRD_HDLC


41 
	#ARPHRD_HDLC
 513

	)

44 #i‚de‡
ARPHRD_LAPB


46 
	#ARPHRD_LAPB
 516

	)

49 
hwty≥
 
	ghdlc_hwty≥
 =

51 "hdlc", 
NULL
, 
ARPHRD_HDLC
, 0,

52 
NULL
, NULL, NULL, 0

54 
hwty≥
 
	gœpb_hwty≥
 =

56 "œpb", 
NULL
, 
ARPHRD_LAPB
, 0,

57 
NULL
, NULL, NULL, 0

	@net-tools-1.60/lib/hippi.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_HWHIPPI


21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<√t/if_¨p.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"utû.h
"

39 
	#HIPPI_ALEN
 6

	)

40 #i‚de‡
ARPHRD_HIPPI


41 
	#ARPHRD_HIPPI
 780

	)

45 
hwty≥
 
hùpi_hwty≥
;

49 *
	$¥_hùpi
(*
±r
)

51 
buff
[64];

53 
	`•rötf
(
buff
, "%02X:%02X:%02X:%02X:%02X:%02X",

54 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

55 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

57  (
buff
);

58 
	}
}

62 
	$ö_hùpi
(*
buÂ
, 
sockaddr
 *
ßp
)

64 *
±r
;

65 
c
, *
‹ig
;

66 
i
, 
vÆ
;

68 
ßp
->
ß_Ámûy
 = 
hùpi_hwty≥
.
ty≥
;

69 
±r
 = 
ßp
->
ß_d©a
;

71 
i
 = 0;

72 
‹ig
 = 
buÂ
;

73 (*
buÂ
 !'\0'Ë&& (
i
 < 
HIPPI_ALEN
)) {

74 
vÆ
 = 0;

75 
c
 = *
buÂ
++;

76 i‡(
	`isdigô
(
c
))

77 
vÆ
 = 
c
 - '0';

78 i‡(
c
 >= 'a' && c <= 'f')

79 
vÆ
 = 
c
 - 'a' + 10;

80 i‡(
c
 >= 'A' && c <= 'F')

81 
vÆ
 = 
c
 - 'A' + 10;

83 #ifde‡
DEBUG


84 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s): invÆid hùpòaddªss!\n"), 
‹ig
);

86 
î∫o
 = 
EINVAL
;

89 
vÆ
 <<= 4;

90 
c
 = *
buÂ
++;

91 i‡(
	`isdigô
(
c
))

92 
vÆ
 |
c
 - '0';

93 i‡(
c
 >= 'a' && c <= 'f')

94 
vÆ
 |
c
 - 'a' + 10;

95 i‡(
c
 >= 'A' && c <= 'F')

96 
vÆ
 |
c
 - 'A' + 10;

98 #ifde‡
DEBUG


99 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s): invÆid hùpòaddªss!\n"), 
‹ig
);

101 
î∫o
 = 
EINVAL
;

104 *
±r
++ = (Ë(
vÆ
 & 0377);

105 
i
++;

108 i‡(*
buÂ
 == ':') {

109 i‡(
i
 =
HIPPI_ALEN
) {

110 #ifde‡
DEBUG


111 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s):Åøûög : ign‹ed!\n"), 
‹ig
)

115 
buÂ
++;

120 i‡((
i
 =
HIPPI_ALEN
Ë&& (*
buÂ
 != '\0')) {

121 #ifde‡
DEBUG


122 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s):Åøûög junk!\n"), 
‹ig
);

123 
î∫o
 = 
EINVAL
;

127 #ifde‡
DEBUG


128 
	`Ârötf
(
°dîr
, "ö_hùpi(%s): %s\n", 
‹ig
, 
	`¥_hùpi
(
ßp
->
ß_d©a
));

132 
	}
}

135 
hwty≥
 
	ghùpi_hwty≥
 =

137 "hùpi", 
NULL
, 
ARPHRD_HIPPI
, 
HIPPI_ALEN
,

138 
¥_hùpi
, 
ö_hùpi
, 
NULL
, 0

	@net-tools-1.60/lib/hw.c

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"c⁄fig.h
"

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

34 
hwty≥
 
un•ec_hwty≥
;

35 
hwty≥
 
lo›_hwty≥
;

37 
hwty≥
 
¶ù_hwty≥
;

38 
hwty≥
 
c¶ù_hwty≥
;

39 
hwty≥
 
¶ù6_hwty≥
;

40 
hwty≥
 
c¶ù6_hwty≥
;

41 
hwty≥
 
ad≠tive_hwty≥
;

42 
hwty≥
 
°rù_hwty≥
;

44 
hwty≥
 
ëhî_hwty≥
;

45 
hwty≥
 
fddi_hwty≥
;

46 
hwty≥
 
hùpi_hwty≥
;

47 
hwty≥
 
å_hwty≥
;

48 #ifde‡
ARPHRD_IEEE802_TR


49 
hwty≥
 
å_hwty≥1
;

52 
hwty≥
 
ax25_hwty≥
;

53 
hwty≥
 
ro£_hwty≥
;

54 
hwty≥
 
√åom_hwty≥
;

55 
hwty≥
 
x25_hwty≥
;

56 
hwty≥
 
tu¬ñ_hwty≥
;

58 
hwty≥
 
ash_hwty≥
;

60 
hwty≥
 
µp_hwty≥
;

62 
hwty≥
 
¨˙ë_hwty≥
;

64 
hwty≥
 
dlci_hwty≥
;

65 
hwty≥
 
‰ad_hwty≥
;

67 
hwty≥
 
hdlc_hwty≥
;

68 
hwty≥
 
œpb_hwty≥
;

70 
hwty≥
 
sô_hwty≥
;

72 
hwty≥
 
úda_hwty≥
;

74 
hwty≥
 
ec_hwty≥
;

76 
hwty≥
 *
	ghwty≥s
[] =

79 &
lo›_hwty≥
,

81 #i‡
HAVE_HWSLIP


82 &
¶ù_hwty≥
,

83 &
c¶ù_hwty≥
,

84 &
¶ù6_hwty≥
,

85 &
c¶ù6_hwty≥
,

86 &
ad≠tive_hwty≥
,

88 #i‡
HAVE_HWSTRIP


89 &
°rù_hwty≥
,

91 #i‡
HAVE_HWASH


92 &
ash_hwty≥
,

94 #i‡
HAVE_HWETHER


95 &
ëhî_hwty≥
,

97 #i‡
HAVE_HWTR


98 &
å_hwty≥
,

99 #ifde‡
ARPHRD_IEEE802_TR


100 &
å_hwty≥1
,

103 #i‡
HAVE_HWAX25


104 &
ax25_hwty≥
,

106 #i‡
HAVE_HWNETROM


107 &
√åom_hwty≥
,

109 #i‡
HAVE_HWROSE


110 &
ro£_hwty≥
,

112 #i‡
HAVE_HWTUNNEL


113 &
tu¬ñ_hwty≥
,

115 #i‡
HAVE_HWPPP


116 &
µp_hwty≥
,

118 #i‡
HAVE_HWHDLCLAPB


119 &
hdlc_hwty≥
,

120 &
œpb_hwty≥
,

122 #i‡
HAVE_HWARC


123 &
¨˙ë_hwty≥
,

125 #i‡
HAVE_HWFR


126 &
dlci_hwty≥
,

127 &
‰ad_hwty≥
,

129 #i‡
HAVE_HWSIT


130 &
sô_hwty≥
,

132 #i‡
HAVE_HWFDDI


133 &
fddi_hwty≥
,

135 #i‡
HAVE_HWHIPPI


136 &
hùpi_hwty≥
,

138 #i‡
HAVE_HWIRDA


139 &
úda_hwty≥
,

141 #i‡
HAVE_HWEC


142 &
ec_hwty≥
,

144 #i‡
HAVE_HWX25


145 &
x25_hwty≥
,

147 &
un•ec_hwty≥
,

148 
NULL


151 
	gsVhwöô
 = 0;

153 
	$hwöô
()

155 
lo›_hwty≥
.
tôÀ
 = 
	`_
("Local Loopback");

156 
un•ec_hwty≥
.
tôÀ
 = 
	`_
("UNSPEC");

157 #i‡
HAVE_HWSLIP


158 
¶ù_hwty≥
.
tôÀ
 = 
	`_
("Serial Line IP");

159 
c¶ù_hwty≥
.
tôÀ
 = 
	`_
("VJ Serial Line IP");

160 
¶ù6_hwty≥
.
tôÀ
 = 
	`_
("6-bit Serial Line IP");

161 
c¶ù6_hwty≥
.
tôÀ
 = 
	`_
("VJ 6-bit Serial Line IP");

162 
ad≠tive_hwty≥
.
tôÀ
 = 
	`_
("Adaptive Serial Line IP");

164 #i‡
HAVE_HWETHER


165 
ëhî_hwty≥
.
tôÀ
 = 
	`_
("Ethernet");

167 #i‡
HAVE_HWASH


168 
ash_hwty≥
.
tôÀ
 = 
	`_
("Ash");

170 #i‡
HAVE_HWFDDI


171 
fddi_hwty≥
.
tôÀ
 = 
	`_
("Fiber Distributed Data Interface");

173 #i‡
HAVE_HWHIPPI


174 
hùpi_hwty≥
.
tôÀ
 = 
	`_
("HIPPI");

176 #i‡
HAVE_HWAX25


177 
ax25_hwty≥
.
tôÀ
 = 
	`_
("AMPR AX.25");

179 #i‡
HAVE_HWROSE


180 
ro£_hwty≥
.
tôÀ
 = 
	`_
("AMPR ROSE");

182 #i‡
HAVE_HWNETROM


183 
√åom_hwty≥
.
tôÀ
 = 
	`_
("AMPR NET/ROM");

185 #i‡
HAVE_HWX25


186 
x25_hwty≥
.
tôÀ
 = 
	`_
("generic X.25");

188 #i‡
HAVE_HWTUNNEL


189 
tu¬ñ_hwty≥
.
tôÀ
 = 
	`_
("IPIP Tunnel");

191 #i‡
HAVE_HWPPP


192 
µp_hwty≥
.
tôÀ
 = 
	`_
("Point-to-Point Protocol");

194 #i‡
HAVE_HWHDLCLAPB


195 
hdlc_hwty≥
.
tôÀ
 = 
	`_
("(Cisco)-HDLC");

196 
œpb_hwty≥
.
tôÀ
 = 
	`_
("LAPB");

198 #i‡
HAVE_HWARC


199 
¨˙ë_hwty≥
.
tôÀ
 = 
	`_
("ARCnet");

201 #i‡
HAVE_HWFR


202 
dlci_hwty≥
.
tôÀ
 = 
	`_
("Frame Relay DLCI");

203 
‰ad_hwty≥
.
tôÀ
 = 
	`_
("Frame Relay Access Device");

205 #i‡
HAVE_HWSIT


206 
sô_hwty≥
.
tôÀ
 = 
	`_
("IPv6-in-IPv4");

208 #i‡
HAVE_HWIRDA


209 
úda_hwty≥
.
tôÀ
 = 
	`_
("IrLAP");

211 #i‡
HAVE_HWTR


212 
å_hwty≥
.
tôÀ
 = 
	`_
("16/4 Mbps Token Ring");

213 #ifde‡
ARPHRD_IEEE802_TR


214 
å_hwty≥1
.
tôÀ
 = 
	`_
("16/4 Mbps Token Ring (New)") ;

217 #i‡
HAVE_HWEC


218 
ec_hwty≥
.
tôÀ
 = 
	`_
("Econet");

220 
sVhwöô
 = 1;

221 
	}
}

224 
hwty≥
 *
	$gë_hwty≥
(c⁄° *
«me
)

226 
hwty≥
 **
hwp
;

228 i‡(!
sVhwöô
)

229 
	`hwöô
();

231 
hwp
 = 
hwty≥s
;

232 *
hwp
 !
NULL
) {

233 i‡(!
	`°rcmp
((*
hwp
)->
«me
,Çame))

234  (*
hwp
);

235 
hwp
++;

237  (
NULL
);

238 
	}
}

242 
hwty≥
 *
	$gë_hw¡y≥
(
ty≥
)

244 
hwty≥
 **
hwp
;

246 i‡(!
sVhwöô
)

247 
	`hwöô
();

249 
hwp
 = 
hwty≥s
;

250 *
hwp
 !
NULL
) {

251 i‡((*
hwp
)->
ty≥
 ==Åype)

252  (*
hwp
);

253 
hwp
++;

255  (
NULL
);

256 
	}
}

259 
	$¥öt_hwli°
(
ty≥
) {

260 
cou¡
 = 0;

261 * 
txt
;

262 
hwty≥
 **
hwp
;

264 i‡(!
sVhwöô
)

265 
	`hwöô
();

267 
hwp
 = 
hwty≥s
;

268 *
hwp
 !
NULL
) {

269 i‡(((
ty≥
 =1Ë&& ((*
hwp
)->
Æí
 == 0)) || ((*hwp)->type == -1)) {

270 
hwp
++; ;

272 i‡((
cou¡
 % 3Ë=0Ë
	`Ârötf
(
°dîr
,count?"\n ":" ");

273 
txt
 = (*
hwp
)->
«me
; if (!txt)Åxt = "..";

274 
	`Ârötf
(
°dîr
,"%†(%sË",
txt
,(*
hwp
)->
tôÀ
);

275 
cou¡
++;

276 
hwp
++;

278 
	`Ârötf
(
°dîr
,"\n");

279 
	}
}

282 
	$hw_nuŒ_addªss
(
hwty≥
 *
hw
, *
≠
)

284 
i
;

285 *
addªss
 = (*)
≠
;

286 
i
 = 0; i < 
hw
->
Æí
; i++)

287 i‡(
addªss
[
i
])

290 
	}
}

	@net-tools-1.60/lib/inet.c

29 
	~"c⁄fig.h
"

34 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


35 
	~<√töë/ö.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/sockë.h
>

38 
	~<¨∑/öë.h
>

39 
	~<¨∑/«me£r.h
>

40 
	~<˘y≥.h
>

41 
	~<î∫o.h
>

42 
	~<√tdb.h
>

43 
	~<ªsﬁv.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<°dio.h
>

47 
	~<uni°d.h
>

48 
	~"vîsi⁄.h
"

49 
	~"√t-suµ‹t.h
"

50 
	~"∑th«mes.h
"

51 
	~"öé.h
"

52 
	~"utû.h
"

54 
h_î∫o
;

57 
	saddr
 {

58 
sockaddr_ö
 
	maddr
;

59 *
	m«me
;

60 
	mho°
;

61 
addr
 *
	m√xt
;

64 
	s£rvi˚
 {

65 
	mnumbî
;

66 *
	m«me
;

67 
£rvi˚
 *
	m√xt
;

70 
£rvi˚
 *
	gt˝_«me
 = 
NULL
, *
	gudp_«me
 = NULL, *
	gøw_«me
 = NULL;

72 #i‡
HAVE_AFINET


74 
addr
 *
	gINET_¬
 = 
NULL
;

77 
	$INET_ªsﬁve
(*
«me
, 
sockaddr_ö
 *
sö
, 
ho°fú°
)

79 
ho°ít
 *
hp
;

80 
√ã¡
 *
≈
;

83 
sö
->
sö_Ámûy
 = 
AF_INET
;

84 
sö
->
sö_p‹t
 = 0;

87 i‡(!
	`°rcmp
(
«me
, "default")) {

88 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

92 i‡(
	`öë_©⁄
(
«me
, &
sö
->
sö_addr
)) {

96 #ifde‡
DEBUG


97 i‡(
ho°fú°
Ë
	`Ârötf
 (
°dîr
, "gëho°by«mê(%s)\n", 
«me
);

99 i‡(
ho°fú°
 &&

100 (
hp
 = 
	`gëho°by«me
(
«me
)Ë!(
ho°ít
 *Ë
NULL
) {

101 
	`mem˝y
((*Ë&
sö
->
sö_addr
, (*Ë
hp
->
h_addr_li°
[0],

102 (
ö_addr
));

106 #ifde‡
DEBUG


107 
	`Ârötf
 (
°dîr
, "gë√tby«mê(%s)\n", 
«me
);

109 i‡((
≈
 = 
	`gë√tby«me
(
«me
)Ë!(
√ã¡
 *Ë
NULL
) {

110 
sö
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
≈
->
n_√t
);

113 i‡(
ho°fú°
) {

115 
î∫o
 = 
h_î∫o
;

118 #ifde‡
DEBUG


119 
	`ªs_öô
();

120 
_ªs
.
›ti⁄s
 |
RES_DEBUG
;

123 #ifde‡
DEBUG


124 
	`Ârötf
 (
°dîr
, "gëho°by«mê(%s)\n", 
«me
);

126 i‡((
hp
 = 
	`gëho°by«me
(
«me
)Ë=(
ho°ít
 *Ë
NULL
) {

127 
î∫o
 = 
h_î∫o
;

130 
	`mem˝y
((*Ë&
sö
->
sö_addr
, (*Ë
hp
->
h_addr_li°
[0],

131 (
ö_addr
));

134 
	}
}

141 
	$INET_ºesﬁve
(*
«me
, 
size_t
 
Àn
, 
sockaddr_ö
 *
sö
,

142 
numîic
, 
√tmask
)

144 
ho°ít
 *
ít
;

145 
√ã¡
 *
≈
;

146 
addr
 *
≤
;

147 
ad
, 
ho°_ad
;

148 
ho°
 = 0;

151 i‡(
sö
->
sö_Ámûy
 !
AF_INET
) {

152 #ifde‡
DEBUG


153 
	`Ârötf
(
°dîr
, 
	`_
("ºesﬁve: unsuµ‹àaddªs†Ámûy %d !\n"), 
sö
->
sö_Ámûy
);

155 
î∫o
 = 
EAFNOSUPPORT
;

158 
ad
 = (Ë
sö
->
sö_addr
.
s_addr
;

159 #ifde‡
DEBUG


160 
	`Ârötf
 (
°dîr
, "ºesﬁve: %08lx, mask %08x,Çum %08x \n", 
ad
, 
√tmask
, 
numîic
);

162 i‡(
ad
 =
INADDR_ANY
) {

163 i‡((
numîic
 & 0x0FFF) == 0) {

164 i‡(
numîic
 & 0x8000)

165 
	`ß„_°∫˝y
(
«me
, "deÁu…", 
Àn
);

167 
	`ß„_°∫˝y
(
«me
, "*", 
Àn
);

171 i‡(
numîic
 & 0x0FFF) {

172 
	`ß„_°∫˝y
(
«me
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
), 
Àn
);

176 i‡((
ad
 & (~
√tmask
)Ë!0 || (
numîic
 & 0x4000))

177 
ho°
 = 1;

179 
INET_¬
 = 
NULL
;

181 
≤
 = 
INET_¬
;

182 
≤
 !
NULL
) {

183 i‡(
≤
->
addr
.
sö_addr
.
s_addr
 =
ad
 &&Ön->
ho°
 == host) {

184 
	`ß„_°∫˝y
(
«me
, 
≤
->«me, 
Àn
);

185 #ifde‡
DEBUG


186 
	`Ârötf
 (
°dîr
, "ºesﬁve: found %†%08lx i¿ˇche\n", (
ho°
? "ho°": "√t"), 
ad
);

190 
≤
 =Ön->
√xt
;

193 
ho°_ad
 = 
	`¡ohl
(
ad
);

194 
≈
 = 
NULL
;

195 
ít
 = 
NULL
;

196 i‡(
ho°
) {

197 #ifde‡
DEBUG


198 
	`Ârötf
 (
°dîr
, "gëho°byadd∏(%08lx)\n", 
ad
);

200 
ít
 = 
	`gëho°byaddr
((*Ë&
ad
, 4, 
AF_INET
);

201 i‡(
ít
 !
NULL
)

202 
	`ß„_°∫˝y
(
«me
, 
ít
->
h_«me
, 
Àn
);

204 #ifde‡
DEBUG


205 
	`Ârötf
 (
°dîr
, "gë√tbyadd∏(%08lx)\n", 
ho°_ad
);

207 
≈
 = 
	`gë√tbyaddr
(
ho°_ad
, 
AF_INET
);

208 i‡(
≈
 !
NULL
)

209 
	`ß„_°∫˝y
(
«me
, 
≈
->
n_«me
, 
Àn
);

211 i‡((
ít
 =
NULL
Ë&& (
≈
 == NULL))

212 
	`ß„_°∫˝y
(
«me
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
), 
Àn
);

213 
≤
 = (
addr
 *Ë
	`mÆloc
((addr));

214 
≤
->
addr
 = *
sö
;

215 
≤
->
√xt
 = 
INET_¬
;

216 
≤
->
ho°
 = host;

217 
≤
->
«me
 = (*Ë
	`mÆloc
(
	`°æí
(name) + 1);

218 
	`°r˝y
(
≤
->
«me
,Çame);

219 
INET_¬
 = 
≤
;

222 
	}
}

225 
	$INET_ª£º‹
(*
ãxt
)

227 
	`hîr‹
(
ãxt
);

228 
	}
}

232 *
	$INET_¥öt
(*
±r
)

234  (
	`öë_¡ﬂ
((*(
ö_addr
 *Ë
±r
)));

235 
	}
}

239 *
	$INET_•röt
(
sockaddr
 *
ßp
, 
numîic
)

241 
buff
[128];

243 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

244  
	`ß„_°∫˝y
(
buff
, 
	`_
("[NONE SET]"), (buff));

246 i‡(
	`INET_ºesﬁve
(
buff
, (buff), (
sockaddr_ö
 *Ë
ßp
,

247 
numîic
, 0xffffff00) != 0)

248  (
NULL
);

250  (
buff
);

251 
	}
}

253 *
	$INET_•rötmask
(
sockaddr
 *
ßp
, 
numîic
,

254 
√tmask
)

256 
buff
[128];

258 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

259  
	`ß„_°∫˝y
(
buff
, 
	`_
("[NONE SET]"), (buff));

260 i‡(
	`INET_ºesﬁve
(
buff
, (buff), (
sockaddr_ö
 *Ë
ßp
,

261 
numîic
, 
√tmask
) != 0)

262  (
NULL
);

263  (
buff
);

264 
	}
}

267 
	$INET_gësock
(*
buÂ
, 
sockaddr
 *
ßp
)

269 *
•
 = 
buÂ
, *
bp
;

270 
i
;

271 
vÆ
;

272 
sockaddr_ö
 *
sö
;

274 
sö
 = (
sockaddr_ö
 *Ë
ßp
;

275 
sö
->
sö_Ámûy
 = 
AF_INET
;

276 
sö
->
sö_p‹t
 = 0;

278 
vÆ
 = 0;

279 
bp
 = (*Ë&
vÆ
;

280 
i
 = 0; i < (
sö
->
sö_addr
.
s_addr
); i++) {

281 *
•
 = 
	`touµî
(*sp);

283 i‡((*
•
 >= 'A') && (*sp <= 'F'))

284 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

285 i‡((*
•
 >= '0') && (*sp <= '9'))

286 
bp
[
i
] |(Ë(*
•
 - '0');

290 
bp
[
i
] <<= 4;

291 
•
++;

292 *
•
 = 
	`touµî
(*sp);

294 i‡((*
•
 >= 'A') && (*sp <= 'F'))

295 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

296 i‡((*
•
 >= '0') && (*sp <= '9'))

297 
bp
[
i
] |(Ë(*
•
 - '0');

301 
•
++;

303 
sö
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
vÆ
);

305  (
•
 - 
buÂ
);

306 
	}
}

308 
	$INET_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

310 
ty≥
) {

312  (
	`INET_gësock
(
buÂ
, 
ßp
));

314  (
	`INET_ªsﬁve
(
buÂ
, (
sockaddr_ö
 *Ë
ßp
, 1));

316  (
	`INET_ªsﬁve
(
buÂ
, (
sockaddr_ö
 *Ë
ßp
, 0));

318 
	}
}

320 
	$INET_gë√tmask
(*
adr
, 
sockaddr
 *
m
, *
«me
)

322 
sockaddr_ö
 *
mask
 = (sockaddr_ö *Ë
m
;

323 *
¶ash
, *
íd
;

324 
¥efix
;

326 i‡((
¶ash
 = 
	`°rchr
(
adr
, '/')Ë=
NULL
)

329 *
¶ash
++ = '\0';

330 
¥efix
 = 
	`°πoul
(
¶ash
, &
íd
, 0);

331 i‡(*
íd
 != '\0')

334 i‡(
«me
) {

335 
	`•rötf
(
«me
, "/%d", 
¥efix
);

337 
mask
->
sö_Ámûy
 = 
AF_INET
;

338 
mask
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(~(0xffffffffU >> 
¥efix
));

340 
	}
}

343 
a·y≥
 
	göë_a·y≥
 =

345 "öë", 
NULL
, 
AF_INET
, (),

346 
INET_¥öt
, 
INET_•röt
, 
INET_öput
, 
INET_ª£º‹
,

347 
NULL
 , NULL ,

348 
INET_gë√tmask
,

350 
NULL


355 
	$add2li°
(
£rvi˚
 **
«meba£
, £rvi˚ *
ôem
)

357 i‡(*
«meba£
 =
NULL
) {

358 *
«meba£
 = 
ôem
;

359 
ôem
->
√xt
 = 
NULL
;

361 
ôem
->
√xt
 = *
«meba£
;

362 *
«meba£
 = 
ôem
;

364 
	}
}

367 
£rvi˚
 *
	$£¨chli°
(
£rvi˚
 *
£rvi˚ba£
, 
numbî
)

369 
£rvi˚
 *
ôem
;

371 
ôem
 = 
£rvi˚ba£
; iãm !
NULL
; iãm = iãm->
√xt
) {

372 i‡(
ôem
->
numbî
 ==Çumber)

373  (
ôem
);

375  (
NULL
);

376 
	}
}

379 
	$ªad_£rvi˚s
()

381 
£rvít
 *
£
;

382 
¥Ÿ€¡
 *
≥
;

383 
£rvi˚
 *
ôem
;

385 
	`£t£rvít
(1);

386 (
£
 = 
	`gë£rvít
())) {

388 
ôem
 = (
£rvi˚
 *Ë
	`mÆloc
((service));

389 i‡(
ôem
 =
NULL
)

390 
	`≥º‹
("netstat");

391 
ôem
->
«me
 = 
	`°rdup
(
£
->
s_«me
);

392 
ôem
->
numbî
 = 
£
->
s_p‹t
;

395 i‡(!
	`°rcmp
(
£
->
s_¥Ÿo
, "tcp")) {

396 
	`add2li°
(&
t˝_«me
, 
ôem
);

397 } i‡(!
	`°rcmp
(
£
->
s_¥Ÿo
, "udp")) {

398 
	`add2li°
(&
udp_«me
, 
ôem
);

399 } i‡(!
	`°rcmp
(
£
->
s_¥Ÿo
, "raw")) {

400 
	`add2li°
(&
øw_«me
, 
ôem
);

403 
	`íd£rvít
();

404 
	`£çrŸ€¡
(1);

405 (
≥
 = 
	`gë¥Ÿ€¡
())) {

407 
ôem
 = (
£rvi˚
 *Ë
	`mÆloc
((service));

408 i‡(
ôem
 =
NULL
)

409 
	`≥º‹
("netstat");

410 
ôem
->
«me
 = 
	`°rdup
(
≥
->
p_«me
);

411 
ôem
->
numbî
 = 
	`ht⁄s
(
≥
->
p_¥Ÿo
);

412 
	`add2li°
(&
øw_«me
, 
ôem
);

414 
	`íd¥Ÿ€¡
();

416 
	}
}

419 *
	$gë_¢ame
(
socknumbî
, *
¥Ÿo
, 
numîic
)

421 
buf„r
[64], 
öô
 = 0;

422 
£rvi˚
 *
ôem
;

424 i‡(
socknumbî
 == 0)

426 i‡(
numîic
) {

427 
	`•rötf
(
buf„r
, "%d", 
	`¡ohs
(
socknumbî
));

428  (
buf„r
);

430 i‡(!
öô
) {

431 (Ë
	`ªad_£rvi˚s
();

432 
öô
 = 1;

434 
buf„r
[0] = '\0';

435 i‡(!
	`°rcmp
(
¥Ÿo
, "tcp")) {

436 i‡((
ôem
 = 
	`£¨chli°
(
t˝_«me
, 
socknumbî
)Ë!
NULL
)

437 
	`•rötf
(
buf„r
, "%s", 
ôem
->
«me
);

438 } i‡(!
	`°rcmp
(
¥Ÿo
, "udp")) {

439 i‡((
ôem
 = 
	`£¨chli°
(
udp_«me
, 
socknumbî
)Ë!
NULL
)

440 
	`•rötf
(
buf„r
, "%s", 
ôem
->
«me
);

441 } i‡(!
	`°rcmp
(
¥Ÿo
, "raw")) {

442 i‡((
ôem
 = 
	`£¨chli°
(
øw_«me
, 
socknumbî
)Ë!
NULL
)

443 
	`•rötf
(
buf„r
, "%s", 
ôem
->
«me
);

446 i‡(!
buf„r
[0])

447 
	`•rötf
(
buf„r
, "%d", 
	`¡ohs
(
socknumbî
));

448  (
buf„r
);

449 
	}
}

	@net-tools-1.60/lib/inet6.c

22 
	~"c⁄fig.h
"

24 #i‡
HAVE_AFINET6


25 
	~<asm/ty≥s.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

28 
	~<√töë/ö.h
>

29 
	~<¨∑/öë.h
>

30 
	~<¨∑/«me£r.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<√tdb.h
>

34 
	~<ªsﬁv.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

39 
	~"vîsi⁄.h
"

40 
	~"√t-suµ‹t.h
"

41 
	~"∑th«mes.h
"

42 
	~"öé.h
"

43 
	~"utû.h
"

45 
h_î∫o
;

47 
	$INET6_ªsﬁve
(*
«me
, 
sockaddr_ö6
 *
sö6
)

49 
addröfo
 
ªq
, *
ai
;

50 
s
;

52 
	`mem£t
 (&
ªq
, '\0', Ñeq);

53 
ªq
.
ai_Ámûy
 = 
AF_INET6
;

54 i‡((
s
 = 
	`gëaddröfo
(
«me
, 
NULL
, &
ªq
, &
ai
))) {

55 
	`Ârötf
(
°dîr
, "gëaddröfo: %s: %d\n", 
«me
, 
s
);

58 
	`mem˝y
(
sö6
, 
ai
->
ai_addr
, (
sockaddr_ö6
));

60 
	`‰ìaddröfo
(
ai
);

63 
	}
}

65 #i‚de‡
IN6_IS_ADDR_UNSPECIFIED


66 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

67 (((
__u32
 *Ë(
a
))[0] == 0 && ((__u32 *) (a))[1] == 0 && \

68 ((
__u32
 *Ë(
a
))[2] =0 && ((__u32 *Ë◊))[3] =0)

	)

72 
	$INET6_ºesﬁve
(*
«me
, 
sockaddr_ö6
 *
sö6
, 
numîic
)

74 
s
;

77 i‡(
sö6
->
sö6_Ámûy
 !
AF_INET6
) {

78 #ifde‡
DEBUG


79 
	`Ârötf
(
°dîr
, 
	`_
("rresolve: unsupportáddress family %d !\n"),

80 
sö6
->
sö6_Ámûy
);

82 
î∫o
 = 
EAFNOSUPPORT
;

85 i‡(
numîic
 & 0x7FFF) {

86 
	`öë_¡›
(
AF_INET6
, &
sö6
->
sö6_addr
, 
«me
, 80);

89 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

90 i‡(
numîic
 & 0x8000)

91 
	`°r˝y
(
«me
, "default");

93 
	`°r˝y
(
«me
, "*");

97 i‡((
s
 = 
	`gë«meöfo
((
sockaddr
 *Ë
sö6
, (
sockaddr_ö6
),

98 
«me
, 255 , 
NULL
, 0, 0))) {

99 
	`Âuts
("gë«meöfÿÁûed\n", 
°dîr
);

103 
	}
}

106 
	$INET6_ª£º‹
(*
ãxt
)

108 
	`hîr‹
(
ãxt
);

109 
	}
}

113 *
	$INET6_¥öt
(*
±r
)

115 
«me
[80];

117 
	`öë_¡›
(
AF_INET6
, (
ö6_addr
 *Ë
±r
, 
«me
, 80);

118  
«me
;

119 
	}
}

124 *
	$INET6_•röt
(
sockaddr
 *
ßp
, 
numîic
)

126 
buff
[128];

128 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

129  
	`ß„_°∫˝y
(
buff
, 
	`_
("[NONE SET]"), (buff));

130 i‡(
	`INET6_ºesﬁve
(
buff
, (
sockaddr_ö6
 *Ë
ßp
, 
numîic
) != 0)

131  
	`ß„_°∫˝y
(
buff
, 
	`_
("[UNKNOWN]"), (buff));

132  (
buff
);

133 
	}
}

136 
	$INET6_gësock
(*
buÂ
, 
sockaddr
 *
ßp
)

138 
sockaddr_ö6
 *
sö6
;

140 
sö6
 = (
sockaddr_ö6
 *Ë
ßp
;

141 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

142 
sö6
->
sö6_p‹t
 = 0;

144 i‡(
	`öë_±⁄
(
AF_INET6
, 
buÂ
, 
sö6
->
sö6_addr
.
s6_addr
) <= 0)

148 
	}
}

150 
	$INET6_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

152 
ty≥
) {

154  (
	`INET6_gësock
(
buÂ
, 
ßp
));

156  (
	`INET6_ªsﬁve
(
buÂ
, (
sockaddr_ö6
 *Ë
ßp
));

158 
	}
}

161 
a·y≥
 
	göë6_a·y≥
 =

163 "öë6", 
NULL
, 
AF_INET6
, (
ö6_addr
),

164 
INET6_¥öt
, 
INET6_•röt
, 
INET6_öput
, 
INET6_ª£º‹
,

165 
INET6_Ωröt
, 
INET6_röput
, 
NULL
,

	@net-tools-1.60/lib/inet6_gr.c

7 
	~"c⁄fig.h
"

9 #i‡
HAVE_AFINET6


10 
	~<asm/ty≥s.h
>

11 
	~<asm/∑øm.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<¨∑/«me£r.h
>

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<√tdb.h
>

21 
	~<ªsﬁv.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<°dio.h
>

25 
	~<uni°d.h
>

26 #i‚de‡
__GLIBC__


27 
	~<√töë6/ùv6_rouã.h
>

29 
	~"vîsi⁄.h
"

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"√t-„©uªs.h
"

37 
	#NUD_INCOMPLETE
 0x01

	)

38 
	#NUD_REACHABLE
 0x02

	)

39 
	#NUD_STALE
 0x04

	)

40 
	#NUD_DELAY
 0x08

	)

41 
	#NUD_PROBE
 0x10

	)

42 
	#NUD_FAILED
 0x20

	)

44 
	#NUD_NOARP
 0x40

	)

45 
	#NUD_PERMANENT
 0x80

	)

46 
	#NUD_NONE
 0x00

	)

48 
	#NTF_PROXY
 0x08

	)

49 
	#NTF_ROUTER
 0x80

	)

50 
	#NTF_02
 0x02

	)

51 
	#NTF_04
 0x04

	)

56 
a·y≥
 
öë6_a·y≥
;

59 
	$Ωröt_fib6
(
ext
, 
numîic
)

61 
buff
[4096], 
iÁ˚
[16], 
Êags
[16];

62 
addr6
[128], 
«ddr6
[128];

63 
sockaddr_ö6
 
ßddr6
, 
¢addr6
;

64 
num
, 
iÊags
, 
mëric
, 
ªf˙t
, 
u£
, 
¥efix_Àn
, 
¶í
;

65 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_ROUTE6
, "r");

67 
addr6p
[8][5], 
ßddr6p
[8][5], 
«ddr6p
[8][5];

69 i‡(!
Â
) {

70 
	`≥º‹
(
_PATH_PROCNET_ROUTE6
);

71 
	`¥ötf
(
	`_
("INET6 (IPv6)Çot configured inÅhis system.\n"));

74 
	`¥ötf
(
	`_
("Kernel IPv6ÑoutingÅable\n"));

76 
	`¥ötf
(
	`_
("Destination "

80 
	`fgës
(
buff
, 1023, 
Â
)) {

81 
num
 = 
	`ssˇnf
(
buff
, "%4s%4s%4s%4s%4s%4s%4s%4s %02x %4s%4s%4s%4s%4s%4s%4s%4s %02x %4s%4s%4s%4s%4s%4s%4s%4s %08x %08x %08x %08x %s\n",

82 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

83 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7],

84 &
¥efix_Àn
,

85 
ßddr6p
[0], saddr6p[1], saddr6p[2], saddr6p[3],

86 
ßddr6p
[4], saddr6p[5], saddr6p[6], saddr6p[7],

87 &
¶í
,

88 
«ddr6p
[0],Çaddr6p[1],Çaddr6p[2],Çaddr6p[3],

89 
«ddr6p
[4],Çaddr6p[5],Çaddr6p[6],Çaddr6p[7],

90 &
mëric
, &
u£
, &
ªf˙t
, &
iÊags
, 
iÁ˚
);

92 i‡(
num
 < 23)

95 i‡(!(
iÊags
 & 
RTF_UP
))

98 
	`¢¥ötf
(
addr6
, (addr6), "%s:%s:%s:%s:%s:%s:%s:%s",

99 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

100 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7]);

101 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ßddr6
);

102 
	`¢¥ötf
(
addr6
, (addr6), "%s/%d",

103 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
ßddr6
, 1),

104 
¥efix_Àn
);

107 
	`¢¥ötf
(
«ddr6
, (naddr6), "%s:%s:%s:%s:%s:%s:%s:%s",

108 
«ddr6p
[0],Çaddr6p[1],Çaddr6p[2],Çaddr6p[3],

109 
«ddr6p
[4],Çaddr6p[5],Çaddr6p[6],Çaddr6p[7]);

110 
öë6_a·y≥
.
	`öput
(1, 
«ddr6
, (
sockaddr
 *Ë&
¢addr6
);

111 
	`¢¥ötf
(
«ddr6
, (naddr6), "%s",

112 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
¢addr6
, 1));

115 
	`°r˝y
(
Êags
, "U");

116 i‡(
iÊags
 & 
RTF_GATEWAY
)

117 
	`°rˇt
(
Êags
, "G");

118 i‡(
iÊags
 & 
RTF_HOST
)

119 
	`°rˇt
(
Êags
, "H");

120 i‡(
iÊags
 & 
RTF_DEFAULT
)

121 
	`°rˇt
(
Êags
, "D");

122 i‡(
iÊags
 & 
RTF_ADDRCONF
)

123 
	`°rˇt
(
Êags
, "A");

124 i‡(
iÊags
 & 
RTF_CACHE
)

125 
	`°rˇt
(
Êags
, "C");

128 
	`¥ötf
("%-43s %-39s %-5s %-6d %-2d %7d %-8s\n",

129 
addr6
, 
«ddr6
, 
Êags
, 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

132 (Ë
	`f˛o£
(
Â
);

134 
	}
}

136 
	$Ωröt_ˇche6
(
ext
, 
numîic
)

138 
buff
[4096], 
iÁ˚
[16], 
Êags
[16];

139 
addr6
[128], 
haddr
[20], 
°©e°r
[20];

140 
sockaddr_ö6
 
ßddr6
;

141 
ty≥
, 
num
, 
ªf˙t
, 
¥efix_Àn
, 
loˇti⁄
, 
°©e
, 
gc
;

142 
t°amp
, 
expúe
, 
ndÊags
, 
ªachabÀ
, 
°Æe
, 
dñëe
;

143 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_NDISC
, "r");

144 
addr6p
[8][5], 
haddΩ
[6][3];

146 i‡(!
Â
) {

147 
	`ESYSNOT
("nd_print", "ND Table");

150 
	`¥ötf
(
	`_
("Kernel IPv6 Neighbour Cache\n"));

152 i‡(
ext
 == 2)

153 
	`¥ötf
(
	`_
("Neighbour "

157 
	`¥ötf
(
	`_
("Neighbour "

162 
	`fgës
(
buff
, 1023, 
Â
)) {

163 
num
 = 
	`ssˇnf
(
buff
, "%4s%4s%4s%4s%4s%4s%4s%4s %02x %02x %02x %02x %08lx %08lx %08lx %04x %04x %04lx %8s %2s%2s%2s%2s%2s%2s\n",

164 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

165 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7],

166 &
loˇti⁄
, &
¥efix_Àn
, &
ty≥
, &
°©e
, &
expúe
, &
t°amp
, &
ªachabÀ
, &
gc
, &
ªf˙t
,

167 &
ndÊags
, 
iÁ˚
,

168 
haddΩ
[0], haddrp[1], haddrp[2], haddrp[3], haddrp[4], haddrp[5]);

171 
	`¢¥ötf
(
addr6
, (addr6), "%s:%s:%s:%s:%s:%s:%s:%s",

172 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

173 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7]);

174 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ßddr6
);

175 
	`¢¥ötf
(
addr6
, (addr6), "%s/%d",

176 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
ßddr6
, 
numîic
),

177 
¥efix_Àn
);

180 
	`¢¥ötf
(
haddr
, (haddr), "%s:%s:%s:%s:%s:%s",

181 
haddΩ
[0], haddrp[1], haddrp[2], haddrp[3], haddrp[4], haddrp[5]);

184 
Êags
[0] = '\0';

185 i‡(
ndÊags
 & 
NTF_ROUTER
)

186 
	`°rˇt
(
Êags
, "R");

187 i‡(
ndÊags
 & 
NTF_04
)

188 
	`°rˇt
(
Êags
, "x");

189 i‡(
ndÊags
 & 
NTF_02
)

190 
	`°rˇt
(
Êags
, "h");

191 i‡(
ndÊags
 & 
NTF_PROXY
)

192 
	`°rˇt
(
Êags
, "P");

195 
°©e
) {

196 
NUD_NONE
:

197 
	`°r˝y
(
°©e°r
, "NONE");

199 
NUD_INCOMPLETE
:

200 
	`°r˝y
(
°©e°r
, "INCOMPLETE");

202 
NUD_REACHABLE
:

203 
	`°r˝y
(
°©e°r
, "REACHABLE");

205 
NUD_STALE
:

206 
	`°r˝y
(
°©e°r
, "STALE");

208 
NUD_DELAY
:

209 
	`°r˝y
(
°©e°r
, "DELAY");

211 
NUD_PROBE
:

212 
	`°r˝y
(
°©e°r
, "PROBE");

214 
NUD_FAILED
:

215 
	`°r˝y
(
°©e°r
, "FAILED");

217 
NUD_NOARP
:

218 
	`°r˝y
(
°©e°r
, "NOARP");

220 
NUD_PERMANENT
:

221 
	`°r˝y
(
°©e°r
, "PERM");

224 
	`¢¥ötf
(
°©e°r
, (°©e°r), "UNKNOWN(%02x)", 
°©e
);

229 
	`¥ötf
("%-43s %-17s %-8s %-5s %-3d %-16s",

230 
addr6
, 
haddr
, 
iÁ˚
, 
Êags
, 
ªf˙t
, 
°©e°r
);

232 
°Æe
 = 0;

233 i‡(
°©e
 =
NUD_REACHABLE
)

234 
°Æe
 = 
ªachabÀ
 > 
t°amp
 ?Ñeachable -Åstamp : 0;

235 
dñëe
 = 
gc
 > 
t°amp
 ? gc -Åstamp : 0;

236 i‡(
ext
 != 2) {

237 
	`¥ötf
(" %-9ld ", 
°Æe
 / 
HZ
);

238 i‡(
ªf˙t
)

239 
	`¥ötf
(" * ");

241 
	`¥ötf
(" %-7ld ", 
dñëe
 / 
HZ
);

243 
	`¥ötf
("\n");

246 (Ë
	`f˛o£
(
Â
);

248 
	}
}

250 
	$INET6_Ωröt
(
›ti⁄s
)

252 
ext
 = 
›ti⁄s
 & 
FLAG_EXT
;

253 
numîic
 = 
›ti⁄s
 & (
FLAG_NUM_HOST
 | 
FLAG_SYM
);

254 
rc
 = 
E_INTERN
;

256 i‡(
›ti⁄s
 & 
FLAG_FIB
)

257 i‡((
rc
 = 
	`Ωröt_fib6
(
ext
, 
numîic
)))

258  (
rc
);

260 i‡(
›ti⁄s
 & 
FLAG_CACHE
)

261 i‡((
rc
 = 
	`Ωröt_ˇche6
(
ext
, 
numîic
)))

262  (
rc
);

263  (
rc
);

264 
	}
}

	@net-tools-1.60/lib/inet6_sr.c

6 
	~"c⁄fig.h
"

8 #i‡
HAVE_AFINET6


9 
	~<asm/ty≥s.h
>

10 
	~<sys/∑øm.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

14 
	~<¨∑/öë.h
>

15 
	~<¨∑/«me£r.h
>

16 
	~<√t/if.h
>

17 
	~<sys/io˘l.h
>

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<√tdb.h
>

21 
	~<ªsﬁv.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<°dio.h
>

25 
	~<uni°d.h
>

26 #ifde‡
__GLIBC__


27 
	~<√t/rouã.h
>

29 
	~<√töë6/ùv6_rouã.h
>

31 
	~"vîsi⁄.h
"

32 
	~"√t-suµ‹t.h
"

33 
	~"∑th«mes.h
"

34 
	~"öé.h
"

35 
	~"√t-„©uªs.h
"

39 
a·y≥
 
öë6_a·y≥
;

41 
	gskfd
 = -1;

44 
	$ußge
()

46 
	`Ârötf
(
°dîr
, 
	`_
("Usage: inet6_route [-vF] del Target\n"));

47 
	`Ârötf
(
°dîr
, 
	`_
(" inet6_route [-vF]ádd Target [gw Gw] [metric M] [[dev] If]\n"));

48 
	`Ârötf
(
°dîr
, 
	`_
(" inet6_route [-FC] flush NOT supported\n"));

49  (
E_USAGE
);

50 
	}
}

53 
	$INET6_£åouã
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

55 
ö6_πmsg
 
π
;

56 
i‰eq
 
i‰
;

57 
sockaddr_ö6
 
ß6
;

58 
èrgë
[128], 
g©eway
[128] = "NONE";

59 
mëric
, 
¥efix_Àn
;

60 *
dev«me
 = 
NULL
;

61 *
˝
;

63 i‡(*
¨gs
 =
NULL
)

64  (
	`ußge
());

66 
	`°r˝y
(
èrgë
, *
¨gs
++);

67 i‡(!
	`°rcmp
(
èrgë
, "default")) {

68 
¥efix_Àn
 = 0;

69 
	`mem£t
(&
ß6
, 0, (sa6));

71 i‡((
˝
 = 
	`°rchr
(
èrgë
, '/'))) {

72 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

73 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

74 
	`ußge
();

75 *
˝
 = 0;

77 
¥efix_Àn
 = 128;

79 i‡(
öë6_a·y≥
.
	`öput
(1, 
èrgë
, (
sockaddr
 *Ë&
ß6
) < 0

80 && 
öë6_a·y≥
.
	`öput
(0, 
èrgë
, (
sockaddr
 *Ë&
ß6
) < 0) {

81 
öë6_a·y≥
.
	`hîr‹
(
èrgë
);

87 
	`mem£t
((*Ë&
π
, 0, (
ö6_πmsg
));

89 
	`mem˝y
(&
π
.
πmsg_d°
, 
ß6
.
sö6_addr
.
s6_addr
, (
ö6_addr
));

92 
π
.
πmsg_Êags
 = 
RTF_UP
;

93 i‡(
¥efix_Àn
 == 128)

94 
π
.
πmsg_Êags
 |
RTF_HOST
;

95 
π
.
πmsg_mëric
 = 1;

96 
π
.
πmsg_d°_Àn
 = 
¥efix_Àn
;

98 *
¨gs
) {

99 i‡(!
	`°rcmp
(*
¨gs
, "metric")) {

101 
¨gs
++;

102 i‡(!*
¨gs
 || !
	`isdigô
(**args))

103  (
	`ußge
());

104 
mëric
 = 
	`©oi
(*
¨gs
);

105 
π
.
πmsg_mëric
 = 
mëric
;

106 
¨gs
++;

109 i‡(!
	`°rcmp
(*
¨gs
, "gw") || !strcmp(*args, "gateway")) {

110 
¨gs
++;

111 i‡(!*
¨gs
)

112  (
	`ußge
());

113 i‡(
π
.
πmsg_Êags
 & 
RTF_GATEWAY
)

114  (
	`ußge
());

115 
	`°r˝y
(
g©eway
, *
¨gs
);

116 i‡(
öë6_a·y≥
.
	`öput
(1, 
g©eway
,

117 (
sockaddr
 *Ë&
ß6
) < 0) {

118 
öë6_a·y≥
.
	`hîr‹
(
g©eway
);

119  (
E_LOOKUP
);

121 
	`mem˝y
(&
π
.
πmsg_g©eway
, 
ß6
.
sö6_addr
.
s6_addr
,

122 (
ö6_addr
));

123 
π
.
πmsg_Êags
 |
RTF_GATEWAY
;

124 
¨gs
++;

127 i‡(!
	`°rcmp
(*
¨gs
, "mod")) {

128 
¨gs
++;

129 
π
.
πmsg_Êags
 |
RTF_MODIFIED
;

132 i‡(!
	`°rcmp
(*
¨gs
, "dyn")) {

133 
¨gs
++;

134 
π
.
πmsg_Êags
 |
RTF_DYNAMIC
;

137 i‡(!
	`°rcmp
(*
¨gs
, "device") || !strcmp(*args, "dev")) {

138 
¨gs
++;

139 i‡(!*
¨gs
)

140  (
	`ußge
());

141 } i‡(
¨gs
[1])

142  (
	`ußge
());

144 
dev«me
 = *
¨gs
;

145 
¨gs
++;

149 i‡((
skfd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0)) < 0) {

150 
	`≥º‹
("socket");

151  (
E_SOCK
);

153 i‡(
dev«me
) {

154 
	`mem£t
(&
i‰
, 0, (ifr));

155 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev«me
);

157 i‡(
	`io˘l
(
skfd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

158 
	`≥º‹
("SIOGIFINDEX");

159  (
E_SOCK
);

161 
π
.
πmsg_ifödex
 = 
i‰
.
i‰_ifödex
;

163 
π
.
πmsg_ifödex
 = 0;

166 i‡(
a˘i⁄
 =
RTACTION_DEL
) {

167 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

168 
	`≥º‹
("SIOCDELRT");

169 
	`˛o£
(
skfd
);

170  (
E_SOCK
);

173 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

174 
	`≥º‹
("SIOCADDRT");

175 
	`˛o£
(
skfd
);

176  (
E_SOCK
);

181 (Ë
	`˛o£
(
skfd
);

183 
	}
}

185 
	$INET6_röput
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

187 i‡(
a˘i⁄
 =
RTACTION_FLUSH
) {

188 
	`Ârötf
(
°dîr
, 
	`_
("Flushing `inet6'ÑoutingÅableÇot supported\n"));

189  (
	`ußge
());

191 i‡((*
¨gs
 =
NULL
Ë|| (
a˘i⁄
 =
RTACTION_HELP
))

192  (
	`ußge
());

194  (
	`INET6_£åouã
(
a˘i⁄
, 
›ti⁄s
, 
¨gs
));

195 
	}
}

	@net-tools-1.60/lib/inet_gr.c

11 
	~"c⁄fig.h
"

13 #i‡
HAVE_AFINET


14 
	~<sys/ty≥s.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<¨∑/«me£r.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<√tdb.h
>

23 
	~<ªsﬁv.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°dio.h
>

27 
	~<uni°d.h
>

28 
	~"vîsi⁄.h
"

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"√t-„©uªs.h
"

33 
	~"¥oc.h
"

34 
a·y≥
 
öë_a·y≥
;

36 *
INET_•rötmask
(
sockaddr
 *
ßp
, 
numîic
,

37 
√tmask
);

39 
	$Ωröt_fib
(
ext
, 
numîic
)

41 
buff
[1024], 
iÁ˚
[16], 
Êags
[64];

42 
g©e_addr
[128], 
√t_addr
[128];

43 
mask_addr
[128];

44 
num
, 
iÊags
, 
mëric
, 
ªf˙t
, 
u£
, 
mss
, 
wödow
, 
úâ
;

45 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_ROUTE
, "r");

46 *
fmt
;

48 i‡(!
Â
) {

49 
	`≥º‹
(
_PATH_PROCNET_ROUTE
);

50 
	`¥ötf
(
	`_
("INET (IPv4)Çot configured inÅhis system.\n"));

53 
	`¥ötf
(
	`_
("Kernel IPÑoutingÅable\n"));

55 i‡(
ext
 == 1)

56 
	`¥ötf
(
	`_
("Destination Gateway Genmask "

58 i‡(
ext
 == 2)

59 
	`¥ötf
(
	`_
("Destination Gateway Genmask "

61 i‡(
ext
 >= 3)

62 
	`¥ötf
(
	`_
("Destination Gateway Genmask "

66 
úâ
 = 0;

67 
wödow
 = 0;

68 
mss
 = 0;

70 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_ROUTE
, 0, 
Â
,

82 
NULL
);

85 i‡(!
fmt
)

88 
	`fgës
(
buff
, 1023, 
Â
)) {

89 
sockaddr
 
¢ë_èrgë
, 
¢ë_g©eway
, 
¢ë_mask
;

90 
sockaddr_ö
 *
sö_√tmask
;

92 
num
 = 
	`ssˇnf
(
buff
, 
fmt
,

93 
iÁ˚
, 
√t_addr
, 
g©e_addr
,

94 &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
, 
mask_addr
,

95 &
mss
, &
wödow
, &
úâ
);

96 i‡(
num
 < 10 || !(
iÊags
 & 
RTF_UP
))

100 (Ë
öë_a·y≥
.
	`öput
(1, 
√t_addr
, &
¢ë_èrgë
);

103 (Ë
öë_a·y≥
.
	`öput
(1, 
g©e_addr
, &
¢ë_g©eway
);

106 (Ë
öë_a·y≥
.
	`öput
(1, 
mask_addr
, &
¢ë_mask
);

108 
sö_√tmask
 = (
sockaddr_ö
 *)&
¢ë_mask
;

109 
	`°r˝y
(
√t_addr
, 
	`INET_•rötmask
(&
¢ë_èrgë
,

110 (
numîic
 | 0x8000 | (
iÊags
 & 
RTF_HOST
? 0x4000: 0)),

111 
sö_√tmask
->
sö_addr
.
s_addr
));

112 
√t_addr
[15] = '\0';

114 
	`°r˝y
(
g©e_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë_g©eway
, 
numîic
 | 0x4000));

115 
g©e_addr
[15] = '\0';

117 
	`°r˝y
(
mask_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë_mask
, 1));

118 
mask_addr
[15] = '\0';

121 
Êags
[0] = '\0';

122 i‡(
iÊags
 & 
RTF_UP
)

123 
	`°rˇt
(
Êags
, "U");

124 i‡(
iÊags
 & 
RTF_GATEWAY
)

125 
	`°rˇt
(
Êags
, "G");

126 #i‡
HAVE_RTF_REJECT


127 i‡(
iÊags
 & 
RTF_REJECT
)

128 
	`°r˝y
(
Êags
, "!");

130 i‡(
iÊags
 & 
RTF_HOST
)

131 
	`°rˇt
(
Êags
, "H");

132 i‡(
iÊags
 & 
RTF_REINSTATE
)

133 
	`°rˇt
(
Êags
, "R");

134 i‡(
iÊags
 & 
RTF_DYNAMIC
)

135 
	`°rˇt
(
Êags
, "D");

136 i‡(
iÊags
 & 
RTF_MODIFIED
)

137 
	`°rˇt
(
Êags
, "M");

138 i‡(
iÊags
 & 
RTF_DEFAULT
)

139 
	`°rˇt
(
Êags
, "d");

140 i‡(
iÊags
 & 
RTF_ALLONLINK
)

141 
	`°rˇt
(
Êags
, "a");

142 i‡(
iÊags
 & 
RTF_ADDRCONF
)

143 
	`°rˇt
(
Êags
, "c");

144 i‡(
iÊags
 & 
RTF_NONEXTHOP
)

145 
	`°rˇt
(
Êags
, "o");

146 i‡(
iÊags
 & 
RTF_EXPIRES
)

147 
	`°rˇt
(
Êags
, "e");

148 i‡(
iÊags
 & 
RTF_CACHE
)

149 
	`°rˇt
(
Êags
, "c");

150 i‡(
iÊags
 & 
RTF_FLOW
)

151 
	`°rˇt
(
Êags
, "f");

152 i‡(
iÊags
 & 
RTF_POLICY
)

153 
	`°rˇt
(
Êags
, "p");

154 i‡(
iÊags
 & 
RTF_LOCAL
)

155 
	`°rˇt
(
Êags
, "l");

156 i‡(
iÊags
 & 
RTF_MTU
)

157 
	`°rˇt
(
Êags
, "u");

158 i‡(
iÊags
 & 
RTF_WINDOW
)

159 
	`°rˇt
(
Êags
, "w");

160 i‡(
iÊags
 & 
RTF_IRTT
)

161 
	`°rˇt
(
Êags
, "i");

162 i‡(
iÊags
 & 
RTF_NOTCACHED
)

163 
	`°rˇt
(
Êags
, "n");

166 i‡(
ext
 == 1) {

167 #i‡
HAVE_RTF_REJECT


168 i‡(
iÊags
 & 
RTF_REJECT
)

169 
	`¥ötf
("%-15s - %-15s %-5s %-6d - %7d -\n",

170 
√t_addr
, 
mask_addr
, 
Êags
, 
mëric
, 
u£
);

173 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-2d %7d %s\n",

174 
√t_addr
, 
g©e_addr
, 
mask_addr
, 
Êags
,

175 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

177 i‡(
ext
 == 2) {

178 #i‡
HAVE_RTF_REJECT


179 i‡(
iÊags
 & 
RTF_REJECT
)

180 
	`¥ötf
("%-15s - %-15s %-5s - - - -\n",

181 
√t_addr
, 
mask_addr
, 
Êags
);

184 
	`¥ötf
("%-15s %-15s %-15s %-5s %5d %-5d %6d %s\n",

185 
√t_addr
, 
g©e_addr
, 
mask_addr
, 
Êags
,

186 
mss
, 
wödow
, 
úâ
, 
iÁ˚
);

188 i‡(
ext
 >= 3) {

189 #i‡
HAVE_RTF_REJECT


190 i‡(
iÊags
 & 
RTF_REJECT
)

191 
	`¥ötf
("%-15s - %-15s %-5s %-6d - %7d - - - -\n",

192 
√t_addr
, 
mask_addr
, 
Êags
, 
mëric
, 
u£
);

195 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-3d %6d %-6.6s %-5d %-6d %d\n",

196 
√t_addr
, 
g©e_addr
, 
mask_addr
, 
Êags
,

197 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
, 
mss
, 
wödow
, 
úâ
);

201 
	`‰ì
(
fmt
);

202 (Ë
	`f˛o£
(
Â
);

204 
	}
}

206 
	$Ωröt_ˇche
(
ext
, 
numîic
)

208 
buff
[1024], 
iÁ˚
[16], 
Êags
[64];

209 
g©e_addr
[128], 
de°_addr
[128], 
•ecd°
[128];

210 
§c_addr
[128];

211 
sockaddr
 
¢ë
;

212 
iÊags
;

213 
num
, 
f‹m©
, 
mëric
, 
ªf˙t
, 
u£
, 
mss
, 
wödow
, 
úâ
, 
hh
, 
hhªf
, 
hhu±od
, 
¨p
, 
tos
;

214 *
fmt
 = 
NULL
;

216 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_RTCACHE
, "r");

218 i‡(!
Â
) {

219 
	`≥º‹
(
_PATH_PROCNET_RTCACHE
);

220 
	`¥ötf
(
	`_
("INET (IPv4)Çot configured inÅhis system.\n"));

235 
f‹m©
 = 
	`¥oc_guess_fmt
(
_PATH_PROCNET_RTCACHE
, 
Â
, "IRTT",1,"TOS",2,"HHRef",4,"HHU±od",8,"S≥cD°",16,"HH",32,"ARP",64,
NULL
);

237 
	`¥ötf
(
	`_
("Kernel IPÑouting cache\n"));

239 
f‹m©
) {

241 
	`≥º‹
(
_PATH_PROCNET_RTCACHE
);

242 
	`exô
(-1);

245 
f‹m©
 = 2;

248 
f‹m©
 = 1;

251 
	`¥ötf
("ERROR:Öroc_guess_fmt(%s,...Ñëu∫ed: %d\n",
_PATH_PROCNET_RTCACHE
, 
f‹m©
);

255 
	`ªwöd
(
Â
);

257 i‡(
ext
 == 1)

258 
	`¥ötf
(
	`_
("Source Destination Gateway "

260 i‡(
ext
 == 2)

261 
	`¥ötf
(
	`_
("Source Destination Gateway "

264 i‡(
f‹m©
 == 1) {

265 i‡(
ext
 >= 3)

266 
	`¥ötf
(
	`_
("Source Destination Gateway "

270 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_RTCACHE
, 0, 
Â
,

284 
NULL
);

288 i‡(
f‹m©
 == 2) {

289 i‡(
ext
 >= 3)

290 
	`¥ötf
(
	`_
("Source Destination Gateway "

293 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_RTCACHE
, 0, 
Â
,

309 
NULL
);

314 
úâ
 = 0;

315 
wödow
 = 0;

316 
mss
 = 0;

317 
hh
 = 0; 
hhªf
 = 0; 
hhu±od
 = 0;

318 
¨p
 = 0; 
tos
 = 0;

319 
	`fgës
(
buff
, 1023, 
Â
)) {

320 i‡(
f‹m©
 == 1) {

321 
num
 = 
	`ssˇnf
(
buff
, 
fmt
,

322 
iÁ˚
, 
de°_addr
, 
g©e_addr
,

323 &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
, 
§c_addr
,

324 &
mss
, &
wödow
, &
úâ
, &
hh
, &
¨p
);

325 i‡(
num
 < 12)

328 i‡(
f‹m©
 == 2) {

329 
num
 = 
	`ssˇnf
(
buff
, 
fmt
,

330 
iÁ˚
, 
de°_addr
, 
g©e_addr
,

331 &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
, 
§c_addr
,

332 &
mss
, &
wödow
, &
úâ
, &
tos
, &
hhªf
, &
hhu±od
, &
•ecd°
);

333 i‡(
num
 < 12)

339 (Ë
öë_a·y≥
.
	`öput
(1, 
de°_addr
, &
¢ë
);

340 
	`°r˝y
(
de°_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

341 
de°_addr
[15] = '\0';

344 (Ë
öë_a·y≥
.
	`öput
(1, 
g©e_addr
, &
¢ë
);

345 
	`°r˝y
(
g©e_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

346 
g©e_addr
[15] = '\0';

349 (Ë
öë_a·y≥
.
	`öput
(1, 
§c_addr
, &
¢ë
);

350 
	`°r˝y
(
§c_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

351 
§c_addr
[15] = '\0';

354 (Ë
öë_a·y≥
.
	`öput
(1, 
•ecd°
, &
¢ë
);

355 
	`°r˝y
(
•ecd°
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

356 
•ecd°
[15] = '\0';

359 
Êags
[0] = '\0';

360 i‡(
f‹m©
 == 1) {

361 i‡(
iÊags
 & 
RTF_UP
)

362 
	`°rˇt
(
Êags
, "U");

363 i‡(
iÊags
 & 
RTF_HOST
)

364 
	`°rˇt
(
Êags
, "H");

366 i‡(
iÊags
 & 
RTF_GATEWAY
)

367 
	`°rˇt
(
Êags
, "G");

368 #i‡
HAVE_RTF_REJECT


369 i‡(
iÊags
 & 
RTF_REJECT
)

370 
	`°r˝y
(
Êags
, "!");

372 i‡(
iÊags
 & 
RTF_REINSTATE
)

373 
	`°rˇt
(
Êags
, "R");

374 i‡(
iÊags
 & 
RTF_DYNAMIC
)

375 
	`°rˇt
(
Êags
, "D");

376 i‡(
iÊags
 & 
RTF_MODIFIED
)

377 
	`°rˇt
(
Êags
, "M");

380 i‡(
f‹m©
 == 2) {

381 i‡(
iÊags
 & 
RTCF_DEAD
)

382 
	`°rˇt
(
Êags
, "-");

383 i‡(
iÊags
 & 
RTCF_ONLINK
)

384 
	`°rˇt
(
Êags
, "o");

386 i‡(
iÊags
 & 
RTCF_NOTIFY
)

387 
	`°rˇt
(
Êags
, "n");

388 i‡(
iÊags
 & 
RTCF_DIRECTDST
)

389 
	`°rˇt
(
Êags
, "d");

390 i‡(
iÊags
 & 
RTCF_TPROXY
)

391 
	`°rˇt
(
Êags
, "t");

392 i‡(
iÊags
 & 
RTCF_FAST
)

393 
	`°rˇt
(
Êags
, "f");

394 i‡(
iÊags
 & 
RTCF_MASQ
)

395 
	`°rˇt
(
Êags
, "q");

396 i‡(
iÊags
 & 
RTCF_SNAT
)

397 
	`°rˇt
(
Êags
, "Ns");

398 i‡(
iÊags
 & 
RTCF_DOREDIRECT
)

399 
	`°rˇt
(
Êags
, "r");

400 i‡(
iÊags
 & 
RTCF_DIRECTSRC
)

401 
	`°rˇt
(
Êags
, "i");

402 i‡(
iÊags
 & 
RTCF_DNAT
)

403 
	`°rˇt
(
Êags
, "Nd");

404 i‡(
iÊags
 & 
RTCF_BROADCAST
)

405 
	`°rˇt
(
Êags
, "b");

406 i‡(
iÊags
 & 
RTCF_MULTICAST
)

407 
	`°rˇt
(
Êags
, "m");

408 i‡(
iÊags
 & 
RTCF_REJECT
)

409 
	`°rˇt
(
Êags
, "#");

410 i‡(
iÊags
 & 
RTCF_LOCAL
)

411 
	`°rˇt
(
Êags
, "l");

413 i‡(
ext
 == 1) {

414 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-2d %7d %s\n",

415 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

416 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

418 i‡(
ext
 == 2) {

419 
	`¥ötf
("%-15s %-15s %-15s %-5s %5d %-5d %6d %s\n",

420 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

421 
mss
, 
wödow
, 
úâ
, 
iÁ˚
);

423 i‡(
f‹m©
 == 1) {

424 i‡(
ext
 >= 3) {

425 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-3d %6d %-6.6s %-5d %-6d %-5d %-3d %d\n",

426 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

427 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
, 
mss
, 
wödow
, 
úâ
, 
hh
, 
¨p
);

430 i‡(
f‹m©
 == 2) {

431 i‡(
ext
 >= 3) {

432 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-3d %6d %-6.6s %-5d %-6d %-5d %-3d %-3d %-3d %15s\n",

433 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

434 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
, 
mss
, 
wödow
, 
úâ
, 
tos
, 
hhªf
, 
hhu±od
, 
•ecd°
);

439 
	`‰ì
(
fmt
);

440 (Ë
	`f˛o£
(
Â
);

442 
	}
}

444 
	$INET_Ωröt
(
›ti⁄s
)

446 
ext
 = 
›ti⁄s
 & 
FLAG_EXT
;

447 
numîic
 = 
›ti⁄s
 & (
FLAG_NUM_HOST
 | 
FLAG_SYM
);

448 
rc
 = 
E_INTERN
;

450 i‡(
›ti⁄s
 & 
FLAG_FIB
)

451 i‡((
rc
 = 
	`Ωröt_fib
(
ext
, 
numîic
)))

452  (
rc
);

453 i‡(
›ti⁄s
 & 
FLAG_CACHE
)

454 
rc
 = 
	`Ωröt_ˇche
(
ext
, 
numîic
);

456  (
rc
);

457 
	}
}

	@net-tools-1.60/lib/inet_sr.c

8 
	~"c⁄fig.h
"

10 #i‡
HAVE_AFINET


11 
	~<asm/ty≥s.h
>

12 
	~<sys/∑øm.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<¨∑/öë.h
>

17 
	~<¨∑/«me£r.h
>

18 
	~<√t/rouã.h
>

19 
	~<sys/io˘l.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<√tdb.h
>

23 
	~<ªsﬁv.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°dio.h
>

27 
	~<uni°d.h
>

28 
	~"vîsi⁄.h
"

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"√t-„©uªs.h
"

33 
	~"utû.h
"

35 #i‡
HAVE_NEW_ADDRT


36 
	#mask_ö_addr
(
x
Ë(((
sockaddr_ö
 *)&((x).
π_gímask
))->
sö_addr
.
s_addr
)

	)

37 
	#fuŒ_mask
(
x
Ë(x)

	)

39 
	#mask_ö_addr
(
x
Ë((x).
π_gímask
)

	)

40 
	#fuŒ_mask
(
x
Ë(((
sockaddr_ö
 *)&(x))->
sö_addr
.
s_addr
)

	)

43 
a·y≥
 
öë_a·y≥
;

45 
	gskfd
 = -1;

48 
	$ußge
()

50 
	`Ârötf
(
°dîr
, 
	`_
("Usage: inet_route [-vF] del {-host|-net} Target[/prefix] [gw Gw] [metric M] [[dev] If]\n"));

51 
	`Ârötf
(
°dîr
, 
	`_
(" inet_route [-vF]ádd {-host|-net} Target[/prefix] [gw Gw] [metric M]\n"));

52 
	`Ârötf
(
°dîr
, 
	`_
(" [netmask N] [mss Mss] [window W] [irtt I]\n"));

53 
	`Ârötf
(
°dîr
, 
	`_
(" [mod] [dyn] [reinstate] [[dev] If]\n"));

54 
	`Ârötf
(
°dîr
, 
	`_
(" inet_route [-vF]ádd {-host|-net} Target[/prefix] [metric M]Ñeject\n"));

55 
	`Ârötf
(
°dîr
, 
	`_
(" inet_route [-FC] flush NOT supported\n"));

56  (
E_USAGE
);

57 
	}
}

59 
	$INET_£åouã
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

61 
πíåy
 
π
;

62 
èrgë
[128], 
g©eway
[128] = "NONE", 
√tmask
[128] = "default";

63 
xÊag
, 
i¢ë
;

65 
xÊag
 = 0;

67 i‡(!
	`°rcmp
(*
¨gs
, "#net")) {

68 
xÊag
 = 1;

69 
¨gs
++;

70 } i‡(!
	`°rcmp
(*
¨gs
, "#host")) {

71 
xÊag
 = 2;

72 
¨gs
++;

74 i‡(*
¨gs
 =
NULL
)

75  (
	`ußge
());

77 
	`ß„_°∫˝y
(
èrgë
, *
¨gs
++, (Åarget));

80 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

85 
sockaddr_ö
 
m
;

86 
sockaddr
 
d
;

87 } 
mask
;

88 
n
;

90 
n
 = 
öë_a·y≥
.
	`gëmask
(
èrgë
, &
mask
.
d
, 
√tmask
);

91 i‡(
n
 < 0)

92  
	`ußge
();

93 i‡(
n
)

94 
π
.
π_gímask
 = 
	`fuŒ_mask
(
mask
.
d
);

98 i‡((
i¢ë
 = 
öë_a·y≥
.
	`öput
((
xÊag
!=2? 0: 256), 
èrgë
, &
π
.
π_d°
)) < 0) {

99 
öë_a·y≥
.
	`hîr‹
(
èrgë
);

102 
xÊag
) {

104 
i¢ë
 = 1; ;

106 
i¢ë
 = 0; ;

111 
π
.
π_Êags
 = (
RTF_UP
 | 
RTF_HOST
);

112 i‡(
i¢ë
)

113 
π
.
π_Êags
 &~
RTF_HOST
;

115 *
¨gs
) {

116 i‡(!
	`°rcmp
(*
¨gs
, "metric")) {

117 
mëric
;

119 
¨gs
++;

120 i‡(!*
¨gs
 || !
	`isdigô
(**args))

121  (
	`ußge
());

122 
mëric
 = 
	`©oi
(*
¨gs
);

123 #i‡
HAVE_NEW_ADDRT


124 
π
.
π_mëric
 = 
mëric
 + 1;

126 
	`ENOSUPP
("inet_setroute", "NEW_ADDRT (metric)");

128 
¨gs
++;

131 i‡(!
	`°rcmp
(*
¨gs
, "netmask")) {

132 
sockaddr
 
mask
;

134 
¨gs
++;

135 i‡(!*
¨gs
 || 
	`mask_ö_addr
(
π
))

136  (
	`ußge
());

137 
	`ß„_°∫˝y
(
√tmask
, *
¨gs
, (Çetmask));

138 i‡((
i¢ë
 = 
öë_a·y≥
.
	`öput
(0, 
√tmask
, &
mask
)) < 0) {

139 
öë_a·y≥
.
	`hîr‹
(
√tmask
);

140  (
E_LOOKUP
);

142 
π
.
π_gímask
 = 
	`fuŒ_mask
(
mask
);

143 
¨gs
++;

146 i‡(!
	`°rcmp
(*
¨gs
, "gw") || !strcmp(*args, "gateway")) {

147 
¨gs
++;

148 i‡(!*
¨gs
)

149  (
	`ußge
());

150 i‡(
π
.
π_Êags
 & 
RTF_GATEWAY
)

151  (
	`ußge
());

152 
	`ß„_°∫˝y
(
g©eway
, *
¨gs
, ( gateway));

153 i‡((
i¢ë
 = 
öë_a·y≥
.
	`öput
(256, 
g©eway
, &
π
.
π_g©eway
)) < 0) {

154 
öë_a·y≥
.
	`hîr‹
(
g©eway
);

155  (
E_LOOKUP
);

157 i‡(
i¢ë
) {

158 
	`Ârötf
(
°dîr
, 
	`_
("route: %s: cannot useá NETWORKás gateway!\n"),

159 
g©eway
);

160  (
E_OPTERR
);

162 
π
.
π_Êags
 |
RTF_GATEWAY
;

163 
¨gs
++;

166 i‡(!
	`°rcmp
(*
¨gs
, "mss") || !strcmp(*args,"mtu")) {

167 
¨gs
++;

168 
π
.
π_Êags
 |
RTF_MSS
;

169 i‡(!*
¨gs
)

170  (
	`ußge
());

171 
π
.
π_mss
 = 
	`©oi
(*
¨gs
);

172 
¨gs
++;

173 i‡(
π
.
π_mss
 < 64 ||Ñt.rt_mss > 65536) {

174 
	`Ârötf
(
°dîr
, 
	`_
("route: Invalid MSS/MTU.\n"));

175  (
E_OPTERR
);

179 i‡(!
	`°rcmp
(*
¨gs
, "window")) {

180 
¨gs
++;

181 i‡(!*
¨gs
)

182  (
	`ußge
());

183 
π
.
π_Êags
 |
RTF_WINDOW
;

184 
π
.
π_wödow
 = 
	`©oi
(*
¨gs
);

185 
¨gs
++;

186 i‡(
π
.
π_wödow
 < 128) {

187 
	`Ârötf
(
°dîr
, 
	`_
("route: Invalid window.\n"));

188  (
E_OPTERR
);

192 i‡(!
	`°rcmp
(*
¨gs
, "irtt")) {

193 
¨gs
++;

194 i‡(!*
¨gs
)

195  (
	`ußge
());

196 
¨gs
++;

197 #i‡
HAVE_RTF_IRTT


198 
π
.
π_Êags
 |
RTF_IRTT
;

199 
π
.
π_úâ
 = 
	`©oi
(*(
¨gs
 - 1));

200 
π
.
π_úâ
 *(
HZ
 / 100);

202 i‡(
π
.
π_úâ
 < 1 ||Ñt.π_úâ > (120 * 
HZ
)) {

203 
	`Ârötf
(
°dîr
, 
	`_
("route: Invalid initialÑtt.\n"));

204  (
E_OPTERR
);

208 
	`ENOSUPP
("inet_setroute", "RTF_IRTT");

212 i‡(!
	`°rcmp
(*
¨gs
, "reject")) {

213 
¨gs
++;

214 #i‡
HAVE_RTF_REJECT


215 
π
.
π_Êags
 |
RTF_REJECT
;

217 
	`ENOSUPP
("inet_setroute", "RTF_REJECT");

221 i‡(!
	`°rcmp
(*
¨gs
, "mod")) {

222 
¨gs
++;

223 
π
.
π_Êags
 |
RTF_MODIFIED
;

226 i‡(!
	`°rcmp
(*
¨gs
, "dyn")) {

227 
¨gs
++;

228 
π
.
π_Êags
 |
RTF_DYNAMIC
;

231 i‡(!
	`°rcmp
(*
¨gs
, "reinstate")) {

232 
¨gs
++;

233 
π
.
π_Êags
 |
RTF_REINSTATE
;

236 i‡(!
	`°rcmp
(*
¨gs
, "device") || !strcmp(*args, "dev")) {

237 
¨gs
++;

238 i‡(
π
.
π_dev
 || *
¨gs
 =
NULL
)

239  
	`ußge
();

240 
π
.
π_dev
 = *
¨gs
++;

244 i‡(!
π
.
π_dev
) {

245 
π
.
π_dev
 = *
¨gs
++;

246 i‡(*
¨gs
)

247  
	`ußge
();

249  
	`ußge
();

252 #i‡
HAVE_RTF_REJECT


253 i‡((
π
.
π_Êags
 & 
RTF_REJECT
Ë&& !π.
π_dev
)

254 
π
.
π_dev
 = "lo";

258 i‡(
	`mask_ö_addr
(
π
)) {

259 
__u32
 
mask
 = ~
	`¡ohl
(
	`mask_ö_addr
(
π
));

260 i‡((
π
.
π_Êags
 & 
RTF_HOST
Ë&& 
mask
 != 0xffffffff) {

261 
	`Ârötf
(
°dîr
, 
	`_
("rouã:Çëmask %.8x d€¢'àmakê£n£ wôh ho°Ñouã\n"), 
mask
);

262  (
E_OPTERR
);

264 i‡(
mask
 & (mask + 1)) {

265 
	`Ârötf
(
°dîr
, 
	`_
("rouã: bogu†√tmask %s\n"), 
√tmask
);

266  (
E_OPTERR
);

268 
mask
 = ((
sockaddr_ö
 *Ë&
π
.
π_d°
)->
sö_addr
.
s_addr
;

269 i‡(
mask
 & ~
	`mask_ö_addr
(
π
)) {

270 
	`Ârötf
(
°dîr
, 
	`_
("route:Çetmask doesn't matchÑouteáddress\n"));

271  (
E_OPTERR
);

275 i‡((
a˘i⁄
 =
RTACTION_ADD
Ë&& 
π
.
π_Êags
 & 
RTF_HOST
)

276 
	`mask_ö_addr
(
π
) = 0xffffffff;

279 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

280 
	`≥º‹
("socket");

281  (
E_SOCK
);

284 i‡(
a˘i⁄
 =
RTACTION_DEL
) {

285 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

286 
	`≥º‹
("SIOCDELRT");

287 
	`˛o£
(
skfd
);

288  (
E_SOCK
);

291 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

292 
	`≥º‹
("SIOCADDRT");

293 
	`˛o£
(
skfd
);

294  (
E_SOCK
);

299 (Ë
	`˛o£
(
skfd
);

301 
	}
}

303 
	$INET_röput
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

305 i‡(
a˘i⁄
 =
RTACTION_FLUSH
) {

306 
	`Ârötf
(
°dîr
, 
	`_
("Flushing `inet'ÑoutingÅableÇot supported\n"));

307  (
	`ußge
());

309 i‡(
›ti⁄s
 & 
FLAG_CACHE
) {

310 
	`Ârötf
(
°dîr
, 
	`_
("Modifying `inet'Ñouting cacheÇot supported\n"));

311  (
	`ußge
());

313 i‡((*
¨gs
 =
NULL
Ë|| (
a˘i⁄
 =
RTACTION_HELP
))

314  (
	`ußge
());

316  (
	`INET_£åouã
(
a˘i⁄
, 
›ti⁄s
, 
¨gs
));

317 
	}
}

	@net-tools-1.60/lib/interface.c

13 
	~"c⁄fig.h
"

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<sys/io˘l.h
>

18 
	~<√töë/ö.h
>

19 
	~<√t/if.h
>

20 
	~<°dio.h
>

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<˘y≥.h
>

27 #i‡
HAVE_AFIPX


28 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

29 
	~<√tùx/ùx.h
>

31 
	~"ùx.h
"

35 #i‡
HAVE_AFECONET


36 
	~<√ãc⁄ë/ec.h
>

39 #ifde‡
HAVE_HWSLIP


40 
	~<löux/if_¶ù.h
>

41 
	~<√t/if_¨p.h
>

44 
	~"√t-suµ‹t.h
"

45 
	~"∑th«mes.h
"

46 
	~"vîsi⁄.h
"

47 
	~"¥oc.h
"

49 
	~"öãrÁ˚.h
"

50 
	~"sockës.h
"

51 
	~"utû.h
"

52 
	~"öé.h
"

54 #ifde‡
IFF_PORTSEL


55 c⁄° *
	gif_p‹t_ãxt
[][4] =

58 {"unknown", 
NULL
, NULL, NULL},

59 {"10ba£2", "bnc", "cﬂx", 
NULL
},

60 {"10ba£T", "uç", "çe", 
NULL
},

61 {"AUI", "thick", "db15", 
NULL
},

62 {"100ba£T", 
NULL
, NULL, NULL},

63 {"100ba£TX", 
NULL
, NULL, NULL},

64 {"100ba£FX", 
NULL
, NULL, NULL},

65 {
NULL
, NULL, NULL, NULL},

69 
	#IPV6_ADDR_ANY
 0x0000U

	)

71 
	#IPV6_ADDR_UNICAST
 0x0001U

	)

72 
	#IPV6_ADDR_MULTICAST
 0x0002U

	)

73 
	#IPV6_ADDR_ANYCAST
 0x0004U

	)

75 
	#IPV6_ADDR_LOOPBACK
 0x0010U

	)

76 
	#IPV6_ADDR_LINKLOCAL
 0x0020U

	)

77 
	#IPV6_ADDR_SITELOCAL
 0x0040U

	)

79 
	#IPV6_ADDR_COMPATv4
 0x0080U

	)

81 
	#IPV6_ADDR_SCOPE_MASK
 0x00f0U

	)

83 
	#IPV6_ADDR_MAPPED
 0x1000U

	)

84 
	#IPV6_ADDR_RESERVED
 0x2000U

	)

86 
	g¥o˙ëdev_v¢
 = 1;

88 
	gi„_sh‹t
;

90 
öãrÁ˚
 *
	göt_li°
, *
	göt_œ°
;

92 
if_ªadli°_¥oc
(*);

94 
öãrÁ˚
 *
	$add_öãrÁ˚
(*
«me
)

96 
öãrÁ˚
 *
i„
, **
√xç
, *
√w
;

98 
i„
 = 
öt_œ°
; i„; i„ = i„->
¥ev
) {

99 
n
 = 
	`n°rcmp
(
i„
->
«me
,Çame);

100 i‡(
n
 == 0)

101  
i„
;

102 i‡(
n
 < 0)

105 
	`√w
(
√w
);

106 
	`ß„_°∫˝y
(
√w
->
«me
,Çame, 
IFNAMSIZ
);

107 
√xç
 = 
i„
 ? &i„->
√xt
 : &
öt_li°
;

108 
√w
->
¥ev
 = 
i„
;

109 
√w
->
√xt
 = *
√xç
;

110 i‡(
√w
->
√xt
)

111 
√w
->
√xt
->
¥ev
 =Çew;

113 
öt_œ°
 = 
√w
;

114 *
√xç
 = 
√w
;

115  
√w
;

116 
	}
}

118 
öãrÁ˚
 *
	$lookup_öãrÁ˚
(*
«me
)

120 
öãrÁ˚
 *
i„
 = 
NULL
;

122 i‡(
	`if_ªadli°_¥oc
(
«me
) < 0)

123  
NULL
;

124 
i„
 = 
	`add_öãrÁ˚
(
«me
);

125  
i„
;

126 
	}
}

128 
f‹_Æl_öãrÁ˚s
((*
doô
Ë(
öãrÁ˚
 *, *), *
cookõ
)

130 
öãrÁ˚
 *
i„
;

132 i‡(!
öt_li°
 && (
	`if_ªadli°
() < 0))

134 
i„
 = 
öt_li°
; i„; i„ = i„->
√xt
) {

135 
îr
 = 
	`doô
(
i„
, 
cookõ
);

136 i‡(
îr
)

137  
îr
;

140 
	}
}

142 
	$‰ì_öãrÁ˚_li°
()

144 
öãrÁ˚
 *
i„
;

145 (
i„
 = 
öt_li°
Ë!
NULL
) {

146 
öt_li°
 = 
i„
->
√xt
;

147 
	`‰ì
(
i„
);

150 
	}
}

152 
	$if_ªadc⁄f
()

154 
numªqs
 = 30;

155 
ifc⁄f
 
ifc
;

156 
i‰eq
 *
i‰
;

157 
n
, 
îr
 = -1;

158 
skfd
;

162 
skfd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

163 i‡(
skfd
 < 0) {

164 
	`Ârötf
(
°dîr
, 
	`_
("warning:Ço inet socketávailable: %s\n"),

165 
	`°ªº‹
(
î∫o
));

167 
skfd
 = 
	`sockës_›í
(0);

168 i‡(
skfd
 < 0)

172 
ifc
.
ifc_buf
 = 
NULL
;

174 
ifc
.
ifc_Àn
 = (
i‰eq
Ë* 
numªqs
;

175 
ifc
.
ifc_buf
 = 
	`xªÆloc
(ifc.ifc_buf, ifc.
ifc_Àn
);

177 i‡(
	`io˘l
(
skfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

178 
	`≥º‹
("SIOCGIFCONF");

179 
out
;

181 i‡(
ifc
.
ifc_Àn
 =(
i‰eq
Ë* 
numªqs
) {

183 
numªqs
 += 10;

189 
i‰
 = 
ifc
.
ifc_ªq
;

190 
n
 = 0;Ç < 
ifc
.
ifc_Àn
;Ç +(
i‰eq
)) {

191 
	`add_öãrÁ˚
(
i‰
->
i‰_«me
);

192 
i‰
++;

194 
îr
 = 0;

196 
out
:

197 
	`‰ì
(
ifc
.
ifc_buf
);

198  
îr
;

199 
	}
}

201 *
	$gë_«me
(*
«me
, *
p
)

203 
	`is•a˚
(*
p
))

204 
p
++;

205 *
p
) {

206 i‡(
	`is•a˚
(*
p
))

208 i‡(*
p
 == ':') {

209 *
dŸ
 = 
p
, *
dŸ«me
 = 
«me
;

210 *
«me
++ = *
p
++;

211 
	`isdigô
(*
p
))

212 *
«me
++ = *
p
++;

213 i‡(*
p
 != ':') {

214 
p
 = 
dŸ
;

215 
«me
 = 
dŸ«me
;

217 i‡(*
p
 == '\0')

218  
NULL
;

219 
p
++;

222 *
«me
++ = *
p
++;

224 *
«me
++ = '\0';

225  
p
;

226 
	}
}

228 
	$¥o˙ëdev_vîsi⁄
(*
buf
)

230 i‡(
	`°r°r
(
buf
, "compressed"))

232 i‡(
	`°r°r
(
buf
, "bytes"))

235 
	}
}

237 
	$gë_dev_fõlds
(*
bp
, 
öãrÁ˚
 *
i„
)

239 
¥o˙ëdev_v¢
) {

241 
	`ssˇnf
(
bp
,

243 &
i„
->
°©s
.
rx_byãs
,

244 &
i„
->
°©s
.
rx_∑ckës
,

245 &
i„
->
°©s
.
rx_îr‹s
,

246 &
i„
->
°©s
.
rx_dr›≥d
,

247 &
i„
->
°©s
.
rx_fifo_îr‹s
,

248 &
i„
->
°©s
.
rx_‰ame_îr‹s
,

249 &
i„
->
°©s
.
rx_com¥es£d
,

250 &
i„
->
°©s
.
rx_mu…iˇ°
,

252 &
i„
->
°©s
.
tx_byãs
,

253 &
i„
->
°©s
.
tx_∑ckës
,

254 &
i„
->
°©s
.
tx_îr‹s
,

255 &
i„
->
°©s
.
tx_dr›≥d
,

256 &
i„
->
°©s
.
tx_fifo_îr‹s
,

257 &
i„
->
°©s
.
cﬁlisi⁄s
,

258 &
i„
->
°©s
.
tx_ˇºõr_îr‹s
,

259 &
i„
->
°©s
.
tx_com¥es£d
);

262 
	`ssˇnf
(
bp
, "%llu %llu %lu %lu %lu %lu %llu %llu %lu %lu %lu %lu %lu",

263 &
i„
->
°©s
.
rx_byãs
,

264 &
i„
->
°©s
.
rx_∑ckës
,

265 &
i„
->
°©s
.
rx_îr‹s
,

266 &
i„
->
°©s
.
rx_dr›≥d
,

267 &
i„
->
°©s
.
rx_fifo_îr‹s
,

268 &
i„
->
°©s
.
rx_‰ame_îr‹s
,

270 &
i„
->
°©s
.
tx_byãs
,

271 &
i„
->
°©s
.
tx_∑ckës
,

272 &
i„
->
°©s
.
tx_îr‹s
,

273 &
i„
->
°©s
.
tx_dr›≥d
,

274 &
i„
->
°©s
.
tx_fifo_îr‹s
,

275 &
i„
->
°©s
.
cﬁlisi⁄s
,

276 &
i„
->
°©s
.
tx_ˇºõr_îr‹s
);

277 
i„
->
°©s
.
rx_mu…iˇ°
 = 0;

280 
	`ssˇnf
(
bp
, "%llu %lu %lu %lu %lu %llu %lu %lu %lu %lu %lu",

281 &
i„
->
°©s
.
rx_∑ckës
,

282 &
i„
->
°©s
.
rx_îr‹s
,

283 &
i„
->
°©s
.
rx_dr›≥d
,

284 &
i„
->
°©s
.
rx_fifo_îr‹s
,

285 &
i„
->
°©s
.
rx_‰ame_îr‹s
,

287 &
i„
->
°©s
.
tx_∑ckës
,

288 &
i„
->
°©s
.
tx_îr‹s
,

289 &
i„
->
°©s
.
tx_dr›≥d
,

290 &
i„
->
°©s
.
tx_fifo_îr‹s
,

291 &
i„
->
°©s
.
cﬁlisi⁄s
,

292 &
i„
->
°©s
.
tx_ˇºõr_îr‹s
);

293 
i„
->
°©s
.
rx_byãs
 = 0;

294 
i„
->
°©s
.
tx_byãs
 = 0;

295 
i„
->
°©s
.
rx_mu…iˇ°
 = 0;

299 
	}
}

301 
	$if_ªadli°_¥oc
(*
èrgë
)

303 
¥oc_ªad
;

304 
FILE
 *
fh
;

305 
buf
[512];

306 
öãrÁ˚
 *
i„
;

307 
îr
;

309 i‡(
¥oc_ªad
)

311 i‡(!
èrgë
)

312 
¥oc_ªad
 = 1;

314 
fh
 = 
	`f›í
(
_PATH_PROCNET_DEV
, "r");

315 i‡(!
fh
) {

316 
	`Ârötf
(
°dîr
, 
	`_
("Warning: cannot open %s (%s). Limited output.\n"),

317 
_PATH_PROCNET_DEV
, 
	`°ªº‹
(
î∫o
));

318  
	`if_ªadc⁄f
();

320 
	`fgës
(
buf
,  buf, 
fh
);

321 
	`fgës
(
buf
,  buf, 
fh
);

324 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_DEV
, 1, 
fh
,

342 
NULL
);

343 i‡(!
fmt
)

346 
¥o˙ëdev_v¢
 = 
	`¥o˙ëdev_vîsi⁄
(
buf
);

349 
îr
 = 0;

350 
	`fgës
(
buf
,  buf, 
fh
)) {

351 *
s
, 
«me
[
IFNAMSIZ
];

352 
s
 = 
	`gë_«me
(
«me
, 
buf
);

353 
i„
 = 
	`add_öãrÁ˚
(
«me
);

354 
	`gë_dev_fõlds
(
s
, 
i„
);

355 
i„
->
°©i°ics_vÆid
 = 1;

356 i‡(
èrgë
 && !
	`°rcmp
—¨gë,
«me
))

359 i‡(
	`„º‹
(
fh
)) {

360 
	`≥º‹
(
_PATH_PROCNET_DEV
);

361 
îr
 = -1;

362 
¥oc_ªad
 = 0;

366 
	`‰ì
(
fmt
);

368 
	`f˛o£
(
fh
);

369  
îr
;

370 
	}
}

372 
	$if_ªadli°
()

374 
îr
 = 
	`if_ªadli°_¥oc
(
NULL
);

375 i‡(!
îr
)

376 
îr
 = 
	`if_ªadc⁄f
();

377  
îr
;

378 
	}
}

382 #i‡
HAVE_AFIPX


383 
	$ùx_gëaddr
(
sock
, 
·
, 
i‰eq
 *
i‰
)

385 ((
sockaddr_ùx
 *Ë&
i‰
->
i‰_addr
)->
sùx_ty≥
 = 
·
;

386  
	`io˘l
(
sock
, 
SIOCGIFADDR
, 
i‰
);

387 
	}
}

391 
	$if_„tch
(
öãrÁ˚
 *
i„
)

393 
i‰eq
 
i‰
;

394 
fd
;

395 *
i‚ame
 = 
i„
->
«me
;

397 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

398 i‡(
	`io˘l
(
skfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0)

400 
i„
->
Êags
 = 
i‰
.
i‰_Êags
;

402 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

403 i‡(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

404 
	`mem£t
(
i„
->
hwaddr
, 0, 32);

406 
	`mem˝y
(
i„
->
hwaddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 8);

408 
i„
->
ty≥
 = 
i‰
.
i‰_hwaddr
.
ß_Ámûy
;

410 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

411 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMETRIC
, &
i‰
) < 0)

412 
i„
->
mëric
 = 0;

414 
i„
->
mëric
 = 
i‰
.
i‰_mëric
;

416 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

417 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMTU
, &
i‰
) < 0)

418 
i„
->
mtu
 = 0;

420 
i„
->
mtu
 = 
i‰
.
i‰_mtu
;

422 #ifde‡
HAVE_HWSLIP


423 i‡(
i„
->
ty≥
 =
ARPHRD_SLIP
 || i„->ty≥ =
ARPHRD_CSLIP
 ||

424 
i„
->
ty≥
 =
ARPHRD_SLIP6
 || i„->ty≥ =
ARPHRD_CSLIP6
 ||

425 
i„
->
ty≥
 =
ARPHRD_ADAPT
) {

426 #ifde‡
SIOCGOUTFILL


427 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

428 i‡(
	`io˘l
(
skfd
, 
SIOCGOUTFILL
, &
i‰
) < 0)

429 
i„
->
outfûl
 = 0;

431 
i„
->
outfûl
 = (Ë
i‰
.
i‰_d©a
;

433 #ifde‡
SIOCGKEEPALIVE


434 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

435 i‡(
	`io˘l
(
skfd
, 
SIOCGKEEPALIVE
, &
i‰
) < 0)

436 
i„
->
kì∑live
 = 0;

438 
i„
->
kì∑live
 = (Ë
i‰
.
i‰_d©a
;

443 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

444 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0)

445 
	`mem£t
(&
i„
->
m≠
, 0, (
ifm≠
));

447 
	`mem˝y
(&
i„
->
m≠
, &
i‰
.
i‰_m≠
, (
ifm≠
));

449 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

450 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0)

451 
	`mem£t
(&
i„
->
m≠
, 0, (
ifm≠
));

453 
i„
->
m≠
 = 
i‰
.
i‰_m≠
;

455 #ifde‡
HAVE_TXQUEUELEN


456 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

457 i‡(
	`io˘l
(
skfd
, 
SIOCGIFTXQLEN
, &
i‰
) < 0)

458 
i„
->
tx_queue_Àn
 = -1;

460 
i„
->
tx_queue_Àn
 = 
i‰
.
i‰_qÀn
;

462 
i„
->
tx_queue_Àn
 = -1;

465 #i‡
HAVE_AFINET


467 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

468 i‡(
fd
 >= 0) {

469 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

470 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

471 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

472 
i„
->
has_ù
 = 1;

473 
i„
->
addr
 = 
i‰
.
i‰_addr
;

474 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

475 i‡(
	`io˘l
(
fd
, 
SIOCGIFDSTADDR
, &
i‰
) < 0)

476 
	`mem£t
(&
i„
->
d°addr
, 0, (
sockaddr
));

478 
i„
->
d°addr
 = 
i‰
.
i‰_d°addr
;

480 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

481 i‡(
	`io˘l
(
fd
, 
SIOCGIFBRDADDR
, &
i‰
) < 0)

482 
	`mem£t
(&
i„
->
brﬂdaddr
, 0, (
sockaddr
));

484 
i„
->
brﬂdaddr
 = 
i‰
.
i‰_brﬂdaddr
;

486 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

487 i‡(
	`io˘l
(
fd
, 
SIOCGIFNETMASK
, &
i‰
) < 0)

488 
	`mem£t
(&
i„
->
√tmask
, 0, (
sockaddr
));

490 
i„
->
√tmask
 = 
i‰
.
i‰_√tmask
;

492 
	`mem£t
(&
i„
->
addr
, 0, (
sockaddr
));

496 #i‡
HAVE_AFATALK


498 
fd
 = 
	`gë_sockë_f‹_af
(
AF_APPLETALK
);

499 i‡(
fd
 >= 0) {

500 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

501 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

502 
i„
->
dd∑ddr
 = 
i‰
.
i‰_addr
;

503 
i„
->
has_ddp
 = 1;

508 #i‡
HAVE_AFIPX


510 
fd
 = 
	`gë_sockë_f‹_af
(
AF_IPX
);

511 i‡(
fd
 >= 0) {

512 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

513 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_ETHERII
, &
i‰
)) {

514 
i„
->
has_ùx_bb
 = 1;

515 
i„
->
ùxaddr_bb
 = 
i‰
.
i‰_addr
;

517 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

518 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_SNAP
, &
i‰
)) {

519 
i„
->
has_ùx_¢
 = 1;

520 
i„
->
ùxaddr_¢
 = 
i‰
.
i‰_addr
;

522 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

523 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_8023
, &
i‰
)) {

524 
i„
->
has_ùx_e3
 = 1;

525 
i„
->
ùxaddr_e3
 = 
i‰
.
i‰_addr
;

527 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

528 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_8022
, &
i‰
)) {

529 
i„
->
has_ùx_e2
 = 1;

530 
i„
->
ùxaddr_e2
 = 
i‰
.
i‰_addr
;

535 #i‡
HAVE_AFECONET


537 
fd
 = 
	`gë_sockë_f‹_af
(
AF_ECONET
);

538 i‡(
fd
 >= 0) {

539 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

540 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

541 
i„
->
eˇddr
 = 
i‰
.
i‰_addr
;

542 
i„
->
has_ec⁄ë
 = 1;

548 
	}
}

550 
	$do_if_„tch
(
öãrÁ˚
 *
i„
)

552 i‡(
	`if_„tch
(
i„
) < 0) {

553 *
îrmsg
;

554 i‡(
î∫o
 =
ENODEV
) {

556 
îrmsg
 = 
	`_
("DeviceÇot found");

558 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

560 
	`Ârötf
(
°dîr
, 
	`_
("%s:Érror fetching interface information: %s\n"),

561 
i„
->
«me
, 
îrmsg
);

565 
	}
}

567 
	$do_if_¥öt
(
öãrÁ˚
 *
i„
, *
cookõ
)

569 *
›t_a
 = (*Ë
cookõ
;

570 
ªs
;

572 
ªs
 = 
	`do_if_„tch
(
i„
);

573 i‡(
ªs
 >= 0) {

574 i‡((
i„
->
Êags
 & 
IFF_UP
Ë|| *
›t_a
)

575 
	`i„_¥öt
(
i„
);

577  
ªs
;

578 
	}
}

580 
	$i„_¥öt_sh‹t
(
öãrÁ˚
 *
±r
)

582 
	`¥ötf
("%-5.5†", 
±r
->
«me
);

583 
	`¥ötf
("%5d %3d", 
±r
->
mtu
,Öå->
mëric
);

585 i‡(
±r
->
°©i°ics_vÆid
) {

586 
	`¥ötf
("%8llu %6lu %6lu %6lu",

587 
±r
->
°©s
.
rx_∑ckës
,Öå->°©s.
rx_îr‹s
,

588 
±r
->
°©s
.
rx_dr›≥d
,Öå->°©s.
rx_fifo_îr‹s
);

589 
	`¥ötf
("%8llu %6lu %6lu %6lu ",

590 
±r
->
°©s
.
tx_∑ckës
,Öå->°©s.
tx_îr‹s
,

591 
±r
->
°©s
.
tx_dr›≥d
,Öå->°©s.
tx_fifo_îr‹s
);

593 
	`¥ötf
("%-56s", 
	`_
(" -Ço statisticsávailable -"));

596 i‡(
±r
->
Êags
 == 0)

597 
	`¥ötf
(
	`_
("[NO FLAGS]"));

598 i‡(
±r
->
Êags
 & 
IFF_ALLMULTI
)

599 
	`¥ötf
("A");

600 i‡(
±r
->
Êags
 & 
IFF_BROADCAST
)

601 
	`¥ötf
("B");

602 i‡(
±r
->
Êags
 & 
IFF_DEBUG
)

603 
	`¥ötf
("D");

604 i‡(
±r
->
Êags
 & 
IFF_LOOPBACK
)

605 
	`¥ötf
("L");

606 i‡(
±r
->
Êags
 & 
IFF_MULTICAST
)

607 
	`¥ötf
("M");

608 #ifde‡
HAVE_DYNAMIC


609 i‡(
±r
->
Êags
 & 
IFF_DYNAMIC
)

610 
	`¥ötf
("d");

612 i‡(
±r
->
Êags
 & 
IFF_PROMISC
)

613 
	`¥ötf
("P");

614 i‡(
±r
->
Êags
 & 
IFF_NOTRAILERS
)

615 
	`¥ötf
("N");

616 i‡(
±r
->
Êags
 & 
IFF_NOARP
)

617 
	`¥ötf
("O");

618 i‡(
±r
->
Êags
 & 
IFF_POINTOPOINT
)

619 
	`¥ötf
("P");

620 i‡(
±r
->
Êags
 & 
IFF_SLAVE
)

621 
	`¥ötf
("s");

622 i‡(
±r
->
Êags
 & 
IFF_MASTER
)

623 
	`¥ötf
("m");

624 i‡(
±r
->
Êags
 & 
IFF_RUNNING
)

625 
	`¥ötf
("R");

626 i‡(
±r
->
Êags
 & 
IFF_UP
)

627 
	`¥ötf
("U");

629 
	`¥ötf
("\n");

630 
	}
}

632 
	$i„_¥öt_l⁄g
(
öãrÁ˚
 *
±r
)

634 
a·y≥
 *
≠
;

635 
hwty≥
 *
hw
;

636 
hf
;

637 
ˇn_com¥ess
 = 0;

638 
rx
, 
tx
, 
sh‹t_rx
, 
sh‹t_tx
;

639 
Rext
[5]="b";

640 
Text
[5]="b";

642 #i‡
HAVE_AFIPX


643 
a·y≥
 *
ùxty≥
 = 
NULL
;

645 #i‡
HAVE_AFECONET


646 
a·y≥
 *
e˘y≥
 = 
NULL
;

648 #i‡
HAVE_AFATALK


649 
a·y≥
 *
dd±y≥
 = 
NULL
;

651 #i‡
HAVE_AFINET6


652 
FILE
 *
f
;

653 
addr6
[40], 
dev«me
[20];

654 
sockaddr_ö6
 
ßp
;

655 
∂í
, 
sc›e
, 
dad_°©us
, 
if_idx
;

656 
a·y≥
 
öë6_a·y≥
;

657 
addr6p
[8][5];

660 
≠
 = 
	`gë_a‚ty≥
(
±r
->
addr
.
ß_Ámûy
);

661 i‡(
≠
 =
NULL
)

662 
≠
 = 
	`gë_a‚ty≥
(0);

664 
hf
 = 
±r
->
ty≥
;

666 i‡(
hf
 =
ARPHRD_CSLIP
 || h‡=
ARPHRD_CSLIP6
)

667 
ˇn_com¥ess
 = 1;

669 
hw
 = 
	`gë_hw¡y≥
(
hf
);

670 i‡(
hw
 =
NULL
)

671 
hw
 = 
	`gë_hw¡y≥
(-1);

673 
	`¥ötf
(
	`_
("%-9.9†LökÉnˇp:%† "), 
±r
->
«me
, 
hw
->
tôÀ
);

676 i‡(
hw
->
¥öt
 !
NULL
 && (! (
	`hw_nuŒ_addªss
(hw, 
±r
->
hwaddr
) &&

677 
hw
->
suµªss_nuŒ_addr
)))

678 
	`¥ötf
(
	`_
("HWadd∏%† "), 
hw
->
	`¥öt
(
±r
->
hwaddr
));

679 #ifde‡
IFF_PORTSEL


680 i‡(
±r
->
Êags
 & 
IFF_PORTSEL
) {

681 
	`¥ötf
(
	`_
("Medü:%s"), 
if_p‹t_ãxt
[
±r
->
m≠
.
p‹t
][0]);

682 i‡(
±r
->
Êags
 & 
IFF_AUTOMEDIA
)

683 
	`¥ötf
(
	`_
("(auto)"));

686 
	`¥ötf
("\n");

688 #i‡
HAVE_AFINET


689 i‡(
±r
->
has_ù
) {

690 
	`¥ötf
(
	`_
(" %†addr:%†"), 
≠
->
«me
,

691 
≠
->
	`•röt
(&
±r
->
addr
, 1));

692 i‡(
±r
->
Êags
 & 
IFF_POINTOPOINT
) {

693 
	`¥ötf
(
	`_
(" P-t-P:%†"), 
≠
->
	`•röt
(&
±r
->
d°addr
, 1));

695 i‡(
±r
->
Êags
 & 
IFF_BROADCAST
) {

696 
	`¥ötf
(
	`_
(" Bˇ°:%†"), 
≠
->
	`•röt
(&
±r
->
brﬂdaddr
, 1));

698 
	`¥ötf
(
	`_
(" Mask:%s\n"), 
≠
->
	`•röt
(&
±r
->
√tmask
, 1));

702 #i‡
HAVE_AFINET6


705 i‡((
f
 = 
	`f›í
(
_PATH_PROCNET_IFINET6
, "r")Ë!
NULL
) {

706 
	`fsˇnf
(
f
, "%4s%4s%4s%4s%4s%4s%4s%4s %02x %02x %02x %02x %20s\n",

707 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

708 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7],

709 &
if_idx
, &
∂í
, &
sc›e
, &
dad_°©us
, 
dev«me
Ë!
EOF
) {

710 i‡(!
	`°rcmp
(
dev«me
, 
±r
->
«me
)) {

711 
	`•rötf
(
addr6
, "%s:%s:%s:%s:%s:%s:%s:%s",

712 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

713 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7]);

714 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ßp
);

715 
	`¥ötf
(
	`_
(" inet6áddr: %s/%d"),

716 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
ßp
, 1), 
∂í
);

717 
	`¥ötf
(
	`_
(" Scope:"));

718 
sc›e
) {

720 
	`¥ötf
(
	`_
("Global"));

722 
IPV6_ADDR_LINKLOCAL
:

723 
	`¥ötf
(
	`_
("Link"));

725 
IPV6_ADDR_SITELOCAL
:

726 
	`¥ötf
(
	`_
("Site"));

728 
IPV6_ADDR_COMPATv4
:

729 
	`¥ötf
(
	`_
("Compat"));

731 
IPV6_ADDR_LOOPBACK
:

732 
	`¥ötf
(
	`_
("Host"));

735 
	`¥ötf
(
	`_
("Unknown"));

737 
	`¥ötf
("\n");

740 
	`f˛o£
(
f
);

744 #i‡
HAVE_AFIPX


745 i‡(
ùxty≥
 =
NULL
)

746 
ùxty≥
 = 
	`gë_a‚ty≥
(
AF_IPX
);

748 i‡(
ùxty≥
 !
NULL
) {

749 i‡(
±r
->
has_ùx_bb
)

750 
	`¥ötf
(
	`_
(" IPX/Ethernet IIáddr:%s\n"),

751 
ùxty≥
->
	`•röt
(&
±r
->
ùxaddr_bb
, 1));

752 i‡(
±r
->
has_ùx_¢
)

753 
	`¥ötf
(
	`_
(" IPX/Ethernet SNAPáddr:%s\n"),

754 
ùxty≥
->
	`•röt
(&
±r
->
ùxaddr_¢
, 1));

755 i‡(
±r
->
has_ùx_e2
)

756 
	`¥ötf
(
	`_
(" IPX/Ethernet 802.2áddr:%s\n"),

757 
ùxty≥
->
	`•röt
(&
±r
->
ùxaddr_e2
, 1));

758 i‡(
±r
->
has_ùx_e3
)

759 
	`¥ötf
(
	`_
(" IPX/Ethernet 802.3áddr:%s\n"),

760 
ùxty≥
->
	`•röt
(&
±r
->
ùxaddr_e3
, 1));

764 #i‡
HAVE_AFATALK


765 i‡(
dd±y≥
 =
NULL
)

766 
dd±y≥
 = 
	`gë_a‚ty≥
(
AF_APPLETALK
);

767 i‡(
dd±y≥
 !
NULL
) {

768 i‡(
±r
->
has_ddp
)

769 
	`¥ötf
(
	`_
(" EthîTÆk Pha£ 2áddr:%s\n"), 
dd±y≥
->
	`•röt
(&
±r
->
dd∑ddr
, 1));

773 #i‡
HAVE_AFECONET


774 i‡(
e˘y≥
 =
NULL
)

775 
e˘y≥
 = 
	`gë_a‚ty≥
(
AF_ECONET
);

776 i‡(
e˘y≥
 !
NULL
) {

777 i‡(
±r
->
has_ec⁄ë
)

778 
	`¥ötf
(
	`_
("Éc⁄ëáddr:%s\n"), 
e˘y≥
->
	`•röt
(&
±r
->
eˇddr
, 1));

782 
	`¥ötf
(" ");

784 i‡(
±r
->
Êags
 == 0)

785 
	`¥ötf
(
	`_
("[NO FLAGS] "));

786 i‡(
±r
->
Êags
 & 
IFF_UP
)

787 
	`¥ötf
(
	`_
("UP "));

788 i‡(
±r
->
Êags
 & 
IFF_BROADCAST
)

789 
	`¥ötf
(
	`_
("BROADCAST "));

790 i‡(
±r
->
Êags
 & 
IFF_DEBUG
)

791 
	`¥ötf
(
	`_
("DEBUG "));

792 i‡(
±r
->
Êags
 & 
IFF_LOOPBACK
)

793 
	`¥ötf
(
	`_
("LOOPBACK "));

794 i‡(
±r
->
Êags
 & 
IFF_POINTOPOINT
)

795 
	`¥ötf
(
	`_
("POINTOPOINT "));

796 i‡(
±r
->
Êags
 & 
IFF_NOTRAILERS
)

797 
	`¥ötf
(
	`_
("NOTRAILERS "));

798 i‡(
±r
->
Êags
 & 
IFF_RUNNING
)

799 
	`¥ötf
(
	`_
("RUNNING "));

800 i‡(
±r
->
Êags
 & 
IFF_NOARP
)

801 
	`¥ötf
(
	`_
("NOARP "));

802 i‡(
±r
->
Êags
 & 
IFF_PROMISC
)

803 
	`¥ötf
(
	`_
("PROMISC "));

804 i‡(
±r
->
Êags
 & 
IFF_ALLMULTI
)

805 
	`¥ötf
(
	`_
("ALLMULTI "));

806 i‡(
±r
->
Êags
 & 
IFF_SLAVE
)

807 
	`¥ötf
(
	`_
("SLAVE "));

808 i‡(
±r
->
Êags
 & 
IFF_MASTER
)

809 
	`¥ötf
(
	`_
("MASTER "));

810 i‡(
±r
->
Êags
 & 
IFF_MULTICAST
)

811 
	`¥ötf
(
	`_
("MULTICAST "));

812 #ifde‡
HAVE_DYNAMIC


813 i‡(
±r
->
Êags
 & 
IFF_DYNAMIC
)

814 
	`¥ötf
(
	`_
("DYNAMIC "));

817 
	`¥ötf
(
	`_
(" MTU:%d Metric:%d"),

818 
±r
->
mtu
,Öå->
mëric
 ?Ötr->metric : 1);

819 #ifde‡
SIOCSKEEPALIVE


820 i‡(
±r
->
outfûl
 ||Öå->
kì∑live
)

821 
	`¥ötf
(
	`_
(" Outfill:%d Keepalive:%d"),

822 
±r
->
outfûl
,Öå->
kì∑live
);

824 
	`¥ötf
("\n");

828 i‡(
±r
->
°©i°ics_vÆid
) {

833 
	`¥ötf
(" ");

835 
	`¥ötf
(
	`_
("RXÖackets:%lluÉrrors:%lu dropped:%lu overruns:%lu frame:%lu\n"),

836 
±r
->
°©s
.
rx_∑ckës
,Öå->°©s.
rx_îr‹s
,

837 
±r
->
°©s
.
rx_dr›≥d
,Öå->°©s.
rx_fifo_îr‹s
,

838 
±r
->
°©s
.
rx_‰ame_îr‹s
);

839 i‡(
ˇn_com¥ess
)

840 
	`¥ötf
(
	`_
(" com¥es£d:%lu\n"), 
±r
->
°©s
.
rx_com¥es£d
);

842 
rx
 = 
±r
->
°©s
.
rx_byãs
;

843 
tx
 = 
±r
->
°©s
.
tx_byãs
;

844 
sh‹t_rx
 = 
rx
 * 10;

845 
sh‹t_tx
 = 
tx
 * 10;

846 i‡(
rx
 > 1048576Ë{ 
sh‹t_rx
 /1048576; 
	`°r˝y
(
Rext
, "Mb"); }

847 i‡(
rx
 > 1024Ë{ 
sh‹t_rx
 /1024; 
	`°r˝y
(
Rext
, "Kb"); }

848 i‡(
tx
 > 1048576Ë{ 
sh‹t_tx
 /1048576; 
	`°r˝y
(
Text
, "Mb"); }

849 i‡(
tx
 > 1024Ë{ 
sh‹t_tx
 /1024; 
	`°r˝y
(
Text
, "Kb"); }

851 
	`¥ötf
(" ");

852 
	`¥ötf
(
	`_
("TXÖackets:%lluÉrrors:%lu dropped:%lu overruns:%lu carrier:%lu\n"),

853 
±r
->
°©s
.
tx_∑ckës
,Öå->°©s.
tx_îr‹s
,

854 
±r
->
°©s
.
tx_dr›≥d
,Öå->°©s.
tx_fifo_îr‹s
,

855 
±r
->
°©s
.
tx_ˇºõr_îr‹s
);

856 
	`¥ötf
(
	`_
(" cﬁlisi⁄s:%lu "), 
±r
->
°©s
.
cﬁlisi⁄s
);

857 i‡(
ˇn_com¥ess
)

858 
	`¥ötf
(
	`_
("com¥es£d:%lu "), 
±r
->
°©s
.
tx_com¥es£d
);

859 i‡(
±r
->
tx_queue_Àn
 != -1)

860 
	`¥ötf
(
	`_
("txqueuñí:%d "), 
±r
->
tx_queue_Àn
);

861 
	`¥ötf
("\n ");

862 
	`¥ötf
(
	`_
("RX bytes:%llu (%lu.%lu %s) TX bytes:%llu (%lu.%lu %s)\n"),

863 
rx
, ()(
sh‹t_rx
 / 10),

864 ()(
sh‹t_rx
 % 10), 
Rext
,

865 
tx
, ()(
sh‹t_tx
 / 10),

866 ()(
sh‹t_tx
 % 10), 
Text
);

869 i‡((
±r
->
m≠
.
úq
 ||Öå->m≠.
mem_°¨t
 ||Öå->m≠.
dma
 ||

870 
±r
->
m≠
.
ba£_addr
)) {

871 
	`¥ötf
(" ");

872 i‡(
±r
->
m≠
.
úq
)

873 
	`¥ötf
(
	`_
("I¡îru±:%d "), 
±r
->
m≠
.
úq
);

874 i‡(
±r
->
m≠
.
ba£_addr
 >= 0x100)

876 
	`¥ötf
(
	`_
("Ba£áddªss:0x%x "), 
±r
->
m≠
.
ba£_addr
);

877 i‡(
±r
->
m≠
.
mem_°¨t
) {

878 
	`¥ötf
(
	`_
("Mem‹y:%lx-%lx "), 
±r
->
m≠
.
mem_°¨t
,Öå->m≠.
mem_íd
);

880 i‡(
±r
->
m≠
.
dma
)

881 
	`¥ötf
(
	`_
("DMA ch™:%x "), 
±r
->
m≠
.
dma
);

882 
	`¥ötf
("\n");

884 
	`¥ötf
("\n");

885 
	}
}

887 
	$i„_¥öt
(
öãrÁ˚
 *
i
)

889 i‡(
i„_sh‹t
)

890 
	`i„_¥öt_sh‹t
(
i
);

892 
	`i„_¥öt_l⁄g
(
i
);

893 
	}
}

	@net-tools-1.60/lib/ipx.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_AFIPX


19 
	~<asm/ty≥s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

23 
	~<√tùx/ùx.h
>

25 
	~"ùx.h
"

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<˘y≥.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<√töë/ö.h
>

34 
	~"vîsi⁄.h
"

35 
	~"√t-suµ‹t.h
"

36 
	~"∑th«mes.h
"

37 
	~"öé.h
"

38 
	~"utû.h
"

40 #i‡(
IPX_NODE_LEN
 != 6)

45 *
	$IPX_¥öt
(*
±r
)

47 
buff
[64];

48 
sockaddr_ùx
 *
sùx
 = (sockaddr_ùx *Ë(
±r
 - 2);

49 
t
;

52 
t
 = 
IPX_NODE_LEN
;Å;Å--)

53 i‡(
sùx
->
sùx_node
[
t
 - 1])

56 i‡(
t
 && 
	`¡ohl
(
sùx
->
sùx_√tw‹k
))

57 
	`¢¥ötf
(
buff
, (buff), "%08lX:%02X%02X%02X%02X%02X%02X",

58 (Ë
	`¡ohl
(
sùx
->
sùx_√tw‹k
),

59 (Ë
sùx
->
sùx_node
[0], () sipx->sipx_node[1],

60 (Ë
sùx
->
sùx_node
[2], () sipx->sipx_node[3],

61 (Ë
sùx
->
sùx_node
[4], () sipx->sipx_node[5]);

62 i‡(!
t
 && 
	`¡ohl
(
sùx
->
sùx_√tw‹k
))

63 
	`¢¥ötf
(
buff
, (buff), "%08lX", (Ë
	`¡ohl
(
sùx
->
sùx_√tw‹k
));

64 i‡(
t
 && !
	`¡ohl
(
sùx
->
sùx_√tw‹k
))

65 
	`¢¥ötf
(
buff
, (buff), "%02X%02X%02X%02X%02X%02X",

66 (Ë
sùx
->
sùx_node
[0], () sipx->sipx_node[1],

67 (Ë
sùx
->
sùx_node
[2], () sipx->sipx_node[3],

68 (Ë
sùx
->
sùx_node
[4], () sipx->sipx_node[5]);

70 
buff
[0] = '\0';

71  (
buff
);

72 
	}
}

76 *
	$IPX_•röt
(
sockaddr
 *
ßp
, 
numîic
)

78 
buf
[64];

80 i‡(
ßp
->
ß_Ámûy
 !
AF_IPX
)

81  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

82  (
	`IPX_¥öt
(
ßp
->
ß_d©a
));

83 
	}
}

86 
	$IPX_gësock
(*
buÂ
, 
sockaddr
 *
ßp
)

88 *
•
 = 
buÂ
, *
bp
;

89 
i
;

90 
vÆ
;

91 
sockaddr_ùx
 *
sùx
 = (sockaddr_ùx *Ë
ßp
;

93 
sùx
->
sùx_p‹t
 = 0;

95 
vÆ
 = 0;

96 
bp
 = (*Ë
sùx
->
sùx_node
;

97 
i
 = 0; i < (
sùx
->
sùx_node
); i++) {

98 *
•
 = 
	`touµî
(*sp);

100 i‡((*
•
 >= 'A') && (*sp <= 'F'))

101 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

102 i‡((*
•
 >= '0') && (*sp <= '9'))

103 
bp
[
i
] |(Ë(*
•
 - '0');

107 
bp
[
i
] <<= 4;

108 
•
++;

109 *
•
 = 
	`touµî
(*sp);

111 i‡((*
•
 >= 'A') && (*sp <= 'F'))

112 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

113 i‡((*
•
 >= '0') && (*sp <= '9'))

114 
bp
[
i
] |(Ë(*
•
 - '0');

118 
•
++;

120 i‡((
	`memcmp
(
sùx
->
sùx_node
, "\0\0\0\0\0\0\0\0", 
IPX_NODE_LEN
) == 0) ||

121 (
	`memcmp
(
sùx
->
sùx_node
, "\377\377\377\377\377\377", 
IPX_NODE_LEN
) == 0))

125 
	}
}

129 
	$IPX_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

131 
sockaddr_ùx
 *
ßi
 = (sockaddr_ùx *Ë
ßp
;

132 
√äum
;

133 *
ï
;

134 
nbo
;

136 
ßi
->
sùx_Ámûy
 = 
AF_IPX
;

137 
ßi
->
sùx_√tw‹k
 = 
	`ht⁄l
(0);

138 
ßi
->
sùx_node
[0] = sai->sipx_node[1] = sai->sipx_node[2] =

139 
ßi
->
sùx_node
[3] = sai->sipx_node[4] = sai->sipx_node[5] = '\0';

140 
ßi
->
sùx_p‹t
 = 0;

142 i‡(
ty≥
 & 4)

143 
nbo
 = 1;

145 
nbo
 = 0;

147 
ty≥
 &= 3;

148 i‡(
ty≥
 <= 1) {

149 
√äum
 = 
	`°πoul
(
buÂ
, &
ï
, 16);

150 i‡((
√äum
 == 0xffffffffL) || (netnum == 0L))

152 i‡(
nbo
)

153 
ßi
->
sùx_√tw‹k
 = 
√äum
;

155 
ßi
->
sùx_√tw‹k
 = 
	`ht⁄l
(
√äum
);

157 i‡(
ty≥
 == 1) {

158 i‡(*
ï
 != '\0')

162 i‡(
ty≥
 == 0) {

163 i‡(*
ï
 != ':')

165 
buÂ
 = 
ï
 + 1;

167  (
	`IPX_gësock
(
buÂ
, 
ßp
));

168 
	}
}

171 
a·y≥
 
	gùx_a·y≥
 =

173 "ùx", 
NULL
, 
AF_IPX
, 0,

174 
IPX_¥öt
, 
IPX_•röt
, 
IPX_öput
, 
NULL
,

175 
NULL
 , NULL, NULL,

	@net-tools-1.60/lib/ipx_gr.c

8 
	~"c⁄fig.h
"

10 #i‡
HAVE_AFIPX


11 
	~<asm/ty≥s.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

14 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

15 
	~<√tùx/ùx.h
>

17 
	~"ùx.h
"

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<î∫o.h
>

22 
	~<˘y≥.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<√töë/ö.h
>

26 
	~"vîsi⁄.h
"

27 
	~"√t-suµ‹t.h
"

28 
	~"∑th«mes.h
"

29 
	~"öé.h
"

33 
	$IPX_Ωröt
(
›ti⁄s
)

36 
numîic
 = 
›ti⁄s
 & 
FLAG_NUM_HOST
;

37 
buff
[1024];

38 
√t
[128], 
rouãr_√t
[128];

39 
rouãr_node
[128];

40 
num
;

41 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_IPX_ROUTE
, "r");

42 
a·y≥
 *
≠
;

43 
sockaddr
 
ß
;

45 i‡((
≠
 = 
	`gë_a‚ty≥
(
AF_IPX
)Ë=
NULL
) {

46 
	`EINTERN
("lib/ipx_rt.c", "AF_IPX missing");

50 i‡(!
Â
) {

51 
	`≥º‹
(
_PATH_PROCNET_IPX_ROUTE
);

52 
	`¥ötf
(
	`_
("IPXÇot configured inÅhis system.\n"));

56 
	`¥ötf
(
	`_
("Kernel IPXÑoutingÅable\n"));

57 
	`¥ötf
(
	`_
("Destination Router Net Router Node\n"));

59 
	`fgës
(
buff
, 1023, 
Â
);

61 
	`fgës
(
buff
, 1023, 
Â
)) {

62 
num
 = 
	`ssˇnf
(
buff
, "%†%†%s", 
√t
, 
rouãr_√t
, 
rouãr_node
);

63 i‡(
num
 < 3)

67 (Ë
≠
->
	`öput
(5, 
√t
, &
ß
);

68 
	`°r˝y
(
√t
, 
≠
->
	`•röt
(&
ß
, 
numîic
));

71 (Ë
≠
->
	`öput
(5, 
rouãr_√t
, &
ß
);

72 
	`°r˝y
(
rouãr_√t
, 
≠
->
	`•röt
(&
ß
, 
numîic
));

75 (Ë
≠
->
	`öput
(2, 
rouãr_node
, &
ß
);

76 
	`°r˝y
(
rouãr_node
, 
≠
->
	`•röt
(&
ß
, 
numîic
));

78 
	`¥ötf
("%-25†%-25†%-25s\n", 
√t
, 
rouãr_√t
, 
rouãr_node
);

81 (Ë
	`f˛o£
(
Â
);

83 
	}
}

	@net-tools-1.60/lib/ipx_sr.c

1 
	~"c⁄fig.h
"

3 #i‡
HAVE_AFIPX


4 
	~<sys/∑øm.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<√töë/ö.h
>

8 
	~<¨∑/öë.h
>

9 
	~<¨∑/«me£r.h
>

10 
	~<sys/io˘l.h
>

11 
	~<˘y≥.h
>

12 
	~<î∫o.h
>

13 
	~<√tdb.h
>

14 
	~<ªsﬁv.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<°dio.h
>

18 
	~<uni°d.h
>

19 
	~"vîsi⁄.h
"

20 
	~"√t-suµ‹t.h
"

21 
	~"∑th«mes.h
"

22 
	~"öé.h
"

24 
	~"√t-„©uªs.h
"

26 
a·y≥
 
ùx_a·y≥
;

30 
	$IPX_röput
(
a˘i⁄
, 
ext
, **
¨gs
)

33 
	`Ârötf
(
°dîr
, 
	`_
("IPX:ÅhisÇeedsÅo be written\n"));

35 
	}
}

	@net-tools-1.60/lib/irda.c

29 
	~"c⁄fig.h
"

31 #i‡
HAVE_AFIRDA
 || 
HAVE_HWIRDA


32 
	~<sys/ty≥s.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/sockë.h
>

35 
	~<√t/if_¨p.h
>

36 
	~<°dlib.h
>

37 
	~<°dio.h
>

38 
	~<˘y≥.h
>

39 
	~<î∫o.h
>

40 
	~<f˙é.h
>

41 
	~<°rög.h
>

42 
	~<ãrmios.h
>

43 
	~<uni°d.h
>

44 
	~"√t-suµ‹t.h
"

45 
	~"∑th«mes.h
"

46 
	~"öé.h
"

47 
	~"utû.h
"

50 #i‚de‡
ARPHRD_IRDA


51 
	#ARPHRD_IRDA
 783

	)

60 *
	$úda_¥öt
(*
±r
)

62 
buff
[8];

64 
	`•rötf
(&
buff
[
	`°æí
(buff)], "%02x:%02x:%02x:%02x", 
±r
[3],Ötr[2],

65 
±r
[1],Ötr[0]);

67  (
buff
);

68 
	}
}

70 
hwty≥
 
	gúda_hwty≥
 =

72 "úda", 
NULL
, 
ARPHRD_IRDA
, 2,

73 
úda_¥öt
, 
NULL
, NULL, 0

	@net-tools-1.60/lib/loopback.c

18 
	~"c⁄fig.h
"

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

35 *
	$¥_un•ec
(*
±r
)

37 
buff
[64];

38 *
pos
;

39 
i
;

41 
pos
 = 
buff
;

42 
i
 = 0; i < (
sockaddr
); i++) {

43 
pos
 +
	`•rötf
’os, "%02X-", (*
±r
++ & 0377));

45 
buff
[
	`°æí
(buff) - 1] = '\0';

46  (
buff
);

47 
	}
}

49 
hwty≥
 
	gun•ec_hwty≥
 =

51 "un•ec", 
NULL
, -1, 0,

52 
¥_un•ec
, 
NULL
, NULL

55 
hwty≥
 
	glo›_hwty≥
 =

57 "lo›", 
NULL
, 
ARPHRD_LOOPBACK
, 0,

58 
NULL
, NULL, NULL

	@net-tools-1.60/lib/masq_info.c

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

30 
	~<√töë/ö.h
>

31 
	~<¨∑/öë.h
>

32 
	~<î∫o.h
>

33 
	~<°dio.h
>

34 
	~<mÆloc.h
>

35 
	~<°rög.h
>

36 
	~<uni°d.h
>

37 
	~"√t-suµ‹t.h
"

38 
	~"∑th«mes.h
"

39 
	~"vîsi⁄.h
"

40 
	~"c⁄fig.h
"

41 
	~"öé.h
"

42 
	~"√t-„©uªs.h
"

44 #i‡
HAVE_FW_MASQUERADE


46 
	smasq
 {

47 
	mexpúes
;

48 *
	m¥Ÿo
;

49 
sockaddr_ö
 
	m§c
, 
	md°
;

50 
	m•‹t
, 
	mdp‹t
;

51 
	mmp‹t
;

52 
	möô£q
;

53 
	mdñè
;

54 
	mpdñè
;

57 
a·y≥
 *
	g≠
;

58 
	ghas_pdñè
;

60 
	$¥öt_masq
(
masq
 *
ms
, 
numîic_ho°
, 
numîic_p‹t
,

61 
ext
)

63 
möuãs
, 
£c⁄ds
, 
£c100s
;

65 
	`¥ötf
("%-4s", 
ms
->
¥Ÿo
);

67 
£c100s
 = 
ms
->
expúes
 % 100L;

68 
£c⁄ds
 = (
ms
->
expúes
 / 100L) % 60;

69 
möuãs
 = 
ms
->
expúes
 / 6000L;

71 
	`¥ötf
("%3ld:%02ld.%02ld ", 
möuãs
, 
£c⁄ds
, 
£c100s
);

73 i‡(
ext
 > 1) {

74 i‡(
has_pdñè
)

75 
	`¥ötf
("%10lu %5hd %5hd ", 
ms
->
öô£q
,

76 
ms
->
dñè
, ms->
pdñè
);

78 
	`¥ötf
("%10lu %5hd - ", 
ms
->
öô£q
,

79 
ms
->
dñè
);

81 
	`¥ötf
("%-20†", 
≠
->
	`•röt
((
sockaddr
 *Ë&(
ms
->
§c
), 
numîic_ho°
));

82 
	`¥ötf
("%-20†", 
≠
->
	`•röt
((
sockaddr
 *Ë&(
ms
->
d°
), 
numîic_ho°
));

84 
	`¥ötf
("%†-> ", 
	`gë_¢ame
(
ms
->
•‹t
, ms->
¥Ÿo
, 
numîic_p‹t
));

85 
	`¥ötf
("%s", 
	`gë_¢ame
(
ms
->
dp‹t
, ms->
¥Ÿo
, 
numîic_p‹t
));

86 
	`¥ötf
(" (%s)\n", 
	`gë_¢ame
(
ms
->
mp‹t
, ms->
¥Ÿo
, 
numîic_p‹t
));

87 
	}
}

90 
	$ªad_masqöfo
(
FILE
 * 
f
, 
masq
 *
m¶i°
, 
nm¶i°
)

92 
n
, 
ƒód
 = 0;

93 
masq
 *
ms
;

94 
buf
[256];

96 
ƒód
 = 0;Çªad < 
nm¶i°
;Çread++) {

97 
ms
 = &
m¶i°
[
ƒód
];

98 i‡(
has_pdñè
) {

99 i‡((
n
 = 
	`fsˇnf
(
f
, " %s %lX:%hX %lX:%hX %hX %lX %hd %hd %lu",

100 
buf
,

101 (*Ë&
ms
->
§c
.
sö_addr
.
s_addr
, &ms->
•‹t
,

102 (*Ë&
ms
->
d°
.
sö_addr
.
s_addr
, &ms->
dp‹t
,

103 &
ms
->
mp‹t
, &ms->
öô£q
, &ms->
dñè
,

104 &
ms
->
pdñè
, &ms->
expúes
)) == -1)

105  
ƒód
;

107 i‡((
n
 = 
	`fsˇnf
(
f
, " %s %lX:%hX %lX:%hX %hX %lX %hd %lu",

108 
buf
,

109 (*Ë&
ms
->
§c
.
sö_addr
.
s_addr
, &ms->
•‹t
,

110 (*Ë&
ms
->
d°
.
sö_addr
.
s_addr
, &ms->
dp‹t
,

111 &
ms
->
mp‹t
, &ms->
öô£q
, &ms->
dñè
,

112 &
ms
->
expúes
)) == -1)

113  
ƒód
;

115 i‡((
has_pdñè
 && (
n
 != 10)) || (!has_pdelta && (n != 9))) {

116 
	`EINTERN
("masq_info.c", "ip_masquerade formatÉrror");

119 
ms
->
§c
.
sö_Ámûy
 = 
AF_INET
;

120 
ms
->
d°
.
sö_Ámûy
 = 
AF_INET
;

122 i‡(
	`°rcmp
("TCP", 
buf
) == 0)

123 
ms
->
¥Ÿo
 = "tcp";

124 i‡(
	`°rcmp
("UDP", 
buf
) == 0)

125 
ms
->
¥Ÿo
 = "udp";

126 i‡(
	`°rcmp
("ICMP", 
buf
) == 0)

127 
ms
->
¥Ÿo
 = "icmp";

128 i‡(
	`°rcmp
("GRE", 
buf
) == 0)

129 
ms
->
¥Ÿo
 = "gre";

130 i‡(
	`°rcmp
("ESP", 
buf
) == 0)

131 
ms
->
¥Ÿo
 = "esp";

133 
	`EINTERN
("masq_info.c", "ip_masquerade unknownÅype");

138 
ms
->
§c
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(ms->src.sin_addr.s_addr);

139 
ms
->
d°
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(ms->dst.sin_addr.s_addr);

140 
ms
->
•‹t
 = 
	`ht⁄s
(ms->sport);

141 
ms
->
dp‹t
 = 
	`ht⁄s
(ms->dport);

142 
ms
->
mp‹t
 = 
	`ht⁄s
(ms->mport);

144  
ƒód
;

145 
	}
}

148 
	$ù_masq_öfo
(
numîic_ho°
, 
numîic_p‹t
, 
ext
)

150 
FILE
 *
f
;

151 
i
;

152 
buf
[256];

153 
masq
 *
m¶i°
;

154 
¡ŸÆ
 = 0, 
ƒód
;

156 i‡(!(
f
 = 
	`f›í
(
_PATH_PROCNET_IP_MASQ
, "r"))) {

157 i‡(
î∫o
 !
ENOENT
) {

158 
	`≥º‹
(
_PATH_PROCNET_IP_MASQ
);

161 
	`ESYSNOT
("netstat", "ip_masquerade");

164 i‡((
≠
 = 
	`gë_a·y≥
("öë")Ë=
NULL
) {

165 
	`ENOSUPP
("masq_info", "AF INET");

166 
	`f˛o£
(
f
);

169 
	`fgës
(
buf
, (buf), 
f
);

170 
has_pdñè
 = 
	`°r°r
(
buf
, "PDelta") ? 1 : 0;

172 
m¶i°
 = (
masq
 *Ë
	`mÆloc
(16 * (masq));

173 i‡(!
m¶i°
) {

174 
	`EINTERN
("masq_info", "malloc() failed");

175 
	`f˛o£
(
f
);

178 (
ƒód
 = 
	`ªad_masqöfo
(
f
, &(
m¶i°
[
¡ŸÆ
]), 16)) == 16) {

179 
¡ŸÆ
 +
ƒód
;

180 
m¶i°
 = (
masq
 *Ë
	`ªÆloc
(mslist,

181 (
¡ŸÆ
 + 16Ë* (
masq
));

182 i‡(!
m¶i°
) {

183 
	`EINTERN
("masq_info", "realloc() failed");

184 
	`f˛o£
(
f
);

188 
	`f˛o£
(
f
);

190 i‡(
ƒód
 < 0) {

191 i‡(
m¶i°
)

192 
	`‰ì
(
m¶i°
);

195 
¡ŸÆ
 +
ƒód
;

197 i‡(
¡ŸÆ
 > 0) {

198 
	`¥ötf
(
	`_
("IP masqueradingÉntries\n"));

199 
ext
) {

201 
	`¥ötf
(
	`_
("protÉxpire source destinationÖorts\n"));

204 
	`¥ötf
(
	`_
("protÉxpire initseq deltaÖrevd source destinationÖorts\n"));

207 
i
 = 0; i < 
¡ŸÆ
; i++)

208 
	`¥öt_masq
(&(
m¶i°
[
i
]), 
numîic_ho°
, 
numîic_p‹t
, 
ext
);

209 i‡(
m¶i°
)

210 
	`‰ì
(
m¶i°
);

214 
	}
}

	@net-tools-1.60/lib/net-features.h

29 #i‚de‡
_NET_FEATURES_H


30 
	#_NET_FEATURES_H


	)

34 #i‡
deföed
 (
SIOCADDRTOLD
Ë|| deföed (
RTF_IRTT
)

35 
	#HAVE_NEW_ADDRT
 1

	)

38 #ifde‡
RTF_IRTT


39 
	#HAVE_RTF_IRTT
 1

	)

42 #ifde‡
RTF_REJECT


43 
	#HAVE_RTF_REJECT
 1

	)

48 #i‡
deföed
 (
FEATURE_ARP
Ë|| deföed (
FEATURE_ROUTE
Ë|| deföed (
FEATURE_NETSTAT
)

49 *
	gFótuªs
 =

52 #ifde‡
FEATURE_ROUTE


54 #i‡
HAVE_NEW_ADDRT


61 #i‡
HAVE_RTF_IRTT


68 #i‡
HAVE_RTF_REJECT


80 #ifde‡
FEATURE_NETSTAT


82 #i‡
HAVE_NEW_ADDRT


89 #i‡
HAVE_RTF_IRTT


96 #i‡
HAVE_RTF_REJECT


103 #i‡
HAVE_FW_MASQUERADE


114 #i‡
I18N


122 #ifde‡
DFLT_AF


123 "(" 
DFLT_AF
 ")"

126 #i‡
HAVE_AFUNIX


132 #i‡
HAVE_AFINET


138 #i‡
HAVE_AFINET6


144 #i‡
HAVE_AFIPX


150 #i‡
HAVE_AFAX25


156 #i‡
HAVE_AFNETROM


162 #i‡
HAVE_AFX25


168 #i‡
HAVE_AFATALK


174 #i‡
HAVE_AFECONET


180 #i‡
HAVE_AFROSE


189 #ifde‡
DFLT_HW


190 "(" 
DFLT_HW
 ")"

193 #i‡
HAVE_HWETHER


199 #i‡
HAVE_HWARC


205 #i‡
HAVE_HWSLIP


211 #i‡
HAVE_HWPPP


217 #i‡
HAVE_HWTUNNEL


223 #i‡
HAVE_HWTR


229 #i‡
HAVE_HWAX25


236 #i‡
HAVE_HWNETROM


243 #i‡
HAVE_HWX25


250 #i‡
HAVE_HWFR


257 #i‡
HAVE_HWROSE


264 #i‡
HAVE_HWASH


271 #i‡
HAVE_HWSIT


278 #i‡
HAVE_HWFDDI


285 #i‡
HAVE_HWHIPPI


292 #i‡
HAVE_HWHDLCLAPB


	@net-tools-1.60/lib/net-support.h

33 
	~<sys/sockë.h
>

36 
	sa·y≥
 {

37 *
	m«me
;

38 *
	mtôÀ
;

39 
	maf
;

40 
	mÆí
;

41 *(*
	m¥öt
) (*);

42 *(*
	m•röt
Ë(
	msockaddr
 *, 
	mnumîic
);

43 (*
	möput
Ë(
	mty≥
, *
	mbuÂ
, 
	msockaddr
 *);

44 (*
	mhîr‹
Ë(*
	mãxt
);

45 (*
	mΩröt
Ë(
	m›ti⁄s
);

46 (*
	mröput
Ë(
	mtyp
, 
	mext
, **
	m¨gv
);

49 (*
	mgëmask
Ë(*
	m§c
, 
sockaddr
 * 
	mmask
, *
	m«me
);

51 
	mfd
;

52 *
	mÊag_fûe
;

55 
a·y≥
 *
a·y≥s
[];

58 
	shwty≥
 {

59 *
	m«me
;

60 *
	mtôÀ
;

61 
	mty≥
;

62 
	mÆí
;

63 *(*
	m¥öt
) (*);

64 (*
	möput
Ë(*, 
	msockaddr
 *);

65 (*
	ma˘iv©e
Ë(
	mfd
);

66 
	msuµªss_nuŒ_addr
;

70 
hwty≥
 *
gë_hwty≥
(c⁄° *
«me
);

71 
hwty≥
 *
gë_hw¡y≥
(
ty≥
);

72 
¥öt_hwli°
(
ty≥
);

73 
a·y≥
 *
gë_a·y≥
(c⁄° *
«me
);

74 
a·y≥
 *
gë_a‚ty≥
(
ty≥
);

75 
¥öt_aÊi°
(
ty≥
);

76 
hw_nuŒ_addªss
(
hwty≥
 *
hw
, *
addr
);

78 
gë¨gs
(*
°rög
, *
¨gumíts
[]);

80 
gë_sockë_f‹_af
(
af
);

82 
gërouã_öô
();

83 
£åouã_öô
();

84 
a˘iv©e_öô
();

85 
rouã_öfo
(c⁄° *
a‚ame
, 
Êags
);

86 
rouã_edô
(
a˘i⁄
, c⁄° *
a‚ame
, 
Êags
, **
¨gv
);

87 
a˘iv©e_ld
(c⁄° *
hw«me
, 
fd
);

89 
	#RTACTION_ADD
 1

	)

90 
	#RTACTION_DEL
 2

	)

91 
	#RTACTION_HELP
 3

	)

92 
	#RTACTION_FLUSH
 4

	)

93 
	#RTACTION_SHOW
 5

	)

95 
	#FLAG_EXT
 3

	)

96 
	#FLAG_NUM_HOST
 4

	)

97 
	#FLAG_NUM_PORT
 8

	)

98 
	#FLAG_NUM_USER
 16

	)

99 
	#FLAG_NUM
 (
FLAG_NUM_HOST
|
FLAG_NUM_PORT
|
FLAG_NUM_USER
)

	)

100 
	#FLAG_SYM
 32

	)

101 
	#FLAG_CACHE
 64

	)

102 
	#FLAG_FIB
 128

	)

103 
	#FLAG_VERBOSE
 256

	)

105 
ù_masq_öfo
(
numîic_ho°
, 
numîic_p‹t
, 
ext
);

107 
INET_Ωröt
(
›ti⁄s
);

108 
INET6_Ωröt
(
›ti⁄s
);

109 
DDP_Ωröt
(
›ti⁄s
);

110 
IPX_Ωröt
(
›ti⁄s
);

111 
NETROM_Ωröt
(
›ti⁄s
);

112 
AX25_Ωröt
(
›ti⁄s
);

113 
X25_Ωröt
(
›ti⁄s
);

115 
INET_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

116 
INET6_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

117 
DDP_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

118 
IPX_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

119 
NETROM_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

120 
AX25_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

121 
X25_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

123 
a·øns_›t
(c⁄° *
¨g
);

124 
a·øns_def
(*
toﬁ
, *
¨gv0
, *
dÊt
);

126 *
gë_¢ame
(
socknumbî
, *
¥Ÿo
, 
numîic
);

128 
Êag_unx
;

129 
Êag_ùx
;

130 
Êag_ax25
;

131 
Êag_ddp
;

132 
Êag_√åom
;

133 
Êag_x25
;

134 
Êag_öë
;

135 
Êag_öë6
;

137 
a‚ame
[];

139 
	#AFTRANS_OPTS
 \

150 {"t˝ù", 0, 0, 1}

	)

151 
	#AFTRANS_CNT
 11

	)

153 
	#EINTERN
(
fûe
, 
ãxt
Ë
	`Ârötf
(
°dîr
, \

154 
	`_
("%s: I¡î«»Eº‹ `%s'.\n"),
fûe
,
ãxt
);

	)

156 
	#ENOSUPP
(
A
,
B
Ë
	`Ârötf
(
°dîr
,\

157 
	`_
("%s: feature `%s'Çot supported.\n" \

159 "√wî kî√»sour˚ o∏fuŒ c⁄figuøti⁄.\n"),
A
,
B
)

	)

161 
	#ESYSNOT
(
A
,
B
Ë
	`Ârötf
(
°dîr
, 
	`_
("%s:Çÿsuµ‹àf‹ `%s' o¿thi†sy°em.\n"),A,B)

	)

163 
	#E_NOTFOUND
 8

	)

164 
	#E_SOCK
 7

	)

165 
	#E_LOOKUP
 6

	)

166 
	#E_VERSION
 5

	)

167 
	#E_USAGE
 4

	)

168 
	#E_OPTERR
 3

	)

169 
	#E_INTERN
 2

	)

170 
	#E_NOSUPP
 1

	)

181 
	#RTNH_F_DEAD
 1

	)

182 
	#RTNH_F_PERVASIVE
 2

	)

183 
	#RTNH_F_ONLINK
 4

	)

186 
	#RTCF_DEAD
 
RTNH_F_DEAD


	)

187 
	#RTCF_ONLINK
 
RTNH_F_ONLINK


	)

189 
	#RTCF_NOTIFY
 0x00010000

	)

190 
	#RTCF_DIRECTDST
 0x00020000

	)

191 
	#RTCF_REDIRECTED
 0x00040000

	)

192 
	#RTCF_TPROXY
 0x00080000

	)

193 
	#RTCF_FAST
 0x00200000

	)

194 
	#RTCF_MASQ
 0x00400000

	)

195 
	#RTCF_SNAT
 0x00800000

	)

196 
	#RTCF_DOREDIRECT
 0x01000000

	)

197 
	#RTCF_DIRECTSRC
 0x04000000

	)

198 
	#RTCF_DNAT
 0x08000000

	)

199 
	#RTCF_BROADCAST
 0x10000000

	)

200 
	#RTCF_MULTICAST
 0x20000000

	)

201 
	#RTCF_REJECT
 0x40000000

	)

202 
	#RTCF_LOCAL
 0x80000000

	)

205 #i‚de‡
RTF_DEFAULT


206 
	#RTF_DEFAULT
 0x00010000

	)

208 
	#RTF_ALLONLINK
 0x00020000

	)

209 #i‚de‡
RTF_ADDRCONF


210 
	#RTF_ADDRCONF
 0x00040000

	)

212 
	#RTF_NONEXTHOP
 0x00200000

	)

213 
	#RTF_EXPIRES
 0x00400000

	)

214 
	#RTF_CACHE
 0x01000000

	)

215 
	#RTF_FLOW
 0x02000000

	)

216 
	#RTF_POLICY
 0x04000000

	)

217 
	#RTF_LOCAL
 0x80000000

	)

220 
	#RTF_UP
 0x0001

	)

221 
	#RTF_GATEWAY
 0x0002

	)

222 
	#RTF_HOST
 0x0004

	)

223 
	#RTF_REINSTATE
 0x0008

	)

224 
	#RTF_DYNAMIC
 0x0010

	)

225 
	#RTF_MODIFIED
 0x0020

	)

226 
	#RTF_MTU
 0x0040

	)

227 #i‚de‡
RTF_MSS


228 
	#RTF_MSS
 
RTF_MTU


	)

230 
	#RTF_WINDOW
 0x0080

	)

231 
	#RTF_IRTT
 0x0100

	)

232 
	#RTF_REJECT
 0x0200

	)

235 
	#RTF_NOTCACHED
 0x0400

	)

237 #ifde‡
HAVE_AFECONET


238 #i‚de‡
AF_ECONET


239 
	#AF_ECONET
 19

	)

	@net-tools-1.60/lib/netrom.c

26 
	~"c⁄fig.h
"

28 #i‡
HAVE_AFNETROM
 || 
HAVE_HWNETROM


29 
	~<sys/ty≥s.h
>

30 
	~<sys/io˘l.h
>

31 
	~<sys/sockë.h
>

32 
	~<√t/if_¨p.h
>

33 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

34 
	~<√èx25/ax25.h
>

36 
	~<löux/ax25.h
>

38 
	~<°dlib.h
>

39 
	~<°dio.h
>

40 
	~<˘y≥.h
>

41 
	~<î∫o.h
>

42 
	~<f˙é.h
>

43 
	~<°rög.h
>

44 
	~<ãrmios.h
>

45 
	~<uni°d.h
>

46 
	~"√t-suµ‹t.h
"

47 
	~"∑th«mes.h
"

48 
	~"öé.h
"

49 
	~"utû.h
"

51 
	g√åom_îrmsg
[128];

53 
a·y≥
 
√åom_a·y≥
;

55 *
	$NETROM_¥öt
(*
±r
)

57 
buff
[8];

58 
i
;

60 
i
 = 0; i < 6; i++) {

61 
buff
[
i
] = ((
±r
[i] & 0377) >> 1);

62 i‡(
buff
[
i
] == ' ')

63 
buff
[
i
] = '\0';

65 
buff
[6] = '\0';

66 
i
 = ((
±r
[6] & 0x1E) >> 1);

67 i‡(
i
 != 0)

68 
	`•rötf
(&
buff
[
	`°æí
(buff)], "-%d", 
i
);

69  (
buff
);

70 
	}
}

74 *
	$NETROM_•röt
(
sockaddr
 *
ßp
, 
numîic
)

76 
buf
[64];

77 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

78  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

79  (
	`NETROM_¥öt
(((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
));

80 
	}
}

83 
	$NETROM_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

85 *
±r
;

86 *
‹ig
, 
c
;

87 
i
;

89 
ßp
->
ß_Ámûy
 = 
√åom_a·y≥
.
af
;

90 
±r
 = ((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
;

93 
‹ig
 = 
buÂ
;

94 
i
 = 0;

95 (*
buÂ
 !'\0'Ë&& (*buÂ !'-'Ë&& (
i
 < 6)) {

96 
c
 = *
buÂ
++;

97 i‡(
	`i¶owî
(
c
))

98 
c
 = 
	`touµî
(c);

99 i‡(!(
	`isuµî
(
c
Ë|| 
	`isdigô
(c))) {

100 
	`ß„_°∫˝y
(
√åom_îrmsg
, 
	`_
("Invalid callsign"), (netrom_errmsg));

101 #ifde‡
DEBUG


102 
	`Ârötf
(
°dîr
, "√åom_öput(%s): %†!\n", 
√åom_îrmsg
, 
‹ig
);

104 
î∫o
 = 
EINVAL
;

107 *
±r
++ = (Ë((
c
 << 1) & 0xFE);

108 
i
++;

112 i‡((
i
 =6Ë&& (*
buÂ
 != '-') && (*bufp != '\0')) {

113 
	`ß„_°∫˝y
(
√åom_îrmsg
, 
	`_
("CallsignÅooÜong"), (netrom_errmsg));

114 #ifde‡
DEBUG


115 
	`Ârötf
(
°dîr
, "√åom_öput(%s): %†!\n", 
√åom_îrmsg
, 
‹ig
);

117 
î∫o
 = 
E2BIG
;

121 
i
++ < (
ax25_addªss
) - 1) {

122 *
±r
++ = () ((' ' << 1) & 0xFE);

126 i‡(*
buÂ
 == '-') {

127 
i
 = 
	`©oi
(++
buÂ
);

128 *
±r
 = (Ë((
i
 << 1) & 0xFE);

130 *
±r
 = () '\0';

134 #ifde‡
DEBUG


135 
	`Ârötf
(
°dîr
, "√åom_öput(%s): ", 
‹ig
);

136 
i
 = 0; i < (
ax25_addªss
); i++)

137 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

138 
	`Ârötf
(
°dîr
, "\n");

142 
	}
}

146 
	$NETROM_hîr‹
(*
ãxt
)

148 i‡(
ãxt
 =
NULL
)

149 
	`Ârötf
(
°dîr
, "%s\n", 
√åom_îrmsg
);

151 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
√åom_îrmsg
);

152 
	}
}

155 
	$NETROM_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

157 i‡(
	`NETROM_öput
(0, 
buÂ
, 
ßp
) < 0)

159 
ßp
->
ß_Ámûy
 = 
ARPHRD_NETROM
;

161 
	}
}

165 
	$KISS_£t_disc
(
fd
, 
disc
)

167 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0) {

168 
	`Ârötf
(
°dîr
, "KISS_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

169  (-
î∫o
);

172 
	}
}

176 
	$KISS_öô
(
fd
)

178 i‡(
	`KISS_£t_disc
(
fd
, 
N_SLIP
) < 0)

180 i‡(
	`io˘l
(
fd
, 
SIOCSIFENCAP
, 4) < 0)

183 
	}
}

186 
hwty≥
 
	g√åom_hwty≥
 =

188 "√åom", 
NULL
, 
ARPHRD_NETROM
, 7,

189 
NETROM_¥öt
, 
NETROM_höput
, 
NULL
, 0

192 
a·y≥
 
	g√åom_a·y≥
 =

194 "√åom", 
NULL
, 
AF_NETROM
, 7,

195 
NETROM_¥öt
, 
NETROM_•röt
, 
NETROM_öput
, 
NETROM_hîr‹
,

196 
NULL
, NULL, NULL,

	@net-tools-1.60/lib/netrom_gr.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_AFNETROM


24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<uni°d.h
>

27 
	~"√t-suµ‹t.h
"

28 
	~"∑th«mes.h
"

29 
	~"öé.h
"

33 
	$NETROM_Ωröt
(
›ti⁄s
)

35 
FILE
 *
f1
 = 
	`f›í
(
_PATH_PROCNET_NR_NODES
, "r");

36 
FILE
 *
f2
 = 
	`f›í
(
_PATH_PROCNET_NR_NEIGH
, "r");

37 
buf„r
[256];

38 
quÆ
, 
n
, 
w
;

42 
f1
 = 
	`f›í
(
_PATH_PROCNET_NR_NODES
, "r");

43 i‡(!
f1
Ë
	`≥º‹
(
_PATH_PROCNET_NR_NODES
);

44 
f2
 = 
	`f›í
(
_PATH_PROCNET_NR_NEIGH
, "r");

45 i‡(!
f2
Ë
	`≥º‹
(
_PATH_PROCNET_NR_NEIGH
);

47 i‡(
f1
 =
NULL
 || 
f2
 == NULL) {

48 
	`¥ötf
(
	`_
("NET/ROMÇot configured inÅhis system.\n"));

51 
	`¥ötf
(
	`_
("Kernel NET/ROMÑoutingÅable\n"));

52 
	`¥ötf
(
	`_
("Destination Mnemonic Quality Neighbour Iface\n"));

53 
	`fgës
(
buf„r
, 256, 
f1
);

54 
	`fgës
(
buf„r
, 256, 
f1
)) {

55 
buf„r
[9] = 0;

56 
buf„r
[17] = 0;

57 
w
 = 
	`©oi
(
buf„r
 + 19) - 1;

58 
	`¥ötf
("%-9s %-7s ",

59 
buf„r
, buffer + 10);

60 
quÆ
 = 
	`©oi
(
buf„r
 + 24 + 15 * 
w
);

61 
n
 = 
	`©oi
(
buf„r
 + 32 + 15 * 
w
);

62 
	`ªwöd
(
f2
);

63 
	`fgës
(
buf„r
, 256, 
f2
);

64 
	`fgës
(
buf„r
, 256, 
f2
)) {

65 i‡(
	`©oi
(
buf„r
Ë=
n
) {

66 
buf„r
[15] = 0;

67 
buf„r
[20] = 0;

68 
	`¥ötf
("%3d %-9s %s\n",

69 
quÆ
, 
buf„r
 + 6, buffer + 16);

74 
	`f˛o£
(
f1
);

75 
	`f˛o£
(
f2
);

77 
	}
}

	@net-tools-1.60/lib/netrom_sr.c

1 
	~"c⁄fig.h
"

3 #i‡
HAVE_AFNETROM


4 
	~<sys/∑øm.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<√töë/ö.h
>

8 
	~<¨∑/öë.h
>

9 
	~<¨∑/«me£r.h
>

11 
	~<sys/io˘l.h
>

12 
	~<˘y≥.h
>

13 
	~<î∫o.h
>

14 
	~<√tdb.h
>

15 
	~<ªsﬁv.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~"vîsi⁄.h
"

21 
	~"√t-suµ‹t.h
"

22 
	~"∑th«mes.h
"

23 
	~"öé.h
"

24 
	~"√t-„©uªs.h
"

26 
a·y≥
 
√åom_a·y≥
;

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, 
	`_
("netrom usage\n"));

36  (
E_USAGE
);

37 
	}
}

41 
	$NETROM_röput
(
a˘i⁄
, 
ext
, **
¨gs
)

44 
	`Ârötf
(
°dîr
, 
	`_
("NET/ROM:ÅhisÇeedsÅo be written\n"));

46 
	}
}

	@net-tools-1.60/lib/nstrcmp.c

3 
	~<˘y≥.h
>

4 
	~<°dlib.h
>

5 
	~"utû.h
"

8 
	$n°rcmp
(c⁄° *
a°r
, c⁄° *
b
)

10 c⁄° *
a
 = 
a°r
;

12 *
a
 =*
b
) {

13 i‡(*
a
 == '\0')

15 
a
++;

16 
b
++;

18 i‡(
	`isdigô
(*
a
)) {

19 i‡(!
	`isdigô
(*
b
))

21 
a
 > 
a°r
) {

22 
a
--;

23 i‡(!
	`isdigô
(*
a
)) {

24 
a
++;

27 i‡(!
	`isdigô
(*
b
))

29 
b
--;

31  
	`©oi
(
a
Ë>átoi(
b
) ? 1 : -1;

33  *
a
 - *
b
;

34 
	}
}

	@net-tools-1.60/lib/pathnames.h

14 
	#_PATH_PROCNET_IGMP
 "/¥oc/√t/igmp"

	)

15 
	#_PATH_PROCNET_IGMP6
 "/¥oc/√t/igmp6"

	)

16 
	#_PATH_PROCNET_TCP
 "/¥oc/√t/t˝"

	)

17 
	#_PATH_PROCNET_TCP6
 "/¥oc/√t/t˝6"

	)

18 
	#_PATH_PROCNET_UDP
 "/¥oc/√t/udp"

	)

19 
	#_PATH_PROCNET_UDP6
 "/¥oc/√t/udp6"

	)

20 
	#_PATH_PROCNET_RAW
 "/¥oc/√t/øw"

	)

21 
	#_PATH_PROCNET_RAW6
 "/¥oc/√t/øw6"

	)

22 
	#_PATH_PROCNET_UNIX
 "/¥oc/√t/unix"

	)

23 
	#_PATH_PROCNET_ROUTE
 "/¥oc/√t/rouã"

	)

24 
	#_PATH_PROCNET_ROUTE6
 "/¥oc/√t/ùv6_rouã"

	)

25 
	#_PATH_PROCNET_RTCACHE
 "/¥oc/√t/π_ˇche"

	)

26 
	#_PATH_PROCNET_AX25_ROUTE
 "/¥oc/√t/ax25_rouã"

	)

27 
	#_PATH_PROCNET_NR
 "/¥oc/√t/ƒ"

	)

28 
	#_PATH_PROCNET_NR_NEIGH
 "/¥oc/√t/ƒ_√igh"

	)

29 
	#_PATH_PROCNET_NR_NODES
 "/¥oc/√t/ƒ_nodes"

	)

30 
	#_PATH_PROCNET_ARP
 "/¥oc/√t/¨p"

	)

31 
	#_PATH_PROCNET_AX25
 "/¥oc/√t/ax25"

	)

32 
	#_PATH_PROCNET_IPX
 "/¥oc/√t/ùx"

	)

33 
	#_PATH_PROCNET_IPX_ROUTE
 "/¥oc/√t/ùx_rouã"

	)

34 
	#_PATH_PROCNET_ATALK
 "/¥oc/√t/≠∂ëÆk"

	)

35 
	#_PATH_PROCNET_IP_BLK
 "/¥oc/√t/ù_block"

	)

36 
	#_PATH_PROCNET_IP_FWD
 "/¥oc/√t/ù_f‹w¨d"

	)

37 
	#_PATH_PROCNET_IP_ACC
 "/¥oc/√t/ù_ac˘"

	)

38 
	#_PATH_PROCNET_IP_MASQ
 "/¥oc/√t/ù_masquîade"

	)

39 
	#_PATH_PROCNET_NDISC
 "/¥oc/√t/ndisc"

	)

40 
	#_PATH_PROCNET_IFINET6
 "/¥oc/√t/if_öë6"

	)

41 
	#_PATH_PROCNET_DEV
 "/¥oc/√t/dev"

	)

42 
	#_PATH_PROCNET_RARP
 "/¥oc/√t/øΩ"

	)

43 
	#_PATH_ETHERS
 "/ëc/ëhîs"

	)

44 
	#_PATH_PROCNET_ROSE_ROUTE
 "/¥oc/√t/ro£_rouãs"

	)

45 
	#_PATH_PROCNET_X25
 "/¥oc/√t/x25"

	)

46 
	#_PATH_PROCNET_X25_ROUTE
 "/¥oc/√t/x25_rouãs"

	)

47 
	#_PATH_PROCNET_DEV_MCAST
 "/¥oc/√t/dev_mˇ°"

	)

50 
	#_PATH_DEV_ROUTE
 "/dev/rouã"

	)

	@net-tools-1.60/lib/ppp.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_HWPPP


25 
	~<sys/ty≥s.h
>

26 
	~<sys/io˘l.h
>

27 
	~<sys/sockë.h
>

28 
	~<√t/if_¨p.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

35 
	~<ãrmios.h
>

36 
	~<uni°d.h
>

37 
	~"√t-suµ‹t.h
"

38 
	~"∑th«mes.h
"

39 
	~"öé.h
"

42 
	$do_µp
(
fd
)

44 
	`Ârötf
(
°dîr
, 
	`_
("You cannot start PPP withÅhisÖrogram.\n"));

46 
	}
}

49 
hwty≥
 
	gµp_hwty≥
 =

51 "µp", 
NULL
, 
ARPHRD_PPP
, 0,

52 
NULL
, NULL, 
do_µp
, 0

	@net-tools-1.60/lib/ppp_ac.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_HWPPP


19 
	~<sys/ty≥s.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 
	~<°rög.h
>

29 
	~<ãrmios.h
>

30 
	~<uni°d.h
>

31 
	~"√t-suµ‹t.h
"

32 
	~"∑th«mes.h
"

33 
	~"öé.h
"

36 
	$PPP_a˘iv©e
(
fd
)

38 
	`Ârötf
(
°dîr
, 
	`_
("Sorry, useÖppd!\n"));

40 
	}
}

	@net-tools-1.60/lib/proc.c

5 
	~<°rög.h
>

6 
	~<°d¨g.h
>

7 
	~<°dio.h
>

8 
	~<˘y≥.h
>

12 *
	$¥oc_gí_fmt
(*
«me
, 
m‹e
, 
FILE
 * 
fh
,...)

14 
buf
[512], 
f‹m©
[512] = "";

15 *
tôÀ
, *
hód
, *
hdr
;

16 
va_li°
 
≠
;

18 i‡(!
	`fgës
(
buf
, ( bufË- 1, 
fh
))

19  
NULL
;

20 
	`°rˇt
(
buf
, " ");

22 
	`va_°¨t
(
≠
, 
fh
);

23 
tôÀ
 = 
	`va_¨g
(
≠
, *);

24 
hdr
 = 
buf
; hdr;) {

25 
	`is•a˚
(*
hdr
) || *hdr == '|')

26 
hdr
++;

27 
hód
 = 
hdr
;

28 
hdr
 = 
	`°Ωbrk
(hdr, "| \t\n");

29 i‡(
hdr
)

30 *
hdr
++ = 0;

32 i‡(!
	`°rcmp
(
tôÀ
, 
hód
)) {

33 
	`°rˇt
(
f‹m©
, 
	`va_¨g
(
≠
, *));

34 
tôÀ
 = 
	`va_¨g
(
≠
, *);

35 i‡(!
tôÀ
 || !
hód
)

38 
	`°rˇt
(
f‹m©
, "%*s");

40 
	`°rˇt
(
f‹m©
, " ");

42 
	`va_íd
(
≠
);

44 i‡(!
m‹e
 && 
tôÀ
) {

45 
	`Ârötf
(
°dîr
, "warning: %s doesÇot containÑequired field %s\n",

46 
«me
, 
tôÀ
);

47  
NULL
;

49  
	`°rdup
(
f‹m©
);

50 
	}
}

56 
	$¥oc_guess_fmt
(*
«me
, 
FILE
 *
fh
, ...)

58 
buf
[512];

59 *
tmp
;

60 
Êag
 = 0;

61 
va_li°
 
≠
;

63 i‡(!
	`fgës
(
buf
, ( bufË- 1, 
fh
))

65 
	`°rˇt
(
buf
, "\0");

66 
	`va_°¨t
(
≠
, 
fh
);

67 (
tmp
 = 
	`va_¨g
(
≠
, *))) {

68 
f
 = 
	`va_¨g
(
≠
, );

69 i‡(
	`°r°r
(
buf
,
tmp
) != 0)

70 
Êag
 |
f
;

72 
	`va_íd
(
≠
);

73  
Êag
;

74 
	}
}

	@net-tools-1.60/lib/proc.h

4 *
¥oc_gí_fmt
(*
«me
, 
m‹e
, 
FILE
 * 
fh
,...);

5 
¥oc_guess_fmt
(*
«me
, 
FILE
* 
fh
,...);

	@net-tools-1.60/lib/rose.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_AFROSE
 || 
HAVE_HWROSE


21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/io˘l.h
>

24 
	~<sys/sockë.h
>

25 
	~<√t/if_¨p.h
>

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

33 
	~<uni°d.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	~"öé.h
"

38 #i‚de‡
_NETROSE_ROSE_H


39 
	~<löux/ax25.h
>

40 
	~<löux/ro£.h
>

42 #unde‡
AF_ROSE


43 #i‡
PF_ROSE
 =
AF_ROSE


45 #unde‡
PF_ROSE


46 
	#PF_ROSE
 11

	)

49 
	#AF_ROSE
 
PF_ROSE


	)

52 
	gROSE_îrmsg
[128];

54 
a·y≥
 
ro£_a·y≥
;

57 
	$ROSE_¥öt
(*
±r
)

59 
buff
[12];

61 
	`¢¥ötf
(
buff
, (buff), "%02x%02x%02x%02x%02x", 
±r
[0],Ötr[1],Ötr[2],Ötr[3],Ötr[4]);

62 
buff
[10] = '\0';

63  (
buff
);

64 
	}
}

68 
	$ROSE_•röt
(
sockaddr
 *
ßp
, 
numîic
)

70 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

71  
	`_
("[NONE SET]");

73  (
	`ROSE_¥öt
(((
sockaddr_ro£
 *Ë
ßp
)->
§o£_addr
.
ro£_addr
));

74 
	}
}

77 
	$ROSE_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

79 *
±r
;

80 
i
, 
o
;

82 
ßp
->
ß_Ámûy
 = 
ro£_a·y≥
.
af
;

83 
±r
 = ((
sockaddr_ro£
 *Ë
ßp
)->
§o£_addr
.
ro£_addr
;

86 i‡(
	`°æí
(
buÂ
) != 10) {

87 
	`°r˝y
(
ROSE_îrmsg
, 
	`_
("Nodeáddress must beÅen digits"));

88 #ifde‡
DEBUG


89 
	`Ârötf
(
°dîr
, "ro£_öput(%s): %†!\n", 
ROSE_îrmsg
, 
‹ig
);

91 
î∫o
 = 
EINVAL
;

95 
i
 = 0, 
o
 = 0; i < 5; i++) {

96 
o
 = 
i
 * 2;

97 
±r
[
i
] = (((
buÂ
[
o
] - '0') << 4) | (bufp[o + 1] - '0'));

101 #ifde‡
DEBUG


102 
	`Ârötf
(
°dîr
, "ro£_öput(%s): ", 
‹ig
);

103 
i
 = 0; i < (
ro£_addªss
); i++)

104 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

105 
	`Ârötf
(
°dîr
, "\n");

109 
	}
}

113 
	$ROSE_hîr‹
(*
ãxt
)

115 i‡(
ãxt
 =
NULL
)

116 
	`Ârötf
(
°dîr
, "%s\n", 
ROSE_îrmsg
);

118 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
ROSE_îrmsg
);

119 
	}
}

122 
	$ROSE_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

124 i‡(
	`ROSE_öput
(0, 
buÂ
, 
ßp
) < 0)

126 
ßp
->
ß_Ámûy
 = 
ARPHRD_ROSE
;

128 
	}
}

130 
hwty≥
 
	gro£_hwty≥
 =

132 "ro£", 
NULL
, 
ARPHRD_ROSE
, 10,

133 
ROSE_¥öt
, 
ROSE_höput
, 
NULL


136 
a·y≥
 
	gro£_a·y≥
 =

138 "ro£", 
NULL
, 
AF_ROSE
, 10,

139 
ROSE_¥öt
, 
ROSE_•röt
, 
ROSE_öput
, 
ROSE_hîr‹
,

140 
NULL
, NULL, NULL,

	@net-tools-1.60/lib/rose_gr.c

20 
	~"c⁄fig.h
"

22 #i‡
HAVE_AFROSE


24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

26 
	~<löux/ro£.h
>

27 
	~<sys/sockë.h
>

28 
	~<√t/if_¨p.h
>

29 
	~<˘y≥.h
>

30 
	~<î∫o.h
>

31 
	~<f˙é.h
>

32 
	~<°rög.h
>

33 
	~<ãrmios.h
>

35 
	~<°dlib.h
>

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~"√t-suµ‹t.h
"

39 
	~"∑th«mes.h
"

40 
	~"öé.h
"

42 
	$ROSE_Ωröt
(
›ti⁄s
)

44 
FILE
 *
f
 = 
NULL
;

45 
buf„r
[256];

46 
u£
;

48 
f
=
	`f›í
(
_PATH_PROCNET_ROSE_ROUTE
, "r");

49 i‡(
f
 =
NULL
) {

50 
	`≥º‹
(
_PATH_PROCNET_ROSE_ROUTE
);

51 
	`¥ötf
(
	`_
("ROSEÇot configured inÅhis system.\n"));

54 
	`¥ötf
(
	`_
("Kernel ROSEÑoutingÅable\n"));

55 
	`¥ötf
(
	`_
("Destination Iface Use\n"));

56 
	`fgës
(
buf„r
, 256, 
f
);

57 
	`fgës
(
buf„r
, 256, 
f
)) {

58 
buf„r
[9] = 0;

59 
buf„r
[14] = 0;

60 
u£
 = 
	`©oi
(
buf„r
 + 15);

61 
	`¥ötf
("%-9s %-5s %5d\n",

62 
buf„r
, buf„∏+ 10, 
u£
);

64 
	`f˛o£
(
f
);

66 
	}
}

	@net-tools-1.60/lib/setroute.c

27 
	~<°dio.h
>

28 
	~<°rög.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"vîsi⁄.h
"

32 
	~"c⁄fig.h
"

33 
	~"öé.h
"

35 
a·y≥
 
un•ec_a·y≥
;

36 
a·y≥
 
unix_a·y≥
;

37 
a·y≥
 
öë_a·y≥
;

38 
a·y≥
 
öë6_a·y≥
;

39 
a·y≥
 
ax25_a·y≥
;

40 
a·y≥
 
√åom_a·y≥
;

41 
a·y≥
 
ùx_a·y≥
;

42 
a·y≥
 
ddp_a·y≥
;

43 
a·y≥
 
x25_a·y≥
;

45 
	$£åouã_öô
()

47 #i‡
HAVE_AFINET


48 
öë_a·y≥
.
röput
 = 
INET_röput
;

50 #i‡
HAVE_AFINET6


51 
öë6_a·y≥
.
röput
 = 
INET6_röput
;

53 #i‡
HAVE_AFNETROM


54 
√åom_a·y≥
.
röput
 = 
NETROM_röput
;

56 #i‡
HAVE_AFIPX


57 
ùx_a·y≥
.
röput
 = 
IPX_röput
;

59 #i‡
HAVE_AFX25


60 
x25_a·y≥
.
röput
 = 
X25_röput
;

63 #i‡
HAVE_AFAX25


64 
ax25_a·y≥
.
röput
 = 
AX25_röput
;

66 #i‡
HAVE_AFATALK


67 
ddp_a·y≥
.
röput
 = 
DDP_röput
;

70 
	}
}

73 
	$rouã_edô
(
a˘i⁄
, c⁄° *
a‚ame
, 
›ti⁄s
, **
¨gv
)

75 
a·y≥
 *
≠
;

77 
≠
 = 
	`gë_a·y≥
(
a‚ame
);

79 i‡(!
≠
) {

80 
	`Ârötf
(
°dîr
, 
	`_
("Addªs†Ámûy `%s'ÇŸ suµ‹ãd.\n"), 
a‚ame
);

81  (
E_OPTERR
);

83 i‡(!
≠
->
röput
) {

84 
	`Ârötf
(
°dîr
, 
	`_
("Nÿroutög f‹áddªs†Ámûy `%s'.\n"), 
≠
->
«me
);

85  (
E_OPTERR
);

87  (
≠
->
	`röput
(
a˘i⁄
, 
›ti⁄s
, 
¨gv
));

88 
	}
}

	@net-tools-1.60/lib/sit.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_HWSIT


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if_¨p.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<ãrmios.h
>

32 
	~<uni°d.h
>

33 
	~"√t-suµ‹t.h
"

34 
	~"∑th«mes.h
"

36 #i‚de‡
ARPHRD_SIT


38 
	#ARPHRD_SIT
 776

	)

41 
hwty≥
 
	gsô_hwty≥
 =

43 "sô", 
NULL
, 
ARPHRD_SIT
, 0,

44 
NULL
, NULL, NULL, 0

	@net-tools-1.60/lib/slip.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_HWSLIP


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if_¨p.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<ãrmios.h
>

32 
	~<uni°d.h
>

33 
	~"√t-suµ‹t.h
"

34 
	~"∑th«mes.h
"

37 
hwty≥
 
	g¶ù_hwty≥
 =

39 "¶ù", 
NULL
, 
ARPHRD_SLIP
, 0,

40 
NULL
, NULL, NULL

42 
hwty≥
 
	gc¶ù_hwty≥
 =

44 "c¶ù", 
NULL
, 
ARPHRD_CSLIP
, 0,

45 
NULL
, NULL, NULL

47 
hwty≥
 
	g¶ù6_hwty≥
 =

49 "¶ù6", 
NULL
, 
ARPHRD_SLIP6
, 0,

50 
NULL
, NULL, NULL

52 
hwty≥
 
	gc¶ù6_hwty≥
 =

54 "c¶ù6", 
NULL
, 
ARPHRD_CSLIP6
, 0,

55 
NULL
, NULL, NULL

57 
hwty≥
 
	gad≠tive_hwty≥
 =

59 "ad≠tive", 
NULL
, 
ARPHRD_ADAPT
, 0,

60 
NULL
, NULL, NULL

	@net-tools-1.60/lib/slip_ac.c

19 
	~"c⁄fig.h
"

21 #i‡
HAVE_HWSLIP


23 
	~<sys/ty≥s.h
>

24 
	~<sys/io˘l.h
>

25 
	~<sys/sockë.h
>

26 
	~<√t/if_¨p.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<˘y≥.h
>

30 
	~<î∫o.h
>

31 
	~<f˙é.h
>

32 
	~<°rög.h
>

33 
	~<ãrmios.h
>

34 
	~<uni°d.h
>

35 
	~"√t-suµ‹t.h
"

36 
	~"∑th«mes.h
"

40 
	$SLIP_£t_disc
(
fd
, 
disc
)

42 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0) {

43 
	`Ârötf
(
°dîr
, "SLIP_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

44  (-
î∫o
);

47 
	}
}

51 
	$SLIP_£t_íˇp
(
fd
, 
íˇp
)

53 i‡(
	`io˘l
(
fd
, 
SIOCSIFENCAP
, &
íˇp
) < 0) {

54 
	`Ârötf
(
°dîr
, "SLIP_£t_íˇp(%d): %s\n", 
íˇp
, 
	`°ªº‹
(
î∫o
));

55  (-
î∫o
);

58 
	}
}

62 
	$SLIP_a˘iv©e
(
fd
)

64 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

66 i‡(
	`SLIP_£t_íˇp
(
fd
, 0) < 0)

69 
	}
}

73 
	$CSLIP_a˘iv©e
(
fd
)

75 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

77 i‡(
	`SLIP_£t_íˇp
(
fd
, 1) < 0)

80 
	}
}

84 
	$SLIP6_a˘iv©e
(
fd
)

86 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

88 i‡(
	`SLIP_£t_íˇp
(
fd
, 2) < 0)

91 
	}
}

95 
	$CSLIP6_a˘iv©e
(
fd
)

97 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

99 i‡(
	`SLIP_£t_íˇp
(
fd
, 3) < 0)

102 
	}
}

106 
	$ADAPTIVE_a˘iv©e
(
fd
)

108 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

110 i‡(
	`SLIP_£t_íˇp
(
fd
, 8) < 0)

113 
	}
}

	@net-tools-1.60/lib/sockets.c

9 
	~<sys/sockë.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

13 
	~"c⁄fig.h
"

14 
	~"sockës.h
"

15 
	~"öé.h
"

16 
	~"utû.h
"

17 
	~"√t-suµ‹t.h
"

19 
	gskfd
 = -1;

21 
	$sockës_›í
(
Ámûy
)

23 
a·y≥
 **
a·
;

24 
sfd
 = -1;

25 
f‹˚
 = -1;

27 i‡(
f‹˚
 < 0) {

28 
f‹˚
 = 0;

29 i‡(
	`kî√l_vîsi⁄
(Ë< 
	`KRELEASE
(2, 1, 0))

30 
f‹˚
 = 1;

31 i‡(
	`ac˚ss
("/¥oc/√t", 
R_OK
))

32 
f‹˚
 = 1;

34 
a·
 = 
a·y≥s
; *aft;áft++) {

35 
a·y≥
 *
af
 = *
a·
;

36 
ty≥
 = 
SOCK_DGRAM
;

37 i‡(
af
->a‡=
AF_UNSPEC
)

39 i‡(
Ámûy
 && famûy !
af
->af)

41 i‡(
af
->
fd
 != -1) {

42 
sfd
 = 
af
->
fd
;

46 i‡(!
Ámûy
 && !
f‹˚
 && 
af
->
Êag_fûe
) {

47 i‡(
	`ac˚ss
(
af
->
Êag_fûe
, 
R_OK
))

50 #i‡
HAVE_AFNETROM


51 i‡(
af
->a‡=
AF_NETROM
)

52 
ty≥
 = 
SOCK_SEQPACKET
;

54 #i‡
HAVE_AFX25


55 i‡(
af
->a‡=
AF_X25
)

56 
ty≥
 = 
SOCK_SEQPACKET
;

58 
af
->
fd
 = 
	`sockë
◊f->af, 
ty≥
, 0);

59 i‡(
af
->
fd
 >= 0)

60 
sfd
 = 
af
->
fd
;

62 i‡(
sfd
 < 0)

63 
	`Ârötf
(
°dîr
, 
	`_
("No usableáddress families found.\n"));

64  
sfd
;

65 
	}
}

	@net-tools-1.60/lib/strip.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_HWSTRIP


19 
	~<sys/ty≥s.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/if_°rù.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<ãrmios.h
>

32 
	~<uni°d.h
>

33 
	~"√t-suµ‹t.h
"

34 
	~"∑th«mes.h
"

35 
	~"utû.h
"

36 
	~"öé.h
"

39 
hwty≥
 
°rù_hwty≥
;

42 
	$¥_°rù
(*
±r
)

44 
buff
[64];

45 if(
±r
[1])

46 
	`•rötf
(
buff
, "%02x-%02x%02x-%02x%02x", *(
±r
+1), *(ptr+2), *(ptr+3),

47 *(
±r
+4), *(ptr+5));

49 
	`•rötf
(
buff
, "%02x%02x-%02x%02x", *(
±r
+2), *(ptr+3), *(ptr+4),

50 *(
±r
+5));

51  
buff
;

52 
	}
}

55 
	$ö_°rù
(*
buÂ
, 
sockaddr
 *
ßp
)

57 
i
,
i0
;

58 
MëricomAddªss
 *
haddr
 = (MëricomAddªs†*Ë(
ßp
->
ß_d©a
);

61 
ßp
->
ß_Ámûy
 = 
°rù_hwty≥
.
ty≥
;

64 
i0
 = 
i
 = (
buÂ
[0] == '*') ? 1 : 0;

66 
buÂ
[
i
] && (bufp[i] != '-'))

67 
i
++;

69 i‡(
buÂ
[
i
] != '-')

72 if(
i
-
i0
 == 2)

74 
haddr
->
c
[1] = 
	`°πﬁ
(&
buÂ
[
i0
], 0, 16);

75 
i
++;

76 if(
buÂ
[
i
] == 0)  -1;

78 
haddr
->
c
[1] = 0;

79 
i
=
i0
;

81 
haddr
->
c
[2] = 
	`°πﬁ
(&
buÂ
[
i
], 0, 16) >> 8;

82 
haddr
->
c
[3] = 
	`°πﬁ
(&
buÂ
[
i
], 0, 16) & 0xFF;

84 
buÂ
[
i
] && (bufp[i] != '-'))

85 
i
++;

87 i‡(
buÂ
[
i
] != '-')

90 
haddr
->
c
[4] = 
	`°πﬁ
(&
buÂ
[
i
+1], 0, 16) >> 8;

91 
haddr
->
c
[5] = 
	`°πﬁ
(&
buÂ
[
i
+1], 0, 16) & 0xFF;

92 
haddr
->
c
[0] = 0;

95 
	}
}

100 
	$do_°rù
(
fd
)

102 
disc
 = 
N_STRIP
;

103 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0)

105 
	`Ârötf
(
°dîr
, "STRIP_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

106 (-
î∫o
);

109 
	}
}

111 
hwty≥
 
	g°rù_hwty≥
 = {

112 "°rù", "Mëricom SèrmodêIP", 
ARPHRD_METRICOM
, (
MëricomAddªss
),

113 
¥_°rù
, 
ö_°rù
, 
do_°rù
, 0

	@net-tools-1.60/lib/tr.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_HWTR


19 
	~<asm/ty≥s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<löux/if_å.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

34 
hwty≥
 
å_hwty≥
;

36 *
	$¥_å
(*
±r
)

38 
buff
[64];

40 
	`¢¥ötf
(
buff
, (buff), "%02X:%02X:%02X:%02X:%02X:%02X",

41 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

42 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

44  (
buff
);

45 
	}
}

48 
	$ö_å
(*
buÂ
, 
sockaddr
 *
ßp
)

50 *
±r
;

51 
c
, *
‹ig
;

52 
i
, 
vÆ
;

54 
ßp
->
ß_Ámûy
 = 
å_hwty≥
.
ty≥
;

55 
±r
 = 
ßp
->
ß_d©a
;

57 
i
 = 0;

58 
‹ig
 = 
buÂ
;

59 (*
buÂ
 !'\0'Ë&& (
i
 < 
TR_ALEN
)) {

60 
vÆ
 = 0;

61 
c
 = *
buÂ
++;

62 i‡(
	`isdigô
(
c
))

63 
vÆ
 = 
c
 - '0';

64 i‡(
c
 >= 'a' && c <= 'f')

65 
vÆ
 = 
c
 - 'a' + 10;

66 i‡(
c
 >= 'A' && c <= 'F')

67 
vÆ
 = 
c
 - 'A' + 10;

69 #ifde‡
DEBUG


70 
	`Ârötf
(
°dîr
, 
	`_
("ö_å(%s): invÆidÅokíÑögáddªss!\n"), 
‹ig
);

72 
î∫o
 = 
EINVAL
;

75 
vÆ
 <<= 4;

76 
c
 = *
buÂ
++;

77 i‡(
	`isdigô
(
c
))

78 
vÆ
 |
c
 - '0';

79 i‡(
c
 >= 'a' && c <= 'f')

80 
vÆ
 |
c
 - 'a' + 10;

81 i‡(
c
 >= 'A' && c <= 'F')

82 
vÆ
 |
c
 - 'A' + 10;

84 #ifde‡
DEBUG


85 
	`Ârötf
(
°dîr
, 
	`_
("ö_å(%s): invÆidÅokíÑögáddªss!\n"), 
‹ig
);

87 
î∫o
 = 
EINVAL
;

90 *
±r
++ = (Ë(
vÆ
 & 0377);

91 
i
++;

94 i‡(*
buÂ
 == ':') {

95 i‡(
i
 =
TR_ALEN
) {

96 #ifde‡
DEBUG


97 
	`Ârötf
(
°dîr
, 
	`_
("in_tr(%s):Årailing : ignored!\n"),

98 
‹ig
)

102 
buÂ
++;

107 i‡((
i
 =
TR_ALEN
Ë&& (*
buÂ
 != '\0')) {

108 #ifde‡
DEBUG


109 
	`Ârötf
(
°dîr
, 
	`_
("ö_å(%s):Åøûög junk!\n"), 
‹ig
);

110 
î∫o
 = 
EINVAL
;

114 #ifde‡
DEBUG


115 
	`Ârötf
(
°dîr
, "ö_å(%s): %s\n", 
‹ig
, 
	`¥_å
(
ßp
->
ß_d©a
));

119 
	}
}

122 
hwty≥
 
	gå_hwty≥
 =

124 "å", 
NULL
 , 
ARPHRD_IEEE802
, 
TR_ALEN
,

125 
¥_å
, 
ö_å
, 
NULL


127 #ifde‡
ARPHRD_IEEE802_TR


128 
hwty≥
 
	gå_hwty≥1
 =

130 "å", 
NULL
 , 
ARPHRD_IEEE802_TR
, 
TR_ALEN
,

131 
¥_å
, 
ö_å
, 
NULL


	@net-tools-1.60/lib/tunnel.c

6 
	~"c⁄fig.h
"

8 #i‡
HAVE_HWTUNNEL


9 
	~<sys/ty≥s.h
>

10 
	~<sys/sockë.h
>

11 
	~<√t/if_¨p.h
>

12 
	~<löux/if_ëhî.h
>

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

15 
	~<î∫o.h
>

16 
	~<˘y≥.h
>

17 
	~<°rög.h
>

18 
	~<uni°d.h
>

19 
	~"√t-suµ‹t.h
"

20 
	~"∑th«mes.h
"

22 
hwty≥
 
ëhî_hwty≥
;

24 *
	$¥_tu¬ñ
(*
±r
)

27 
	}
}

30 
	$ö_tu¬ñ
(*
buÂ
, 
sockaddr
 *
ßp
)

33 
	}
}

36 
hwty≥
 
	gtu¬ñ_hwty≥
 =

38 "tu¬ñ", 
NULL
, 
ARPHRD_TUNNEL
, 0,

39 
¥_tu¬ñ
, 
ö_tu¬ñ
, 
NULL
, 0

	@net-tools-1.60/lib/unix.c

15 
	~"c⁄fig.h
"

17 
	~<sys/ty≥s.h
>

18 
	~<sys/sockë.h
>

19 #i‡
HAVE_AFUNIX


20 
	~<sys/un.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<î∫o.h
>

25 
	~<˘y≥.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~"√t-suµ‹t.h
"

29 
	~"∑th«mes.h
"

30 
	~"öé.h
"

31 
	~"utû.h
"

35 *
	$UNSPEC_¥öt
(*
±r
)

37 
buff
[64];

38 *
pos
;

39 
i
;

41 
pos
 = 
buff
;

42 
i
 = 0; i < (
sockaddr
); i++) {

43 
pos
 +
	`•rötf
’os, "%02X-", (*
±r
++ & 0377));

45 
buff
[
	`°æí
(buff) - 1] = '\0';

46  (
buff
);

47 
	}
}

51 *
	$UNSPEC_•röt
(
sockaddr
 *
ßp
, 
numîic
)

53 
buf
[64];

55 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

56  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

57  (
	`UNSPEC_¥öt
(
ßp
->
ß_d©a
));

58 
	}
}

61 #i‡
HAVE_AFUNIX


64 *
	$UNIX_¥öt
(*
±r
)

66  (
±r
);

67 
	}
}

71 *
	$UNIX_•röt
(
sockaddr
 *
ßp
, 
numîic
)

73 
buf
[64];

75 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

76  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

77  (
	`UNIX_¥öt
(
ßp
->
ß_d©a
));

78 
	}
}

81 
a·y≥
 
	gunix_a·y≥
 =

83 "unix", 
NULL
, 
AF_UNIX
, 0,

84 
UNIX_¥öt
, 
UNIX_•röt
, 
NULL
, NULL,

85 
NULL
, NULL, NULL,

92 
a·y≥
 
	gun•ec_a·y≥
 =

94 "un•ec", 
NULL
, 
AF_UNSPEC
, 0,

95 
UNSPEC_¥öt
, 
UNSPEC_•röt
, 
NULL
, NULL,

96 
NULL
,

	@net-tools-1.60/lib/util-ank.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<sy¶og.h
>

21 
	~<f˙é.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<°rög.h
>

25 
	~<√tdb.h
>

26 
	~<¨∑/öë.h
>

27 
	~<ªsﬁv.h
>

29 
	~"öé.h
"

30 
	~"utû-™k.h
"

32 #i‚de‡
AF_INET6


33 
	#AF_INET6
 10

	)

36 
	$sˇn_numbî
(*
¨g
, *
vÆ
)

38 
ªs
;

39 *
±r
;

41 i‡(!
¨g
 || !*arg)

43 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 0);

44 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 
UINT_MAX
)

46 *
vÆ
 = 
ªs
;

48 
	}
}

50 
	$gë_öãgî
(*
vÆ
, *
¨g
, 
ba£
)

52 
ªs
;

53 *
±r
;

55 i‡(!
¨g
 || !*arg)

57 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

58 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 
INT_MAX
 ||Ñe†< 
INT_MIN
)

60 *
vÆ
 = 
ªs
;

62 
	}
}

64 
	$gë_unsig√d
(*
vÆ
, *
¨g
, 
ba£
)

66 
ªs
;

67 *
±r
;

69 i‡(!
¨g
 || !*arg)

71 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

72 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 
UINT_MAX
)

74 *
vÆ
 = 
ªs
;

76 
	}
}

78 
	$gë_u32
(
__u32
 *
vÆ
, *
¨g
, 
ba£
)

80 
ªs
;

81 *
±r
;

83 i‡(!
¨g
 || !*arg)

85 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

86 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFFFFFFFFUL)

88 *
vÆ
 = 
ªs
;

90 
	}
}

92 
	$gë_u16
(
__u16
 *
vÆ
, *
¨g
, 
ba£
)

94 
ªs
;

95 *
±r
;

97 i‡(!
¨g
 || !*arg)

99 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

100 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFFFF)

102 *
vÆ
 = 
ªs
;

104 
	}
}

106 
	$gë_u8
(
__u8
 *
vÆ
, *
¨g
, 
ba£
)

108 
ªs
;

109 *
±r
;

111 i‡(!
¨g
 || !*arg)

113 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

114 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFF)

116 *
vÆ
 = 
ªs
;

118 
	}
}

120 
	$gë_s16
(
__s16
 *
vÆ
, *
¨g
, 
ba£
)

122 
ªs
;

123 *
±r
;

125 i‡(!
¨g
 || !*arg)

127 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

128 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0x7FFF ||Ñes < -0x8000)

130 *
vÆ
 = 
ªs
;

132 
	}
}

134 
	$gë_s8
(
__s8
 *
vÆ
, *
¨g
, 
ba£
)

136 
ªs
;

137 *
±r
;

139 i‡(!
¨g
 || !*arg)

141 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

142 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0x7F ||Ñes < -0x80)

144 *
vÆ
 = 
ªs
;

146 
	}
}

148 
	$gë_addr_1
(
öë_¥efix
 *
addr
, *
«me
, 
Ámûy
)

150 *
˝
;

151 *
≠
 = (*)
addr
->
d©a
;

152 
i
;

154 
	`mem£t
(
addr
, 0, (*addr));

156 i‡(
	`°rcmp
(
«me
, "default") == 0 || strcmp(name, "any") == 0) {

157 
addr
->
Ámûy
 = family;

158 
addr
->
byãÀn
 = (
Ámûy
 =
AF_INET6
 ? 16 : 4);

159 
addr
->
bôÀn
 = -1;

163 i‡(
	`°rchr
(
«me
, ':')) {

164 
addr
->
Ámûy
 = 
AF_INET6
;

165 i‡(
Ámûy
 !
AF_UNSPEC
 && famûy !
AF_INET6
)

167 i‡(
	`öë_±⁄
(
AF_INET6
, 
«me
, 
addr
->
d©a
) <= 0)

169 
addr
->
byãÀn
 = 16;

170 
addr
->
bôÀn
 = -1;

174 
addr
->
Ámûy
 = 
AF_INET
;

175 i‡(
Ámûy
 !
AF_UNSPEC
 && famûy !
AF_INET
)

177 
addr
->
byãÀn
 = 4;

178 
addr
->
bôÀn
 = -1;

179 
˝
=
«me
, 
i
=0; *cp; cp++) {

180 i‡(*
˝
 <= '9' && *cp >= '0') {

181 
≠
[
i
] = 10*≠[i] + (*
˝
-'0');

184 i‡(*
˝
 ='.' && ++
i
 <= 3)

189 
	}
}

191 
	$gë_¥efix_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

193 
îr
;

194 
∂í
;

195 *
¶ash
;

197 
	`mem£t
(
d°
, 0, (*dst));

199 i‡(
	`°rcmp
(
¨g
, "default") == 0 || strcmp(arg, "any") == 0) {

200 
d°
->
Ámûy
 = family;

201 
d°
->
byãÀn
 = 0;

202 
d°
->
bôÀn
 = 0;

206 
¶ash
 = 
	`°rchr
(
¨g
, '/');

207 i‡(
¶ash
)

208 *
¶ash
 = 0;

209 
îr
 = 
	`gë_addr_1
(
d°
, 
¨g
, 
Ámûy
);

210 i‡(
îr
 == 0) {

211 
d°
->
bôÀn
 = (d°->
Ámûy
 =
AF_INET6
 ? 128 : 32);

212 i‡(
¶ash
) {

213 i‡(
	`sˇn_numbî
(
¶ash
+1, &
∂í
Ë||ÖÀ¿> 
d°
->
bôÀn
) {

214 
îr
 = -1;

215 
d⁄e
;

217 
d°
->
bôÀn
 = 
∂í
;

220 
d⁄e
:

221 i‡(
¶ash
)

222 *
¶ash
 = '/';

223  
îr
;

224 
	}
}

226 
	$gë_addr
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

228 i‡(
	`gë_addr_1
(
d°
, 
¨g
, 
Ámûy
)) {

229 
	`Ârötf
(
°dîr
, 
	`_
("ù: %†i†övÆid i√àaddªss\n"), 
¨g
);

230 
	`exô
(1);

233 
	}
}

235 
	$gë_¥efix
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

237 i‡(
	`gë_¥efix_1
(
d°
, 
¨g
, 
Ámûy
)) {

238 
	`Ârötf
(
°dîr
, 
	`_
("ù: %†i†övÆid i√à¥efix\n"), 
¨g
);

239 
	`exô
(1);

242 
	}
}

244 
__u32
 
	$gë_addr32
(*
«me
)

246 
öë_¥efix
 
addr
;

247 i‡(
	`gë_addr_1
(&
addr
, 
«me
, 
AF_INET
)) {

248 
	`Ârötf
(
°dîr
, 
	`_
("ù: %†i†övÆid IPv4áddªss\n"), 
«me
);

249 
	`exô
(1);

251  
addr
.
d©a
[0];

252 
	}
}

254 
	$öv¨g
(*
msg
)

256 
	`Ârötf
(
°dîr
, 
	`_
("ù:árgumíài†wr⁄g: %s\n"), 
msg
);

257 
	`exô
(1);

258 
	}
}

260 
	$m©ches
(*
cmd
, *
∑âîn
)

262 
Àn
 = 
	`°æí
(
cmd
);

263 i‡(
Àn
 > 
	`°æí
(
∑âîn
))

265  
	`memcmp
(
∑âîn
, 
cmd
, 
Àn
);

266 
	}
}

268 
	$öë_addr_m©ch
(
öë_¥efix
 *
a
, i√t_¥efix *
b
, 
bôs
)

270 
__u32
 *
a1
 = 
a
->
d©a
;

271 
__u32
 *
a2
 = 
b
->
d©a
;

272 
w‹ds
 = 
bôs
 >> 0x05;

274 
bôs
 &= 0x1f;

276 i‡(
w‹ds
)

277 i‡(
	`memcmp
(
a1
, 
a2
, 
w‹ds
 << 2))

280 i‡(
bôs
) {

281 
__u32
 
w1
, 
w2
;

282 
__u32
 
mask
;

284 
w1
 = 
a1
[
w‹ds
];

285 
w2
 = 
a2
[
w‹ds
];

287 
mask
 = 
	`ht⁄l
((0xffffffffË<< (0x20 - 
bôs
));

289 i‡((
w1
 ^ 
w2
Ë& 
mask
)

294 
	}
}

296 c⁄° *
	$f‹m©_ho°
(
af
, *
addr
, 
__u8
 *
abuf
, 
Æí
)

298 #ifde‡
RESOLVE_HOSTNAMES


299 i‡(
ªsﬁve_ho°s
) {

300 
addæí
 = 0;

301 
ho°ít
 *
h_ít
;

302 
af
) {

303 
AF_INET
:

304 
addæí
 = 4;

306 
AF_INET6
:

307 
addæí
 = 16;

310 i‡(
addæí
 &&

311 (
h_ít
 = 
	`gëho°byaddr
(
addr
, 
addæí
, 
af
)Ë!
NULL
) {

312 
	`¢¥ötf
(
abuf
, 
Æí
-1, "%s", 
h_ít
->
h_«me
);

313  
abuf
;

317  
	`öë_¡›
(
af
, 
addr
, 
abuf
, 
Æí
);

318 
	}
}

	@net-tools-1.60/lib/util.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<sys/ut¢ame.h
>

8 
	~"utû.h
"

11 
	$oom
()

13 
	`Ârötf
(
°dîr
, "out of virtual memory\n");

14 
	`exô
(2);

15 
	}
}

17 *
	$xmÆloc
(
size_t
 
sz
)

19 *
p
 = 
	`ˇŒoc
(
sz
, 1);

20 i‡(!
p
)

21 
	`oom
();

22  
p
;

23 
	}
}

25 *
	$xªÆloc
(*
ﬁdp
, 
size_t
 
sz
)

27 *
p
 = 
	`ªÆloc
(
ﬁdp
, 
sz
);

28 i‡(!
p
)

29 
	`oom
();

30  
p
;

31 
	}
}

33 
	$kî√l_vîsi⁄
()

35 
ut¢ame
 
uts
;

36 
maj‹
, 
mö‹
, 
∑tch
;

38 i‡(
	`u«me
(&
uts
) < 0)

40 i‡(
	`ssˇnf
(
uts
.
ªÀa£
, "%d.%d.%d", &
maj‹
, &
mö‹
, &
∑tch
) != 3)

42  
	`KRELEASE
(
maj‹
, 
mö‹
, 
∑tch
);

43 
	}
}

47 *
	$ß„_°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

49 
d°
[
size
-1] = '\0';

50  
	`°∫˝y
(
d°
,
§c
,
size
-1);

51 
	}
}

	@net-tools-1.60/lib/util.h

1 
	~<°ddef.h
>

3 *
xmÆloc
(
size_t
 
sz
);

4 *
xªÆloc
(*
p
, 
size_t
 
sz
);

6 
	#√w
(
p
Ë(’Ë
	`xmÆloc
((*’))))

	)

9 
kî√l_vîsi⁄
();

10 
	#KRELEASE
(
maj
,
mö
,
∑tch
Ë((majË* 10000 + (mö)*1000 + (∑tch))

	)

13 
n°rcmp
(const *, const *);

15 *
ß„_°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

	@net-tools-1.60/lib/x25.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_AFX25
 || 
HAVE_HWX25


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/x25.h
>

25 
	~<√t/if_¨p.h
>

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

33 
	~<uni°d.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	#EXTERN


	)

38 
	~"√t-loˇÀ.h
"

40 
	~"öé.h
"

42 
	gX25_îrmsg
[128];

45 
a·y≥
 
x25_a·y≥
;

48 #i‚de‡
X25_ADDR_LEN


49 
	#X25_ADDR_LEN
 16

	)

54 
	$X25_¥öt
(*
±r
)

56 
buff
[
X25_ADDR_LEN
+1];

58 
	`°∫˝y
(
buff
, 
±r
, 
X25_ADDR_LEN
);

59 
buff
[
X25_ADDR_LEN
] = '\0';

60 (
buff
);

62 
	}
}

67 
	$X25_•röt
(
sockaddr
 *
ßp
, 
numîic
)

69 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

70 –
	`_
("[NONE SET]"));

71 (
	`X25_¥öt
(((
sockaddr_x25
 *)
ßp
)->
sx25_addr
.
x25_addr
));

72 
	}
}

79 
	$X25_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

81 *
±r
;

82 *
p
;

83 
sigdigôs
;

85 
ßp
->
ß_Ámûy
 = 
x25_a·y≥
.
af
;

86 
±r
 = ((
sockaddr_x25
 *)
ßp
)->
sx25_addr
.
x25_addr
;

90 i‡(
	`°æí
(
buÂ
)>18) {

91 
	`°r˝y
(
X25_îrmsg
, 
	`_
("Address can'tÉxceedÉighteen digits with sigdigits"));

92 #ifde‡
DEBUG


93 
	`Ârötf
(
°dîr
, "x25_öput(%s): %†!\n", 
X25_îrmsg
, 
‹ig
);

95 
î∫o
 = 
EINVAL
;

100 i‡((
p
 = 
	`°rchr
(
buÂ
, '/')Ë!
NULL
) {

101 *
p
 = '\0';

102 
sigdigôs
 = 
	`©oi
(
p
 + 1);

104 
sigdigôs
 = 
	`°æí
(
buÂ
);

107 i‡(
	`°æí
(
buÂ
Ë< 1 || såÀn(buÂË> 15 || 
sigdigôs
 > strlen(bufp)) {

108 *
p
 = '/';

109 
	`°r˝y
(
X25_îrmsg
, 
	`_
("Invalidáddress"));

110 #ifde‡
DEBUG


111 
	`Ârötf
(
°dîr
, "x25_öput(%s): %†!\n", 
X25_îrmsg
, 
‹ig
);

113 
î∫o
 = 
EINVAL
;

117 
	`°∫˝y
(
±r
, 
buÂ
, 
sigdigôs
+1);

120 #ifde‡
DEBUG


121 
	`Ârötf
(
°dîr
, "x25_öput(%s): ", 
‹ig
);

122 
i
 = 0; i < (
x25_addªss
); i++)

123 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

124 
	`Ârötf
(
°dîr
, "\n");

127  
sigdigôs
;

128 
	}
}

133 
	$X25_hîr‹
(*
ãxt
)

135 i‡(
ãxt
 =
NULL
Ë
	`Ârötf
(
°dîr
, "%s\n", 
X25_îrmsg
);

136 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
X25_îrmsg
);

137 
	}
}

141 
	$X25_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

143 i‡(
	`X25_öput
(0, 
buÂ
, 
ßp
) < 0) (-1);

144 
ßp
->
ß_Ámûy
 = 
ARPHRD_X25
;

146 
	}
}

149 
hwty≥
 
	gx25_hwty≥
 = {

150 "x25", 
NULL
, 
ARPHRD_X25
, 
X25_ADDR_LEN
,

151 
X25_¥öt
, 
X25_höput
, 
NULL


154 
a·y≥
 
	gx25_a·y≥
 =

156 "x25", 
NULL
, 
AF_X25
, 
X25_ADDR_LEN
,

157 
X25_¥öt
, 
X25_•röt
, 
X25_öput
, 
X25_hîr‹
,

158 
X25_Ωröt
, 
X25_röput
, 
NULL
 ,

	@net-tools-1.60/lib/x25_gr.c

19 
	~"c⁄fig.h
"

21 #i‡
HAVE_AFX25


23 
	~<sys/ty≥s.h
>

24 
	~<sys/io˘l.h
>

25 
	~<sys/sockë.h
>

26 
	~<löux/x25.h
>

27 
	~<löux/if_¨p.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

34 
	~<°dlib.h
>

35 
	~<°dio.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~"√t-suµ‹t.h
"

39 
	~"∑th«mes.h
"

40 
	#EXTERN


	)

42 
	~"√t-loˇÀ.h
"

44 
	~"öé.h
"

47 #i‚de‡
X25_ADDR_LEN


48 
	#X25_ADDR_LEN
 16

	)

51 
	$X25_Ωröt
(
›ti⁄s
)

53 
FILE
 *
f
=
	`f›í
(
_PATH_PROCNET_X25_ROUTE
, "r");

54 
buf„r
[256];

55 *
p
;

56 
digôs
;

58 if(
f
==
NULL
)

60 
	`¥ötf
–
	`_
("X.25Çot configured inÅhis system.\n"));

63 
	`¥ötf
–
	`_
("Kernel X.25ÑoutingÅable\n"));

64 
	`¥ötf
–
	`_
("Destination Iface\n"));

65 
	`fgës
(
buf„r
,256,
f
);

66 
	`fgës
(
buf„r
,256,
f
))

68 
p
 = 
	`°rchr
(
buf„r
,'\n');

69 i‡(
p
)

70 *
p
=0;

72 
buf„r
[24]=0;

73 
buf„r
[35]=0;

74 
digôs
=
	`©oi
(
buf„r
+17);

75 i‡(
digôs
 < 0 || digits > 15)

76 
digôs
=15;

77 
buf„r
[
digôs
]=0;

78 i‡(
digôs
 == 0)

79 
	`¥ötf
("* %-5s\n", 
buf„r
+25);

81 
	`¥ötf
("%s/%*d %-5s\n",

82 
buf„r
,
digôs
-17,digits,buffer+25);

84 
	`f˛o£
(
f
);

86 
	}
}

	@net-tools-1.60/lib/x25_sr.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_AFX25


19 
	~<asm/ty≥s.h
>

20 
	~<sys/∑øm.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/io˘l.h
>

24 
	~<löux/x25.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<√tdb.h
>

28 
	~<ªsﬁv.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<°dio.h
>

32 
	~<uni°d.h
>

33 
	~"vîsi⁄.h
"

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	#EXTERN


	)

38 
	~"√t-loˇÀ.h
"

40 
	~"öé.h
"

42 
	~"√t-„©uªs.h
"

44 
a·y≥
 
x25_a·y≥
;

46 
	gskfd
 = -1;

49 
	$ußge
()

51 
	`Ârötf
(
°dîr
,"Usage: x25_route [-v] del Target[/mask] [dev] If\n");

52 
	`Ârötf
(
°dîr
," x25_route [-v]ádd Target[/mask] [dev] If\n");

53 (
E_USAGE
);

54 
	}
}

57 
	$X25_£åouã
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

59 
x25_rouã_°ru˘
 
π
;

60 
sockaddr_x25
 
sx25
;

61 
èrgë
[128];

62 sig√d 
sigdigôs
;

64 i‡(*
¨gs
 =
NULL
)

65 (
	`ußge
());

67 
	`°r˝y
(
èrgë
, *
¨gs
++);

70 
	`mem£t
((*Ë&
π
, 0, (
x25_rouã_°ru˘
));

73 i‡((
sigdigôs
 = 
x25_a·y≥
.
	`öput
(0, 
èrgë
, (
sockaddr
 *)&
sx25
)) < 0) {

74 
x25_a·y≥
.
	`hîr‹
(
èrgë
);

77 
π
.
sigdigôs
=sigdigits;

80 
	`mem˝y
(&
π
.
addªss
, &
sx25
.
sx25_addr
, (
x25_addªss
));

82 *
¨gs
) {

83 i‡(!
	`°rcmp
(*
¨gs
,"device") || !strcmp(*args,"dev")) {

84 
¨gs
++;

85 i‡(!*
¨gs
)

86 (
	`ußge
());

88 i‡(
¨gs
[1])

89 (
	`ußge
());

90 i‡(
π
.
devi˚
[0])

91 (
	`ußge
());

92 
	`°r˝y
(
π
.
devi˚
, *
¨gs
);

93 
¨gs
++;

95 i‡(
π
.
devi˚
[0]=='\0')

96 (
	`ußge
());

99 i‡(
π
.
sigdigôs
 > 15) {

100 
	`Ârötf
(
°dîr
, 
	`_
("rouã: bogu†√tmask %d\n"), 
π
.
sigdigôs
);

101 (
E_OPTERR
);

104 i‡(
π
.
sigdigôs
 > 
	`°æí
‘t.
addªss
.
x25_addr
)) {

105 
	`Ârötf
(
°dîr
, 
	`_
("route:Çetmask doesn't matchÑouteáddress\n"));

106 (
E_OPTERR
);

110 i‡((
skfd
 = 
	`sockë
(
AF_X25
, 
SOCK_SEQPACKET
, 0)) < 0) {

111 
	`≥º‹
("socket");

112 (
E_SOCK
);

116 i‡(
a˘i⁄
==
RTACTION_DEL
) {

117 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

118 
	`≥º‹
("SIOCDELRT");

119 
	`˛o£
(
skfd
);

120 (
E_SOCK
);

123 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

124 
	`≥º‹
("SIOCADDRT");

125 
	`˛o£
(
skfd
);

126 (
E_SOCK
);

131 (Ë
	`˛o£
(
skfd
);

133 
	}
}

135 
	$X25_röput
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

137 i‡(
a˘i⁄
 =
RTACTION_FLUSH
) {

138 
	`Ârötf
(
°dîr
,"Flushing `x25'ÑoutingÅableÇot supported\n");

139 (
	`ußge
());

141 i‡(
›ti⁄s
 & 
FLAG_CACHE
) {

142 
	`Ârötf
(
°dîr
,"Modifying `x25'Ñouting cacheÇot supported\n");

143 (
	`ußge
());

145 i‡((*
¨gs
 =
NULL
Ë|| (
a˘i⁄
 =
RTACTION_HELP
))

146 (
	`ußge
());

148 (
	`X25_£åouã
(
a˘i⁄
, 
›ti⁄s
, 
¨gs
));

149 
	}
}

	@net-tools-1.60/mii-tool.c

32 
	gvîsi⁄
[] =

35 
	~<uni°d.h
>

36 
	~<°dlib.h
>

37 
	~<°dio.h
>

38 
	~<˘y≥.h
>

39 
	~<°rög.h
>

40 
	~<î∫o.h
>

41 
	~<f˙é.h
>

42 
	~<gë›t.h
>

43 
	~<time.h
>

44 
	~<sy¶og.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/io˘l.h
>

48 
	~<√t/if.h
>

49 #i‚de‡
__GLIBC__


50 
	~<löux/if_¨p.h
>

51 
	~<löux/if_ëhî.h
>

53 
	~"mii.h
"

55 
	#MAX_ETH
 8

	)

59 
u_sh‹t
 
	mid1
, 
	mid2
;

60 *
	m«me
;

61 } 
	gmii_id
[] = {

78 
	#NMII
 ((
mii_id
)/(mii_id[0]))

	)

82 
›ti⁄
 
	gl⁄g›ts
[] = {

98 
	gvîbo£
 = 0,

99 
	g›t_vîsi⁄
 = 0,

100 
	g›t_ª°¨t
 = 0,

101 
	g›t_ª£t
 = 0,

102 
	g›t_log
 = 0,

103 
	g›t_w©ch
 = 0;

104 
	gnway_advîti£
 = 0;

105 
	gfixed_•ìd
 = 0;

106 
	govîride_phy
 = -1;

108 
	gskfd
 = -1;

109 
i‰eq
 
	gi‰
;

113 
	$mdio_ªad
(
skfd
, 
loˇti⁄
)

115 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

116 
mii
->
ªg_num
 = 
loˇti⁄
;

117 i‡(
	`io˘l
(
skfd
, 
SIOCGMIIREG
, &
i‰
) < 0) {

118 
	`Ârötf
(
°dîr
, "SIOCGMIIREG o¿%†Áûed: %s\n", 
i‰
.
i‰_«me
,

119 
	`°ªº‹
(
î∫o
));

122  
mii
->
vÆ_out
;

123 
	}
}

125 
	$mdio_wrôe
(
skfd
, 
loˇti⁄
, 
vÆue
)

127 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

128 
mii
->
ªg_num
 = 
loˇti⁄
;

129 
mii
->
vÆ_ö
 = 
vÆue
;

130 i‡(
	`io˘l
(
skfd
, 
SIOCSMIIREG
, &
i‰
) < 0) {

131 
	`Ârötf
(
°dîr
, "SIOCSMIIREG o¿%†Áûed: %s\n", 
i‰
.
i‰_«me
,

132 
	`°ªº‹
(
î∫o
));

134 
	}
}

139 *
	m«me
;

140 
u_sh‹t
 
	mvÆue
;

141 } 
	gmedü
[] = {

143 { "10ba£T-HD", 
MII_AN_10BASET_HD
 },

144 { "10ba£T-FD", 
MII_AN_10BASET_FD
 },

145 { "100ba£Tx-HD", 
MII_AN_100BASETX_HD
 },

146 { "100ba£Tx-FD", 
MII_AN_100BASETX_FD
 },

147 { "100ba£T4", 
MII_AN_100BASET4
 },

148 { "100ba£Tx", 
MII_AN_100BASETX_FD
 | 
MII_AN_100BASETX_HD
 },

149 { "10ba£T", 
MII_AN_10BASET_FD
 | 
MII_AN_10BASET_HD
 },

151 
	#NMEDIA
 ((
medü
)/(medü[0]))

	)

154 
	$∑r£_medü
(*
¨g
)

156 
mask
, 
i
;

157 *
s
;

158 
mask
 = 
	`°πoul
(
¨g
, &
s
, 16);

159 i‡((*
¨g
 !'\0'Ë&& (*
s
 == '\0')) {

160 i‡((
mask
 & 
MII_AN_ABILITY_MASK
) &&

161 !(
mask
 & ~
MII_AN_ABILITY_MASK
))

162  
mask
;

163 
Áûed
;

165 
mask
 = 0;

166 
s
 = 
	`°πok
(
¨g
, ", ");

168 
i
 = 0; i < 
NMEDIA
; i++)

169 i‡(
	`°rˇ£cmp
(
medü
[
i
].
«me
, 
s
) == 0) ;

170 i‡(
i
 =
NMEDIA
Ë
Áûed
;

171 
mask
 |
medü
[
i
].
vÆue
;

172 } (
s
 = 
	`°πok
(
NULL
, ", ")) != NULL);

174  
mask
;

175 
Áûed
:

176 
	`Ârötf
(
°dîr
, "InvÆid medü s≥cifiˇti⁄ '%s'.\n", 
¨g
);

178 
	}
}

182 *
	$medü_li°
(
mask
, 
be°
)

184 
buf
[100];

185 
i
;

186 *
buf
 = '\0';

187 
mask
 >>= 5;

188 
i
 = 4; i >= 0; i--) {

189 i‡(
mask
 & (1<<
i
)) {

190 
	`°rˇt
(
buf
, " ");

191 
	`°rˇt
(
buf
, 
medü
[
i
].
«me
);

192 i‡(
be°
) ;

195 i‡(
mask
 & (1<<5))

196 
	`°rˇt
(
buf
, " flow-control");

197  
buf
;

198 
	}
}

200 
	$show_basic_mii
(
sock
, 
phy_id
)

202 
buf
[100];

203 
i
, 
mii_vÆ
[32];

204 
bm¸
, 
bm§
, 
advît
, 
lk∑r
;

208 
	`mdio_ªad
(
sock
, 
MII_BMSR
);

209 
i
 = 0; i < ((
vîbo£
 > 1) ? 32 : 8); i++)

210 
mii_vÆ
[
i
] = 
	`mdio_ªad
(
sock
, i);

212 i‡(
mii_vÆ
[
MII_BMCR
] == 0xffff) {

213 
	`Ârötf
(
°dîr
, " No MIIÅransceiverÖresent!.\n");

218 
bm¸
 = 
mii_vÆ
[
MII_BMCR
]; 
bm§
 = mii_vÆ[
MII_BMSR
];

219 
advît
 = 
mii_vÆ
[
MII_ANAR
]; 
lk∑r
 = mii_vÆ[
MII_ANLPAR
];

221 
	`•rötf
(
buf
, "%s: ", 
i‰
.
i‰_«me
);

222 i‡(
bm¸
 & 
MII_BMCR_AN_ENA
) {

223 i‡(
bm§
 & 
MII_BMSR_AN_COMPLETE
) {

224 i‡(
advît
 & 
lk∑r
) {

225 
	`°rˇt
(
buf
, (
lk∑r
 & 
MII_AN_ACK
) ?

227 
	`°rˇt
(
buf
, 
	`medü_li°
(
advît
 & 
lk∑r
, 1));

228 
	`°rˇt
(
buf
, ", ");

230 
	`°rˇt
(
buf
, "autonegotiation failed, ");

232 } i‡(
bm¸
 & 
MII_BMCR_RESTART
) {

233 
	`°rˇt
(
buf
, "autonegotiationÑestarted, ");

236 
	`•rötf
(
buf
+
	`°æí
(buf), "%s Mbit, %s duplex, ",

237 (
bm¸
 & 
MII_BMCR_100MBIT
) ? "100" : "10",

238 (
bm¸
 & 
MII_BMCR_DUPLEX
) ? "full" : "half");

240 
	`°rˇt
(
buf
, (
bm§
 & 
MII_BMSR_LINK_VALID
) ? "link ok" : "noÜink");

242 i‡(
›t_w©ch
) {

243 i‡(
›t_log
) {

244 
	`sy¶og
(
LOG_INFO
, 
buf
);

246 
s
[20];

247 
time_t
 
t
 = 
	`time
(
NULL
);

248 
	`°r·ime
(
s
, (s), "%T", 
	`loˇ…ime
(&
t
));

249 
	`¥ötf
("%†%s\n", 
s
, 
buf
);

252 
	`¥ötf
("%s\n", 
buf
);

255 i‡(
vîbo£
 > 1) {

256 
	`¥ötf
("Ñegi°î†f‹ MII PHY %d: ", 
phy_id
);

257 
i
 = 0; i < 32; i++)

258 
	`¥ötf
("%†%4.4x", ((
i
 % 8Ë? "" : "\¿ "), 
mii_vÆ
[i]);

259 
	`¥ötf
("\n");

262 i‡(
vîbo£
) {

263 
	`¥ötf
("Öroduct info: ");

264 
i
 = 0; i < 
NMII
; i++)

265 i‡((
mii_id
[
i
].
id1
 =
mii_vÆ
[2]) &&

266 (
mii_id
[
i
].
id2
 =(
mii_vÆ
[3] & 0xfff0)))

268 i‡(
i
 < 
NMII
)

269 
	`¥ötf
("%†ªv %d\n", 
mii_id
[
i
].
«me
, 
mii_vÆ
[3]&0x0f);

271 
	`¥ötf
("vendor %02x:%02x:%02x, model %dÑev %d\n",

272 
mii_vÆ
[2]>>10, (mii_val[2]>>2)&0xff,

273 ((
mii_vÆ
[2]<<6)|(mii_val[3]>>10))&0xff,

274 (
mii_vÆ
[3]>>4)&0x3f, mii_val[3]&0x0f);

275 
	`¥ötf
(" basic mode: ");

276 i‡(
bm¸
 & 
MII_BMCR_RESET
)

277 
	`¥ötf
("softwareÑeset, ");

278 i‡(
bm¸
 & 
MII_BMCR_LOOPBACK
)

279 
	`¥ötf
("loopback, ");

280 i‡(
bm¸
 & 
MII_BMCR_ISOLATE
)

281 
	`¥ötf
("isolate, ");

282 i‡(
bm¸
 & 
MII_BMCR_COLTEST
)

283 
	`¥ötf
("collisionÅest, ");

284 i‡(
bm¸
 & 
MII_BMCR_AN_ENA
) {

285 
	`¥ötf
("autonegotiationÉnabled\n");

287 
	`¥ötf
("%s Mbit, %s duplex\n",

288 (
bm¸
 & 
MII_BMCR_100MBIT
) ? "100" : "10",

289 (
bm¸
 & 
MII_BMCR_DUPLEX
) ? "full" : "half");

291 
	`¥ötf
(" basic status: ");

292 i‡(
bm§
 & 
MII_BMSR_AN_COMPLETE
)

293 
	`¥ötf
("autonegotiation complete, ");

294 i‡(
bm¸
 & 
MII_BMCR_RESTART
)

295 
	`¥ötf
("autonegotiationÑestarted, ");

296 i‡(
bm§
 & 
MII_BMSR_REMOTE_FAULT
)

297 
	`¥ötf
("remote fault, ");

298 
	`¥ötf
((
bm§
 & 
MII_BMSR_LINK_VALID
) ? "link ok" : "noÜink");

299 
	`¥ötf
("\¿ c≠abûôõs:%s", 
	`medü_li°
(
bm§
 >> 6, 0));

300 
	`¥ötf
("\¿ádvîtisög: %s", 
	`medü_li°
(
advît
, 0));

301 i‡(
lk∑r
 & 
MII_AN_ABILITY_MASK
)

302 
	`¥ötf
("\¿ÜökÖ¨äî:%s", 
	`medü_li°
(
lk∑r
, 0));

303 
	`¥ötf
("\n");

306 
	}
}

310 
	$do_⁄e_xcvr
(
skfd
, *
i‚ame
, 
maybe
)

312 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

315 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

316 i‡(
	`io˘l
(
skfd
, 
SIOCGMIIPHY
, &
i‰
) < 0) {

317 i‡(!
maybe
 || (
î∫o
 !
ENODEV
))

318 
	`Ârötf
(
°dîr
, "SIOCGMIIPHY on '%s' failed: %s\n",

319 
i‚ame
, 
	`°ªº‹
(
î∫o
));

323 i‡(
ovîride_phy
 >= 0) {

324 
	`¥ötf
("usögÅhê•ecifõd MII index %d.\n", 
ovîride_phy
);

325 
mii
->
phy_id
 = 
ovîride_phy
;

328 i‡(
›t_ª£t
) {

329 
	`¥ötf
("resettingÅheÅransceiver...\n");

330 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 
MII_BMCR_RESET
);

332 i‡(
nway_advîti£
) {

333 
	`mdio_wrôe
(
skfd
, 
MII_ANAR
, 
nway_advîti£
 | 1);

334 
›t_ª°¨t
 = 1;

336 i‡(
›t_ª°¨t
) {

337 
	`¥ötf
("restartingáutonegotiation...\n");

338 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 0x0000);

339 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 
MII_BMCR_AN_ENA
|
MII_BMCR_RESTART
);

341 i‡(
fixed_•ìd
) {

342 
bm¸
 = 0;

343 i‡(
fixed_•ìd
 & (
MII_AN_100BASETX_FD
|
MII_AN_100BASETX_HD
))

344 
bm¸
 |
MII_BMCR_100MBIT
;

345 i‡(
fixed_•ìd
 & (
MII_AN_100BASETX_FD
|
MII_AN_10BASET_FD
))

346 
bm¸
 |
MII_BMCR_DUPLEX
;

347 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 
bm¸
);

350 i‡(!
›t_ª°¨t
 && !
›t_ª£t
 && !
fixed_•ìd
 && !
nway_advîti£
)

351 
	`show_basic_mii
(
skfd
, 
mii
->
phy_id
);

354 
	}
}

358 
	$w©ch_⁄e_xcvr
(
skfd
, *
i‚ame
, 
ödex
)

360 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

361 
°©us
[
MAX_ETH
] = { 0, };

362 
now
;

365 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

366 i‡(
	`io˘l
(
skfd
, 
SIOCGMIIPHY
, &
i‰
) < 0) {

367 i‡(
î∫o
 !
ENODEV
)

368 
	`Ârötf
(
°dîr
, "SIOCGMIIPHY on '%s' failed: %s\n",

369 
i‚ame
, 
	`°ªº‹
(
î∫o
));

372 
now
 = (
	`mdio_ªad
(
skfd
, 
MII_BMCR
) |

373 (
	`mdio_ªad
(
skfd
, 
MII_BMSR
) << 16));

374 i‡(
°©us
[
ödex
] && (°©us[ödex] !
now
))

375 
	`show_basic_mii
(
skfd
, 
mii
->
phy_id
);

376 
°©us
[
ödex
] = 
now
;

377 
	}
}

381 c⁄° *
	gußge
 =

383 -
V
, --
vîsi⁄
 
di•œy
 vîsi⁄ 
	göf‹m©i⁄


384 -
	gv
, --
vîbo£
 
m‹e
 vîbo£ 
	gouçut


385 -
	gR
, --
ª£t
Ñe£à
MII
 
to
 
powî⁄
 
	g°©e


386 -
	gr
, --
ª°¨t
Ñe°¨à
	gaut⁄egŸüti⁄


387 -
	gw
, --
w©ch
 
m⁄ô‹
 
lök
 
°©us
 
	gch™ges


388 -
	gl
, --
log
 
	gwôh
 -
	gw
, 
wrôe
 
evíts
 
to
 
	gsy¶og


389 -
	gA
, --
	gadvîti£
=
medü
,... 
advîti£
 
⁄ly
 
•ecifõd
 
	gmedü


390 -
	gF
, --
	gf‹˚
=
medü
 
f‹˚
 
•ecifõd
 medü 
ãchnﬁogy


391 
medü
: 100ba
£T4
, 100ba
	g£Tx
-
	gFD
, 100ba£Tx-
	gHD
, 10ba
	g£T
-FD, 10baseT-HD,

392 (
to
 
advîti£
 
bŸh
 
HD
 
™d
 
	gFD
Ë100ba
	g£Tx
, 10ba
	g£T
\
	gn
";

394 
	$maö
(
¨gc
, **
¨gv
)

396 
i
, 
c
, 
ªt
, 
îrÊag
 = 0;

397 
s
[6];

399 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:F:p:ÃRvVw?", 
l⁄g›ts
, 0)Ë!
EOF
)

400 
c
) {

401 'A': 
nway_advîti£
 = 
	`∑r£_medü
(
›èrg
); ;

402 'F': 
fixed_•ìd
 = 
	`∑r£_medü
(
›èrg
); ;

403 'p': 
ovîride_phy
 = 
	`©oi
(
›èrg
); ;

404 'r': 
›t_ª°¨t
++; ;

405 'R': 
›t_ª£t
++; ;

406 'v': 
vîbo£
++; ;

407 'V': 
›t_vîsi⁄
++; ;

408 'w': 
›t_w©ch
++; ;

409 'l': 
›t_log
++; ;

410 '?': 
îrÊag
++;

413 i‡(
›t_w©ch
Ë
vîbo£
 = 0;

414 i‡(
îrÊag
 || (
fixed_•ìd
 & (fixed_speed-1)) ||

415 (
fixed_•ìd
 && (
›t_ª°¨t
 || 
nway_advîti£
))) {

416 
	`Ârötf
(
°dîr
, 
ußge
, 
¨gv
[0]);

420 i‡(
›t_vîsi⁄
)

421 
	`¥ötf
(
vîsi⁄
);

424 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
,0)) < 0) {

425 
	`≥º‹
("socket");

426 
	`exô
(-1);

430 i‡(
›töd
 =
¨gc
) {

431 
ªt
 = 1;

432 
i
 = 0; i < 
MAX_ETH
; i++) {

433 
	`•rötf
(
s
, "ëh%d", 
i
);

434 
ªt
 &
	`do_⁄e_xcvr
(
skfd
, 
s
, 1);

436 i‡(
ªt
)

437 
	`Ârötf
(
°dîr
, "no MII interfaces found\n");

439 
ªt
 = 0;

440 
i
 = 
›töd
; i < 
¨gc
; i++) {

441 
ªt
 |
	`do_⁄e_xcvr
(
skfd
, 
¨gv
[
i
], 0);

445 i‡(
›t_w©ch
 && (
ªt
 == 0)) {

447 
	`¶ìp
(1);

448 i‡(
›töd
 =
¨gc
) {

449 
i
 = 0; i < 
MAX_ETH
; i++) {

450 
	`•rötf
(
s
, "ëh%d", 
i
);

451 
	`w©ch_⁄e_xcvr
(
skfd
, 
s
, 
i
);

454 
i
 = 
›töd
; i < 
¨gc
; i++)

455 
	`w©ch_⁄e_xcvr
(
skfd
, 
¨gv
[
i
], i-
›töd
);

460 
	`˛o£
(
skfd
);

461  
ªt
;

462 
	}
}

	@net-tools-1.60/nameif.c

8 #i‚de‡
_GNU_SOURCE


9 
	#_GNU_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<gë›t.h
>

13 
	~<sys/sy¶og.h
>

14 
	~<î∫o.h
>

15 
	~<°dlib.h
>

16 
	~<˘y≥.h
>

17 
	~<°rög.h
>

18 
	~<°d¨g.h
>

19 
	~<sys/sockë.h
>

20 
	~<sys/io˘l.h
>

21 
	~<√t/if.h
>

22 
	~<löux/sockios.h
>

23 
	~<î∫o.h
>

24 
	~"öé.h
"

26 c⁄° 
	gdeÁu…_c⁄f
[] = "/etc/mactab";

27 c⁄° *
	g‚ame
 = 
deÁu…_c⁄f
;

28 
	gu£_sy¶og
;

29 
	g˘l_sk
 = -1;

31 
	$îr
(*
msg
)

33 i‡(
u£_sy¶og
) {

34 
	`sy¶og
(
LOG_ERR
,"%s: %m", 
msg
);

36 
	`≥º‹
(
msg
);

38 
	`exô
(1);

39 
	}
}

41 
	$com∂aö
(*
fmt
, ...)

43 
va_li°
 
≠
;

44 
	`va_°¨t
(
≠
,
fmt
);

45 i‡(
u£_sy¶og
) {

46 
	`vsy¶og
(
LOG_ERR
,
fmt
,
≠
);

48 
	`vÂrötf
(
°dîr
,
fmt
,
≠
);

49 
	`Âutc
('\n',
°dîr
);

51 
	`va_íd
(
≠
);

52 
	`exô
(1);

53 
	}
}

55 
	$w¨nög
(*
fmt
, ...)

57 
va_li°
 
≠
;

58 
	`va_°¨t
(
≠
,
fmt
);

59 i‡(
u£_sy¶og
) {

60 
	`vsy¶og
(
LOG_ERR
,
fmt
,
≠
);

62 
	`vÂrötf
(
°dîr
,
fmt
,
≠
);

63 
	`Âutc
('\n',
°dîr
);

65 
	`va_íd
(
≠
);

66 
	}
}

68 
	$∑r£mac
(*
°r
, *
mac
)

70 *
s
;

71 (
s
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

72 
byã
;

73 i‡(
	`ssˇnf
(
s
,"%x", &
byã
)!=1 || byte > 0xff)

75 *
mac
++ = 
byã
;

78 
	}
}

80 *
	$xmÆloc
(
sz
)

82 *
p
 = 
	`ˇŒoc
(
sz
,1);

83 i‡(!
p
Ë
î∫o
=
ENOMEM
, 
	`îr
("xmalloc");

84  
p
;

85 
	}
}

87 
	$›ísock
()

89 i‡(
˘l_sk
 < 0)

90 
˘l_sk
 = 
	`sockë
(
PF_INET
,
SOCK_DGRAM
,0);

91 
	}
}

93 #i‚de‡
i‰_√w«me


94 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_¶ave


	)

97 
	$£äame
(*
ﬁd«me
, *
√w«me
)

99 
i‰eq
 
i‰
;

100 
	`›ísock
();

101 
	`mem£t
(&
i‰
,0,(
i‰eq
));

102 
	`°r˝y
(
i‰
.
i‰_«me
, 
ﬁd«me
);

103 
	`°r˝y
(
i‰
.
i‰_√w«me
, 
√w«me
);

104  
	`io˘l
(
˘l_sk
, 
SIOCSIFNAME
, &
i‰
);

105 
	}
}

107 
	$gëmac
(*
«me
, *
mac
)

109 
r
;

110 
i‰eq
 
i‰
;

111 
	`›ísock
();

112 
	`mem£t
(&
i‰
,0,(
i‰eq
));

113 
	`°r˝y
(
i‰
.
i‰_«me
, 
«me
);

114 
r
 = 
	`io˘l
(
˘l_sk
, 
SIOCGIFHWADDR
, &
i‰
);

115 
	`mem˝y
(
mac
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 6);

116  
r
;

117 
	}
}

119 
	sch™ge
 {

120 
ch™ge
 *
	m√xt
,**
	mµªv
;

121 
	mi‚ame
[
IFNAMSIZ
+1];

122 
	mmac
[6];

124 
ch™ge
 *
	g˛i°
;

126 
ch™ge
 *
	$lookupmac
(*
mac
)

128 
ch™ge
 *
ch
;

129 
ch
 = 
˛i°
;ch;ch = ch->
√xt
)

130 i‡(!
	`memcmp
(
ch
->
mac
, mac, 6))

131  
ch
;

132  
NULL
;

133 
	}
}

135 
	$addch™ge
(*
p
, 
ch™ge
 *
ch
, *
pos
)

137 i‡(
	`°rchr
(
ch
->
i‚ame
, ':'))

138 
	`w¨nög
(
	`_
("alias device %sát %sÖrobably hasÇo mac"),

139 
ch
->
i‚ame
, 
pos
);

140 i‡(
	`∑r£mac
(
p
,
ch
->
mac
) < 0)

141 
	`com∂aö
(
	`_
("ˇ¬ŸÖ¨£ MAC `%s'áà%s"), 
p
, 
pos
);

142 i‡(
˛i°
)

143 
˛i°
->
µªv
 = &
ch
->
√xt
;

144 
ch
->
√xt
 = 
˛i°
;

145 
ch
->
µªv
 = &
˛i°
;

146 
˛i°
 = 
ch
;

148 
	}
}

150 
	$ªadc⁄f
()

152 *
löe
;

153 
size_t
 
löñ
;

154 
löíum
;

155 
FILE
 *
ifh
;

156 *
p
;

157 
n
;

159 
ifh
 = 
	`f›í
(
‚ame
, "r");

160 i‡(!
ifh
)

161 
	`com∂aö
(
	`_
("›íög c⁄figuøti⁄ fûê%s: %s"),
‚ame
,
	`°ªº‹
(
î∫o
));

163 
löe
 = 
NULL
;

164 
löñ
 = 0;

165 
löíum
 = 1;

166 
	`gëdñim
(&
löe
, &
löñ
, '\n', 
ifh
) > 0) {

167 
ch™ge
 *
ch
 = 
	`xmÆloc
((change));

168 
pos
[20];

170 
	`•rötf
(
pos
, 
	`_
("löê%d"), 
löíum
);

172 i‡((
p
 = 
	`°rchr
(
löe
,'#')Ë!
NULL
)

173 *
p
 = '\0';

174 
p
 = 
löe
;

175 
	`is•a˚
(*
p
))

176 ++
p
;

177 i‡(*
p
 == '\0')

179 
n
 = 
	`°rc•n
(
p
, " \t");

180 i‡(
n
 > 
IFNAMSIZ
)

181 
	`com∂aö
(
	`_
("öãrÁ˚Çamêtoÿl⁄gáàlöê%d"), 
löe
);

182 
	`mem˝y
(
ch
->
i‚ame
, 
p
, 
n
);

183 
ch
->
i‚ame
[
n
] = 0;

184 
p
 +
n
;

185 
p
 +
	`°r•n
(p, " \t");

186 
n
 = 
	`°r•n
(
p
, "0123456789ABCDEFabcdef:");

187 
p
[
n
] = 0;

188 
	`addch™ge
(
p
, 
ch
, 
pos
);

189 
löíum
++;

191 
	`f˛o£
(
ifh
);

192 
	}
}

194 
›ti⁄
 
	gl›t
[] = {

195 {"sy¶og", 0, 
NULL
, 's' },

196 {"c⁄fig-fûe", 1, 
NULL
, 'c' },

197 {"hñp", 0, 
NULL
, '?' },

198 {
NULL
},

201 
	$ußge
()

203 
	`Ârötf
(
°dîr
, 
	`_
("usage:Çameif [-c configurationfile] [-s] {ifname macaddress}"));

204 
	`exô
(1);

205 
	}
}

207 
	$maö
(
ac
, **
av
)

209 
FILE
 *
ifh
;

210 *
p
;

211 
n
;

212 
löíum
;

213 *
löe
 = 
NULL
;

214 
size_t
 
löñ
 = 0;

217 
c
 = 
	`gë›t_l⁄g
(
ac
,
av
,"c:s",
l›t
,
NULL
);

218 i‡(
c
 == -1) ;

219 
c
) {

222 
	`ußge
();

224 
‚ame
 = 
›èrg
;

227 
u£_sy¶og
 = 1;

232 i‡(
u£_sy¶og
)

233 
	`›ílog
("«meif",0,
LOG_LOCAL0
);

235 
›töd
 < 
ac
) {

236 
ch™ge
 *
ch
 = 
	`xmÆloc
((change));

237 
pos
[30];

239 i‡((
ac
-
›töd
) & 1)

240 
	`ußge
();

241 i‡(
	`°æí
(
av
[
›töd
])+1>
IFNAMSIZ
)

242 
	`com∂aö
(
	`_
("öãrÁ˚Çamê`%s'Åoÿl⁄g"), 
av
[
›töd
]);

243 
	`°r˝y
(
ch
->
i‚ame
, 
av
[
›töd
]);

244 
›töd
++;

245 
	`•rötf
(
pos
,
	`_
("¨gumíà%d"),
›töd
);

246 
	`addch™ge
(
av
[
›töd
], 
ch
, 
pos
);

247 
›töd
++;

250 i‡(!
˛i°
 || 
‚ame
 !
deÁu…_c⁄f
)

251 
	`ªadc⁄f
();

253 
ifh
 = 
	`f›í
("/proc/net/dev", "r");

254 i‡(!
ifh
Ë
	`com∂aö
(
	`_
("›í o‡/¥oc/√t/dev: %s"), 
	`°ªº‹
(
î∫o
));

257 
löíum
 = 0;

258 
	`gëdñim
(&
löe
, &
löñ
, '\n', 
ifh
) > 0) {

259 
ch™ge
 *
ch
;

260 
mac
[6];

262 i‡(
löíum
++ < 2)

265 
p
 = 
löe
;

266 
	`is•a˚
(*
p
))

267 ++
p
;

268 
n
 = 
	`°rc•n
(
p
, ": \t");

269 
p
[
n
] = 0;

271 i‡(
n
 > 
IFNAMSIZ
-1)

272 
	`com∂aö
(
	`_
("öãrÁ˚Çamê`%s'Åoÿl⁄g"), 
p
);

274 i‡(
	`gëmac
(
p
, 
mac
) < 0)

277 
ch
 = 
	`lookupmac
(
mac
);

278 i‡(!
ch
)

281 *
ch
->
µªv
 = ch->
√xt
;

282 i‡(
	`°rcmp
(
p
, 
ch
->
i‚ame
)) {

283 i‡(
	`£äame
(
p
, 
ch
->
i‚ame
) < 0)

284 
	`com∂aö
(
	`_
("cannot changeÇame of %sÅo %s: %s"),

285 
p
, 
ch
->
i‚ame
, 
	`°ªº‹
(
î∫o
));

287 
	`‰ì
(
ch
);

289 
	`f˛o£
(
ifh
);

291 
˛i°
) {

292 
ch™ge
 *
ch
 = 
˛i°
;

293 
˛i°
 = cli°->
√xt
;

294 
	`w¨nög
(
	`_
("öãrÁ˚ '%s'ÇŸ found"), 
ch
->
i‚ame
);

295 
	`‰ì
(
ch
);

298 i‡(
u£_sy¶og
)

299 
	`˛o£log
();

301 
	}
}

	@net-tools-1.60/netstat.c

69 
	~<î∫o.h
>

70 
	~<°dio.h
>

71 
	~<°dlib.h
>

72 
	~<°rög.h
>

73 
	~<°rögs.h
>

74 
	~<uni°d.h
>

75 
	~<˘y≥.h
>

76 
	~<f˙é.h
>

77 
	~<√tdb.h
>

78 
	~<∑ths.h
>

79 
	~<pwd.h
>

80 
	~<gë›t.h
>

81 
	~<sys/∑øm.h
>

82 
	~<sys/sockë.h
>

83 
	~<¨∑/öë.h
>

84 
	~<√töë/ö.h
>

85 
	~<sys/io˘l.h
>

86 
	~<√t/if.h
>

87 
	~<dúít.h
>

89 
	~"√t-suµ‹t.h
"

90 
	~"∑th«mes.h
"

91 
	~"vîsi⁄.h
"

92 
	~"c⁄fig.h
"

93 
	~"öé.h
"

94 
	~"sockës.h
"

95 
	~"öãrÁ˚.h
"

96 
	~"utû.h
"

98 
	#PROGNAME_WIDTH
 20

	)

100 #i‡!
deföed
(
s6_addr32
Ë&& deföed(
ö6a_w‹ds
)

101 
	#s6_addr32
 
ö6a_w‹ds


	)

105 
∑r£¢mp
(, , );

106 
öôèb
();

109 
	mSS_FREE
 = 0,

110 
	mSS_UNCONNECTED
,

111 
	mSS_CONNECTING
,

112 
	mSS_CONNECTED
,

113 
	mSS_DISCONNECTING


114 } 
	tsockë_°©e
;

116 
	#SO_ACCEPTCON
 (1<<16Ë

	)

117 
	#SO_WAITDATA
 (1<<17Ë

	)

118 
	#SO_NOSPACE
 (1<<18Ë

	)

120 
	#DFLT_AF
 "öë"

	)

122 
	#FEATURE_NETSTAT


	)

123 
	~"lib/√t-„©uªs.h
"

125 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "√t°© 1.42 (2001-04-15)", *
	gSig«tuª
 = "Fred Baumgarten, Alan Cox, Bernd Eckenfels, Phil Blundell, Tuan Hoangánd others";

128 
	#E_READ
 -1

	)

129 
	#E_IOCTL
 -3

	)

131 
	gÊag_öt
 = 0;

132 
	gÊag_rou
 = 0;

133 
	gÊag_mas
 = 0;

134 
	gÊag_°a
 = 0;

136 
	gÊag_Æl
 = 0;

137 
	gÊag_l°
 = 0;

138 
	gÊag_˙t
 = 0;

139 
	gÊag_deb
 = 0;

140 
	gÊag_nŸ
 = 0;

141 
	gÊag_cf
 = 0;

142 
	gÊag_›t
 = 0;

143 
	gÊag_øw
 = 0;

144 
	gÊag_t˝
 = 0;

145 
	gÊag_udp
 = 0;

146 
	gÊag_igmp
= 0;

147 
	gÊag_rom
 = 0;

148 
	gÊag_exp
 = 1;

149 
	gÊag_¥g
 = 0;

150 
	gÊag_¨g
 = 0;

151 
	gÊag_vî
 = 0;

153 
FILE
 *
	g¥ocöfo
;

155 
	#INFO_GUTS1
(
fûe
,
«me
,
¥oc
) \

156 
¥ocöfo
 = 
	`f›í
((
fûe
), "r"); \

157 i‡(
¥ocöfo
 =
NULL
) { \

158 i‡(
î∫o
 !
ENOENT
) { \

159 
	`≥º‹
((
fûe
)); \

162 i‡(
Êag_¨g
 || 
Êag_vî
) \

163 
	`ESYSNOT
("√t°©", (
«me
)); \

164 i‡(
Êag_¨g
) \

165 
rc
 = 1; \

168 i‡(
	`fgës
(
buf„r
, (buf„r), 
¥ocöfo
)) \

169 (
¥oc
)(
 r
++, 
buf„r
); \

170 } !
	`„of
(
¥ocöfo
)); \

171 
	`f˛o£
(
¥ocöfo
); \

172 }

	)

174 #i‡
HAVE_AFINET6


175 
	#INFO_GUTS2
(
fûe
,
¥oc
) \

176 
 r
 = 0; \

177 
¥ocöfo
 = 
	`f›í
((
fûe
), "r"); \

178 i‡(
¥ocöfo
 !
NULL
) { \

180 i‡(
	`fgës
(
buf„r
, (buf„r), 
¥ocöfo
)) \

181 (
¥oc
)(
 r
++, 
buf„r
); \

182 } !
	`„of
(
¥ocöfo
)); \

183 
	`f˛o£
(
¥ocöfo
); \

184 }

	)

186 
	#INFO_GUTS2
(
fûe
,
¥oc
)

	)

189 
	#INFO_GUTS3
 \

190  
rc
;

	)

192 
	#INFO_GUTS6
(
fûe
,
fûe6
,
«me
,
¥oc
) \

193 
buf„r
[8192]; \

194 
rc
 = 0; \

195 
 r
 = 0; \

196 i‡(!
Êag_¨g
 || 
Êag_öë
) { \

197 
	`INFO_GUTS1
(
fûe
,
«me
,
¥oc
) \

199 i‡(!
Êag_¨g
 || 
Êag_öë6
) { \

200 
	`INFO_GUTS2
(
fûe6
,
¥oc
) \

202 
INFO_GUTS3


	)

204 
	#INFO_GUTS
(
fûe
,
«me
,
¥oc
) \

205 
buf„r
[8192]; \

206 
rc
 = 0; \

207 
 r
 = 0; \

208 
	`INFO_GUTS1
(
fûe
,
«me
,
¥oc
) \

209 
INFO_GUTS3


	)

211 
	#PROGNAME_WIDTHs
 
	`PROGNAME_WIDTH1
(
PROGNAME_WIDTH
)

	)

212 
	#PROGNAME_WIDTH1
(
s
Ë
	`PROGNAME_WIDTH2
(s)

	)

213 
	#PROGNAME_WIDTH2
(
s
Ë#s

	)

215 
	#PRG_HASH_SIZE
 211

	)

217 
	s¥g_node
 {

218 
¥g_node
 *
	m√xt
;

219 
	möode
;

220 
	m«me
[
PROGNAME_WIDTH
];

221 } *
	g¥g_hash
[
PRG_HASH_SIZE
];

223 
	g¥g_ˇche_lﬂded
 = 0;

225 
	#PRG_HASHIT
(
x
Ë((xË% 
PRG_HASH_SIZE
)

	)

227 
	#PROGNAME_BANNER
 "PID/ProgømÇame"

	)

229 
	#¥öt_¥og«me_b™√r
(Ëdÿ{ i‡(
Êag_¥g
Ë
	`¥ötf
("%-" 
PROGNAME_WIDTHs
 "s"," " 
PROGNAME_BANNER
); } 0)

	)

231 
	#PRG_LOCAL_ADDRESS
 "loˇl_addªss"

	)

232 
	#PRG_INODE
 "öode"

	)

233 
	#PRG_SOCKET_PFX
 "sockë:["

	)

234 
	#PRG_SOCKET_PFXl
 (
	`°æí
(
PRG_SOCKET_PFX
))

	)

235 
	#PRG_SOCKET_PFX2
 "[0000]:"

	)

236 
	#PRG_SOCKET_PFX2l
 (
	`°æí
(
PRG_SOCKET_PFX2
))

	)

239 #i‚de‡
LINE_MAX


240 
	#LINE_MAX
 4096

	)

243 
	#PATH_PROC
 "/¥oc"

	)

244 
	#PATH_FD_SUFF
 "fd"

	)

245 
	#PATH_FD_SUFFl
 
	`°æí
(
PATH_FD_SUFF
)

	)

246 
	#PATH_PROC_X_FD
 
PATH_PROC
 "/%s/" 
PATH_FD_SUFF


	)

247 
	#PATH_CMDLINE
 "cmdlöe"

	)

248 
	#PATH_CMDLINEl
 
	`°æí
(
PATH_CMDLINE
)

	)

250 #unde‡
DIRENT_HAVE_D_TYPE_WORKS


252 
	$¥g_ˇche_add
(
öode
, *
«me
)

254 
hi
 = 
	`PRG_HASHIT
(
öode
);

255 
¥g_node
 **
≤p
,*
≤
;

257 
¥g_ˇche_lﬂded
=2;

258 
≤p
=
¥g_hash
+
hi
;(
≤
=*≤p);≤p=&≤->
√xt
) {

259 i‡(
≤
->
öode
==inode) {

265 i‡(!(*
≤p
=
	`mÆloc
((**pnp))))

267 
≤
=*
≤p
;

268 
≤
->
√xt
=
NULL
;

269 
≤
->
öode
=inode;

270 i‡(
	`°æí
(
«me
)>(
≤
->name)-1)

271 
«me
[(
≤
->name)-1]='\0';

272 
	`°r˝y
(
≤
->
«me
,name);

273 
	}
}

275 c⁄° *
	$¥g_ˇche_gë
(
öode
)

277 
hi
=
	`PRG_HASHIT
(
öode
);

278 
¥g_node
 *
≤
;

280 
≤
=
¥g_hash
[
hi
];≤;≤ın->
√xt
)

281 i‡(
≤
->
öode
==öodeË’n->
«me
);

283 
	}
}

285 
	$¥g_ˇche_˛ór
()

287 
¥g_node
 **
≤p
,*
≤
;

289 i‡(
¥g_ˇche_lﬂded
 == 2)

290 
≤p
=
¥g_hash
;≤p<¥g_hash+
PRG_HASH_SIZE
;pnp++)

291 (
≤
=*
≤p
)) {

292 *
≤p
=
≤
->
√xt
;

293 
	`‰ì
(
≤
);

295 
¥g_ˇche_lﬂded
=0;

296 
	}
}

298 
	$exåa˘_ty≥_1_sockë_öode
(c⁄° 
 ame
[], * 
öode_p
) {

304 i‡(
	`°æí
(
 ame
Ë< 
PRG_SOCKET_PFXl
+3Ë*
öode_p
 = -1;

305 i‡(
	`memcmp
(
 ame
, 
PRG_SOCKET_PFX
, 
PRG_SOCKET_PFXl
)Ë*
öode_p
 = -1;

306 i‡(
 ame
[
	`°æí
÷«me)-1] !']'Ë*
öode_p
 = -1;

308 
öode_°r
[
	`°æí
(
 ame
 + 1)];

309 c⁄° 
öode_°r_Àn
 = 
	`°æí
(
 ame
Ë- 
PRG_SOCKET_PFXl
 - 1;

310 *
£º
;

312 
	`°∫˝y
(
öode_°r
, 
 ame
+
PRG_SOCKET_PFXl
, 
öode_°r_Àn
);

313 
öode_°r
[
öode_°r_Àn
] = '\0';

314 *
öode_p
 = 
	`°πﬁ
(
öode_°r
,&
£º
,0);

315 i‡(!
£º
 || *£º || *
öode_p
 < 0 || *öode_∞>
INT_MAX
)

316 *
öode_p
 = -1;

318 
	}
}

322 
	$exåa˘_ty≥_2_sockë_öode
(c⁄° 
 ame
[], * 
öode_p
) {

328 i‡(
	`°æí
(
 ame
Ë< 
PRG_SOCKET_PFX2l
+1Ë*
öode_p
 = -1;

329 i‡(
	`memcmp
(
 ame
, 
PRG_SOCKET_PFX2
, 
PRG_SOCKET_PFX2l
)Ë*
öode_p
 = -1;

331 *
£º
;

333 *
öode_p
=
	`°πﬁ
(
 ame
 + 
PRG_SOCKET_PFX2l
,&
£º
,0);

334 i‡(!
£º
 || *£º || *
öode_p
 < 0 || *öode_∞>
INT_MAX
)

335 *
öode_p
 = -1;

337 
	}
}

341 
	$¥g_ˇche_lﬂd
()

343 
löe
[
LINE_MAX
],
óc˚s
=0;

344 
¥ocfdÀn
,
fd
,
cmdŒí
,
 amñí
;

345 
 ame
[30],
cmdlbuf
[512],
föbuf
[
PROGNAME_WIDTH
];

346 
öode
;

347 c⁄° *
cs
,*
cmdÕ
;

348 
DIR
 *
dú¥oc
=
NULL
,*
dúfd
=NULL;

349 
dúít
 *
dúïroc
,*
dúefd
;

351 i‡(
¥g_ˇche_lﬂded
 || !
Êag_¥g
) ;

352 
¥g_ˇche_lﬂded
=1;

353 
cmdlbuf
[(cmdlbuf)-1]='\0';

354 i‡(!(
dú¥oc
=
	`›ídú
(
PATH_PROC
))Ë
Áû
;

355 
î∫o
=0,
dúïroc
=
	`ªaddú
(
dú¥oc
)) {

356 #ifde‡
DIRENT_HAVE_D_TYPE_WORKS


357 i‡(
dúïroc
->
d_ty≥
!=
DT_DIR
) ;

359 
cs
=
dúïroc
->
d_«me
;*cs;cs++)

360 i‡(!
	`isdigô
(*
cs
))

362 i‡(*
cs
)

364 
¥ocfdÀn
=
	`¢¥ötf
(
löe
,÷öe),
PATH_PROC_X_FD
,
dúïroc
->
d_«me
);

365 i‡(
¥ocfdÀn
<=0 ||ÖrocfdÀn>=(
löe
)-5)

367 
î∫o
=0;

368 
dúfd
=
	`›ídú
(
löe
);

369 i‡(! 
dúfd
) {

370 i‡(
î∫o
==
EACCES
)

371 
óc˚s
=1;

374 
löe
[
¥ocfdÀn
] = '/';

375 
cmdÕ
 = 
NULL
;

376 (
dúefd
 = 
	`ªaddú
(
dúfd
))) {

377 #ifde‡
DIRENT_HAVE_D_TYPE_WORKS


378 i‡(
dúefd
->
d_ty≥
!=
DT_LNK
)

381 i‡(
¥ocfdÀn
+1+
	`°æí
(
dúefd
->
d_«me
)+1>(
löe
))

383 
	`mem˝y
(
löe
 + 
¥ocfdÀn
 - 
PATH_FD_SUFFl
, 
PATH_FD_SUFF
 "/",

384 
PATH_FD_SUFFl
+1);

385 
	`°r˝y
(
löe
 + 
¥ocfdÀn
 + 1, 
dúefd
->
d_«me
);

386 
 amñí
=
	`ªadlök
(
löe
,
 ame
,(lname)-1);

387 
 ame
[
 amñí
] = '\0';

389 
	`exåa˘_ty≥_1_sockë_öode
(
 ame
, &
öode
);

391 i‡(
öode
 < 0Ë
	`exåa˘_ty≥_2_sockë_öode
(
 ame
, &inode);

393 i‡(
öode
 < 0) ;

395 i‡(!
cmdÕ
) {

396 i‡(
¥ocfdÀn
 - 
PATH_FD_SUFFl
 + 
PATH_CMDLINEl
 >=

397 (
löe
) - 5)

399 
	`°r˝y
(
löe
 + 
¥ocfdÀn
-
PATH_FD_SUFFl
, 
PATH_CMDLINE
);

400 
fd
 = 
	`›í
(
löe
, 
O_RDONLY
);

401 i‡(
fd
 < 0)

403 
cmdŒí
 = 
	`ªad
(
fd
, 
cmdlbuf
, (cmdlbuf) - 1);

404 i‡(
	`˛o£
(
fd
))

406 i‡(
cmdŒí
 == -1)

408 i‡(
cmdŒí
 < (
cmdlbuf
) - 1)

409 
cmdlbuf
[
cmdŒí
]='\0';

410 i‡((
cmdÕ
 = 
	`°ºchr
(
cmdlbuf
, '/')))

411 
cmdÕ
++;

413 
cmdÕ
 = 
cmdlbuf
;

416 
	`¢¥ötf
(
föbuf
, (föbuf), "%s/%s", 
dúïroc
->
d_«me
, 
cmdÕ
);

417 
	`¥g_ˇche_add
(
öode
, 
föbuf
);

419 
	`˛o£dú
(
dúfd
);

420 
dúfd
 = 
NULL
;

422 i‡(
dú¥oc
)

423 
	`˛o£dú
(
dú¥oc
);

424 i‡(
dúfd
)

425 
	`˛o£dú
(
dúfd
);

426 i‡(!
óc˚s
)

428 i‡(
¥g_ˇche_lﬂded
 == 1) {

429 
Áû
:

430 
	`Ârötf
(
°dîr
,
	`_
("(No info could beÑead for \"-p\": geteuid()=%d but you should beÑoot.)\n"),

431 
	`gëeuid
());

434 
	`Ârötf
(
°dîr
, 
	`_
("(NotállÖrocesses could be identified,Çon-ownedÖrocess info\n"

436 
	}
}

438 #i‡
HAVE_AFNETROM


439 c⁄° *
	g√åom_°©e
[] =

441 
N_
("LISTENING"),

442 
N_
("CONN SENT"),

443 
N_
("DISC SENT"),

444 
N_
("ESTABLISHED")

447 
	$√åom_öfo
()

449 
FILE
 *
f
;

450 
buf„r
[256], 
dev
[16];

451 
°
, 
vs
, 
vr
, 
£ndq
, 
ªcvq
, 
ªt
;

453 
f
 = 
	`f›í
(
_PATH_PROCNET_NR
, "r");

454 i‡(
f
 =
NULL
) {

455 i‡(
î∫o
 !
ENOENT
) {

456 
	`≥º‹
(
_PATH_PROCNET_NR
);

459 i‡(
Êag_¨g
 || 
Êag_vî
)

460 
	`ESYSNOT
("netstat", "AF NETROM");

461 i‡(
Êag_¨g
)

466 
	`¥ötf
(
	`_
("Active NET/ROM sockets\n"));

467 
	`¥ötf
(
	`_
("User Dest Source Device State Vr/Vs Send-Q Recv-Q\n"));

468 
	`fgës
(
buf„r
, 256, 
f
);

470 
	`fgës
(
buf„r
, 256, 
f
)) {

471 
buf„r
[9] = 0;

472 
buf„r
[19] = 0;

473 
buf„r
[29] = 0;

474 
ªt
 = 
	`ssˇnf
(
buf„r
 + 30, "%s %*x/%*x %*x/%*x %d %d %d %*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d %d %d %*d",

475 
dev
, &
°
, &
vs
, &
vr
, &
£ndq
, &
ªcvq
);

476 i‡(
ªt
 != 6) {

477 
	`¥ötf
(
	`_
("ProbÀmÑódög d©®‰om %s\n"), 
_PATH_PROCNET_NR
);

480 
	`¥ötf
("%-9s %-9s %-9s %-6s %-11s %03d/%03d %-6d %-6d\n",

481 
buf„r
, buffer + 10, buffer + 20,

482 
dev
,

483 
	`_
(
√åom_°©e
[
°
]),

484 
vr
, 
vs
, 
£ndq
, 
ªcvq
);

486 
	`f˛o£
(
f
);

488 
	}
}

493 
	mTCP_ESTABLISHED
 = 1,

494 
	mTCP_SYN_SENT
,

495 
	mTCP_SYN_RECV
,

496 
	mTCP_FIN_WAIT1
,

497 
	mTCP_FIN_WAIT2
,

498 
	mTCP_TIME_WAIT
,

499 
	mTCP_CLOSE
,

500 
	mTCP_CLOSE_WAIT
,

501 
	mTCP_LAST_ACK
,

502 
	mTCP_LISTEN
,

503 
	mTCP_CLOSING


506 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


508 c⁄° *
	gt˝_°©e
[] =

511 
N_
("ESTABLISHED"),

512 
N_
("SYN_SENT"),

513 
N_
("SYN_RECV"),

514 
N_
("FIN_WAIT1"),

515 
N_
("FIN_WAIT2"),

516 
N_
("TIME_WAIT"),

517 
N_
("CLOSE"),

518 
N_
("CLOSE_WAIT"),

519 
N_
("LAST_ACK"),

520 
N_
("LISTEN"),

521 
N_
("CLOSING")

524 
	$föish_this_⁄e
(
uid
, 
öode
, c⁄° *
timîs
)

526 
∑sswd
 *
pw
;

528 i‡(
Êag_exp
 > 1) {

529 i‡(!(
Êag_nŸ
 & 
FLAG_NUM_USER
Ë&& ((
pw
 = 
	`gëpwuid
(
uid
)Ë!
NULL
))

530 
	`¥ötf
("%-10†", 
pw
->
pw_«me
);

532 
	`¥ötf
("%-10d ", 
uid
);

533 
	`¥ötf
("%-10ld ",
öode
);

535 i‡(
Êag_¥g
)

536 
	`¥ötf
("%-" 
PROGNAME_WIDTHs
 "s",
	`¥g_ˇche_gë
(
öode
));

537 i‡(
Êag_›t
)

538 
	`¥ötf
("%s", 
timîs
);

539 
	`putch¨
('\n');

540 
	}
}

542 
	$igmp_do_⁄e
(
 r
, c⁄° *
löe
)

544 
mˇ°_addr
[128];

545 #i‡
HAVE_AFINET6


546 
sockaddr_ö6
 
mˇ°addr
;

547 
addr6
[
INET6_ADDRSTRLEN
];

548 
ö6_addr
 
ö6
;

549 
a·y≥
 
öë6_a·y≥
;

551 
sockaddr_ö
 
mˇ°addr
;

553 
a·y≥
 *
≠
;

554 
idx_Êag
 = 0;

555 
igmp6_Êag
 = 0;

556 
devi˚
[16];

557 
num
, 
idx
, 
ªf˙t
;

559 i‡(
 r
 == 0) {

562 i‡–
	`°r°r
–
löe
, "Devi˚" ) =
NULL
 ) {

563 
igmp6_Êag
 = 1;

568 i‡–
	`°∫cmp
–
löe
, "Idx", 
	`°æí
("Idx") ) == 0 )

569 
idx_Êag
 = 1;

571 
idx_Êag
 = 0;

576 i‡(
igmp6_Êag
) {

577 #i‡
HAVE_AFINET6


578 
num
 = 
	`ssˇnf
–
löe
, "%d %15†%64[0-9A-Fa-f] %d", &
idx
, 
devi˚
, 
mˇ°_addr
, &
ªf˙t
 );

579 i‡(
num
 == 4) {

581 
	`ssˇnf
(
mˇ°_addr
, "%08X%08X%08X%08X",

582 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

583 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

584 
ö6
.
s6_addr32
[0] = 
	`ht⁄l
(in6.s6_addr32[0]);

585 
ö6
.
s6_addr32
[1] = 
	`ht⁄l
(in6.s6_addr32[1]);

586 
ö6
.
s6_addr32
[2] = 
	`ht⁄l
(in6.s6_addr32[2]);

587 
ö6
.
s6_addr32
[3] = 
	`ht⁄l
(in6.s6_addr32[3]);

588 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

589 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
mˇ°addr
);

590 
mˇ°addr
.
sö6_Ámûy
 = 
AF_INET6
;

592 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igmp6Üöê%d.\n"), 
 r
);

596 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
)Ë=
NULL
) {

597 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

598 ((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
);

601 
	`ß„_°∫˝y
(
mˇ°_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
mˇ°addr
,

602 
Êag_nŸ
), (
mˇ°_addr
));

603 
	`¥ötf
("%-15†%-6d %s\n", 
devi˚
, 
ªf˙t
, 
mˇ°_addr
);

606 #i‡
HAVE_AFINET


607 i‡(
löe
[0] != '\t') {

608 i‡(
idx_Êag
) {

609 i‡((
num
 = 
	`ssˇnf
–
löe
, "%d\t%10c", &
idx
, 
devi˚
)) < 2) {

610 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

614 i‡–(
num
 = 
	`ssˇnf
–
löe
, "%10c", 
devi˚
 )) < 1 ) {

615 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

619 
devi˚
[10] = '\0';

621 } i‡–
löe
[0] == '\t' ) {

622 i‡–(
num
 = 
	`ssˇnf
(
löe
, "\t%8[0-9A-Fa-f] %d", 
mˇ°_addr
, &
ªf˙t
)) < 2 ) {

623 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

626 
	`ssˇnf
–
mˇ°_addr
, "%X",

627 &((
sockaddr_ö
 *Ë&
mˇ°addr
)->
sö_addr
.
s_addr
 );

628 ((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
 = 
AF_INET
;

630 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

634 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
)Ë=
NULL
) {

635 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

636 ((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
);

639 
	`ß„_°∫˝y
(
mˇ°_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
mˇ°addr
,

640 
Êag_nŸ
), (
mˇ°_addr
));

641 
	`¥ötf
("%-15†%-6d %s\n", 
devi˚
, 
ªf˙t
, 
mˇ°_addr
 );

644 
	}
}

646 #i‡
HAVE_AFX25


647 
	$x25_öfo
()

649 
FILE
 *
f
=
	`f›í
(
_PATH_PROCNET_X25
, "r");

650 
buf„r
[256],
dev
[16];

651 
°
,
vs
,
vr
,
£ndq
,
ªcvq
,
lci
;

652 *
x25_°©e
[5]=

660 if(!(
f
=
	`f›í
(
_PATH_PROCNET_X25
, "r")))

662 i‡(
î∫o
 !
ENOENT
) {

663 
	`≥º‹
(
_PATH_PROCNET_X25
);

666 i‡(
Êag_¨g
 || 
Êag_vî
)

667 
	`ESYSNOT
("netstat","AF X25");

668 i‡(
Êag_¨g
)

673 
	`¥ötf
–
	`_
("Active X.25 sockets\n"));

675 
	`¥ötf
–
	`_
("Dest Source Device LCI State Vr/Vs Send-Q Recv-Q\n"));

676 
	`fgës
(
buf„r
,256,
f
);

677 
	`fgës
(
buf„r
,256,
f
))

679 
buf„r
[10]=0;

680 
buf„r
[20]=0;

681 
	`ssˇnf
(
buf„r
+22,"%s %d %d %d %d %*d %*d %*d %*d %*d %*d %d %d %*d",

682 
dev
,&
lci
,&
°
,&
vs
,&
vr
,&
£ndq
,&
ªcvq
);

683 i‡(!(
Êag_Æl
 || 
lci
))

685 
	`¥ötf
("%-15s %-15s %-7s %-3d %-11s %02d/%02d %-6d %-6d\n",

686 
buf„r
,buffer+11,

687 
dev
,

688 
lci
,

689 
x25_°©e
[
°
],

690 
vr
,
vs
,
£ndq
,
ªcvq
);

692 
	`f˛o£
(
f
);

694 
	}
}

697 
	$igmp_öfo
()

699 
	`INFO_GUTS6
(
_PATH_PROCNET_IGMP
, 
_PATH_PROCNET_IGMP6
, "AF INET (igmp)",

700 
igmp_do_⁄e
);

701 
	}
}

703 
	$t˝_do_⁄e
(
 r
, c⁄° *
löe
)

705 
rxq
, 
txq
, 
time_Àn
, 
ªå
, 
öode
;

706 
num
, 
loˇl_p‹t
, 
ªm_p‹t
, 
d
, 
°©e
, 
uid
, 
timî_run
, 
timeout
;

707 
ªm_addr
[128], 
loˇl_addr
[128], 
timîs
[64], 
buf„r
[1024], 
m‹e
[512];

708 
a·y≥
 *
≠
;

709 #i‡
HAVE_AFINET6


710 
sockaddr_ö6
 
loˇœddr
, 
ªmaddr
;

711 
addr6
[
INET6_ADDRSTRLEN
];

712 
ö6_addr
 
ö6
;

713 
a·y≥
 
öë6_a·y≥
;

715 
sockaddr_ö
 
loˇœddr
, 
ªmaddr
;

718 i‡(
 r
 == 0)

721 
num
 = 
	`ssˇnf
(
löe
,

723 &
d
, 
loˇl_addr
, &
loˇl_p‹t
, 
ªm_addr
, &
ªm_p‹t
, &
°©e
,

724 &
txq
, &
rxq
, &
timî_run
, &
time_Àn
, &
ªå
, &
uid
, &
timeout
, &
öode
, 
m‹e
);

726 i‡(
	`°æí
(
loˇl_addr
) > 8) {

727 #i‡
HAVE_AFINET6


729 
	`ssˇnf
(
loˇl_addr
, "%08X%08X%08X%08X",

730 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

731 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

732 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

733 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
loˇœddr
);

734 
	`ssˇnf
(
ªm_addr
, "%08X%08X%08X%08X",

735 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

736 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

737 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

738 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ªmaddr
);

739 
loˇœddr
.
sö6_Ámûy
 = 
AF_INET6
;

740 
ªmaddr
.
sö6_Ámûy
 = 
AF_INET6
;

743 
	`ssˇnf
(
loˇl_addr
, "%X",

744 &((
sockaddr_ö
 *Ë&
loˇœddr
)->
sö_addr
.
s_addr
);

745 
	`ssˇnf
(
ªm_addr
, "%X",

746 &((
sockaddr_ö
 *Ë&
ªmaddr
)->
sö_addr
.
s_addr
);

747 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
 = 
AF_INET
;

748 ((
sockaddr
 *Ë&
ªmaddr
)->
ß_Ámûy
 = 
AF_INET
;

751 i‡(
num
 < 11) {

752 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogusÅcpÜine.\n"));

755 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
)Ë=
NULL
) {

756 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

757 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
);

760 i‡(
°©e
 =
TCP_LISTEN
) {

761 
time_Àn
 = 0;

762 
ªå
 = 0L;

763 
rxq
 = 0L;

764 
txq
 = 0L;

766 
	`ß„_°∫˝y
(
loˇl_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
loˇœddr
,

767 
Êag_nŸ
), (
loˇl_addr
));

768 
	`ß„_°∫˝y
(
ªm_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
ªmaddr
, 
Êag_nŸ
),

769 (
ªm_addr
));

770 i‡(
Êag_Æl
 || (
Êag_l°
 && !
ªm_p‹t
) || (!flag_lst &&Ñem_port)) {

771 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

772 
	`gë_¢ame
(
	`ht⁄s
(
loˇl_p‹t
), "tcp",

773 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

775 i‡((
	`°æí
(
loˇl_addr
Ë+ såÀn(
buf„r
)) > 22)

776 
loˇl_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

778 
	`°rˇt
(
loˇl_addr
, ":");

779 
	`°rˇt
(
loˇl_addr
, 
buf„r
);

780 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

781 
	`gë_¢ame
(
	`ht⁄s
(
ªm_p‹t
), "t˝", 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

783 i‡((
	`°æí
(
ªm_addr
Ë+ såÀn(
buf„r
)) > 22)

784 
ªm_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

786 
	`°rˇt
(
ªm_addr
, ":");

787 
	`°rˇt
(
ªm_addr
, 
buf„r
);

788 
timîs
[0] = '\0';

790 i‡(
Êag_›t
)

791 
timî_run
) {

793 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("of‡(0.00/%ld/%d)"), 
ªå
, 
timeout
);

797 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("on (%2.2f/%ld/%d)"),

798 (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

802 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("keepalive (%2.2f/%ld/%d)"),

803 (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

807 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("timewait (%2.2f/%ld/%d)"),

808 (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

812 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("unkn-%d (%2.2f/%ld/%d)"),

813 
timî_run
, (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

816 
	`¥ötf
("tcp %6ld %6ld %-23s %-23s %-12s",

817 
rxq
, 
txq
, 
loˇl_addr
, 
ªm_addr
, 
	`_
(
t˝_°©e
[
°©e
]));

819 
	`föish_this_⁄e
(
uid
,
öode
,
timîs
);

821 
	}
}

823 
	$t˝_öfo
()

825 
	`INFO_GUTS6
(
_PATH_PROCNET_TCP
, 
_PATH_PROCNET_TCP6
, "AF INET (tcp)",

826 
t˝_do_⁄e
);

827 
	}
}

829 
	$udp_do_⁄e
(
 r
, c⁄° *
löe
)

831 
buf„r
[8192], 
loˇl_addr
[64], 
ªm_addr
[64];

832 *
udp_°©e
, 
timîs
[64], 
m‹e
[512];

833 
num
, 
loˇl_p‹t
, 
ªm_p‹t
, 
d
, 
°©e
, 
timî_run
, 
uid
, 
timeout
;

834 #i‡
HAVE_AFINET6


835 
sockaddr_ö6
 
loˇœddr
, 
ªmaddr
;

836 
addr6
[
INET6_ADDRSTRLEN
];

837 
ö6_addr
 
ö6
;

838 
a·y≥
 
öë6_a·y≥
;

840 
sockaddr_ö
 
loˇœddr
, 
ªmaddr
;

842 
a·y≥
 *
≠
;

843 
rxq
, 
txq
, 
time_Àn
, 
ªå
, 
öode
;

845 i‡(
 r
 == 0)

848 
m‹e
[0] = '\0';

849 
num
 = 
	`ssˇnf
(
löe
,

851 &
d
, 
loˇl_addr
, &
loˇl_p‹t
,

852 
ªm_addr
, &
ªm_p‹t
, &
°©e
,

853 &
txq
, &
rxq
, &
timî_run
, &
time_Àn
, &
ªå
, &
uid
, &
timeout
, &
öode
, 
m‹e
);

855 i‡(
	`°æí
(
loˇl_addr
) > 8) {

856 #i‡
HAVE_AFINET6


857 
	`ssˇnf
(
loˇl_addr
, "%08X%08X%08X%08X",

858 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

859 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

860 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

861 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
loˇœddr
);

862 
	`ssˇnf
(
ªm_addr
, "%08X%08X%08X%08X",

863 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

864 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

865 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

866 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ªmaddr
);

867 
loˇœddr
.
sö6_Ámûy
 = 
AF_INET6
;

868 
ªmaddr
.
sö6_Ámûy
 = 
AF_INET6
;

871 
	`ssˇnf
(
loˇl_addr
, "%X",

872 &((
sockaddr_ö
 *Ë&
loˇœddr
)->
sö_addr
.
s_addr
);

873 
	`ssˇnf
(
ªm_addr
, "%X",

874 &((
sockaddr_ö
 *Ë&
ªmaddr
)->
sö_addr
.
s_addr
);

875 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
 = 
AF_INET
;

876 ((
sockaddr
 *Ë&
ªmaddr
)->
ß_Ámûy
 = 
AF_INET
;

879 
ªå
 = 0L;

880 i‡(!
Êag_›t
)

881 
m‹e
[0] = '\0';

883 i‡(
num
 < 10) {

884 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogus udpÜine.\n"));

887 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
)Ë=
NULL
) {

888 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

889 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
);

892 
°©e
) {

893 
TCP_ESTABLISHED
:

894 
udp_°©e
 = 
	`_
("ESTABLISHED");

897 
TCP_CLOSE
:

898 
udp_°©e
 = "";

902 
udp_°©e
 = 
	`_
("UNKNOWN");

906 #i‡
HAVE_AFINET6


907 
	#nŸnuŒ
(
A
Ë(((A.
sö6_Ámûy
 =
AF_INET6
) && \

908 ((
A
.
sö6_addr
.
s6_addr32
[0]) || \

909 (
A
.
sö6_addr
.
s6_addr32
[1]) || \

910 (
A
.
sö6_addr
.
s6_addr32
[2]) || \

911 (
A
.
sö6_addr
.
s6_addr32
[3]))) || \

912 ((
A
.
sö6_Ámûy
 =
AF_INET
) && \

913 ((
sockaddr_ö
 *Ë&
A
)->
sö_addr
.
s_addr
))

	)

915 
	#nŸnuŒ
(
A
Ë(A.
sö_addr
.
s_addr
)

	)

918 i‡(
Êag_Æl
 || (
	`nŸnuŒ
(
ªmaddr
Ë&& !
Êag_l°
) || (!notnull(remaddr) && flag_lst))

920 
	`ß„_°∫˝y
(
loˇl_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
loˇœddr
,

921 
Êag_nŸ
), (
loˇl_addr
));

922 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

923 
	`gë_¢ame
(
	`ht⁄s
(
loˇl_p‹t
), "udp",

924 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

925 i‡((
	`°æí
(
loˇl_addr
Ë+ såÀn(
buf„r
)) > 22)

926 
loˇl_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

927 
	`°rˇt
(
loˇl_addr
, ":");

928 
	`°rˇt
(
loˇl_addr
, 
buf„r
);

930 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

931 
	`gë_¢ame
(
	`ht⁄s
(
ªm_p‹t
), "udp", 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

932 
	`ß„_°∫˝y
(
ªm_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
ªmaddr
,

933 
Êag_nŸ
), (
ªm_addr
));

934 i‡((
	`°æí
(
ªm_addr
Ë+ såÀn(
buf„r
)) > 22)

935 
ªm_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

936 
	`°rˇt
(
ªm_addr
, ":");

937 
	`°rˇt
(
ªm_addr
, 
buf„r
);

939 
timîs
[0] = '\0';

940 i‡(
Êag_›t
)

941 
timî_run
) {

943 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("of‡(0.00/%ld/%d)"), 
ªå
, 
timeout
);

948 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("⁄%d (%2.2f/%ld/%d)"), 
timî_run
, (Ë
time_Àn
 / 100, 
ªå
, 
timeout
);

952 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("unkn-%d (%2.2f/%ld/%d)"), 
timî_run
, (Ë
time_Àn
 / 100,

953 
ªå
, 
timeout
);

956 
	`¥ötf
("udp %6ld %6ld %-23s %-23s %-12s",

957 
rxq
, 
txq
, 
loˇl_addr
, 
ªm_addr
, 
udp_°©e
);

959 
	`föish_this_⁄e
(
uid
,
öode
,
timîs
);

961 
	}
}

963 
	$udp_öfo
()

965 
	`INFO_GUTS6
(
_PATH_PROCNET_UDP
, 
_PATH_PROCNET_UDP6
, "AF INET (udp)",

966 
udp_do_⁄e
);

967 
	}
}

969 
	$øw_do_⁄e
(
 r
, c⁄° *
löe
)

971 
buf„r
[8192], 
loˇl_addr
[64], 
ªm_addr
[64];

972 
timîs
[64], 
m‹e
[512];

973 
num
, 
loˇl_p‹t
, 
ªm_p‹t
, 
d
, 
°©e
, 
timî_run
, 
uid
, 
timeout
;

974 #i‡
HAVE_AFINET6


975 
sockaddr_ö6
 
loˇœddr
, 
ªmaddr
;

976 
addr6
[
INET6_ADDRSTRLEN
];

977 
ö6_addr
 
ö6
;

978 
a·y≥
 
öë6_a·y≥
;

980 
sockaddr_ö
 
loˇœddr
, 
ªmaddr
;

982 
a·y≥
 *
≠
;

983 
rxq
, 
txq
, 
time_Àn
, 
ªå
, 
öode
;

985 i‡(
 r
 == 0)

988 
m‹e
[0] = '\0';

989 
num
 = 
	`ssˇnf
(
löe
,

991 &
d
, 
loˇl_addr
, &
loˇl_p‹t
, 
ªm_addr
, &
ªm_p‹t
, &
°©e
,

992 &
txq
, &
rxq
, &
timî_run
, &
time_Àn
, &
ªå
, &
uid
, &
timeout
, &
öode
, 
m‹e
);

994 i‡(
	`°æí
(
loˇl_addr
) > 8) {

995 #i‡
HAVE_AFINET6


996 
	`ssˇnf
(
loˇl_addr
, "%08X%08X%08X%08X",

997 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

998 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

999 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

1000 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
loˇœddr
);

1001 
	`ssˇnf
(
ªm_addr
, "%08X%08X%08X%08X",

1002 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

1003 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

1004 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

1005 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ªmaddr
);

1006 
loˇœddr
.
sö6_Ámûy
 = 
AF_INET6
;

1007 
ªmaddr
.
sö6_Ámûy
 = 
AF_INET6
;

1010 
	`ssˇnf
(
loˇl_addr
, "%X",

1011 &((
sockaddr_ö
 *Ë&
loˇœddr
)->
sö_addr
.
s_addr
);

1012 
	`ssˇnf
(
ªm_addr
, "%X",

1013 &((
sockaddr_ö
 *Ë&
ªmaddr
)->
sö_addr
.
s_addr
);

1014 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
 = 
AF_INET
;

1015 ((
sockaddr
 *Ë&
ªmaddr
)->
ß_Ámûy
 = 
AF_INET
;

1017 #i‡
HAVE_AFINET6


1018 i‡((
≠
 = 
	`gë_a‚ty≥
(
loˇœddr
.
sö6_Ámûy
)Ë=
NULL
) {

1019 
	`Ârötf
(
°dîr
, 
	`_
("√t°©: unsuµ‹ãdáddªs†Ámûy %d !\n"), 
loˇœddr
.
sö6_Ámûy
);

1023 i‡((
≠
 = 
	`gë_a‚ty≥
(
loˇœddr
.
sö_Ámûy
)Ë=
NULL
) {

1024 
	`Ârötf
(
°dîr
, 
	`_
("√t°©: unsuµ‹ãdáddªs†Ámûy %d !\n"), 
loˇœddr
.
sö_Ámûy
);

1029 i‡(!
Êag_›t
)

1030 
m‹e
[0] = '\0';

1032 i‡(
num
 < 10) {

1033 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogusÑawÜine.\n"));

1037 i‡(
Êag_Æl
 || (
	`nŸnuŒ
(
ªmaddr
Ë&& !
Êag_l°
) || (!notnull(remaddr) && flag_lst))

1039 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

1040 
	`gë_¢ame
(
	`ht⁄s
(
loˇl_p‹t
), "raw",

1041 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

1042 
	`ß„_°∫˝y
(
loˇl_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
loˇœddr
,

1043 
Êag_nŸ
), (
loˇl_addr
));

1044 i‡((
	`°æí
(
loˇl_addr
Ë+ såÀn(
buf„r
)) > 22)

1045 
loˇl_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

1046 
	`°rˇt
(
loˇl_addr
, ":");

1047 
	`°rˇt
(
loˇl_addr
, 
buf„r
);

1049 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

1050 
	`gë_¢ame
(
	`ht⁄s
(
ªm_p‹t
), "øw", 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

1051 
	`ß„_°∫˝y
(
ªm_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
ªmaddr
,

1052 
Êag_nŸ
), (
ªm_addr
));

1053 i‡((
	`°æí
(
ªm_addr
Ë+ såÀn(
buf„r
)) > 22)

1054 
ªm_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

1055 
	`°rˇt
(
ªm_addr
, ":");

1056 
	`°rˇt
(
ªm_addr
, 
buf„r
);

1058 
timîs
[0] = '\0';

1059 i‡(
Êag_›t
)

1060 
timî_run
) {

1062 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("of‡(0.00/%ld/%d)"), 
ªå
, 
timeout
);

1067 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("⁄%d (%2.2f/%ld/%d)"), 
timî_run
, (Ë
time_Àn
 / 100,

1068 
ªå
, 
timeout
);

1072 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("unkn-%d (%2.2f/%ld/%d)"),

1073 
timî_run
, (Ë
time_Àn
 / 100,

1074 
ªå
, 
timeout
);

1077 
	`¥ötf
("raw %6ld %6ld %-23s %-23s %-12d",

1078 
rxq
, 
txq
, 
loˇl_addr
, 
ªm_addr
, 
°©e
);

1080 
	`föish_this_⁄e
(
uid
,
öode
,
timîs
);

1082 
	}
}

1084 
	$øw_öfo
()

1086 
	`INFO_GUTS6
(
_PATH_PROCNET_RAW
, 
_PATH_PROCNET_RAW6
, "AF INET (raw)",

1087 
øw_do_⁄e
);

1088 
	}
}

1093 #i‡
HAVE_AFUNIX


1095 
	#HAS_INODE
 1

	)

1097 
	$unix_do_⁄e
(
ƒ
, c⁄° *
löe
)

1099 
has
 = 0;

1100 
∑th
[
MAXPATHLEN
], 
ss_Êags
[32];

1101 *
ss_¥Ÿo
, *
ss_°©e
, *
ss_ty≥
;

1102 
num
, 
°©e
, 
ty≥
, 
öode
;

1103 *
d
;

1104 
ªf˙t
, 
¥Ÿo
, 
Êags
;

1106 i‡(
ƒ
 == 0) {

1107 i‡(
	`°r°r
(
löe
, "Inode"))

1108 
has
 |
HAS_INODE
;

1111 
∑th
[0] = '\0';

1112 
num
 = 
	`ssˇnf
(
löe
, "%p: %lX %lX %lX %X %X %d %s",

1113 &
d
, &
ªf˙t
, &
¥Ÿo
, &
Êags
, &
ty≥
, &
°©e
, &
öode
, 
∑th
);

1114 i‡(
num
 < 6) {

1115 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogus unixÜine.\n"));

1118 i‡(!(
has
 & 
HAS_INODE
))

1119 
	`¢¥ötf
(
∑th
,’©h),"%d",
öode
);

1121 i‡(!
Êag_Æl
) {

1122 i‡((
°©e
 =
SS_UNCONNECTED
Ë&& (
Êags
 & 
SO_ACCEPTCON
)) {

1123 i‡(!
Êag_l°
)

1126 i‡(
Êag_l°
)

1131 
¥Ÿo
) {

1133 
ss_¥Ÿo
 = "unix";

1137 
ss_¥Ÿo
 = "??";

1140 
ty≥
) {

1141 
SOCK_STREAM
:

1142 
ss_ty≥
 = 
	`_
("STREAM");

1145 
SOCK_DGRAM
:

1146 
ss_ty≥
 = 
	`_
("DGRAM");

1149 
SOCK_RAW
:

1150 
ss_ty≥
 = 
	`_
("RAW");

1153 
SOCK_RDM
:

1154 
ss_ty≥
 = 
	`_
("RDM");

1157 
SOCK_SEQPACKET
:

1158 
ss_ty≥
 = 
	`_
("SEQPACKET");

1162 
ss_ty≥
 = 
	`_
("UNKNOWN");

1165 
°©e
) {

1166 
SS_FREE
:

1167 
ss_°©e
 = 
	`_
("FREE");

1170 
SS_UNCONNECTED
:

1175 i‡(
Êags
 & 
SO_ACCEPTCON
) {

1176 
ss_°©e
 = 
	`_
("LISTENING");

1178 
ss_°©e
 = "";

1182 
SS_CONNECTING
:

1183 
ss_°©e
 = 
	`_
("CONNECTING");

1186 
SS_CONNECTED
:

1187 
ss_°©e
 = 
	`_
("CONNECTED");

1190 
SS_DISCONNECTING
:

1191 
ss_°©e
 = 
	`_
("DISCONNECTING");

1195 
ss_°©e
 = 
	`_
("UNKNOWN");

1198 
	`°r˝y
(
ss_Êags
, "[ ");

1199 i‡(
Êags
 & 
SO_ACCEPTCON
)

1200 
	`°rˇt
(
ss_Êags
, "ACC ");

1201 i‡(
Êags
 & 
SO_WAITDATA
)

1202 
	`°rˇt
(
ss_Êags
, "W ");

1203 i‡(
Êags
 & 
SO_NOSPACE
)

1204 
	`°rˇt
(
ss_Êags
, "N ");

1206 
	`°rˇt
(
ss_Êags
, "]");

1208 
	`¥ötf
("%-5s %-6ld %-11s %-10s %-13s ",

1209 
ss_¥Ÿo
, 
ªf˙t
, 
ss_Êags
, 
ss_ty≥
, 
ss_°©e
);

1210 i‡(
has
 & 
HAS_INODE
)

1211 
	`¥ötf
("%-6d ",
öode
);

1213 
	`¥ötf
("- ");

1214 i‡(
Êag_¥g
)

1215 
	`¥ötf
("%-" 
PROGNAME_WIDTHs
 "s",(
has
 & 
HAS_INODE
?
	`¥g_ˇche_gë
(
öode
):"-"));

1216 
	`puts
(
∑th
);

1217 
	}
}

1219 
	$unix_öfo
()

1222 
	`¥ötf
(
	`_
("Active UNIX domain sockets "));

1223 i‡(
Êag_Æl
)

1224 
	`¥ötf
(
	`_
("(serversándÉstablished)"));

1226 i‡(
Êag_l°
)

1227 
	`¥ötf
(
	`_
("(only servers)"));

1229 
	`¥ötf
(
	`_
("(w/o servers)"));

1232 
	`¥ötf
(
	`_
("\nProto RefCnt Flags Type State I-Node"));

1233 
	`¥öt_¥og«me_b™√r
();

1234 
	`¥ötf
(
	`_
(" Path\n"));

1237 
	`INFO_GUTS
(
_PATH_PROCNET_UNIX
, "AF UNIX", 
unix_do_⁄e
);

1239 
	}
}

1243 #i‡
HAVE_AFAX25


1244 
	$ax25_öfo
()

1246 
FILE
 *
f
;

1247 
buf„r
[256], 
buf
[16];

1248 *
§c
, *
d°
, *
dev
, *
p
;

1249 
°
, 
vs
, 
vr
, 
£ndq
, 
ªcvq
, 
ªt
;

1250 
√w
 = -1;

1251 *
ax25_°©e
[5] =

1253 
	`N_
("LISTENING"),

1254 
	`N_
("SABM SENT"),

1255 
	`N_
("DISC SENT"),

1256 
	`N_
("ESTABLISHED"),

1257 
	`N_
("RECOVERY")

1259 i‡(!(
f
 = 
	`f›í
(
_PATH_PROCNET_AX25
, "r"))) {

1260 i‡(
î∫o
 !
ENOENT
) {

1261 
	`≥º‹
(
_PATH_PROCNET_AX25
);

1264 i‡(
Êag_¨g
 || 
Êag_vî
)

1265 
	`ESYSNOT
("netstat", "AF AX25");

1266 i‡(
Êag_¨g
)

1271 
	`¥ötf
(
	`_
("Active AX.25 sockets\n"));

1272 
	`¥ötf
(
	`_
("Dest Source Device State Vr/Vs Send-Q Recv-Q\n"));

1273 
	`fgës
(
buf„r
, 256, 
f
)) {

1274 i‡(
√w
 == -1) {

1275 i‡(!
	`°∫cmp
(
buf„r
, "dest_addr", 9)) {

1276 
√w
 = 0;

1279 
√w
 = 1;

1285 
£ndq
 = 0;

1286 
ªcvq
 = 0;

1287 i‡(
√w
 == 0) {

1288 
d°
 = 
buf„r
;

1289 
§c
 = 
buf„r
 + 10;

1290 
d°
[9] = 0;

1291 
§c
[9] = 0;

1292 
ªt
 = 
	`ssˇnf
(
buf„r
 + 20, "%s %d %d %d %*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d %*d %*d %d %d %*d",

1293 
buf
, &
°
, &
vs
, &
vr
, &
£ndq
, &
ªcvq
);

1294 i‡(
ªt
 != 4 &&Ñet != 6) {

1295 
	`¥ötf
(
	`_
("ProbÀmÑódög d©®‰om %s\n"), 
_PATH_PROCNET_AX25
);

1298 
dev
 = 
buf
;

1300 
p
 = 
buf„r
;

1301 *
p
 != ' ')Ö++;

1302 
p
++;

1303 
dev
 = 
p
;

1304 *
p
 != ' ')Ö++;

1305 *
p
++ = 0;

1306 
§c
 = 
p
;

1307 *
p
 != ' ')Ö++;

1308 *
p
++ = 0;

1309 
d°
 = 
p
;

1310 *
p
 != ' ')Ö++;

1311 *
p
++ = 0;

1312 
ªt
 = 
	`ssˇnf
(
p
, "%d %d %d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %d %d %*d",

1313 &
°
, &
vs
, &
vr
, &
£ndq
, &
ªcvq
);

1314 i‡(
ªt
 != 3 &&Ñet != 5) {

1315 
	`¥ötf
(
	`_
("¥obÀmÑódög d©®‰om %s\n"), 
_PATH_PROCNET_AX25
);

1322 
p
 = 
d°
;

1323 *
p
 && *p != ',')Ö++;

1324 *
p
 = 0;

1326 
	`¥ötf
("%-9s %-9s %-6s %-11s %03d/%03d %-6d %-6d\n",

1327 
d°
, 
§c
,

1328 
dev
,

1329 
	`_
(
ax25_°©e
[
°
]),

1330 
vr
, 
vs
, 
£ndq
, 
ªcvq
);

1332 
	`f˛o£
(
f
);

1334 
	}
}

1338 #i‡
HAVE_AFIPX


1339 
	$ùx_öfo
()

1341 
FILE
 *
f
;

1342 
buf
[256];

1343 
txq
, 
rxq
;

1344 
°©e
;

1345 
uid
;

1346 *
°
;

1347 
nc
;

1348 
a·y≥
 *
≠
;

1349 
∑sswd
 *
pw
;

1350 
ßd
[50], 
dad
[50];

1351 
sockaddr
 
ß
;

1352 
•‹t
 = 0, 
dp‹t
 = 0;

1354 i‡(!(
f
 = 
	`f›í
(
_PATH_PROCNET_IPX
, "r"))) {

1355 i‡(
î∫o
 !
ENOENT
) {

1356 
	`≥º‹
(
_PATH_PROCNET_IPX
);

1359 i‡(
Êag_¨g
 || 
Êag_vî
)

1360 
	`ESYSNOT
("netstat", "AF IPX");

1361 i‡(
Êag_¨g
)

1366 
	`¥ötf
(
	`_
("Active IPX sockets\nProto Recv-Q Send-Q Local Address Foreign Address State"));

1367 i‡(
Êag_exp
 > 1)

1368 
	`¥ötf
(
	`_
(" User"));

1369 
	`¥ötf
("\n");

1370 i‡((
≠
 = 
	`gë_a‚ty≥
(
AF_IPX
)Ë=
NULL
) {

1371 
	`EINTERN
("netstat.c", "AF_IPX missing");

1374 
	`fgës
(
buf
, 255, 
f
);

1376 
	`fgës
(
buf
, 255, 
f
Ë!
NULL
) {

1377 
	`ssˇnf
(
buf
, "%s %s %lX %lX %d %d",

1378 
ßd
, 
dad
, &
txq
, &
rxq
, &
°©e
, &
uid
);

1379 i‡((
°
 = 
	`rödex
(
ßd
, ':'))) {

1380 *
°
++ = '\0';

1381 
	`ssˇnf
(
°
, "%X", &
•‹t
);

1382 
•‹t
 = 
	`¡ohs
(sport);

1384 
	`EINTERN
("√t°©.c", 
_PATH_PROCNET_IPX
 " sport formatÉrror");

1387 
nc
 = 0;

1388 i‡(
	`°rcmp
(
dad
, "Not_Connected") != 0) {

1389 i‡((
°
 = 
	`rödex
(
dad
, ':'))) {

1390 *
°
++ = '\0';

1391 
	`ssˇnf
(
°
, "%X", &
dp‹t
);

1392 
dp‹t
 = 
	`¡ohs
(dport);

1394 
	`EINTERN
("√t°©.c", 
_PATH_PROCNET_IPX
 " dport formatÉrror");

1398 
nc
 = 1;

1400 
°©e
) {

1401 
TCP_ESTABLISHED
:

1402 
°
 = 
	`_
("ESTAB");

1405 
TCP_CLOSE
:

1406 
°
 = "";

1410 
°
 = 
	`_
("UNK.");

1415 (Ë
≠
->
	`öput
(4, 
ßd
, &
ß
);

1416 
	`ß„_°∫˝y
(
buf
, 
≠
->
	`•röt
(&
ß
, 
Êag_nŸ
), (buf));

1417 
	`¢¥ötf
(
ßd
, (ßd), "%s:%04X", 
buf
, 
•‹t
);

1419 i‡(!
nc
) {

1421 (Ë
≠
->
	`öput
(4, 
dad
, &
ß
);

1422 
	`ß„_°∫˝y
(
buf
, 
≠
->
	`•röt
(&
ß
, 
Êag_nŸ
), (buf));

1423 
	`¢¥ötf
(
dad
, (dad), "%s:%04X", 
buf
, 
dp‹t
);

1425 
	`°r˝y
(
dad
, "-");

1427 
	`¥ötf
("IPX %6ld %6ld %-26†%-26†%-5s", 
txq
, 
rxq
, 
ßd
, 
dad
, 
°
);

1428 i‡(
Êag_exp
 > 1) {

1429 i‡(!(
Êag_nŸ
 & 
FLAG_NUM_USER
Ë&& ((
pw
 = 
	`gëpwuid
(
uid
)Ë!
NULL
))

1430 
	`¥ötf
(" %-10s", 
pw
->
pw_«me
);

1432 
	`¥ötf
(" %-10d", 
uid
);

1434 
	`¥ötf
("\n");

1436 
	`f˛o£
(
f
);

1438 
	}
}

1441 
	$iÁ˚_öfo
()

1443 i‡(
skfd
 < 0) {

1444 i‡((
skfd
 = 
	`sockës_›í
(0)) < 0) {

1445 
	`≥º‹
("socket");

1446 
	`exô
(1);

1448 
	`¥ötf
(
	`_
("Kernel InterfaceÅable\n"));

1450 i‡(
Êag_exp
 < 2) {

1451 
i„_sh‹t
 = 1;

1452 
	`¥ötf
(
	`_
("Iface MTU Met RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg\n"));

1455 i‡(
	`f‹_Æl_öãrÁ˚s
(
do_if_¥öt
, &
Êag_Æl
) < 0) {

1456 
	`≥º‹
(
	`_
("missing interface information"));

1457 
	`exô
(1);

1459 i‡(
Êag_˙t
)

1460 
	`‰ì_öãrÁ˚_li°
();

1462 
	`˛o£
(
skfd
);

1463 
skfd
 = -1;

1467 
	}
}

1470 
	$vîsi⁄
()

1472 
	`¥ötf
("%s\n%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
, 
Fótuªs
);

1473 
	`exô
(
E_VERSION
);

1474 
	}
}

1477 
	$ußge
()

1479 
	`Ârötf
(
°dîr
, 
	`_
("usage:Çetstat [-veenNcCF] [<Af>] -rÇetstat {-V|--version|-h|--help}\n"));

1480 
	`Ârötf
(
°dîr
, 
	`_
("Çetstat [-vnNcaeol] [<Socket> ...]\n"));

1481 
	`Ârötf
(
°dîr
, 
	`_
("Çetstat { [-veenNac] -i | [-cnNe] -M | -s }\n\n"));

1483 
	`Ârötf
(
°dîr
, 
	`_
(" -r, --route displayÑoutingÅable\n"));

1484 
	`Ârötf
(
°dîr
, 
	`_
(" -i, --interfaces display interfaceÅable\n"));

1485 
	`Ârötf
(
°dîr
, 
	`_
(" -g, --groups display multicast group memberships\n"));

1486 
	`Ârötf
(
°dîr
, 
	`_
(" -s, --statistics displayÇetworking statistics (like SNMP)\n"));

1487 #i‡
HAVE_FW_MASQUERADE


1488 
	`Ârötf
(
°dîr
, 
	`_
(" -M, --masquerade display masqueraded connections\n\n"));

1490 
	`Ârötf
(
°dîr
, 
	`_
(" -v, --verbose be verbose\n"));

1491 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --numeric don'tÑesolveÇames\n"));

1492 
	`Ârötf
(
°dîr
, 
	`_
(" --numeric-hosts don'tÑesolve hostÇames\n"));

1493 
	`Ârötf
(
°dîr
, 
	`_
(" --numeric-ports don'tÑesolveÖortÇames\n"));

1494 
	`Ârötf
(
°dîr
, 
	`_
(" --numeric-users don'tÑesolve userÇames\n"));

1495 
	`Ârötf
(
°dîr
, 
	`_
(" -N, --symbolicÑesolve hardwareÇames\n"));

1496 
	`Ârötf
(
°dîr
, 
	`_
(" -e, --extend display other/more information\n"));

1497 
	`Ârötf
(
°dîr
, 
	`_
(" -p, --programs display PID/ProgramÇame for sockets\n"));

1498 
	`Ârötf
(
°dîr
, 
	`_
(" -c, --continuous continuousÜisting\n\n"));

1499 
	`Ârötf
(
°dîr
, 
	`_
(" -l, --listening displayÜistening server sockets\n"));

1500 
	`Ârötf
(
°dîr
, 
	`_
(" -a, --all, --listening displayáll sockets (default: connected)\n"));

1501 
	`Ârötf
(
°dîr
, 
	`_
(" -o, --timers displayÅimers\n"));

1502 
	`Ârötf
(
°dîr
, 
	`_
(" -F, --fib display Forwarding Information Base (default)\n"));

1503 
	`Ârötf
(
°dîr
, 
	`_
(" -C, --cache displayÑouting cache instead of FIB\n\n"));

1505 
	`Ârötf
(
°dîr
, 
	`_
(" <Socket>={-t|--tcp} {-u|--udp} {-w|--raw} {-x|--unix} --ax25 --ipx --netrom\n"));

1506 
	`Ârötf
(
°dîr
, 
	`_
(" <AF>=U£ '-A <af>' o∏'--<af>'; deÁu…: %s\n"), 
DFLT_AF
);

1507 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossibleáddress families (which supportÑouting):\n"));

1508 
	`¥öt_aÊi°
(1);

1509 
	`exô
(
E_USAGE
);

1510 
	}
}

1513 
	gmaö


1514 (
	g¨gc
, *
	g¨gv
[]) {

1515 
	gi
;

1516 
	gl›
;

1517 
›ti⁄
 
	gl⁄g›ts
[] =

1519 
AFTRANS_OPTS
,

1524 #i‡
HAVE_FW_MASQUERADE


1548 {
NULL
, 0, 0, 0}

1551 #i‡
I18N


1552 
£éoˇÀ
 (
LC_ALL
, "");

1553 
bödãxtdomaö
("net-tools", "/usr/share/locale");

1554 
ãxtdomaö
("net-tools");

1556 
gërouã_öô
();

1558 
	ga‚ame
[0] = '\0';

1559 (
	gi
 = 
gë›t_l⁄g
(
¨gc
, 
¨gv
, "MCFA:acdegphöN‹°uVv?wxl", 
l⁄g›ts
, &
l›
)Ë!
EOF
)

1560 
i
) {

1564 i‡(
l›
 < 0 ||Ü› >
AFTRANS_CNT
) {

1565 
EINTERN
("netstat.c", "longopts 1Ñange");

1568 i‡(
a·øns_›t
(
l⁄g›ts
[
l›
].
«me
))

1569 
exô
(1);

1572 i‡(
a·øns_›t
(
›èrg
))

1573 
exô
(1);

1576 
Êag_mas
++;

1579 
Êag_Æl
++;

1582 
Êag_l°
++;

1585 
Êag_˙t
++;

1589 
Êag_deb
++;

1592 
Êag_igmp
++;

1595 
Êag_exp
++;

1598 
Êag_¥g
++;

1601 
Êag_öt
++;

1604 
Êag_nŸ
 |
FLAG_NUM
;

1607 
Êag_nŸ
 |
FLAG_NUM_HOST
;

1610 
Êag_nŸ
 |
FLAG_NUM_PORT
;

1613 
Êag_nŸ
 |
FLAG_NUM_USER
;

1616 
Êag_nŸ
 |
FLAG_SYM
;

1619 
Êag_cf
 |
FLAG_CACHE
;

1622 
Êag_cf
 |
FLAG_FIB
;

1625 
Êag_›t
++;

1628 
vîsi⁄
();

1631 
Êag_vî
 |
FLAG_VERBOSE
;

1634 
Êag_rou
++;

1638 
Êag_t˝
++;

1642 
Êag_udp
++;

1645 
Êag_øw
++;

1648 i‡(
a·øns_›t
("unix"))

1649 
exô
(1);

1653 
ußge
();

1655 
Êag_°a
++;

1658 i‡(
	gÊag_öt
 + 
	gÊag_rou
 + 
	gÊag_mas
 + 
	gÊag_°a
 > 1)

1659 
ußge
();

1661 i‡((
	gÊag_öë
 || 
	gÊag_öë6
 || 
	gÊag_°a
Ë&& !(
	gÊag_t˝
 || 
	gÊag_udp
 || 
	gÊag_øw
))

1662 
	gÊag_t˝
 = 
Êag_udp
 = 
Êag_øw
 = 1;

1664 i‡((
	gÊag_t˝
 || 
	gÊag_udp
 || 
	gÊag_øw
 || 
	gÊag_igmp
Ë&& !(
	gÊag_öë
 || 
	gÊag_öë6
))

1665 
	gÊag_öë
 = 
Êag_öë6
 = 1;

1667 
	gÊag_¨g
 = 
Êag_t˝
 + 
Êag_udp
 + 
Êag_øw
 + 
Êag_unx
 + 
Êag_ùx


1668 + 
Êag_ax25
 + 
Êag_√åom
 + 
Êag_igmp
 + 
Êag_x25
;

1670 i‡(
	gÊag_mas
) {

1671 #i‡
HAVE_FW_MASQUERADE
 && 
HAVE_AFINET


1672 #i‡
MORE_THAN_ONE_MASQ_AF


1673 i‡(!
	ga‚ame
[0])

1674 
°r˝y
(
a‚ame
, 
DFLT_AF
);

1677 
	gi
 = 
ù_masq_öfo
(
Êag_nŸ
 & 
FLAG_NUM_HOST
,

1678 
Êag_nŸ
 & 
FLAG_NUM_PORT
, 
Êag_exp
);

1679 i‡(
	gi
 || !
	gÊag_˙t
)

1681 
¶ìp
(1);

1684 
ENOSUPP
("netstat.c", "FW_MASQUERADE");

1685 
	gi
 = -1;

1687  (
	gi
);

1690 i‡(
	gÊag_°a
) {

1691 
öôèb
();

1692 
∑r£¢mp
(
Êag_øw
, 
Êag_t˝
, 
Êag_udp
);

1693 
exô
(0);

1696 i‡(
	gÊag_rou
) {

1697 
	g›ti⁄s
 = 0;

1699 i‡(!
	ga‚ame
[0])

1700 
°r˝y
(
a‚ame
, 
DFLT_AF
);

1702 i‡(
	gÊag_exp
 == 2)

1703 
Êag_exp
 = 1;

1704 i‡(
	gÊag_exp
 == 1)

1705 
Êag_exp
 = 2;

1707 
	g›ti⁄s
 = (
Êag_exp
 & 
FLAG_EXT
Ë| 
Êag_nŸ
 | 
Êag_cf
 | 
Êag_vî
;

1708 i‡(!
	gÊag_cf
)

1709 
	g›ti⁄s
 |
FLAG_FIB
;

1712 
	gi
 = 
rouã_öfo
(
a‚ame
, 
›ti⁄s
);

1713 i‡(
	gi
 || !
	gÊag_˙t
)

1715 
¶ìp
(1);

1717  (
	gi
);

1719 i‡(
	gÊag_öt
) {

1721 
	gi
 = 
iÁ˚_öfo
();

1722 i‡(!
	gÊag_˙t
 || 
	gi
)

1724 
¶ìp
(1);

1726  (
	gi
);

1729 i‡(!
	gÊag_¨g
 || 
	gÊag_t˝
 || 
	gÊag_udp
 || 
	gÊag_øw
) {

1730 #i‡
HAVE_AFINET


1731 
¥g_ˇche_lﬂd
();

1732 
¥ötf
(
_
("Active Internet connections "));

1734 i‡(
	gÊag_Æl
)

1735 
¥ötf
(
_
("(serversándÉstablished)"));

1737 i‡(
	gÊag_l°
)

1738 
¥ötf
(
_
("(only servers)"));

1740 
¥ötf
(
_
("(w/o servers)"));

1742 
¥ötf
(
_
("\nProto Recv-Q Send-Q Local Address Foreign Address State "));

1743 i‡(
	gÊag_exp
 > 1)

1744 
¥ötf
(
_
(" User Inode "));

1745 
¥öt_¥og«me_b™√r
();

1746 i‡(
	gÊag_›t
)

1747 
¥ötf
(
_
(" Timer"));

1748 
¥ötf
("\n");

1750 i‡(
	gÊag_¨g
) {

1751 
	gi
 = 1;

1752 
ENOSUPP
("netstat", "AF INET");

1756 #i‡
HAVE_AFINET


1757 i‡(!
	gÊag_¨g
 || 
	gÊag_t˝
) {

1758 
	gi
 = 
t˝_öfo
();

1759 i‡(
	gi
)

1760  (
	gi
);

1762 i‡(!
	gÊag_¨g
 || 
	gÊag_udp
) {

1763 
	gi
 = 
udp_öfo
();

1764 i‡(
	gi
)

1765  (
	gi
);

1767 i‡(!
	gÊag_¨g
 || 
	gÊag_øw
) {

1768 
	gi
 = 
øw_öfo
();

1769 i‡(
	gi
)

1770  (
	gi
);

1773 i‡(
	gÊag_igmp
) {

1774 #i‡
HAVE_AFINET6


1775 
¥ötf
( "IPv6/");

1777 
¥ötf
–
_
("IPv4 Group Memberships\n") );

1778 
¥ötf
–
_
("Interface RefCnt Group\n") );

1779 
¥ötf
( "--------------- ------ ---------------------\n" );

1780 
	gi
 = 
igmp_öfo
();

1781 i‡(
	gi
)

1782  (
	gi
);

1786 i‡(!
	gÊag_¨g
 || 
	gÊag_unx
) {

1787 #i‡
HAVE_AFUNIX


1788 
¥g_ˇche_lﬂd
();

1789 
	gi
 = 
unix_öfo
();

1790 i‡(
	gi
)

1791  (
	gi
);

1793 i‡(
	gÊag_¨g
) {

1794 
	gi
 = 1;

1795 
ENOSUPP
("netstat", "AF UNIX");

1799 i‡(!
	gÊag_¨g
 || 
	gÊag_ùx
) {

1800 #i‡
HAVE_AFIPX


1801 
	gi
 = 
ùx_öfo
();

1802 i‡(
	gi
)

1803  (
	gi
);

1805 i‡(
	gÊag_¨g
) {

1806 
	gi
 = 1;

1807 
ENOSUPP
("netstat", "AF IPX");

1811 i‡(!
	gÊag_¨g
 || 
	gÊag_ax25
) {

1812 #i‡
HAVE_AFAX25


1813 
	gi
 = 
ax25_öfo
();

1814 i‡(
	gi
)

1815  (
	gi
);

1817 i‡(
	gÊag_¨g
) {

1818 
	gi
 = 1;

1819 
ENOSUPP
("netstat", "AF AX25");

1823 if(!
	gÊag_¨g
 || 
	gÊag_x25
) {

1824 #i‡
HAVE_AFX25


1826 
	gi
 = 
x25_öfo
();

1827 i‡(
	gi
)

1828 (
	gi
);

1830 i‡(
	gÊag_¨g
) {

1831 
	gi
 = 1;

1832 
ENOSUPP
("netstat", "AF X25");

1836 i‡(!
	gÊag_¨g
 || 
	gÊag_√åom
) {

1837 #i‡
HAVE_AFNETROM


1838 
	gi
 = 
√åom_öfo
();

1839 i‡(
	gi
)

1840  (
	gi
);

1842 i‡(
	gÊag_¨g
) {

1843 
	gi
 = 1;

1844 
ENOSUPP
("netstat", "AF NETROM");

1848 i‡(!
	gÊag_˙t
 || 
	gi
)

1850 
¶ìp
(1);

1851 
¥g_ˇche_˛ór
();

1853  (
	gi
);

	@net-tools-1.60/plipconfig.c

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<sys/sockë.h
>

37 
	~<sys/io˘l.h
>

38 
	~<√t/if.h
>

39 
	~<löux/if_∂ù.h
>

41 
	~"c⁄fig.h
"

42 
	~"öé.h
"

43 
	~"√t-suµ‹t.h
"

44 
	~"vîsi⁄.h
"

46 
	g›t_a
 = 0;

47 
	g›t_i
 = 0;

48 
	g›t_v
 = 0;

49 
	gskfd
 = -1;

51 
i‰eq
 
	gi‰
;

52 
∂ùc⁄f
 *
	g∂ù
;

54 *
	gRñó£
 = 
RELEASE
,

55 *
	gVîsi⁄
 = "plipconfig 0.2",

56 *
	gSig«tuª
 = "John Paul Morrison, Alan CoxÉtál.";

58 
	$vîsi⁄
()

60 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

61 
	`exô
(
E_VERSION
);

62 
	}
}

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, 
	`_
("Usage:Ölipconfig [-a] [-i] [-v] interface\n"));

67 
	`Ârötf
(
°dîr
, 
	`_
(" [nibble NN] [trigger NN]\n"));

68 
	`Ârötf
(
°dîr
, 
	`_
("Ölipconfig -V | --version\n"));

69 
	`exô
(-1);

70 
	}
}

72 
	$¥öt_∂ù
()

74 
	`¥ötf
(
	`_
("%s\äibbÀ %luÅriggî %lu\n"), 
i‰
.
i‰_«me
, 
∂ù
->
nibbÀ
,Ölù->
åiggî
);

75 
	}
}

77 
	$maö
(
¨gc
, **
¨gv
)

79 
ªt
 = 0;

80 **
•p
;

82 #i‡
I18N


83 
	`£éoˇÀ
 (
LC_ALL
, "");

84 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

85 
	`ãxtdomaö
("net-tools");

88 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

89 
	`≥º‹
("socket");

90 
	`exô
(-1);

93 
¨gc
--;

94 
¨gv
++;

95 
¨gv
[0] && *argv[0] == '-') {

96 i‡(!
	`°rcmp
(*
¨gv
, "-a"))

97 
›t_a
 = 1;

98 i‡(!
	`°rcmp
(*
¨gv
, "-v"))

99 
›t_v
 = 1;

100 i‡(!
	`°rcmp
(*
¨gv
, "-V") || !strcmp(*argv, "--version"))

101 
	`vîsi⁄
();

102 
¨gv
++;

103 
¨gc
--;

106 i‡(
¨gc
 == 0)

107 
	`ußge
();

109 
•p
 = 
¨gv
;

110 
	`°∫˝y
(
i‰
.
i‰_«me
, *
•p
++, 
IFNAMSIZ
);

111 
∂ù
=(
∂ùc⁄f
 *)&
i‰
.
i‰_d©a
;

113 
∂ù
->
pcmd
 = 
PLIP_GET_TIMEOUT
;

114 i‡(
	`io˘l
(
skfd
, 
SIOCDEVPLIP
, &
i‰
) < 0) {

115 
	`≥º‹
("ioctl");

116 
	`exô
(-1);

118 i‡(*
•p
 =(*Ë
NULL
) {

119 
	`¥öt_∂ù
();

120 (Ë
	`˛o£
(
skfd
);

121 
	`exô
(0);

123 *
•p
 !(*Ë
NULL
) {

124 i‡(!
	`°rcmp
(*
•p
, "nibble")) {

125 i‡(*++
•p
 =
NULL
)

126 
	`ußge
();

127 
∂ù
->
nibbÀ
 = 
	`©oi
(*
•p
);

128 
•p
++;

131 i‡(!
	`°rcmp
(*
•p
, "trigger")) {

132 i‡(*++
•p
 =
NULL
)

133 
	`ußge
();

134 
∂ù
->
åiggî
 = 
	`©oi
(*
•p
);

135 
•p
++;

138 
	`ußge
();

141 
∂ù
->
pcmd
 = 
PLIP_SET_TIMEOUT
;

142 i‡(
	`io˘l
(
skfd
, 
SIOCDEVPLIP
, &
i‰
) < 0)

143 
	`≥º‹
("ioctl");

145 
	`¥öt_∂ù
();

148 (Ë
	`˛o£
(
skfd
);

150  (
ªt
);

151 
	}
}

	@net-tools-1.60/rarp.c

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<sys/io˘l.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√t/if.h
>

26 
	~<√t/if_¨p.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<√tdb.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<gë›t.h
>

36 
	#DFLT_HW
 "ëhî"

	)

38 
	~"c⁄fig.h
"

39 
	~"öé.h
"

40 
	~"√t-suµ‹t.h
"

41 
	~"vîsi⁄.h
"

42 
	~"∑th«mes.h
"

44 
	gno_øΩ_mesßge
[] = 
N_
("This kernel doesÇot support RARP.\n");

46 
	gvîsi⁄_°rög
[] = 
RELEASE
 "\nrarp 1.03 (2001-04-04)\n";

48 
hwty≥
 *
	gh¨dw¨e
 = 
NULL
;

51 
	$øΩ_dñëe
(
fd
, 
ho°ít
 *
hp
)

53 
¨¥eq
 
ªq
;

54 
sockaddr_ö
 *
si
;

55 
found
 = 0;

56 **
addr
;

59 
addr
 = 
hp
->
h_addr_li°
; *add∏!
NULL
;áddr++) {

60 
	`mem£t
((*Ë&
ªq
, 0, (req));

61 
si
 = (
sockaddr_ö
 *Ë&
ªq
.
¨p_∑
;

62 
si
->
sö_Ámûy
 = 
hp
->
h_addπy≥
;

63 
	`mem˝y
((*Ë&
si
->
sö_addr
, *
addr
, 
hp
->
h_Àngth
);

66 i‡(
	`io˘l
(
fd
, 
SIOCDRARP
, &
ªq
) == 0) {

67 
found
++;

69 
î∫o
) {

70 
ENXIO
:

72 
ENODEV
:

73 
	`Âuts
(
	`_
(
no_øΩ_mesßge
), 
°dîr
);

76 
	`≥º‹
("SIOCDRARP");

82 i‡(
found
 == 0)

83 
	`¥ötf
(
	`_
("nÿRARPÉ¡ry f‹ %s.\n"), 
hp
->
h_«me
);

85 
	}
}

89 
	$øΩ_£t
(
fd
, 
ho°ít
 *
hp
, *
hw_addr
)

91 
¨¥eq
 
ªq
;

92 
sockaddr_ö
 *
si
;

93 
sockaddr
 
ßp
;

95 i‡(
h¨dw¨e
->
	`öput
(
hw_addr
, &
ßp
)) {

96 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad h¨dw¨êaddªss\n"), 
hw_addr
);

100 
	`mem£t
((*Ë&
ªq
, 0, (req));

101 
si
 = (
sockaddr_ö
 *Ë&
ªq
.
¨p_∑
;

102 
si
->
sö_Ámûy
 = 
hp
->
h_addπy≥
;

103 
	`mem˝y
((*Ë&
si
->
sö_addr
, 
hp
->
h_addr_li°
[0], hp->
h_Àngth
);

104 
ªq
.
¨p_ha
.
ß_Ámûy
 = 
h¨dw¨e
->
ty≥
;

105 
	`mem˝y
(
ªq
.
¨p_ha
.
ß_d©a
, 
ßp
.ß_d©a, 
h¨dw¨e
->
Æí
);

108 i‡(
	`io˘l
(
fd
, 
SIOCSRARP
, &
ªq
) < 0) {

109 i‡(
î∫o
 =
ENODEV
)

110 
	`Âuts
(
	`_
(
no_øΩ_mesßge
), 
°dîr
);

112 
	`≥º‹
("SIOCSRARP");

116 
	}
}

119 
	$øΩ_fûe
(
fd
, c⁄° *
«me
)

121 
buff
[1024];

122 *
ho°
, *
addr
;

123 
löír
;

124 
FILE
 *
Â
;

125 
ho°ít
 *
hp
;

127 i‡((
Â
 = 
	`f›í
(
«me
, "r")Ë=
NULL
) {

128 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: c™nŸ o≥¿fûê%s:%s.\n"), 
«me
, 
	`°ªº‹
(
î∫o
));

132 
löír
 = 0;

133 
	`fgës
(
buff
, (buff), 
Â
)) {

134 ++
löír
;

135 i‡(
buff
[0] == '#' || buff[0] == '\0')

137 i‡((
addr
 = 
	`°πok
(
buff
, "\¿\t")Ë=
NULL
)

139 i‡((
ho°
 = 
	`°πok
(
NULL
, "\n \t")) == NULL) {

140 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: f‹m©Éº‹áà%s:%u\n"), 
«me
, 
löír
);

143 i‡((
hp
 = 
	`gëho°by«me
(
ho°
)Ë=
NULL
) {

144 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: %s: unknow¿ho°\n"), 
ho°
);

146 i‡(
	`øΩ_£t
(
fd
, 
hp
, 
addr
) != 0) {

147 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: c™nŸ sëÉ¡ry from %s:%u\n"), 
«me
, 
löír
);

151 (Ë
	`f˛o£
(
Â
);

153 
	}
}

155 
	$di•œy_ˇche
()

157 
FILE
 *
fd
 = 
	`f›í
(
_PATH_PROCNET_RARP
, "r");

158 
buf„r
[256];

159 i‡(
fd
 =
NULL
) {

160 i‡(
î∫o
 =
ENOENT
)

161 
	`Âuts
(
	`_
(
no_øΩ_mesßge
), 
°dîr
);

163 
	`≥º‹
(
_PATH_PROCNET_RARP
);

166 
	`„of
(
fd
) == 0) {

167 i‡(
	`fgës
(
buf„r
, 255, 
fd
))

168 
	`Âuts
(
buf„r
, 
°dout
);

170 
	`f˛o£
(
fd
);

172 
	}
}

174 
	$ußge
()

176 
	`Ârötf
(
°dîr
, 
	`_
("Usage:Ñarp -aÜistÉntries in cache.\n"));

177 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp -d <hostname> deleteÉntry from cache.\n"));

178 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp [<HW>] -s <hostname> <hwaddr>áddÉntryÅo cache.\n"));

179 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp -fáddÉntries from /etc/ethers.\n"));

180 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp -V displayÖrogram version.\n\n"));

182 
	`Ârötf
(
°dîr
, 
	`_
(" <HW>=U£ '-H <hw>'Åÿ•ecify h¨dw¨êaddªs†ty≥. DeÁu…: %s\n"), 
DFLT_HW
);

183 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossible hardwareÅypes (which support ARP):\n"));

184 
	`¥öt_hwli°
(1);

185 
	`exô
(
E_USAGE
);

186 
	}
}

188 
	#MODE_DISPLAY
 1

	)

189 
	#MODE_DELETE
 2

	)

190 
	#MODE_SET
 3

	)

191 
	#MODE_ETHERS
 4

	)

193 
›ti⁄
 
	gl⁄g›ts
[] =

195 {"vîsi⁄", 0, 
NULL
, 'V'},

196 {"vîbo£", 0, 
NULL
, 'v'},

197 {"li°", 0, 
NULL
, 'a'},

198 {"£t", 0, 
NULL
, 's'},

199 {"dñëe", 0, 
NULL
, 'd'},

200 {"hñp", 0, 
NULL
, 'h'},

201 {
NULL
, 0, NULL, 0}

204 
	$maö
(
¨gc
, **
¨gv
)

206 
ªsu…
 = 0, 
mode
 = 0, 
c
, 
«rgs
 = 0, 
vîbo£
 = 0;

207 *
¨gs
[3];

208 
ho°ít
 *
hp
;

209 
fd
;

211 #i‡
I18N


212 
	`£éoˇÀ
 (
LC_ALL
, "");

213 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

214 
	`ãxtdomaö
("net-tools");

218 
h¨dw¨e
 = 
	`gë_hwty≥
(
DFLT_HW
);

221 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "-ht:aHdsVvf", 
l⁄g›ts
, 
NULL
);

222 
c
) {

223 
EOF
:

226 
	`ußge
();

228 
	`Ârötf
(
°dîr
, 
vîsi⁄_°rög
);

229 
	`exô
(
E_VERSION
);

232 
vîbo£
++;

237 i‡(
mode
) {

238 
	`Ârötf
(
°dîr
, 
	`_
("%s: iŒegÆ o±i⁄ mix.\n"), 
¨gv
[0]);

239 
	`ußge
();

241 
mode
 = (
c
 ='a' ? 
MODE_DISPLAY
 : (¯='d' ? 
MODE_DELETE
 : 
MODE_SET
));

245 
mode
 = 
MODE_ETHERS
;

249 i‡(
›èrg
) {

250 
h¨dw¨e
 = 
	`gë_hwty≥
(
›èrg
);

252 
	`ußge
();

256 i‡(
«rgs
 == 2) {

257 
	`ußge
();

258 
	`exô
(1);

260 
¨gs
[
«rgs
++] = 
›èrg
;

264 
	`ußge
();

266 } 
c
 !
EOF
);

268 i‡(
h¨dw¨e
 =
NULL
) {

269 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: %s: unknow¿h¨dw¨êty≥.\n"), 
›èrg
);

270 
	`exô
(1);

272 
mode
) {

274 
	`ußge
();

276 
MODE_DISPLAY
:

277 i‡(
«rgs
 !(
mode
 - 1)) {

278 
	`ußge
();

280 
ªsu…
 = 
	`di•œy_ˇche
();

283 
MODE_DELETE
:

284 
MODE_SET
:

285 i‡(
«rgs
 !(
mode
 - 1)) {

286 
	`ußge
();

288 i‡((
hp
 = 
	`gëho°by«me
(
¨gs
[0])Ë=
NULL
) {

289 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: %s: unknow¿ho°\n"), 
¨gs
[0]);

290 
	`exô
(1);

292 i‡(
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0), fd < 0) {

293 
	`≥º‹
("socket");

294 
	`exô
(1);

296 
ªsu…
 = (
mode
 =
MODE_DELETE
Ë? 
	`øΩ_dñëe
(
fd
, 
hp
Ë: 
	`øΩ_£t
(fd, hp, 
¨gs
[1]);

297 
	`˛o£
(
fd
);

300 
MODE_ETHERS
:

301 i‡(
«rgs
 != 0 &&Çargs != 1)

302 
	`ußge
();

303 i‡(
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0), fd < 0) {

304 
	`≥º‹
("socket");

305 
	`exô
(1);

307 
ªsu…
 = 
	`øΩ_fûe
(
fd
, 
«rgs
 ? 
¨gs
[0] : 
_PATH_ETHERS
);

308 
	`˛o£
(
fd
);

311 
	`exô
(
ªsu…
);

312 
	}
}

	@net-tools-1.60/route.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/io˘l.h
>

41 
	~<sys/sockë.h
>

42 
	~<√t/if.h
>

44 
	~<√töë/ö.h
>

45 
	~<√tdb.h
>

46 
	~<√töë/ö.h
>

47 
	~<¨∑/«me£r.h
>

48 
	~<ªsﬁv.h
>

49 
	~<löux/∑øm.h
>

50 
	~<°dio.h
>

51 
	~<î∫o.h
>

52 
	~<f˙é.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<gë›t.h
>

56 
	~<uni°d.h
>

57 
	~<˘y≥.h
>

58 
	~"√t-suµ‹t.h
"

59 
	~"c⁄fig.h
"

60 
	~"öé.h
"

61 
	~"∑th«mes.h
"

62 
	~"vîsi⁄.h
"

64 
	#DFLT_AF
 "öë"

	)

66 
	#FEATURE_ROUTE


	)

67 
	~"lib/√t-„©uªs.h
"

69 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "route 1.98 (2001-04-15)";

71 
	g›t_n
 = 0;

72 
	g›t_v
 = 0;

73 
	g›t_e
 = 1;

74 
	g›t_fc
 = 0;

75 
	g›t_h
 = 0;

76 
a·y≥
 *
	g≠
;

78 
	$ußge
()

80 
	`Ârötf
(
°dîr
, 
	`_
("Usage:Ñoute [-nNvee] [-FC] [<AF>] List kernelÑoutingÅables\n"));

81 
	`Ârötf
(
°dîr
, 
	`_
("Ñoute [-v] [-FC] {add|del|flush} ... ModifyÑoutingÅable for AF.\n\n"));

83 
	`Ârötf
(
°dîr
, 
	`_
("Ñoute {-h|--help} [<AF>] Detailed usage syntax for specified AF.\n"));

84 
	`Ârötf
(
°dîr
, 
	`_
("Ñoute {-V|--version} Display version/authorándÉxit.\n\n"));

86 
	`Ârötf
(
°dîr
, 
	`_
(" -v, --verbose be verbose\n"));

87 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --numeric don'tÑesolveÇames\n"));

88 
	`Ârötf
(
°dîr
, 
	`_
(" -e, --extend display other/more information\n"));

89 
	`Ârötf
(
°dîr
, 
	`_
(" -F, --fib display Forwarding Information Base (default)\n"));

90 
	`Ârötf
(
°dîr
, 
	`_
(" -C, --cache displayÑouting cache instead of FIB\n\n"));

92 
	`Ârötf
(
°dîr
, 
	`_
(" <AF>=U£ '-A <af>' o∏'--<af>'; deÁu…: %s\n"), 
DFLT_AF
);

93 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossibleáddress families (which supportÑouting):\n"));

94 
	`¥öt_aÊi°
(1);

95 
	`exô
(
E_USAGE
);

96 
	}
}

99 
	$vîsi⁄
()

101 
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Fótuªs
);

102 
	`exô
(
E_VERSION
);

103 
	}
}

106 
	$maö
(
¨gc
, **
¨gv
)

108 
i
, 
l›
, 
wh©
 = 0;

109 
›ti⁄
 
l⁄g›ts
[] =

111 
AFTRANS_OPTS
,

121 {
NULL
, 0, 0, 0}

123 **
tmp
;

124 *
¥og«me
;

125 
›ti⁄s
;

126 #i‡
I18N


127 
	`£éoˇÀ
 (
LC_ALL
, "");

128 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

129 
	`ãxtdomaö
("net-tools");

131 
	`gërouã_öô
();

132 
	`£åouã_öô
();

133 
a‚ame
[0] = '\0';

134 
¥og«me
 = 
¨gv
[0];

137 
tmp
 = 
¨gv
; *tmp;Åmp++) {

138 i‡(!
	`°rcmp
(*
tmp
, "-net"))

139 
	`°r˝y
(*
tmp
, "#net");

140 i‡(!
	`°rcmp
(*
tmp
, "-host"))

141 
	`°r˝y
(*
tmp
, "#host");

145 (
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:eCFhnNVv?", 
l⁄g›ts
, &
l›
)Ë!
EOF
)

146 
i
) {

150 
›t_n
 |
FLAG_NUM
;

153 
›t_n
 |
FLAG_SYM
;

156 
›t_v
 |
FLAG_VERBOSE
;

159 
›t_e
++;

162 i‡(
l›
 < 0 ||Ü› >
AFTRANS_CNT
) {

163 
	`EINTERN
("route.c", "longopts 1Ñange");

166 i‡((
i
 = 
	`a·øns_›t
(
l⁄g›ts
[
l›
].
«me
)))

167 
	`exô
(
i
);

170 
›t_fc
 |
FLAG_CACHE
;

173 
›t_fc
 |
FLAG_FIB
;

176 i‡((
i
 = 
	`a·øns_›t
(
›èrg
)))

177 
	`exô
(
i
);

180 
	`vîsi⁄
();

183 
›t_h
++;

186 
	`ußge
();

189 
¨gv
 +
›töd
;

190 
¨gc
 -
›töd
;

192 i‡(
›t_h
) {

193 i‡(!
a‚ame
[0])

194 
	`ußge
();

196 
wh©
 = 
RTACTION_HELP
;

198 i‡(!
a‚ame
[0])

200 
	`a·øns_def
("rouã", 
¥og«me
, 
DFLT_AF
);

203 i‡(*
¨gv
 =
NULL
) {

204 
wh©
 = 
RTACTION_SHOW
;

206 i‡(!
	`°rcmp
(*
¨gv
, "add"))

207 
wh©
 = 
RTACTION_ADD
;

208 i‡(!
	`°rcmp
(*
¨gv
, "del") || !strcmp(*argv, "delete"))

209 
wh©
 = 
RTACTION_DEL
;

210 i‡(!
	`°rcmp
(*
¨gv
, "flush"))

211 
wh©
 = 
RTACTION_FLUSH
;

213 
	`ußge
();

217 
›ti⁄s
 = (
›t_e
 & 
FLAG_EXT
Ë| 
›t_n
 | 
›t_fc
 | 
›t_v
;

218 i‡(!
›t_fc
)

219 
›ti⁄s
 |
FLAG_FIB
;

221 i‡(
wh©
 =
RTACTION_SHOW
)

222 
i
 = 
	`rouã_öfo
(
a‚ame
, 
›ti⁄s
);

224 
i
 = 
	`rouã_edô
(
wh©
, 
a‚ame
, 
›ti⁄s
, ++
¨gv
);

226 i‡(
i
 =
E_OPTERR
)

227 
	`ußge
();

229  (
i
);

230 
	}
}

	@net-tools-1.60/slattach.c

31 
	~<sys/∑øm.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/io˘l.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~<f˙é.h
>

40 
	~<limôs.h
>

41 
	~<pwd.h
>

42 
	~<sig«l.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<gë›t.h
>

47 
	~<löux/if_¶ù.h
>

49 #i‡
deföed
(
__GLIBC__
)

50 #i‡
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 == 0

51 
	~<ãrmbôs.h
>

53 
	~<ãrmios.h
>

57 
	~"∑th«mes.h
"

58 
	~"√t-suµ‹t.h
"

59 
	~"vîsi⁄.h
"

60 
	~"c⁄fig.h
"

61 
	~"öé.h
"

62 
	~"utû.h
"

64 #i‚de‡
_PATH_LOCKD


65 
	#_PATH_LOCKD
 "/v¨/lock"

	)

67 #i‚de‡
_UID_UUCP


68 
	#_UID_UUCP
 "uu˝"

	)

72 
	#DEF_PROTO
 "c¶ù"

	)

75 c⁄° *
	gRñó£
 = 
RELEASE
,

76 *
	gVîsi⁄
 = "@(#) slattach 1.21 (1999-11-21)",

77 *
	gSig«tuª
 = "net-tools, Fred N. van KempenÉtál.";

81 c⁄° *
	m•ìd
;

82 
	mcode
;

83 } 
	gây_•ìds
[] = {

84 { "50", 
B50
 }, { "75", 
B75
 },

85 { "110", 
B110
 }, { "300", 
B300
 },

86 { "600", 
B600
 }, { "1200", 
B1200
 },

87 { "2400", 
B2400
 }, { "4800", 
B4800
 },

88 { "9600", 
B9600
 },

89 #ifde‡
B14400


90 { "14400", 
B14400
 },

92 #ifde‡
B19200


93 { "19200", 
B19200
 },

95 #ifde‡
B38400


96 { "38400", 
B38400
 },

98 #ifde‡
B57600


99 { "57600", 
B57600
 },

101 #ifde‡
B115200


102 { "115200", 
B115200
 },

104 { 
NULL
, 0 }

106 
ãrmios
 
	gây_ßved
,

107 
	gây_cuºít
;

108 
	gây_sdisc
,

109 
	gây_ldisc
,

110 
	gây_fd
 = -1;

111 
	g›t_c
 = 0;

112 
	g›t_e
 = 0;

113 
	g›t_h
 = 0;

114 #ifde‡
SIOCSKEEPALIVE


115 
	g›t_k
 = 0;

117 
	g›t_l
 = 0;

118 
	g›t_L
 = 0;

119 
	g›t_m
 = 0;

120 
	g›t_n
 = 0;

121 #ifde‡
SIOCSOUTFILL


122 
	g›t_o
 = 0;

124 
	g›t_q
 = 0;

125 
	g›t_d
 = 0;

126 
	g›t_v
 = 0;

130 
	$ây_nomesg
(
fd
)

132 i‡(
›t_n
 == 0) (0);

133 (
	`fchmod
(
fd
, 0600));

134 
	}
}

138 
	$ây_Æªady_locked
(*
«m
)

140 
i
 = 0, 
pid
 = 0;

141 
FILE
 *
fd
 = (FILE *)0;

144 i‡((
fd
 = 
	`f›í
(
«m
, "r")Ë=(
FILE
 *)0)

150 
i
 = 
	`fsˇnf
(
fd
, "%d", &
pid
);

151 (Ë
	`f˛o£
(
fd
);

153 i‡(
i
 != 1)

157 i‡(
	`kûl
(
pid
, 0) == 0)

162 
	}
}

166 
	$ây_lock
(*
∑th
, 
mode
)

168 
ßved_∑th
[
PATH_MAX
];

169 
ßved_lock
 = 0;

170 
∑sswd
 *
pw
;

171 
fd
;

172 
≠id
[16];

175 i‡((
›t_l
 =0Ë|| ((
∑th
 =
NULL
Ë&& (
ßved_lock
 == 0))) (0);

177 i‡(
mode
 == 1) {

178 
	`•rötf
(
ßved_∑th
, "%s/LCK..%s", 
_PATH_LOCKD
, 
∑th
);

179 i‡(
	`ây_Æªady_locked
(
ßved_∑th
)) {

180 
	`Ârötf
(
°dîr
, 
	`_
("¶©èch: /dev/%†ÆªadyÜocked!\n"), 
∑th
);

183 i‡((
fd
 = 
	`¸ót
(
ßved_∑th
, 0644)) < 0) {

184 i‡(
î∫o
 !
EEXIST
)

185 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

186 
	`_
("slattach:Åty_lock: (%s): %s\n"),

187 
ßved_∑th
, 
	`°ªº‹
(
î∫o
));

190 
	`•rötf
(
≠id
, "%10d\n", 
	`gëpid
());

191 i‡(
	`wrôe
(
fd
, 
≠id
, 
	`°æí
(apid)) != strlen(apid)) {

192 
	`Ârötf
(
°dîr
, 
	`_
("slattach: cannot write PID file\n"));

193 
	`˛o£
(
fd
);

194 
	`u∆ök
(
ßved_∑th
);

198 (Ë
	`˛o£
(
fd
);

201 i‡((
pw
 = 
	`gëpw«m
(
_UID_UUCP
)Ë=
NULL
) {

202 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_lock: UUCP user %s unknown!\n"),

203 
_UID_UUCP
);

206 (Ë
	`chown
(
ßved_∑th
, 
pw
->
pw_uid
,Öw->
pw_gid
);

207 
ßved_lock
 = 1;

209 i‡(
ßved_lock
 != 1) (0);

210 i‡(
	`u∆ök
(
ßved_∑th
) < 0) {

211 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

212 "¶©èch:Åty_u∆ock: (%s): %s\n", 
ßved_∑th
,

213 
	`°ªº‹
(
î∫o
));

216 
ßved_lock
 = 0;

220 
	}
}

225 
	$ây_föd_•ìd
(c⁄° *
•ìd
)

227 
i
;

229 
i
 = 0;

230 
ây_•ìds
[
i
].
•ìd
 !
NULL
) {

231 i‡(!
	`°rcmp
(
ây_•ìds
[
i
].
•ìd
, s≥ed)Ë—ty_•ìds[i].
code
);

232 
i
++;

234 (-
EINVAL
);

235 
	}
}

240 
	$ây_£t_°›bôs
(
ãrmios
 *
ây
, *
°›bôs
)

242 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_°›bôs: %c\n", *
°›bôs
);

243 *
°›bôs
) {

245 
ây
->
c_cÊag
 &~
CSTOPB
;

249 
ây
->
c_cÊag
 |
CSTOPB
;

253 (-
EINVAL
);

256 
	}
}

261 
	$ây_£t_d©abôs
(
ãrmios
 *
ây
, *
d©abôs
)

263 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_d©abôs: %c\n", *
d©abôs
);

264 
ây
->
c_cÊag
 &~
CSIZE
;

265 *
d©abôs
) {

267 
ây
->
c_cÊag
 |
CS5
;

271 
ây
->
c_cÊag
 |
CS6
;

275 
ây
->
c_cÊag
 |
CS7
;

279 
ây
->
c_cÊag
 |
CS8
;

283 (-
EINVAL
);

286 
	}
}

291 
	$ây_£t_∑rôy
(
ãrmios
 *
ây
, *
∑rôy
)

293 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_∑rôy: %c\n", *
∑rôy
);

294 
	`touµî
(*
∑rôy
)) {

296 
ây
->
c_cÊag
 &~(
PARENB
 | 
PARODD
);

300 
ây
->
c_cÊag
 &~(
PARENB
 | 
PARODD
);

301 
ây
->
c_cÊag
 |(
PARENB
 | 
PARODD
);

305 
ây
->
c_cÊag
 &~(
PARENB
 | 
PARODD
);

306 
ây
->
c_cÊag
 |(
PARENB
);

310 (-
EINVAL
);

313 
	}
}

318 
	$ây_£t_•ìd
(
ãrmios
 *
ây
, c⁄° *
•ìd
)

320 
code
;

322 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_•ìd: %s\n", 
•ìd
);

323 i‡((
code
 = 
	`ây_föd_•ìd
(
•ìd
)) < 0) (code);

324 
ây
->
c_cÊag
 &~
CBAUD
;

325 
ây
->
c_cÊag
 |
code
;

327 
	}
}

332 
	$ây_£t_øw
(
ãrmios
 *
ây
)

334 
i
;

335 
•ìd
;

337 
i
 = 0; i < 
NCCS
; i++)

338 
ây
->
c_cc
[
i
] = '\0';

339 
ây
->
c_cc
[
VMIN
] = 1;

340 
ây
->
c_cc
[
VTIME
] = 0;

341 
ây
->
c_iÊag
 = (
IGNBRK
 | 
IGNPAR
);

342 
ây
->
c_oÊag
 = (0);

343 
ây
->
c_lÊag
 = (0);

344 
•ìd
 = (
ây
->
c_cÊag
 & 
CBAUD
);

345 
ây
->
c_cÊag
 = (
CRTSCTS
 | 
HUPCL
 | 
CREAD
);

346 i‡(
›t_L
)

347 
ây
->
c_cÊag
 |
CLOCAL
;

348 
ây
->
c_cÊag
 |
•ìd
;

350 
	}
}

355 
	$ây_gë_°©e
(
ãrmios
 *
ây
)

357 i‡(
	`io˘l
(
ây_fd
, 
TCGETS
, 
ây
) < 0) {

358 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

359 "¶©èch:Åty_gë_°©e: %s\n", 
	`°ªº‹
(
î∫o
));

360 (-
î∫o
);

363 
	}
}

368 
	$ây_£t_°©e
(
ãrmios
 *
ây
)

370 i‡(
	`io˘l
(
ây_fd
, 
TCSETS
, 
ây
) < 0) {

371 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

372 "¶©èch:Åty_£t_°©e: %s\n", 
	`°ªº‹
(
î∫o
));

373 (-
î∫o
);

376 
	}
}

381 
	$ây_gë_disc
(*
disc
)

383 i‡(
	`io˘l
(
ây_fd
, 
TIOCGETD
, 
disc
) < 0) {

384 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

385 "¶©èch:Åty_gë_disc: %s\n", 
	`°ªº‹
(
î∫o
));

386 (-
î∫o
);

389 
	}
}

394 
	$ây_£t_disc
(
disc
)

396 i‡(
disc
 =-1Ëdis¯
ây_sdisc
;

398 i‡(
	`io˘l
(
ây_fd
, 
TIOCSETD
, &
disc
) < 0) {

399 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

400 "¶©èch:Åty_£t_disc(%d, %d): %s\n", 
ây_fd
,

401 
disc
, 
	`°ªº‹
(
î∫o
));

402 (-
î∫o
);

405 
	}
}

410 
	$ây_gë_«me
(*
«me
)

412 i‡(
	`io˘l
(
ây_fd
, 
SIOCGIFNAME
, 
«me
) < 0) {

413 i‡(
›t_q
 == 0)

414 
	`≥º‹
("tty_get_name");

415 (-
î∫o
);

418 
	}
}

423 
	$ây_h™gup
()

425 
ãrmios
 
ây
;

427 
ây
 = 
ây_cuºít
;

428 (Ë
	`ây_£t_•ìd
(&
ây
, "0");

429 i‡(
	`ây_£t_°©e
(&
ây
) < 0) {

430 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("¶©èch:Åty_h™gup(DROP): %s\n"), 
	`°ªº‹
(
î∫o
));

431 (-
î∫o
);

434 (Ë
	`¶ìp
(1);

436 i‡(
	`ây_£t_°©e
(&
ây_cuºít
) < 0) {

437 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("¶©èch:Åty_h™gup(RAISE): %s\n"), 
	`°ªº‹
(
î∫o
));

438 (-
î∫o
);

441 
	}
}

446 
	$ây_˛o£
()

448 (Ë
	`ây_£t_disc
(
ây_sdisc
);

449 (Ë
	`ây_h™gup
();

450 (Ë
	`ây_lock
(
NULL
, 0);

452 
	}
}

457 
	$ây_›í
(*
«me
, c⁄° *
•ìd
)

459 
∑thbuf
[
PATH_MAX
];

460 *
∑th_›í
, *
∑th_lock
;

461 
fd
;

464 i‡(
«me
 !
NULL
) {

465 i‡(
«me
[0] != '/') {

466 i‡(
	`°æí
(
«me
 + 6Ë> (
∑thbuf
)) {

467 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

468 
	`_
("slattach:ÅtyÇameÅooÜong\n"));

471 
	`•rötf
(
∑thbuf
, "/dev/%s", 
«me
);

472 
∑th_›í
 = 
∑thbuf
;

473 
∑th_lock
 = 
«me
;

474 } i‡(!
	`°∫cmp
(
«me
, "/dev/", 5)) {

475 
∑th_›í
 = 
«me
;

476 
∑th_lock
 = 
«me
 + 5;

478 
∑th_›í
 = 
«me
;

479 
∑th_lock
 = 
«me
;

481 i‡(
›t_d
Ë
	`¥ötf
("slattach:Åty_open:Üooking forÜock\n");

482 i‡(
	`ây_lock
(
∑th_lock
, 1)) (-1);

483 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_›í:ÅryögÅÿ›í %s\n", 
∑th_›í
);

484 i‡((
fd
 = 
	`›í
(
∑th_›í
, 
O_RDWR
|
O_NDELAY
)) < 0) {

485 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

487 
∑th_›í
, 
	`°ªº‹
(
î∫o
));

488 (-
î∫o
);

490 
ây_fd
 = 
fd
;

491 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_›í: %†(fd=%dË", 
∑th_›í
, 
fd
);

493 
ây_fd
 = 0;

497 i‡(
	`ây_gë_°©e
(&
ây_ßved
) < 0) {

498 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot get current state!\n"));

499 (-
î∫o
);

501 
ây_cuºít
 = 
ây_ßved
;

504 i‡(
	`ây_gë_disc
(&
ây_sdisc
) < 0) {

505 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot get currentÜine disc!\n"));

506 (-
î∫o
);

508 
ây_ldisc
 = 
ây_sdisc
;

511 i‡(
›t_m
 == 0) {

512 i‡(
	`ây_£t_øw
(&
ây_cuºít
) < 0) {

513 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot set RAW mode!\n"));

514 (-
î∫o
);

518 i‡(
•ìd
 !
NULL
) {

519 i‡(
	`ây_£t_•ìd
(&
ây_cuºít
, 
•ìd
) != 0) {

520 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot set %s bps!\n"),

521 
•ìd
);

522 (-
î∫o
);

527 i‡(
	`ây_£t_d©abôs
(&
ây_cuºít
, "8") ||

528 
	`ây_£t_°›bôs
(&
ây_cuºít
, "1") ||

529 
	`ây_£t_∑rôy
(&
ây_cuºít
, "N")) {

530 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot set 8N1 mode!\n"));

531 (-
î∫o
);

535 i‡((
fd
 = 
	`ây_£t_°©e
(&
ây_cuºít
)) < 0) (fd);

539 (Ë
	`ây_nomesg
(
ây_fd
);

542 
	}
}

547 
	$sig_ˇtch
(
sig
)

550 
	`ây_˛o£
();

551 
	`exô
(0);

552 
	}
}

556 
	$ußge
()

558 *
ußge_msg
 = "Usage: slattach [-ehlLmnqv] "

559 #ifde‡
SIOCSKEEPALIVE


562 #ifde‡
SIOCSOUTFILL


568 
	`Ârötf
(
°dîr
, 
ußge_msg
);

569 
	`exô
(1);

570 
	}
}

574 
	$vîsi⁄
()

576 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

577 
	`exô
(
E_VERSION
);

578 
	}
}

582 
	$maö
(
¨gc
, *
¨gv
[])

584 
∑th_buf
[128];

585 *
∑th_dev
;

586 
buff
[128];

587 c⁄° *
•ìd
 = 
NULL
;

588 c⁄° *
¥Ÿo
 = 
DEF_PROTO
;

589 c⁄° *
extcmd
 = 
NULL
;

590 
s
;

591 
›ti⁄
 
l⁄g›ts
[] = {

592 { "vîsi⁄", 0, 
NULL
, 'V' },

593 { 
NULL
, 0, NULL, 0 }

596 
	`°r˝y
(
∑th_buf
, "");

597 
∑th_dev
 = 
∑th_buf
;

600 
›ãº
 = 0;

601 (
s
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:ehlLm≈:qs:vdVk:o:", 
l⁄g›ts
, 
NULL
)Ë!
EOF
) s) {

603 
extcmd
 = 
›èrg
;

607 
›t_e
 = 1 - opt_e;

611 
›t_h
 = 1 - opt_h;

614 #ifde‡
SIOCSKEEPALIVE


616 
›t_k
 = 
	`©oi
(
›èrg
);

621 
›t_L
 = 1 - opt_L;

625 
›t_l
 = 1 - opt_l;

629 
›t_m
 = 1 - opt_m;

633 
›t_n
 = 1 - opt_n;

636 #ifde‡
SIOCSOUTFILL


638 
›t_o
 = 
	`©oi
(
›èrg
);

643 
¥Ÿo
 = 
›èrg
;

647 
›t_q
 = 1 - opt_q;

651 
•ìd
 = 
›èrg
;

655 
›t_d
 = 1 - opt_d;

659 
›t_v
 = 1 - opt_v;

663 
	`vîsi⁄
();

667 
	`ußge
();

671 i‡(
	`£tvbuf
(
°dout
,0,
_IOLBF
,0)) {

672 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach: setvbuf(stdout,0,_IOLBF,0) : %s\n"),

673 
	`°ªº‹
(
î∫o
));

674 
	`exô
(1);

677 
	`a˘iv©e_öô
();

679 i‡(!
	`°rcmp
(
¥Ÿo
, "tty"))

680 
›t_m
++;

683 i‡(
›töd
 !(
¨gc
 - 1)Ë
	`ußge
();

684 
	`ß„_°∫˝y
(
∑th_buf
, 
¨gv
[
›töd
], (path_buf));

685 i‡(!
	`°rcmp
(
∑th_buf
, "-")) {

686 
›t_e
 = 1;

687 
∑th_dev
 = 
NULL
;

688 i‡(
	`ây_›í
(
NULL
, 
•ìd
) < 0) { (3); }

690 
∑th_dev
 = 
∑th_buf
;

691 i‡(
	`ây_›í
(
∑th_dev
, 
•ìd
) < 0) { (3); }

695 i‡(!
	`°rcmp
(
¥Ÿo
, "tty")) {

696 
ây_sdisc
 = 
N_TTY
;

697 
	`ây_˛o£
();

700 i‡(
	`a˘iv©e_ld
(
¥Ÿo
, 
ây_fd
))

702 i‡((
›t_v
 =1Ë|| (
›t_d
 == 1)) {

703 i‡(
	`ây_gë_«me
(
buff
)) { (3); }

704 
	`¥ötf
(
	`_
("%†°¨ãd"), 
¥Ÿo
);

705 i‡(
∑th_dev
 !
NULL
Ë
	`¥ötf
(
	`_
(" on %s"),Öath_dev);

706 
	`¥ötf
(
	`_
(" i¡îÁ˚ %s\n"), 
buff
);

710 #ifde‡
SIOCSKEEPALIVE


711 i‡(
›t_k
 && (
	`io˘l
(
ây_fd
, 
SIOCSKEEPALIVE
, &opt_k) < 0))

712 
	`Ârötf
(
°dîr
, "¶©èch: io˘l(SIOCSKEEPALIVE): %s\n", 
	`°ªº‹
(
î∫o
));

714 #ifde‡
SIOCSOUTFILL


715 i‡(
›t_o
 && (
	`io˘l
(
ây_fd
, 
SIOCSOUTFILL
, &opt_o) < 0))

716 
	`Ârötf
(
°dîr
, "¶©èch: io˘l(SIOCSOUTFILL): %s\n", 
	`°ªº‹
(
î∫o
));

719 (Ë
	`sig«l
(
SIGHUP
, 
sig_ˇtch
);

720 (Ë
	`sig«l
(
SIGINT
, 
sig_ˇtch
);

721 (Ë
	`sig«l
(
SIGQUIT
, 
sig_ˇtch
);

722 (Ë
	`sig«l
(
SIGTERM
, 
sig_ˇtch
);

725 i‡(
›t_e
 == 0) {

727 if(
›t_h
 == 1) {

728 
n
 = 0;

730 
	`io˘l
(
ây_fd
, 
TIOCMGET
, &
n
);

731 if(!(
n
 & 
TIOCM_CAR
))

733 
	`¶ìp
(15);

736 
	`¶ìp
(60);

739 
	`ây_˛o£
();

740 if(
extcmd
)

741 
	`sy°em
(
extcmd
);

743 
	`exô
(0);

744 
	}
}

	@net-tools-1.60/statistics.c

8 
	~<˘y≥.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~"c⁄fig.h
"

13 
	~"öé.h
"

17 #ifde‡
WARN


18 
	#UFWARN
(
x
Ë
	)
x

20 
	#UFWARN
(
x
)

	)

23 
	g¥öt_°©ic
,
	gf_øw
,
	gf_t˝
,
	gf_udp
,
	gf_unknown
 = 1;

25 
	eSèã
 {

26 
	mnumbî
 = 0, 
	m›t_numbî
, 
	mi_f‹w¨d
, 
	mi_öp_icmp
, 
	mi_ouç_icmp
, 
	mi_πo_Æg
,

27 
	mMaxSèã


30 
	#n‹mÆ
 
numbî


	)

32 
	síåy
 {

33 *
	mtôÀ
;

34 *
	mout
;

35 
Sèã
 
	mty≥
;

38 
	s°©edesc
 {

39 
	mödít
;

40 *
	mtôÀ
;

43 
°©edesc
 
	g°©es
[] = {

44 [
numbî
] = { 4, 
NULL
 },

45 [
›t_numbî
] = { 4, 
NULL
 },

46 [
i_f‹w¨d
] = { 4, 
NULL
 },

47 [
i_öp_icmp
] = { 8, 
N_
("ICMP input histogram:") },

48 [
i_ouç_icmp
] = { 8, 
N_
("ICMP output histogram:") },

49 [
MaxSèã
] = {0},

52 
Sèã
 
	g°©e
;

54 
	#I_STATIC
 (1<<16Ë

	)

55 
	#I_TITLE
 (1<<17)

	)

63 
íåy
 
	gI±ab
[] =

65 {"F‹w¨dög", 
N_
("F‹w¨dög i†%s"), 
i_f‹w¨d
 | 
I_STATIC
},

66 {"DeÁu…TTL", 
N_
("DeÁu… TTL i†%u"), 
numbî
 | 
I_STATIC
},

67 {"InRe˚ives", 
N_
("%uÅŸÆÖackë†ª˚ived"), 
numbî
},

68 {"InHdrEº‹s", 
N_
("%u wôh invÆid hódîs"), 
›t_numbî
},

69 {"InAddrEº‹s", 
N_
("%u wôh invÆidáddªs£s"), 
›t_numbî
},

70 {"F‹wD©agøms", 
N_
("%u f‹w¨ded"), 
numbî
},

71 {"InUnknownPrŸos", 
N_
("%u wôh unknow¿¥Ÿocﬁ"), 
›t_numbî
},

72 {"InDisˇrds", 
N_
("%u incomögÖackë†disˇrded"), 
numbî
},

73 {"InDñivîs", 
N_
("%u incomögÖackë†dñivîed"), 
numbî
},

74 {"OutReque°s", 
N_
("%uÑeque°†£¡ out"), 
numbî
},

75 {"OutDisˇrds", 
N_
("%u outgoögÖackë†dr›≥d"), 
›t_numbî
},

76 {"OutNoRouãs", 
N_
("%u dr›≥d beˇu£ o‡missögÑouã"), 
›t_numbî
},

77 {"RósmTimeout", 
N_
("%u føgmít†dr›≥dá·îÅimeout"), 
›t_numbî
},

78 {"RósmReqds", 
N_
("%uÑós£mblõ†ªquúed"), 
›t_numbî
},

79 {"RósmOKs", 
N_
("%uÖackë†ªas£mbÀd ok"), 
›t_numbî
},

80 {"RósmFaûs", 
N_
("%uÖackëÑós£mbÀ†Áûed"), 
›t_numbî
},

81 {"FøgOKs", 
N_
("%u føgmít†ª˚ived ok"), 
›t_numbî
},

82 {"FøgFaûs", 
N_
("%u føgmít†Áûed"), 
›t_numbî
},

83 {"FøgCª©es", 
N_
("%u føgmít†¸óãd"), 
›t_numbî
}

86 
íåy
 
	gIcm±ab
[] =

88 {"InMsgs", 
N_
("%u ICMP mesßge†ª˚ived"), 
numbî
},

89 {"InEº‹s", 
N_
("%u i≈uàICMP mesßgêÁûed."), 
numbî
},

90 {"InDe°Uƒóchs", 
N_
("de°ö©i⁄ uƒóchabÀ: %u"), 
i_öp_icmp
 | 
I_TITLE
},

91 {"InTimeExcds", 
N_
("timeouàöÅønsô: %u"), 
i_öp_icmp
 | 
I_TITLE
},

92 {"InP¨mProbs", 
N_
("wr⁄gÖ¨amëîs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

93 {"InSrcQuíchs", 
N_
("sour˚ quíches: %u"), 
i_öp_icmp
 | 
I_TITLE
},

94 {"InRedúe˘s", 
N_
("ªdúe˘s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

95 {"InEchos", 
N_
("echÿªque°s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

96 {"InEchoRïs", 
N_
("echÿª∂õs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

97 {"InTime°amps", 
N_
("time°am∞ªque°: %u"), 
i_öp_icmp
 | 
I_TITLE
},

98 {"InTime°ampRïs", 
N_
("time°am∞ª∂y: %u"), 
i_öp_icmp
 | 
I_TITLE
},

99 {"InAddrMasks", 
N_
("addªs†maskÑeque°: %u"), 
i_öp_icmp
 | 
I_TITLE
},

100 {"InAddrMaskRïs", 
N_
("addªs†maskÑïlõs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

101 {"OutMsgs", 
N_
("%u ICMP mesßge†£¡"), 
numbî
},

102 {"OutEº‹s", 
N_
("%u ICMP mesßge†Áûed"), 
numbî
},

103 {"OutDe°Uƒóchs", 
N_
("de°ö©i⁄ uƒóchabÀ: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

104 {"OutTimeExcds", 
N_
("timêex˚eded: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

105 {"OutP¨mProbs", 
N_
("wr⁄gÖ¨amëîs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

106 {"OutSrcQuíchs", 
N_
("sour˚ quích: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

107 {"OutRedúe˘s", 
N_
("ªdúe˘: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

108 {"OutEchos", 
N_
("echÿªque°: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

109 {"OutEchoRïs", 
N_
("echÿª∂õs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

110 {"OutTime°amps", 
N_
("time°am∞ªque°s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

111 {"OutTime°ampRïs", 
N_
("time°am∞ª∂õs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

112 {"OutAddrMasks", 
N_
("addªs†maskÑeque°s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

113 {"OutAddrMaskRïs", 
N_
("addªs†maskÑïlõs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

116 
íåy
 
	gT˝èb
[] =

118 {"RtoAlg‹ôhm", 
N_
("RTOálg‹ôhm i†%s"), 
i_πo_Æg
 | 
I_STATIC
},

119 {"RtoMö", "", 
numbî
},

120 {"RtoMax", "", 
numbî
},

121 {"MaxC⁄n", "", 
numbî
},

122 {"A˘iveO≥ns", 
N_
("%uá˘ivêc⁄√˘i⁄†›íögs"), 
numbî
},

123 {"PassiveO≥ns", 
N_
("%uÖassivêc⁄√˘i⁄ o≥nögs"), 
numbî
},

124 {"Aâem±Faûs", 
N_
("%u faûed c⁄√˘i⁄áâem±s"), 
numbî
},

125 {"E°abRe£ts", 
N_
("%u c⁄√˘i⁄Ñe£t†ª˚ived"), 
numbî
},

126 {"CuºE°ab", 
N_
("%u c⁄√˘i⁄†e°ablished"), 
numbî
},

127 {"InSegs", 
N_
("%u segmít†ª˚ived"), 
numbî
},

128 {"OutSegs", 
N_
("%u segmít†£nd out"), 
numbî
},

129 {"RëønsSegs", 
N_
("%u segmít†ªå™smôed"), 
numbî
},

130 {"InEºs", 
N_
("%u bad segmít†ª˚ived."), 
numbî
},

131 {"OutR°s", 
N_
("%uÑe£t†£¡"), 
numbî
},

134 
íåy
 
	gUd±ab
[] =

136 {"InD©agøms", 
N_
("%uÖackë†ª˚ived"), 
numbî
},

137 {"NoP‹ts", 
N_
("%uÖackë†tÿunknow¿p‹àª˚ived."), 
numbî
},

138 {"InEº‹s", 
N_
("%uÖackëÑe˚ivêîr‹s"), 
numbî
},

139 {"OutD©agøms", 
N_
("%uÖackë†£¡"), 
numbî
},

142 
íåy
 
	gT˝exâab
[] =

144 {"SyncookõsSít", 
N_
("%u SYN cookõ†£¡"), 
›t_numbî
},

145 {"SyncookõsRecv", 
N_
("%u SYN cookõ†ª˚ived"), 
›t_numbî
},

146 {"SyncookõsFaûed", 
N_
("%u invÆid SYN cookõ†ª˚ived"), 
›t_numbî
},

148 { "Embry⁄icR°s", 
N_
("%uÑesetsÑeceived forÉmbryonic SYN_RECV sockets"),

149 
›t_numbî
 },

150 { "Pru√CÆÀd", 
N_
("%uÖacketsÖruned fromÑeceive queue because of socket"

151 " buf„∏ovîrun"), 
›t_numbî
 },

153 { "RcvPru√d", 
N_
("%uÖackë†¥u√d fromÑe˚ivêqueue"), 
›t_numbî
 },

154 { "OfoPru√d", 
N_
("%uÖackets dropped from out-of-order queue because of"

155 " sockë buf„∏ovîrun"), 
›t_numbî
 },

156 { "OutOfWödowIcmps", 
N_
("%u ICMPÖackets dropped becauseÅhey were "

157 "out-of-wödow"), 
›t_numbî
 },

158 { "LockDr›≥dIcmps", 
N_
("%u ICMPÖackets dropped because"

159 " sockë wa†locked"), 
›t_numbî
 },

160 { "TW", 
N_
("%u TCP sockë†föishedÅimêwaô i¿Á°Åimî"), 
›t_numbî
 },

161 { "TWRecy˛ed", 
N_
("%uÅimêwaô sockë†ªcy˛ed byÅimê°amp"), 
›t_numbî
 },

162 { "TWKûÀd", 
N_
("%u TCP sockë†föishedÅimêwaô i¿¶owÅimî"), 
›t_numbî
 },

163 { "PAWSPassive", 
N_
("%uÖassive connectionsÑejected because of"

164 "Åimê°amp"), 
›t_numbî
 },

165 { "PAWSA˘ive", 
N_
("%uáctive connectionsÑejected because of "

166 "timê°amp"), 
›t_numbî
 },

167 { "PAWSE°ab", 
N_
("%uÖacketsÑejects inÉstablished connections because of"

168 "Åime°amp"), 
›t_numbî
 },

169 { "DñayedACKs", 
N_
("%u dñayedáck†£¡"), 
›t_numbî
 },

170 { "DñayedACKLocked", 
N_
("%u delayedácks further delayed because of"

171 "Üocked sockë"), 
›t_numbî
 },

172 { "DñayedACKLo°", 
N_
("Quickáck modêwa†a˘iv©ed %uÅimes"), 
›t_numbî
 },

173 { "Li°íOvîÊows", 
N_
("%uÅimesÅheÜisten queue ofá socket overflowed"),

174 
›t_numbî
 },

175 { "Li°íDr›s", 
N_
("%u SYN†tÿLISTEN sockë†ign‹ed"), 
›t_numbî
 },

176 { "TCPPªqueued", 
N_
("%uÖackets directly queuedÅoÑecvmsgÖrequeue."),

177 
›t_numbî
 },

178 { "TCPDúe˘C›yFromBacklog", 
N_
("%uÖackets directlyÑeceived"

179 " from backlog"), 
›t_numbî
 },

180 { "TCPDúe˘C›yFromPªqueue", 
N_
("%uÖackets directlyÑeceived"

181 " fromÖªqueue"), 
›t_numbî
 },

182 { "TCPPªqueueDr›≥d", 
N_
("%uÖackë†dr›≥d fromÖªqueue"), 
›t_numbî
 },

183 { "TCPHPHôs", 
N_
("%uÖackë†hódîÖªdi˘ed"), 
numbî
 },

184 { "TCPHPHôsToU£r", 
N_
("%uÖackets headerÖredictedánd "

185 "dúe˘ly queuedÅÿu£r"), 
›t_numbî
 },

186 { "SockMÆlocOOM", 
N_
("Ran %uÅimes out of system memory during "

187 "∑ckë sídög"), 
›t_numbî
 },

190 
	sèbèb
 {

191 *
	mtôÀ
;

192 
íåy
 *
	mèb
;

193 
size_t
 
	msize
;

194 *
	mÊag
;

197 
èbèb
 
	g¢m±abs
[] =

199 {"Ip", 
I±ab
, (I±ab), &
f_øw
},

200 {"Icmp", 
Icm±ab
, (Icm±ab), &
f_øw
},

201 {"T˝", 
T˝èb
, (T˝èb), &
f_t˝
},

202 {"Udp", 
Ud±ab
, (Ud±ab), &
f_udp
},

203 {"T˝Ext", 
T˝exâab
, (T˝exâab), &
f_t˝
},

204 {
NULL
}

209 
	$cm≥¡rõs
(c⁄° *
a
, c⁄° *
b
)

211  
	`°rcmp
(((
íåy
 *Ë
a
)->
tôÀ
, ((íåy *Ë
b
)->title);

212 
	}
}

214 
	$¥ötvÆ
(
èbèb
 *
èb
, *
tôÀ
, 
vÆ
)

216 
íåy
 *
ít
 = 
NULL
, 
key
;

217 
ty≥
;

218 
buf
[512];

220 
key
.
tôÀ
 =Åitle;

221 i‡(
èb
->tab)

222 
ít
 = 
	`b£¨ch
(&
key
, 
èb
->èb,Åab->
size
 / (
íåy
),

223 (
íåy
), 
cm≥¡rõs
);

224 i‡(!
ít
) {

225 
	`¥ötf
("%*s%s: %d\n", 
°©es
[
°©e
].
ödít
, "", 
tôÀ
, 
vÆ
);

228 
ty≥
 = 
ít
->type;

229 i‡(
ty≥
 & 
I_STATIC
) {

230 
ty≥
 &~
I_STATIC
;

231 i‡(!
¥öt_°©ic
)

234 i‡(*
ít
->
out
 == '\0')

237 i‡(
ty≥
 & 
I_TITLE
) {

238 
ty≥
 &~
I_TITLE
;

239 i‡(
°©e
 !
ty≥
)

240 
	`¥ötf
("%*s%s\n", 
°©es
[
°©e
].
ödít
, "", 
	`_
(°©es[
ty≥
].
tôÀ
));

242 
buf
[0] = '\0';

243 
ty≥
) {

244 
›t_numbî
:

245 i‡(
vÆ
 == 0)

248 
numbî
:

249 
	`¢¥ötf
(
buf
, (buf), 
	`_
(
ít
->
out
), 
vÆ
);

251 
i_f‹w¨d
:

252 
ty≥
 = 
n‹mÆ
;

253 
	`¢¥ötf
(
buf
, (buf), 
	`_
(
ít
->
out
), 
vÆ
 == 2 ? _("enabled") : _("disabled"));

255 
i_ouç_icmp
:

256 
i_öp_icmp
:

257 i‡(
vÆ
 > 0)

258 
	`¢¥ötf
(
buf
, (buf), 
	`_
(
ít
->
out
), 
vÆ
);

260 
i_πo_Æg
:

263 
	`ab‹t
();

265 i‡(
buf
[0])

266 
	`¥ötf
("%*s%s\n", 
°©es
[
ty≥
].
ödít
, "", 
buf
);

268 
°©e
 = 
ty≥
;

269 
	}
}

271 
èbèb
 *
	$√wèbÀ
(
èbèb
 *
èbs
, *
tôÀ
)

273 
èbèb
 *
t
;

274 
èbèb
 
dummyèb
;

276 
t
 = 
èbs
;Å->
tôÀ
;Å++) {

277 i‡(!
	`°rcmp
(
tôÀ
, 
t
->title)) {

278 i‡(*(
t
->
Êag
))

279 
	`¥ötf
("%s:\n", 
	`_
(
tôÀ
));

280 
°©e
 = 
n‹mÆ
;

281  
t
;

284 i‡(!
f_unknown
)

285  
NULL
;

286 
	`¥ötf
("%s:\n", 
	`_
(
tôÀ
));

287 
dummyèb
.
tôÀ
 =Åitle;

288 
dummyèb
.
Êag
 = &
f_unknown
;

289  &
dummyèb
;

290 
	}
}

292 
	$¥o˚ss_fd
(
FILE
 *
f
)

294 
buf1
[1024], 
buf2
[1024];

295 *
•
, *
≈
, *
p
;

296 
	`fgës
(
buf1
,  buf1, 
f
)) {

297 
ídÊag
;

298 
èbèb
 *
èb
;

300 i‡(!
	`fgës
(
buf2
,  buf2, 
f
))

302 
•
 = 
	`°rchr
(
buf1
, ':');

303 
≈
 = 
	`°rchr
(
buf2
, ':');

304 i‡(!
≈
 || !
•
)

305 
f‹m©îr
;

306 *
•
 = '\0';

308 
èb
 = 
	`√wèbÀ
(
¢m±abs
, 
buf1
);

309 i‡(
èb
 =
NULL
) {

310 
	`¥ötf
("unknow¿%s\n", 
buf1
);

313 
≈
++;

314 
•
++;

316 
ídÊag
 = 0;

317 !
ídÊag
) {

318 
•
 +
	`°r•n
(sp, " \t\n");

319 
≈
 +
	`°r•n
(np, " \t\n");

322 
p
 = 
•
+
	`°rc•n
(sp, " \t\n");

323 i‡(*
p
 == '\0')

324 
ídÊag
 = 1;

325 *
p
 = '\0';

327 i‡(*
•
 !'\0' && *(
èb
->
Êag
))

328 
	`¥ötvÆ
(
èb
, 
•
, 
	`°πoul
(
≈
, &np, 10));

330 
•
 = 
p
 + 1;

335 
f‹m©îr
:

336 
	`≥º‹
(
	`_
("errorÖarsing /proc/net/snmp"));

338 
	}
}

341 
	$∑r£¢mp
(
Êag_øw
, 
Êag_t˝
, 
Êag_udp
)

343 
FILE
 *
f
;

345 
f_øw
 = 
Êag_øw
; 
f_t˝
 = 
Êag_t˝
; 
f_udp
 = 
Êag_udp
;

347 
f
 = 
	`f›í
("/proc/net/snmp", "r");

348 i‡(!
f
) {

349 
	`≥º‹
(
	`_
("cannot open /proc/net/snmp"));

352 
	`¥o˚ss_fd
(
f
);

354 i‡(
	`„º‹
(
f
))

355 
	`≥º‹
("/proc/net/snmp");

357 
	`f˛o£
(
f
);

359 
f
 = 
	`f›í
("/proc/net/netstat", "r");

361 i‡(
f
) {

362 
	`¥o˚ss_fd
(
f
);

364 i‡(
	`„º‹
(
f
))

365 
	`≥º‹
("/proc/net/netstat");

367 
	`f˛o£
(
f
);

370 
	}
}

373 
	$öôèb
()

375 
èbèb
 *
t
;

378 
t
 = 
¢m±abs
;Å->
tôÀ
;Å++)

379 
	`qs‹t
(
t
->
èb
,Å->
size
 / (
íåy
),

380 (
íåy
), 
cm≥¡rõs
);

381 
	}
}

	@net-tools-1.60/version.h

1 
	#RELEASE
 "√t-toﬁ†1.60"

	)

	@perf/foo.c

3 
	$l⁄ga
 ()

5 
i
, 
j
;

6 
i
 = 0; i < 1000000; i++)

7 
j
 = 
i
;

8 
	}
}

11 
	$foo2
 ()

13 
i
;

14 
i
 = 0; i < 10; i++)

15 
	`l⁄ga
 ();

16 
	}
}

19 
	$foo1
 ()

21 
i
;

22 
i
 = 0; i < 100; i++)

23 
	`l⁄ga
 ();

24 
	}
}

	@perf/test.c

1 
	~<°dio.h
>

3 
foo1
();

4 
foo2
();

6 
	$maö
 ()

8 
i
;

9 
i
=0;;i++)

11 
	`foo1
 ();

12 
	`foo2
 ();

14 
	}
}

	@sctp-tools/config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

8 
	#HAVE_BZERO
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

17 
	#HAVE_FCNTL_H
 1

	)

20 
	#HAVE_GETHOSTBYNAME
 1

	)

23 
	#HAVE_GETTIMEOFDAY
 1

	)

26 
	#HAVE_INTTYPES_H
 1

	)

30 
	#HAVE_MALLOC
 1

	)

33 
	#HAVE_MALLOC_H
 1

	)

36 
	#HAVE_MEMMOVE
 1

	)

39 
	#HAVE_MEMORY_H
 1

	)

42 
	#HAVE_MEMSET
 1

	)

45 
	#HAVE_NETDB_H
 1

	)

48 
	#HAVE_NETINET_IN_H
 1

	)

52 
	#HAVE_REALLOC
 1

	)

55 
	#HAVE_SELECT
 1

	)

58 
	#HAVE_SOCKET
 1

	)

61 
	#HAVE_STDINT_H
 1

	)

64 
	#HAVE_STDLIB_H
 1

	)

67 
	#HAVE_STRCHR
 1

	)

70 
	#HAVE_STRERROR
 1

	)

73 
	#HAVE_STRINGS_H
 1

	)

76 
	#HAVE_STRING_H
 1

	)

79 
	#HAVE_STRTOL
 1

	)

82 
	#HAVE_STRTOUL
 1

	)

85 
	#HAVE_SYS_IOCTL_H
 1

	)

88 
	#HAVE_SYS_PARAM_H
 1

	)

91 
	#HAVE_SYS_SELECT_H
 1

	)

94 
	#HAVE_SYS_SOCKET_H
 1

	)

97 
	#HAVE_SYS_STAT_H
 1

	)

100 
	#HAVE_SYS_TIME_H
 1

	)

103 
	#HAVE_SYS_TYPES_H
 1

	)

106 
	#HAVE_SYS_WAIT_H
 1

	)

109 
	#HAVE_UNISTD_H
 1

	)

112 
	#HAVE_VPRINTF
 1

	)

116 
	#LT_OBJDIR
 ".libs/"

	)

119 
	#PACKAGE
 "lks˘p-toﬁs"

	)

122 
	#PACKAGE_BUGREPORT
 ""

	)

125 
	#PACKAGE_NAME
 "lks˘p-toﬁs"

	)

128 
	#PACKAGE_STRING
 "lks˘p-toﬁ†1.0.16"

	)

131 
	#PACKAGE_TARNAME
 "lks˘p-toﬁs"

	)

134 
	#PACKAGE_URL
 "hâp://www.lks˘p.‹g/"

	)

137 
	#PACKAGE_VERSION
 "1.0.16"

	)

140 
	#SELECT_TYPE_ARG1
 

	)

143 
	#SELECT_TYPE_ARG234
 (
fd_£t
 *)

	)

146 
	#SELECT_TYPE_ARG5
 (
timevÆ
 *)

	)

149 
	#STDC_HEADERS
 1

	)

152 
	#TIME_WITH_SYS_TIME
 1

	)

158 
	#VERSION
 "1.0.16"

	)

165 #i‚de‡
__˝lu•lus


	@sctp-tools/doc/template.c

45 *
cvs_id
 
__©åibuã__
 ((
unu£d
)) = "$Id:Åemplate.c,v 1.1.1.1 2002/08/06 22:31:05 inaky Exp $";

47 
	~<√t/s˘p/s˘p.h
>

	@sctp-tools/src/apps/bindx_test.c

16 
	#_GNU_SOURCE


	)

18 
	~<°dlib.h
>

19 
	~<¨∑/öë.h
>

20 
	~<î∫o.h
>

21 
	~<sys/sockë.h
>

22 
	~<°dio.h
>

23 
	~<√töë/ö.h
>

24 
	~<uni°d.h
>

25 
	~<°rög.h
>

26 
	~<√töë/s˘p.h
>

30 #i‚de‡
IPPROTO_SCTP


31 
	#IPPROTO_SCTP
 132

	)

39 
	$maö
 (
¨gc
, **
¨gv
)

41 *
addr_buf
, *
buf_±r
;

42 *
addr_buf_size
 = 0;

43 
size_t
 
addrs
, 
˙t
;

44 
sd
, 
ªsu…
, 
p‹t
;

45 
domaö
 = 
PF_INET6
;

47 i‡(
¨gc
 < 3) {

48 
	`Ârötf
(
°dîr
,

53 
p‹t
 = 
	`©oi
(
¨gv
[1]);

54 
	`¥ötf
("bödx_ã°: INFO: P‹ài†%d\n", 
p‹t
);

59 
addr_buf
 = 
	`mÆloc
((
¨gc
 -2Ë* (
sockaddr_ö6
));

60 i‡(
addr_buf
 =
NULL
) {

61 
	`≥º‹
("bindx_test: ERROR:áddr bufállocation failed");

66 
addrs
 = 0;

67 
˙t
 = 2;

68 
buf_±r
 = 
addr_buf
;

69 
˙t
 < 
¨gc
) {

70 
	`¥ötf
("bödx_ã°: INFO: Arg %zu: %s", 
˙t
, 
¨gv
[cnt]);

71 
	`fÊush
(
°dîr
);

72 i‡(
	`°rchr
(
¨gv
[
˙t
], ':')) {

73 
sockaddr_ö6
 *
ß6
;

75 
ß6
 = (
sockaddr_ö6
 *)
buf_±r
;

76 
	`¥ötf
(" IPv6áddªs†numbî %zu", 
addrs
);

77 
ß6
->
sö6_Ámûy
 = 
AF_INET6
;

78 
ß6
->
sö6_p‹t
 = 
p‹t
;

79 i‡(
	`öë_±⁄
(
AF_INET6
, 
¨gv
[
˙t
], &
ß6
->
sö6_addr
)) {

80 
addrs
++;

81 
addr_buf_size
 +(
sockaddr_ö6
);

82 
buf_±r
 +(
sockaddr_ö6
);

84 
	`¥ötf
("Érror");

85 } i‡(
	`°rchr
(
¨gv
[
˙t
], '.')) {

86 
sockaddr_ö
 *
ß
;

88 
domaö
 = 
PF_INET
;

89 
ß
 = (
sockaddr_ö
 *)
buf_±r
;

90 
	`¥ötf
 (" IPv4áddªs†numbî %zu", 
addrs
);

91 
ß
->
sö_Ámûy
 = 
AF_INET
;

92 
ß
->
sö_p‹t
 = 
p‹t
;

93 i‡(
	`öë_±⁄
 (
AF_INET
, 
¨gv
[
˙t
], &
ß
->
sö_addr
)) {

94 
addrs
++;

95 
addr_buf_size
 +(
sockaddr_ö
);

96 
buf_±r
 +(
sockaddr_ö
);

98 
	`¥ötf
 ("Érror");

100 
	`¥ötf
 (" Unknown");

101 
	`putch¨
 ('\n');

102 
˙t
++;

105 
	`¥ötf
 ("bödx_ã°: INFO: GŸ %zuáddrs\n", 
addrs
);

108 
sd
 = 
	`sockë
(
domaö
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

109 i‡(
sd
 == -1) {

110 
	`≥º‹
("bindx_test: ERROR: Cannot open socket");

115 
ªsu…
 = 
	`s˘p_bödx
(
sd
, (
sockaddr
 *)
addr_buf
, 
addrs
,

116 
SCTP_BINDX_ADD_ADDR
);

117 i‡(
ªsu…
 == -1)

118 
	`≥º‹
("bindx_test: ERROR: bindxádditionÉrror");

120 
	`¥ötf
("bindx_test: OK: bindxáddressáddition\n");

123 
ªsu…
 = 
	`s˘p_bödx
(
sd
, (
sockaddr
 *)
addr_buf
, 
addrs
-1,

124 
SCTP_BINDX_REM_ADDR
);

125 i‡(
ªsu…
 == -1)

126 
	`≥º‹
("bindx_test: ERROR: bindxáddressÑemoval");

128 
	`¥ötf
("bindx_test: OK: bindxáddressÑemoval\n");

131 
	`˛o£
(
sd
);

132 
	`‰ì
(
addr_buf
);

133  
ªsu…
;

134 
	}
}

	@sctp-tools/src/apps/myftp.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	#_GNU_SOURCE


	)

43 
	~<gë›t.h
>

44 
	~<√tdb.h
>

45 
	~<f˙é.h
>

46 
	~<uni°d.h
>

48 
	~<˘y≥.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<sys/sockë.h
>

52 
	~<sys/uio.h
>

53 
	~<√töë/ö.h
>

54 
	~<î∫o.h
>

55 
	~<√töë/s˘p.h
>

57 
	#BUFSIZE
 1024

	)

58 
	gbuf„r
[
BUFSIZE
];

59 
	#DUMP_CORE
 { *
dõdõdõ
 = 0; *dõdõdõ = 0; }

	)

61 íum { 
	mCOMMAND_NONE
, 
	mCOMMAND_RECV
, 
	mCOMMAND_SEND
 } 
	tcomm™d_t
;

64 
	#MAX_NUM_HOST
 5

	)

65 *
	gloˇl_ho°
[
MAX_NUM_HOST
];

66 
	gnum_loˇl_ho°
 = 0;

67 
	gloˇl_p‹t
 = 4444;

69 
	gbuf„r_size
 = 
BUFSIZE
;

70 *
	gªmŸe_ho°
 = 
NULL
;

71 
	gªmŸe_p‹t
 = 4444;

72 
comm™d_t
 
	gcomm™d
 = 
COMMAND_NONE
;

73 *
	gfûíame
 = 
NULL
;

74 
	göãø˘ive
 = 0;

75 
	gdñay
 = 0;

76 
	gvîbo£
 = 0;

79 
	$ußge
(*
¨gv0
)

81 
	`Ârötf
(
°dîr
, "Ußge: %†[›ti⁄s]\n",
¨gv0
);

82 
	`Ârötf
(
°dîr
, "Options:\n");

83 
	`Ârötf
(
°dîr
, "\t--local, -H <hostname> SpecifyÜocal interface\n");

84 
	`Ârötf
(
°dîr
, "\t--local-port, -P <port> SpecifyÜocalÖort (default 4444)\n");

85 
	`Ârötf
(
°dîr
, "\t--remote, -h <hostname> Specify interface onÑemote host\n");

86 
	`Ârötf
(
°dîr
, "\t--remote-port, -p <port> SpecifyÑemoteÖort (default 4444)\n");

87 
	`Ârötf
(
°dîr
, "\t--listen, -l Work inÑeceiving mode\n");

88 
	`Ârötf
(
°dîr
, "\t--send, -s Work in sending mode\n");

89 
	`Ârötf
(
°dîr
, "\t--file, -f <filename> FileÅoÑead or write,\n");

90 
	`Ârötf
(
°dîr
, "\t--buffer, -b <size> Buffer size. (default 1024 bytes)\n");

91 
	`Ârötf
(
°dîr
, "\t by default use standard input/output.\n");

92 
	`Ârötf
(
°dîr
, "\t--quick, -q SendÖackets continueously,\n");

93 
	`Ârötf
(
°dîr
, "\t doÇot wait for <ENTER> key. Default wait.\n");

94 
	`Ârötf
(
°dîr
, "\t--delay, -d <usec> Delay between consecutive sends (see --quick)\n");

95 
	`Ârötf
(
°dîr
, "\t--verbose, -v In verbose mode, displayÅheÖrogress.\n");

96 
	`Ârötf
(
°dîr
, "\n\t--help, PrintÅhis message.\n\n");

97 
	}
}

99 
	$∑r£_¨gumíts
(
¨gc
, *
¨gv
[])

101 
›ti⁄_ödex
 = 0;

102 
c
;

103 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

121 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "H:P:h:p:f:d:b:qlsv",
l⁄g_›ti⁄s
,&
›ti⁄_ödex
);

122 i‡(
c
 == -1) ;

124 
c
) {

126 
	`¥ötf
 ("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

127 i‡(
›èrg
Ë
	`¥ötf
 (" withárg %s", optarg);

128 
	`¥ötf
 ("\n");

132 
loˇl_ho°
[
num_loˇl_ho°
++] = 
›èrg
;

136 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

140 
ªmŸe_ho°
 = 
›èrg
;

144 
ªmŸe_p‹t
 = 
	`©oi
(
›èrg
);

148 
fûíame
 = 
›èrg
;

153 
dñay
 = 
	`°πoul
(
›èrg
,
NULL
,10);

154 
	`¥ötf
("dñay i†%ld u£c\n",
dñay
);

159 
buf„r_size
 = 
	`©oi
(
›èrg
);

160 i‡–
buf„r_size
 > 
BUFSIZE
 ) {

161 
buf„r_size
 = 
BUFSIZE
;

162 
	`Ârötf
(
°dîr
,"W¨nög, buf„∏sizêtoÿœrge, sëÅÿ%d\n",
buf„r_size
);

165 'q': 
öãø˘ive
 = 0; ;

168 'v': 
vîbo£
 = 1; ;

172 i‡(
comm™d
) {

173 
	`Ârötf
(
°dîr
, "%s:Öick ONE o‡li°í o∏£nd\n", 
¨gv
[0]);

176 
comm™d
 = 
COMMAND_RECV
;

181 i‡(
comm™d
) {

182 
	`Ârötf
(
°dîr
, "%s:Öick ONE o‡li°í o∏£nd\n", 
¨gv
[0]);

184 } 
comm™d
 = 
COMMAND_SEND
;

189 
	`ußge
(
¨gv
[0]);

194 
	`¥ötf
 ("%s: uƒecognized o±i⁄ 0%c\n", 
¨gv
[0], 
c
);

195 
	`ußge
(
¨gv
[0]);

200 i‡(
›töd
 < 
¨gc
) {

201 
	`Ârötf
(
°dîr
, "%s:Ç⁄-›ti⁄árgumít†¨êûÀgÆ: ", 
¨gv
[0]);

202 
›töd
 < 
¨gc
Ë
	`Ârötf
(
°dîr
, "%†", 
¨gv
[optind++]);

203 
	`Ârötf
(
°dîr
, "\n");

204 
	`ußge
(
¨gv
[0]);

209 i‡(0 =
num_loˇl_ho°
) {

210 
	`Ârötf
(
°dîr
, "%s: You MUSTÖrovidê®loˇ»ho°.\n", 
¨gv
[0]);

211 
	`ußge
(
¨gv
[0]);

215 i‡–
fûíame
 =
NULL
 && 
comm™d
 =
COMMAND_SEND
)

216 
	`Ârötf
(
°dîr
,"%s: U£ sènd¨d i≈uàtÿ£nd\n",
¨gv
[0]);

218 i‡–
fûíame
 =
NULL
 && 
comm™d
 =
COMMAND_RECV
 )

219 
	`Ârötf
(
°dîr
,"%s: U£ sènd¨d ouçuàtÿwrôe\n",
¨gv
[0]);

222 
	}
}

225 
	$emsg
(*
¥og
,*
s
)

227 i‡–
¥og
 !
NULL
 ) 
	`Ârötf
(
°dîr
,"%s: ",prog);

228 
	`≥º‹
(
s
);

229 
	`fÊush
(
°dout
);

232 
	`exô
(-1);

233 
	}
}

235 
	$buûd_ídpoöt
(*
¨gv0
)

237 
ªtvÆ
,
i
;

240 i‡–(
ªtvÆ
 = 
	`sockë
(
PF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
)) < 0 ) {

241 
	`emsg
(
¨gv0
,"socket");

242 
	`exô
(
ªtvÆ
);

245  
i
 = 0;ò< 
num_loˇl_ho°
;i++ ) {

246 
ho°ít
 *
h°
;

247 
sockaddr_ö
 
œddr
;

250 
	`Ârötf
(
°dîr
,"Ho°«mê%d i†%s\n",
i
+1,
loˇl_ho°
[i]);

251 i‡–(
h°
 = 
	`gëho°by«me
(
loˇl_ho°
[
i
])Ë=
NULL
 ) {

252 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv0
, 
loˇl_ho°
[
i
]);

253 
	`exô
(1);

255 
	`mem˝y
(&
œddr
.
sö_addr
, 
h°
->
h_addr_li°
[0],(laddr.sin_addr));

256 
œddr
.
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

257 
œddr
.
sö_Ámûy
 = 
AF_INET
;

260 i‡–
	`böd
(
ªtvÆ
, (
sockaddr
 *)&
œddr
, (laddr)) ) {

261 
	`emsg
(
¨gv0
,"bind");

262 
	`exô
(-1);

266 
	`Ârötf
(
°dîr
,"Endpoint built.\n");

268  
ªtvÆ
;

269 
	}
}

273 
s˘p_öômsg
 
	möô
;

274 
s˘p_¢drcvöfo
 
	m¢drcvöfo
;

275 } 
	t_s˘p_cmsg_d©a_t
;

280 
	$comm™d_ªcv
(*
¨gv0
, 
sk
)

282 
msghdr
 
ömesßge
;

283 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

284 
iovec
 
iov
;

285 
ªt
;

286 
fd
;

287 
˘
;

289 
	`li°í
(
sk
, 1);

291 
	`mem£t
(&
ömesßge
, 0, (inmessage));

292 
iov
.
iov_ba£
 = 
buf„r
;

293 
iov
.
iov_Àn
 = 
buf„r_size
;

294 
ömesßge
.
msg_iov
 = &
iov
;

295 
ömesßge
.
msg_iovÀn
 = 1;

297 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

298 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

301 i‡–
fûíame
 =
NULL
 ) 
fd
 = 1;

302 i‡–(
fd
 = 
	`›í
(
fûíame
,
O_WRONLY
|
O_CREAT
|
O_TRUNC
,
S_IREAD
|
S_IWRITE
)) == -1 )

303 
	`emsg
(
¨gv0
,"open");

305 
	`Ârötf
(
°dîr
,"%†Re˚ivög...\n", 
¨gv0
);

307 
˘
 = 0;

308  (
ªt
 = 
	`ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
)) >= 0 ) {

309 i‡–
vîbo£
 )

310 
	`Ârötf
(
°dîr
,"%s-%dÑeceived %d bytes\n",

311 
¨gv0
, ++
˘
, 
ªt
);

312 i‡–!(
ömesßge
.
msg_Êags
 & 
MSG_NOTIFICATION
) ) {

314 i‡–
	`wrôe
(
fd
,
buf„r
,
ªt
Ë!ªàË
	`emsg
(
¨gv0
,"write");

316 
s˘p_nŸifiˇti⁄
 *
¢
;

317 
¢
 = (
s˘p_nŸifiˇti⁄
 *)
iov
.
iov_ba£
;

318 i‡((
¢
->
¢_hódî
.
¢_ty≥
 =
SCTP_ASSOC_CHANGE
) &&

319 (
¢
->
¢_assoc_ch™ge
.
ßc_°©e


320 =
SCTP_SHUTDOWN_COMP
))

326 i‡–
ªt
 < 0 ) 
	`emsg
(
¨gv0
,"recvmsg");

328 
	`˛o£
(
fd
);

329 
	`˛o£
(
sk
);

330 
	}
}

334 
	$comm™d_£nd
(*
¨gv0
, 
sk
)

336 
msghdr
 
outmsg
;

337 
iovec
 
iov
;

338 
ho°ít
 *
h°
;

339 
sockaddr_ö
 
ªmŸe_addr
;

340 
fd
;

341 
msgÀn
;

342 
˘
;

345 
h°
 = 
	`gëho°by«me
(
ªmŸe_ho°
);

346 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

347 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv0
, 
ªmŸe_ho°
);

348 
	`exô
(1);

350 
	`mem˝y
(&
ªmŸe_addr
.
sö_addr
, 
h°
->
h_addr_li°
[0], (remote_addr.sin_addr));

351 
ªmŸe_addr
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

352 
ªmŸe_addr
.
sö_Ámûy
 = 
AF_INET
;

357 
iov
.
iov_ba£
 = 
buf„r
;

358 
iov
.
iov_Àn
 = 
buf„r_size
;

359 
outmsg
.
msg_iov
 = &
iov
;

360 
outmsg
.
msg_iovÀn
 = 1;

361 
outmsg
.
msg_c⁄åﬁ
 = 
NULL
;

362 
outmsg
.
msg_c⁄åﬁÀn
 = 0;

363 
outmsg
.
msg_«me
 = &
ªmŸe_addr
;

364 
outmsg
.
msg_«mñí
 = (
ªmŸe_addr
);

367 i‡–
fûíame
 =
NULL
 ) 
fd
 = 0;

368 i‡–(
fd
 = 
	`›í
(
fûíame
,
O_RDONLY
)Ë=-1 ) 
	`emsg
(
¨gv0
,"open");

370 
	`Ârötf
(
°dîr
,"%†ªadyÅÿ£nd...\n", 
¨gv0
);

371 
˘
 = 0;

372  (
msgÀn
 = 
	`ªad
(
fd
,
buf„r
,
buf„r_size
)) > 0 ) {

374 
iov
.
iov_Àn
 = 
msgÀn
;

375 i‡–
	`£ndmsg
(
sk
, &
outmsg
, 0Ë!
msgÀn
 ) 
	`emsg
(
¨gv0
,"sendmsg");

376 i‡–
vîbo£
 ) 
	`Ârötf
(
°dîr
,"%s-%d síd %d byãs\n",
¨gv0
,++
˘
,
msgÀn
);

377 i‡–
öãø˘ive
 && 
fd
 != 1 )

378 
	`gëch¨
();

380 i‡–
dñay
 > 0 )

381 
	`u¶ìp
(
dñay
);

382 }  
msgÀn
 > 0 );

384 
	`˛o£
(
fd
);

385 
	`˛o£
(
sk
);

386 
	}
}

388 
	$maö
(
¨gc
, *
¨gv
[])

390 
ªt
;

392 i‡(–
ªt
 = 
	`∑r£_¨gumíts
(
¨gc
, 
¨gv
) )) Ñet;

394 
comm™d
) {

395 
COMMAND_NONE
:

396 
	`Ârötf
(
°dîr
, "%s: PÀa£ s≥cifyá comm™d.\n", 
¨gv
[0]);

398 
COMMAND_RECV
:

399 
	`comm™d_ªcv
(
¨gv
[0],
	`buûd_ídpoöt
(argv[0]));

401 
COMMAND_SEND
:

402 
	`comm™d_£nd
(
¨gv
[0],
	`buûd_ídpoöt
(argv[0]));

405 
	`Ârötf
(
°dîr
, "%s: iŒegÆ comm™d %d\n", 
¨gv
[0], 
comm™d
);

409 
	}
}

	@sctp-tools/src/apps/nagle_rcv.c

46 
	~<°dio.h
>

47 
	~<uni°d.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/sockë.h
>

52 
	~<sys/uio.h
>

53 
	~<√töë/ö.h
>

54 
	~<î∫o.h
>

55 
	~<√töë/s˘p.h
>

56 
	~<s˘putû.h
>

57 
	~<gë›t.h
>

58 
	~<√tdb.h
>

59 
	~<time.h
>

61 *
	gTCID
 = 
__FILE__
;

62 
	gTST_TOTAL
 = 1;

63 
	gTST_CNT
 = 0;

66 
	$ußge
(*
¥og«me
)

68 
	`Ârötf
(
°dîr
, "Ußge: %†-H ho°«mê[-PÖ‹t]\n", 
¥og«me
);

69 
	`Ârötf
(
°dîr
, " -H, --local\t\tÜocal hostname,\n");

70 
	`Ârötf
(
°dîr
, " -P, --local-port\tÜocalÖort,\n");

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
sk
, 
i
;

77 
ho°ít
 *
h°
;

78 
sockaddr_°‹age_t
 
ho°
;

79 
sockaddr_°‹age_t
 
msg«me
;

80 
iovec
 
iov
;

81 
msghdr
 
ömesßge
;

82 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

83 
îr‹
, 
pf_˛ass
;

84 *
big_buf„r
;

85 *
loˇl_ho°
 = 
NULL
;

86 
loˇl_p‹t
 = 
SCTP_TESTPORT_1
;

87 
›ti⁄_ödex
 = 0;

88 
time_t
 
‰om
, 
to
;

89 
byãs_ª˚ived
 = 0;

90 
c
;

91 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

100 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

104 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "H:P:",

105 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

106 i‡(
c
 == -1)

109 
c
) {

111 
	`¥ötf
("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

112 i‡(
›èrg
) {

113 
	`¥ötf
(" wôhárg %s", 
›èrg
);

115 
	`¥ötf
("\n");

119 
loˇl_ho°
 = 
›èrg
;

123 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

126 
	`ußge
(
¨gv
[0]);

127 
	`exô
(0);

130 
	`¥ötf
 ("%s: uƒecognized o±i⁄ 0%c\n", 
¨gv
[0], 
c
);

131 
	`ußge
(
¨gv
[0]);

132 
	`exô
(1);

136 i‡(
›töd
 < 
¨gc
)

138 
	`Ârötf
(
°dîr
, "%s:Çon-optionárgumentsáre illegal: ",

139 
¨gv
[0]);

140 
›töd
 < 
¨gc
)

141 
	`Ârötf
(
°dîr
, "%†", 
¨gv
[
›töd
++]);

142 
	`Ârötf
 (
°dîr
, "\n");

143 
	`ußge
(
¨gv
[0]);

144 
	`exô
(1);

147 i‡(!
loˇl_ho°
) {

148 
	`Ârötf
(
°dîr
, "%s: : option -H, --local isÑequired\n",

149 
¨gv
[0]);

150 
	`ußge
(
¨gv
[0]);

151 
	`exô
(1);

155 #i‡
TEST_V6


156 
h°
 = 
	`gëho°by«me2
(
loˇl_ho°
, 
AF_INET6
);

157 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

158 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv
[0], 
loˇl_ho°
);

159 
	`exô
(1);

161 
pf_˛ass
 = 
PF_INET6
;

163 
ho°
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

164 
	`mem˝y
(&
ho°
.
v6
.
sö_addr
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

165 
ho°
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

168 
h°
 = 
	`gëho°by«me
(
loˇl_ho°
);

169 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

170 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv
[0], 
loˇl_ho°
);

171 
	`exô
(1);

173 
pf_˛ass
 = 
PF_INET
;

175 
ho°
.
v4
.
sö_Ámûy
 = 
AF_INET
;

176 
	`mem˝y
(&
ho°
.
v4
.
sö_addr
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

177 
ho°
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

182 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

185 
	`ã°_íabÀ_assoc_ch™ge
(
sk
);

188 
	`ã°_böd
(
sk
, &
ho°
.
ß
, (host));

191 
	`ã°_li°í
(
sk
, 1);

193 
	`¥ötf
("Li°íög o¿p‹t:%d\n", 
loˇl_p‹t
);

196 
	`mem£t
(&
ömesßge
, 0, (inmessage));

197 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

198 
iov
.
iov_ba£
 = 
big_buf„r
;

199 
iov
.
iov_Àn
 = 
REALLY_BIG
;

200 
ömesßge
.
msg_iov
 = &
iov
;

201 
ömesßge
.
msg_iovÀn
 = 1;

202 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

203 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

204 
ömesßge
.
msg_«me
 = &
msg«me
;

205 
ömesßge
.
msg_«mñí
 = (
msg«me
);

206 
	`mem£t
(&
msg«me
, 0, (msgname));

209 
îr‹
 = 
	`ã°_ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
);

210 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

211 (
s˘p_assoc_ch™ge
),

212 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

214 
	`¥ötf
("Established connection with ");

215 i‡(
AF_INET
 =
msg«me
.
ß
.
ß_Ámûy
)

216 
	`¥ötf
("%d.%d.%d.%d(%d)\n", 
	`NIPQUAD
(
msg«me
.
v4
.
sö_addr
),

217 
	`¡ohs
(
msg«me
.
v4
.
sö_p‹t
));

218 i‡(
AF_INET6
 =
msg«me
.
ß
.
ß_Ámûy
)

219 
	`¥ötf
("%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x(%d)\n",

220 
	`NIP6
(
msg«me
.
v6
.
sö6_addr
), 
	`¡ohs
(msg«me.v6.
sö6_p‹t
));

222 
	`time
(&
‰om
);

223 
i
=0; i<1000000; i++) {

224 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

225 
ömesßge
.
msg_«mñí
 = (
msg«me
);

226 
îr‹
 = 
	`ã°_ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
);

227 i‡(
ömesßge
.
msg_Êags
 & 
MSG_NOTIFICATION
)

229 
	`¥ötf
("Re˚ived %d byã†o‡d©a\n", 
îr‹
);

230 
byãs_ª˚ived
 +
îr‹
;

232 
	`time
(&
to
);

234 
	`¥ötf
("\t%d messages(%d bytes) successfullyÑeceived in %ld "

235 "£c⁄ds.\n", 
i
, 
byãs_ª˚ived
, 
to
 - 
‰om
);

236 
	`¥ötf
("TheÑeceiveÑate is %ld bytes/second\n",

237 
byãs_ª˚ived
/(
to
 - 
‰om
));

240 
îr‹
 = 0;

241 
	`˛o£
(
sk
);

244 
	}
}

	@sctp-tools/src/apps/nagle_snd.c

45 
	~<°dio.h
>

46 
	~<uni°d.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<sys/uio.h
>

52 
	~<√töë/ö.h
>

53 
	~<î∫o.h
>

54 
	~<√töë/s˘p.h
>

55 
	~<s˘putû.h
>

56 
	~<gë›t.h
>

57 
	~<√tdb.h
>

59 *
	gTCID
 = 
__FILE__
;

60 
	gTST_TOTAL
 = 1;

61 
	gTST_CNT
 = 0;

64 
	$ußge
(*
¨gv0
)

66 
	`Ârötf
(
°dîr
, "Usage: %s -HÜocalhost [-PÜocalport] "

76 
¨gv0
);

77 
	}
}

80 
	$maö
(
¨gc
, *
¨gv
[])

82 
sk
, 
i
;

83 
ho°ít
 *
h°
, *
tgt
;

84 
sockaddr_°‹age_t
 
ho°
, 
èrgë
;

85 
sockaddr_°‹age_t
 
msg«me
;

86 
iovec
 
iov
;

87 
msghdr
 
ömesßge
;

88 
msghdr
 
outmesßge
;

89 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

90 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

91 
cmsghdr
 *
cmsg
;

92 
s˘p_¢drcvöfo
 *
söfo
;

93 
iovec
 
out_iov
;

94 *
mesßge
;

95 
îr‹
, 
pf_˛ass
;

96 
s˘p_assoc_t
 
associd
;

97 
uöt32_t
 
µid
;

98 
uöt32_t
 
°ªam
;

99 *
ªmŸe_ho°
 = 
NULL
;

100 
ªmŸe_p‹t
 = 
SCTP_TESTPORT_1
;

101 *
loˇl_ho°
 = 
NULL
;

102 
loˇl_p‹t
 = 
SCTP_TESTPORT_2
;

103 
size
 = 1;

104 
öãrvÆ
 = 0;

105 
nodñay
 = 0;

106 
›ti⁄_ödex
 = 0;

107 *
big_buf„r
;

108 
c
;

109 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

123 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

127 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "H:P:h:p:S:I:N",

128 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

129 i‡(
c
 == -1)

132 
c
) {

134 
	`¥ötf
("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

135 i‡(
›èrg
) {

136 
	`¥ötf
(" wôhárg %s", 
›èrg
);

138 
	`¥ötf
("\n");

142 
loˇl_ho°
 = 
›èrg
;

146 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

150 
ªmŸe_ho°
 = 
›èrg
;

154 
ªmŸe_p‹t
 = 
	`©oi
(
›èrg
);

158 
size
 = 
	`©oi
(
›èrg
);

162 
öãrvÆ
 = 
	`©oi
(
›èrg
);

166 
nodñay
 = 1;

169 
	`ußge
(
¨gv
[0]);

170 
	`exô
(0);

173 
	`¥ötf
 ("%s: unrecognized option 0%c\n",

174 
¨gv
[0], 
c
);

175 
	`ußge
(
¨gv
[0]);

176 
	`exô
(1);

180 i‡(
›töd
 < 
¨gc
)

182 
	`Ârötf
(
°dîr
, "%s:Çon-optionárgumentsáre illegal: ",

183 
¨gv
[0]);

184 
›töd
 < 
¨gc
)

185 
	`Ârötf
(
°dîr
, "%†", 
¨gv
[
›töd
++]);

186 
	`Ârötf
 (
°dîr
, "\n");

187 
	`ußge
(
¨gv
[0]);

188 
	`exô
(1);

191 i‡(!
loˇl_ho°
 || !
ªmŸe_ho°
) {

192 
	`Ârötf
(
°dîr
, "%s: : option --localánd --remoteáreÑequired\n",

193 
¨gv
[0]);

194 
	`ußge
(
¨gv
[0]);

195 
	`exô
(1);

199 #i‡
TEST_V6


200 
h°
 = 
	`gëho°by«me2
(
loˇl_ho°
, 
AF_INET6
);

201 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

202 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv
[0], 
loˇl_ho°
);

203 
	`exô
(1);

205 
ho°
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

206 
	`mem˝y
(&
ho°
.
v6
.
sö_addr
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

207 
ho°
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

209 
tgt
 = 
	`gëho°by«me2
(
ªmŸe_ho°
, 
AF_INET6
);

210 i‡(
tgt
 =
NULL
 ||Ågt->
h_Àngth
 < 1) {

211 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv
[0], 
ªmŸe_ho°
);

212 
	`exô
(1);

214 
èrgë
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

215 
	`mem˝y
(&
èrgë
.
v6
.
sö_addr
, 
tgt
->
h_addr_li°
[0],Ågt->
h_Àngth
);

216 
èrgë
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

218 
pf_˛ass
 = 
PF_INET6
;

220 
h°
 = 
	`gëho°by«me
(
loˇl_ho°
);

221 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

222 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv
[0], 
loˇl_ho°
);

223 
	`exô
(1);

226 
ho°
.
v4
.
sö_Ámûy
 = 
AF_INET
;

227 
	`mem˝y
(&
ho°
.
v4
.
sö_addr
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

228 
ho°
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

230 
tgt
 = 
	`gëho°by«me
(
ªmŸe_ho°
);

231 i‡(
tgt
 =
NULL
 ||Ågt->
h_Àngth
 < 1) {

232 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv
[0], 
ªmŸe_ho°
);

233 
	`exô
(1);

235 
èrgë
.
v4
.
sö_Ámûy
 = 
AF_INET
;

236 
	`mem˝y
(&
èrgë
.
v4
.
sö_addr
, 
tgt
->
h_addr_li°
[0],Ågt->
h_Àngth
);

237 
èrgë
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

239 
pf_˛ass
 = 
PF_INET
;

242 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

245 
	`ã°_íabÀ_assoc_ch™ge
(
sk
);

247 
	`ã°_£tsock›t
(
sk
, 
SCTP_NODELAY
, &
nodñay
, ());

250 
	`ã°_böd
(
sk
, &
ho°
.
ß
, (host));

253 
	`ã°_li°í
(
sk
, 1);

256 
outmesßge
.
msg_«me
 = &
èrgë
;

257 
outmesßge
.
msg_«mñí
 = (
èrgë
);

258 
outmesßge
.
msg_iov
 = &
out_iov
;

259 
outmesßge
.
msg_iovÀn
 = 1;

260 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

261 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

262 
outmesßge
.
msg_Êags
 = 0;

263 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

264 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

265 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

266 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

267 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

268 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

269 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

270 
µid
 = 
	`ønd
();

271 
°ªam
 = 1;

272 
söfo
->
söfo_µid
 = 
µid
;

273 
söfo
->
söfo_°ªam
 = 
°ªam
;

275 
mesßge
 = 
	`ã°_mÆloc
((
size
 + 1Ë* (
u_öt8_t
));

277 
i
=0; i + 10 < 
size
; i+= 10)

278 
	`°∫˝y
(
mesßge
+
i
, "1234567890", 10);

279 
	`°∫˝y
(
mesßge
+
i
, "1234567890", 
size
-i);

280 *(
mesßge
+
size
) = 0;

282 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

283 
outmesßge
.
msg_iov
->
iov_Àn
 = 
size
 + 1;

285 
	`¥ötf
("Inôütög c⁄√˘i⁄ wôh %s:%d...\n", 
ªmŸe_ho°
,

286 
ªmŸe_p‹t
);

289 
	`ã°_£ndmsg
(
sk
, &
outmesßge
, 0, 
size
+1);

291 
	`mem£t
(&
ömesßge
, 0, (inmessage));

292 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

293 
iov
.
iov_ba£
 = 
big_buf„r
;

294 
iov
.
iov_Àn
 = 
REALLY_BIG
;

295 
ömesßge
.
msg_iov
 = &
iov
;

296 
ömesßge
.
msg_iovÀn
 = 1;

297 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

298 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

299 
ömesßge
.
msg_«me
 = &
msg«me
;

300 
ömesßge
.
msg_«mñí
 = (
msg«me
);

301 
	`mem£t
(&
msg«me
, 0, (msgname));

304 
îr‹
 = 
	`ã°_ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
);

305 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

306 (
s˘p_assoc_ch™ge
),

307 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

308 
associd
 = ((
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
)->
ßc_assoc_id
;

310 
	`¥ötf
("Established connection with ");

311 i‡(
AF_INET
 =
msg«me
.
ß
.
ß_Ámûy
)

312 
	`¥ötf
("%d.%d.%d.%d(%d)\n", 
	`NIPQUAD
(
msg«me
.
v4
.
sö_addr
),

313 
	`¡ohs
(
msg«me
.
v4
.
sö_p‹t
));

314 i‡(
AF_INET6
 =
msg«me
.
ß
.
ß_Ámûy
)

315 
	`¥ötf
("%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x(%d)\n",

316 
	`NIP6
(
msg«me
.
v6
.
sö6_addr
), 
	`¡ohs
(msg«me.v6.
sö6_p‹t
));

318 
	`¥ötf
("Sending dataÅoÑeceiver...\n");

320 
i
=1; i<1000000; i++) {

322 i‡(
öãrvÆ
)

323 
	`¶ìp
(
öãrvÆ
);

325 
outmesßge
.
msg_«me
 = &
èrgë
;

326 
outmesßge
.
msg_«mñí
 = (
èrgë
);

327 
outmesßge
.
msg_iov
 = &
out_iov
;

328 
outmesßge
.
msg_iovÀn
 = 1;

329 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

330 
outmesßge
.
msg_Êags
 = 0;

332 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

333 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

334 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

335 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

336 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

337 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

338 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

340 
µid
++;

342 
söfo
->
söfo_µid
 = 
µid
;

343 
söfo
->
söfo_°ªam
 = 
°ªam
;

344 
söfo
->
söfo_assoc_id
 = 
associd
;

346 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

347 
outmesßge
.
msg_iov
->
iov_Àn
 = 
size
 + 1;

349 
	`ã°_£ndmsg
(
sk
, &
outmesßge
, 0, 
size
+1);

352 
	`¥ötf
("\n\n\t\tCompleteállÅhe data sendingsÅoÑeceiver...\n\n\n");

354 
îr‹
 = 0;

355 
	`˛o£
(
sk
);

357 
	`‰ì
(
mesßge
);

362 
	}
}

	@sctp-tools/src/apps/peel_client.c

66 
	~<˘y≥.h
>

68 
	~<°dio.h
>

69 
	~<°dlib.h
>

70 
	~<uni°d.h
>

71 
	~<sys/ty≥s.h
>

72 
	~<sys/io˘l.h
>

73 
	~<sys/°©.h
>

74 
	~<sys/sockë.h
>

75 
	~<√t/if.h
>

76 
	~<√töë/ö.h
>

78 
	~<°d¨g.h
>

79 
	~<sig«l.h
>

80 
	~<f˙é.h
>

81 
	~<¨∑/öë.h
>

82 
	~<time.h
>

83 
	~<°rög.h
>

84 
	~<î∫o.h
>

85 
	~<pﬁl.h
>

86 
	~<sys/uio.h
>

87 
	~<√tdb.h
>

89 
	~<√töë/s˘p.h
>

90 #ifde‡
__NëBSD__


91 
	~<sys/öây≥s.h
>

94 
	#SCTP_CRC32C_POLY
 0x1EDC6F41

	)

95 
	#SCTP_CRC32C
(
c
,
d
Ë(c=(c>>8)^
s˘p_¸c_c
[(c^(d))&0xFF])

	)

116 
	gbuf„r1
[4100];

117 
	gbuf„r2
[4100];

118 
	gbuf„r3
[4100];

119 
	gbuf„r4
[4100];

120 
sockaddr_ö
 
	gbödto
,
	ggŸ
,
	gto
;

121 
sockÀn_t
 
	gÀn
;

123 
	gs˘p_¸c_c
[256] = {

190 
u_öt32_t


191 
	$upd©e_¸c32
(
u_öt32_t
 
¸c32
,

192 *
buf„r
,

193 
Àngth
)

195 
i
;

196 
i
 = 0; i < 
Àngth
; i++) {

197 
	`SCTP_CRC32C
(
¸c32
, 
buf„r
[
i
]);

199  (
¸c32
);

200 
	}
}

202 
u_öt32_t


203 
	$s˘p_csum_föÆize
(
u_öt32_t
 
¸c32
)

205 
u_öt32_t
 
ªsu…
;

206 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


207 
u_öt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

210 
ªsu…
 = ~
¸c32
;

211 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


217 
byã0
 = 
ªsu…
 & 0x000000ff;

218 
byã1
 = (
ªsu…
 >> 8) & 0x000000ff;

219 
byã2
 = (
ªsu…
 >> 16) & 0x000000ff;

220 
byã3
 = (
ªsu…
 >> 24) & 0x000000ff;

221 
ªsu…
 = ((
byã0
 << 24) |

222 (
byã1
 << 16) |

223 (
byã2
 << 8) |

224 
byã3
);

225 
¸c32
 = 
	`ht⁄l
(
ªsu…
);

232 
¸c32
 = 
ªsu…
;

234  (
¸c32
);

235 
	}
}

237 
u_öt32_t
 
	g©
 = 468700;

240 
	$¥ï¨e_buf„rs
()

243 
u_öt32_t
 
ãmp
,*
p
;

244 
i
;

246 
p
 = (
u_öt32_t
 *)
buf„r1
;

247 
i
=0;i<((
buf„r1
)/4);i++){

248 *
p
 = 
©
;

249 
©
++;

250 
p
++;

253 
p
--;

254 *
p
 = 0;

255 
ãmp
 = 0xffffffff;

256 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r1
,((buffer1)-4));

257 *
p
 = 
	`s˘p_csum_föÆize
(
ãmp
);

259 
p
 = (
u_öt32_t
 *)
buf„r2
;

260 
i
=0;i<((
buf„r2
)/4);i++){

261 *
p
 = 
©
;

262 
©
++;

263 
p
++;

265 
p
--;

266 *
p
 = 0;

267 
ãmp
 = 0xffffffff;

268 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r2
,((buffer2)-4));

269 *
p
 = 
	`s˘p_csum_föÆize
(
ãmp
);

271 
p
 = (
u_öt32_t
 *)
buf„r3
;

272 
i
=0;i<((
buf„r3
)/4);i++){

273 *
p
 = 
©
;

274 
©
++;

275 
p
++;

277 
p
--;

278 *
p
 = 0;

279 
ãmp
 = 0xffffffff;

280 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r3
,((buffer3)-4));

281 *
p
 = 
	`s˘p_csum_föÆize
(
ãmp
);

283 
p
 = (
u_öt32_t
 *)
buf„r4
;

284 
i
=0;i<((
buf„r4
)/4);i++){

285 *
p
 = 
©
;

286 
©
++;

287 
p
++;

289 
p
--;

290 *
p
 = 0;

291 
ãmp
 = 0xffffffff;

292 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r4
,((buffer4)-4));

293 *
p
 = 
	`s˘p_csum_föÆize
(
ãmp
);

294 
	}
}

297 
	$my_h™dÀ_nŸifiˇti⁄
(
fd
,*
nŸify_buf
) {

298 
s˘p_nŸifiˇti⁄
 *
¢p
;

299 
s˘p_assoc_ch™ge
 *
ßc
;

300 
s˘p_∑ddr_ch™ge
 *
•c
;

301 
s˘p_ªmŸe_îr‹
 *
§e
;

302 
s˘p_£nd_Áûed
 *
ssf
;

303 
s˘p_shutdown_evít
 *
s£
;

304 
asocDown
;

305 *
°r
;

306 
buf
[256];

307 
sockaddr_ö
 *
sö
;

308 
sockaddr_ö6
 *
sö6
;

310 
asocDown
 = 0;

311 
¢p
 = (
s˘p_nŸifiˇti⁄
 *)
nŸify_buf
;

312 
¢p
->
¢_hódî
.
¢_ty≥
) {

313 
SCTP_ASSOC_CHANGE
:

314 
ßc
 = &
¢p
->
¢_assoc_ch™ge
;

315 
ßc
->
ßc_°©e
) {

317 
SCTP_COMM_UP
:

318 
°r
 = "COMMUNICATION UP";

320 
SCTP_COMM_LOST
:

321 
°r
 = "COMMUNICATION LOST";

322 
asocDown
 = 1;

324 
SCTP_RESTART
:

325 
°r
 = "RESTART";

327 
SCTP_SHUTDOWN_COMP
:

328 
°r
 = "SHUTDOWN COMPLETE";

329 
asocDown
 = 1;

331 
SCTP_CANT_STR_ASSOC
:

332 
°r
 = "CANT START ASSOC";

333 
	`¥ötf
("EXIT:SCTP_ASSOC_CHANGE: %s,ássoc=%xh\n", 
°r
,

334 (
uöt32_t
)
ßc
->
ßc_assoc_id
);

335 
	`exô
(0);

338 
°r
 = "UNKNOWN";

340 
	`¥ötf
("SCTP_ASSOC_CHANGE: %s,ássoc=%xh\n", 
°r
,

341 (
uöt32_t
)
ßc
->
ßc_assoc_id
);

343 
SCTP_PEER_ADDR_CHANGE
:

344 
•c
 = &
¢p
->
¢_∑ddr_ch™ge
;

345 
•c
->
•c_°©e
) {

346 
SCTP_ADDR_AVAILABLE
:

347 
°r
 = "ADDRESS AVAILABLE";

349 
SCTP_ADDR_UNREACHABLE
:

350 
°r
 = "ADDRESS UNAVAILABLE";

352 
SCTP_ADDR_REMOVED
:

353 
°r
 = "ADDRESS REMOVED";

355 
SCTP_ADDR_ADDED
:

356 
°r
 = "ADDRESS ADDED";

358 
SCTP_ADDR_MADE_PRIM
:

359 
°r
 = "ADDRESS MADE PRIMARY";

362 
°r
 = "UNKNOWN";

364 
sö6
 = (
sockaddr_ö6
 *)&
•c
->
•c_Øddr
;

365 i‡(
sö6
->
sö6_Ámûy
 =
AF_INET6
) {

366 
	`öë_¡›
(
AF_INET6
, (*)&
sö6
->
sö6_addr
, 
buf
, (buf));

368 
sö
 = (
sockaddr_ö
 *)&
•c
->
•c_Øddr
;

369 
	`öë_¡›
(
AF_INET
, (*)&
sö
->
sö_addr
, 
buf
, (buf));

371 
	`¥ötf
("SCTP_PEER_ADDR_CHANGE: %s,áddr=%s,ássoc=%xh\n", 
°r
,

372 
buf
, (
uöt32_t
)
•c
->
•c_assoc_id
);

374 
SCTP_REMOTE_ERROR
:

375 
§e
 = &
¢p
->
¢_ªmŸe_îr‹
;

376 
	`¥ötf
("SCTP_REMOTE_ERROR:ássoc=%xh\n",

377 (
uöt32_t
)
§e
->
§e_assoc_id
);

379 
SCTP_SEND_FAILED
:

380 
ssf
 = &
¢p
->
¢_£nd_Áûed
;

381 
	`¥ötf
("SCTP_SEND_FAILED:ássoc=%xh\n",

382 (
uöt32_t
)
ssf
->
ssf_assoc_id
);

384 
SCTP_ADAPTATION_INDICATION
:

386 
s˘p_ad≠èti⁄_evít
 *
´
;

387 
´
 = &
¢p
->
¢_ad≠èti⁄_evít
;

388 
	`¥ötf
("\nSCTP_adaptation_indication bits:0x%x\n",

389 (
u_öt
)
´
->
ßi_ad≠èti⁄_öd
);

392 
SCTP_PARTIAL_DELIVERY_EVENT
:

394 
s˘p_pd≠i_evít
 *
pd≠i
;

395 
pd≠i
 = &
¢p
->
¢_pd≠i_evít
;

396 
	`¥ötf
("SCTP_PD-APIÉvent:%u\n",

397 
pd≠i
->
pd≠i_ödiˇti⁄
);

398 if(
pd≠i
->
pd≠i_ödiˇti⁄
 == 0){

399 
	`¥ötf
("PDI- Aborted\n");

404 
SCTP_SHUTDOWN_EVENT
:

405 
s£
 = &
¢p
->
¢_shutdown_evít
;

406 
	`¥ötf
("SCTP_SHUTDOWN_EVENT:ássoc=%xh\n",

407 (
uöt32_t
)
s£
->
s£_assoc_id
);

410 
	`¥ötf
("UnknownÇotificationÉventÅype=%xh\n",

411 
¢p
->
¢_hódî
.
¢_ty≥
);

413 if(
asocDown
){

414 
	`¥ötf
("Bringássociation back up\n");

415 
Àn
 = (
to
);

416 if(
	`c⁄√˘
(
fd
,(
sockaddr
 *)&
to
,
Àn
) == -1){

417 
	`¥ötf
("S‹ry c⁄√˘ faû†%d\n",
î∫o
);

422 
	}
}

427 
	$my_s˘pRódI≈ut
(
fd
)

432 
sz
;

433 
msghdr
 
msg
;

434 
iovec
 
iov
[2];

435 
‰om
[200];

436 
ªadBuf„r
[65535];

437 
c⁄åﬁVe˘‹
[65535];

439 
iov
[0].
iov_ba£
 = 
ªadBuf„r
;

440 
iov
[0].
iov_Àn
 = (
ªadBuf„r
);

441 
iov
[1].
iov_ba£
 = 
NULL
;

442 
iov
[1].
iov_Àn
 = 0;

443 
msg
.
msg_«me
 = (
ˇddr_t
)
‰om
;

444 
msg
.
msg_«mñí
 = (
‰om
);

445 
msg
.
msg_iov
 = 
iov
;

446 
msg
.
msg_iovÀn
 = 1;

447 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
)
c⁄åﬁVe˘‹
;

448 
msg
.
msg_c⁄åﬁÀn
 = (
c⁄åﬁVe˘‹
);

449 
î∫o
 = 0;

450 
sz
 = 
	`ªcvmsg
(
fd
,&
msg
,0);

451 if(
sz
 <= 0){

452 
	`¥ötf
("ReadÑeturns %dÉrrno:%d controlÜen is %zu msgflg:%x\n",

453 
sz
,
î∫o
,

454 
msg
.
msg_c⁄åﬁÀn
,msg.
msg_Êags
);

456 i‡(
msg
.
msg_Êags
 & 
MSG_NOTIFICATION
) {

457 (
	`my_h™dÀ_nŸifiˇti⁄
(
fd
,
ªadBuf„r
));

459 
	`¥ötf
("Huh, I gŸ d©a?.. ign‹ed (%d byãs)\n",
sz
);

462 
	}
}

466 
	$˛ór_fds
(
fd
,
fd1
)

468 
„Œdown
;

469 
max
,
nŸd⁄e
;

470 
fd_£t
 
ªadfds
,
wrôefds
,
ex˚±fds
;

471 
timevÆ
 
tv
;

472 
	`mem£t
(&
tv
,0,(tv));

473 
	`FD_ZERO
(&
ªadfds
);

474 
	`FD_ZERO
(&
wrôefds
);

475 
	`FD_ZERO
(&
ex˚±fds
);

476 
„Œdown
 = 0;

477 
	`FD_SET
(
fd
,&
ªadfds
);

478 
	`FD_SET
(
fd1
,&
ªadfds
);

479 if(
fd
 > 
fd1
){

480 
max
 = 
fd
 + 1;

482 
max
 = 
fd1
 + 1;

484 
nŸd⁄e
 = 1;

485 
nŸd⁄e
){

486 
	`£À˘
(
max
,&
ªadfds
,&
wrôefds
,&
ex˚±fds
,&
tv
);

487 
nŸd⁄e
 = 0;

488 if(
	`FD_ISSET
(
fd
,&
ªadfds
)){

489 
nŸd⁄e
++;

490 
	`¥ötf
("˛órög fd:%d\n",
fd
);

491 
„Œdown
 +
	`my_s˘pRódI≈ut
(
fd
);

492 
nŸd⁄e
 = 1;

494 if(
	`FD_ISSET
(
fd1
,&
ªadfds
)){

495 
nŸd⁄e
++;

496 
	`¥ötf
("˛órög fd1:%d\n",
fd1
);

497 
„Œdown
 +
	`my_s˘pRódI≈ut
(
fd1
);

500 (
„Œdown
);

501 
	}
}

504 
	$¥o˚ss_out_d©a
(
fd
,
fd1
)

506 
nŸd⁄e
,
x
,
ªt
;

509 
	`¥ï¨e_buf„rs
();

511 
ªt
 = 
	`£ndto
(
fd
,
buf„r1
,(buffer1),0,

512 (
sockaddr
 *)&
to
,(to));

513 if(
ªt
 < (
buf„r1
)){

514 
	`¥ötf
("Gak1,Éº‹:%dÑë:%d\n",
î∫o
,
ªt
);

517 
ªt
 = 
	`£ndto
(
fd1
,
buf„r2
,(
buf„r1
),0,

518 (
sockaddr
 *)&
to
,(to));

519 if(
ªt
 < (
buf„r2
)){

520 
	`¥ötf
("Gak2,Éº‹:%dÑë:%d\n",
î∫o
,
ªt
);

524 
ªt
 = 
	`£ndto
(
fd
,
buf„r3
,(
buf„r1
),0,

525 (
sockaddr
 *)&
to
,(to));

526 if(
ªt
 < (
buf„r3
)){

527 
	`¥ötf
("Gak3,Éº‹:%dÑë:%d\n",
î∫o
,
ªt
);

531 
ªt
 = 
	`£ndto
(
fd1
,
buf„r4
,(
buf„r1
),0,

532 (
sockaddr
 *)&
to
,(to));

533 if(
ªt
 < (
buf„r4
)){

534 
	`¥ötf
("Gak4,Éº‹:%dÑë:%d\n",
î∫o
,
ªt
);

538 
nŸd⁄e
 = 1;

539 
nŸd⁄e
){

540 
x
 = 
	`˛ór_fds
(
fd
,
fd1
);

541 if(
x
){

542 
nŸd⁄e
 = 0;

544 
	`¶ìp
(1);

547 
	}
}

550 
	$maö
(
¨gc
, **
¨gv
)

552 
i
,
fd
,
fd1
;

553 *
addr
=
NULL
;

554 
uöt16_t
 
p‹t
=0;

555 
¥Ÿocﬁ_tou£
 = 
IPPROTO_SCTP
;

556 
s˘p_evít_subs¸ibe
 
evít
;

558 (
i

	`gë›t
(
¨gc
,
¨gv
,"p:h:")Ë!
EOF
){

559 
i
){

561 
addr
 = 
›èrg
;

564 
p‹t
 = (
uöt16_t
)
	`°πﬁ
(
›èrg
,
NULL
,0);

568 
	`mem£t
(&
to
,0,(to));

569 if((
addr
 =
NULL
Ë|| (
p‹t
 == 0)){

570 
	`¥ötf
("Ußge: %†-hádd∏-∞p‹t\n", 
¨gv
[0]);

573 if(
	`öë_±⁄
(
AF_INET
, 
addr
, (*Ë&
to
.
sö_addr
)){

575 
to
.
sö_Ámûy
 = 
AF_INET
;

576 
	`¥ötf
("p‹à£À˘ed i†%d\n",
p‹t
);

577 
	`¥ötf
("add∏%x\n",(
u_öt
)
	`¡ohl
(
to
.
sö_addr
.
s_addr
));

578 
to
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

580 
	`¥ötf
("Can'tÅranslateÅheáddress\n");

584 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
¥Ÿocﬁ_tou£
);

585 if(
fd
 == -1){

586 
	`¥ötf
("ˇn'à›í sockë:%d\n",
î∫o
);

589 
	`mem£t
(&
bödto
,0,(bindto));

591 
Àn
 = (
bödto
);

592 
bödto
.
sö_Ámûy
 = 
AF_INET
;

593 
bödto
.
sö_p‹t
 = 0;

594 if(
	`böd
(
fd
,(
sockaddr
 *)&
bödto
, 
Àn
) < 0){

595 
	`¥ötf
("ˇn'àbödá sockë:%d\n",
î∫o
);

596 
	`˛o£
(
fd
);

599 if(
	`gësock«me
(
fd
,(
sockaddr
 *)&
gŸ
,&
Àn
) < 0){

600 
	`¥ötf
("gë sock«mêÁûedÉº:%d\n",
î∫o
);

601 
	`˛o£
(
fd
);

604 
	`¥ötf
("fd u£†p‹à%d\n",
	`¡ohs
(
gŸ
.
sö_p‹t
));

607 
fd1
 = 
	`sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
¥Ÿocﬁ_tou£
);

608 if(
fd1
 == -1){

609 
	`¥ötf
("ˇn'à›í sockë:%d\n",
î∫o
);

610 
	`˛o£
(
fd
);

613 
	`mem£t
(&
bödto
,0,(bindto));

615 
Àn
 = (
bödto
);

616 
bödto
.
sö_Ámûy
 = 
AF_INET
;

617 
bödto
.
sö_p‹t
 = 0;

618 if(
	`böd
(
fd1
,(
sockaddr
 *)&
bödto
, 
Àn
) < 0){

619 
	`¥ötf
("ˇn'àbödá sockë:%d\n",
î∫o
);

620 
	`˛o£
(
fd
);

621 
	`˛o£
(
fd1
);

624 if(
	`gësock«me
(
fd1
,(
sockaddr
 *)&
gŸ
,&
Àn
) < 0){

625 
	`¥ötf
("gë sock«mêÁûedÉº:%d\n",
î∫o
);

626 
	`˛o£
(
fd
);

627 
	`˛o£
(
fd1
);

630 
	`¥ötf
("fd1 u£†p‹à%d\n",
	`¡ohs
(
gŸ
.
sö_p‹t
));

633 
evít
.
s˘p_d©a_io_evít
 = 1;

634 
evít
.
s˘p_assocüti⁄_evít
 = 1;

635 
evít
.
s˘p_addªss_evít
 = 1;

636 
evít
.
s˘p_£nd_Áûuª_evít
 = 1;

637 
evít
.
s˘p_≥î_îr‹_evít
 = 1;

638 
evít
.
s˘p_shutdown_evít
 = 1;

639 
evít
.
s˘p_∑πül_dñivîy_evít
 = 1;

640 
evít
.
s˘p_ad≠èti⁄_œyî_evít
 = 1;

641 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_SCTP
,

642 
SCTP_EVENTS
, &
evít
,

643 (
evít
)) != 0) {

644 
	`¥ötf
("Gak, c™'à£àevít†î∫o:%d\n",
î∫o
);

645 
	`exô
(0);

647 i‡(
	`£tsock›t
(
fd1
, 
IPPROTO_SCTP
,

648 
SCTP_EVENTS
, &
evít
,

649 (
evít
)) != 0) {

650 
	`¥ötf
("Gak, c™'à£àevít†î∫o:%d\n",
î∫o
);

651 
	`exô
(0);

654 if(
	`c⁄√˘
(
fd
,(
sockaddr
 *)&
to
,
Àn
) == -1){

655 
	`¥ötf
("S‹ry c⁄√˘ faû†%d\n",
î∫o
);

656 
	`˛o£
(
fd
);

659 if(
	`c⁄√˘
(
fd1
,(
sockaddr
 *)&
to
,
Àn
) == -1){

660 
	`¥ötf
("S‹ry c⁄√˘ faû†%d\n",
î∫o
);

661 
	`˛o£
(
fd
);

664 
	`¥ötf
("Connected\n");

665 
	`˛ór_fds
(
fd
,
fd1
);

666 
	`¥o˚ss_out_d©a
(
fd
,
fd1
);

669 
	}
}

	@sctp-tools/src/apps/peel_server.c

67 
	~<˘y≥.h
>

69 
	~<°dio.h
>

70 
	~<°dlib.h
>

71 
	~<uni°d.h
>

72 
	~<sys/ty≥s.h
>

73 
	~<sys/io˘l.h
>

74 
	~<sys/°©.h
>

75 
	~<sys/sockë.h
>

76 
	~<√t/if.h
>

77 
	~<√töë/ö.h
>

79 
	~<°d¨g.h
>

80 
	~<sig«l.h
>

81 
	~<f˙é.h
>

82 
	~<¨∑/öë.h
>

83 
	~<time.h
>

84 
	~<°rög.h
>

85 
	~<î∫o.h
>

86 
	~<pﬁl.h
>

87 
	~<sys/uio.h
>

88 
	~<√tdb.h
>

90 
	~<√töë/s˘p.h
>

91 #ifde‡
__NëBSD__


92 
	~<sys/öây≥s.h
>

95 
	#SCTP_CRC32C_POLY
 0x1EDC6F41

	)

96 
	#SCTP_CRC32C
(
c
,
d
Ë(c=(c>>8)^
s˘p_¸c_c
[(c^(d))&0xFF])

	)

117 
	gbuf„r1
[4100];

118 
	gbuf„r2
[4100];

119 
	gbuf„r3
[4100];

120 
	gbuf„r4
[4100];

121 
sockaddr_ö
 
	gbödto
,
	ggŸ
;

122 
sockÀn_t
 
	gÀn
;

124 
	gs˘p_¸c_c
[256] = {

191 
u_öt32_t


192 
	$upd©e_¸c32
(
u_öt32_t
 
¸c32
,

193 *
buf„r
,

194 
Àngth
)

196 
i
;

197 
i
 = 0; i < 
Àngth
; i++) {

198 
	`SCTP_CRC32C
(
¸c32
, 
buf„r
[
i
]);

200  (
¸c32
);

201 
	}
}

203 
u_öt32_t


204 
	$s˘p_csum_föÆize
(
u_öt32_t
 
¸c32
)

206 
u_öt32_t
 
ªsu…
;

207 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


208 
u_öt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

211 
ªsu…
 = ~
¸c32
;

212 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


218 
byã0
 = 
ªsu…
 & 0x000000ff;

219 
byã1
 = (
ªsu…
 >> 8) & 0x000000ff;

220 
byã2
 = (
ªsu…
 >> 16) & 0x000000ff;

221 
byã3
 = (
ªsu…
 >> 24) & 0x000000ff;

222 
ªsu…
 = ((
byã0
 << 24) |

223 (
byã1
 << 16) |

224 (
byã2
 << 8) |

225 
byã3
);

226 
¸c32
 = 
	`ht⁄l
(
ªsu…
);

233 
¸c32
 = 
ªsu…
;

235  (
¸c32
);

236 
	}
}

239 
	$check_buf„rs
()

242 
u_öt32_t
 
ãmp
,*
csum
;

243 
ªt
=0;

244 
ãmp
 = 0xffffffff;

245 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r1
,((buffer1)-4));

246 
ãmp
 = 
	`s˘p_csum_föÆize
(temp);

247 
csum
 = (
u_öt32_t
 *)(
buf„r1
+((buffer1)-4));

248 if(*
csum
 !
ãmp
){

249 
	`¥ötf
("Buffer1: Found csum:%x calculated:%x\n",

250 *
csum
,
ãmp
);

251 
ªt
++;

253 
ãmp
 = 0xffffffff;

254 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r2
,((buffer2)-4));

255 
ãmp
 = 
	`s˘p_csum_föÆize
(temp);

256 
csum
 = (
u_öt32_t
 *)(
buf„r2
+((buffer2)-4));

257 if(*
csum
 !
ãmp
){

258 
	`¥ötf
("Buffer2: Found csum:%x calculated:%x\n",

259 *
csum
,
ãmp
);

260 
ªt
++;

263 
ãmp
 = 0xffffffff;

264 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r3
,((buffer3)-4));

265 
ãmp
 = 
	`s˘p_csum_föÆize
(temp);

266 
csum
 = (
u_öt32_t
 *)(
buf„r3
+((buffer3)-4));

267 if(*
csum
 !
ãmp
){

268 
	`¥ötf
("Buffer3: Found csum:%x calculated:%x\n",

269 *
csum
,
ãmp
);

270 
ªt
++;

273 
ãmp
 = 0xffffffff;

274 
ãmp
 = 
	`upd©e_¸c32
—emp,
buf„r4
,((buffer4)-4));

275 
ãmp
 = 
	`s˘p_csum_föÆize
(temp);

276 
csum
 = (
u_öt32_t
 *)(
buf„r4
+((buffer4)-4));

277 if(*
csum
 !
ãmp
){

278 
	`¥ötf
("Buffer4: Found csum:%x calculated:%x\n",

279 *
csum
,
ãmp
);

280 
ªt
++;

282 (
ªt
);

283 
	}
}

286 
	$my_h™dÀ_nŸifiˇti⁄
(
fd
,*
nŸify_buf
) {

287 
s˘p_nŸifiˇti⁄
 *
¢p
;

288 
s˘p_assoc_ch™ge
 *
ßc
;

289 
s˘p_∑ddr_ch™ge
 *
•c
;

290 
s˘p_ªmŸe_îr‹
 *
§e
;

291 
s˘p_£nd_Áûed
 *
ssf
;

292 
s˘p_shutdown_evít
 *
s£
;

293 
asocUp
;

294 *
°r
;

295 
buf
[256];

296 
sockaddr_ö
 *
sö
;

297 
sockaddr_ö6
 *
sö6
;

299 
¢p
 = (
s˘p_nŸifiˇti⁄
 *)
nŸify_buf
;

300 
asocUp
 = 0;

301 
¢p
->
¢_hódî
.
¢_ty≥
) {

302 
SCTP_ASSOC_CHANGE
:

303 
ßc
 = &
¢p
->
¢_assoc_ch™ge
;

304 
ßc
->
ßc_°©e
) {

306 
SCTP_COMM_UP
:

307 
°r
 = "COMMUNICATION UP";

308 
asocUp
++;

310 
SCTP_COMM_LOST
:

311 
°r
 = "COMMUNICATION LOST";

313 
SCTP_RESTART
:

314 
°r
 = "RESTART";

315 
asocUp
++;

317 
SCTP_SHUTDOWN_COMP
:

318 
°r
 = "SHUTDOWN COMPLETE";

320 
SCTP_CANT_STR_ASSOC
:

321 
°r
 = "CANT START ASSOC";

322 
	`¥ötf
("EXIT:SCTP_ASSOC_CHANGE: %s,ássoc=%xh\n", 
°r
,

323 (
uöt32_t
)
ßc
->
ßc_assoc_id
);

324 
	`exô
(0);

327 
°r
 = "UNKNOWN";

329 
	`¥ötf
("SCTP_ASSOC_CHANGE: %s,ássoc=%xh\n", 
°r
,

330 (
uöt32_t
)
ßc
->
ßc_assoc_id
);

332 
SCTP_PEER_ADDR_CHANGE
:

333 
•c
 = &
¢p
->
¢_∑ddr_ch™ge
;

334 
•c
->
•c_°©e
) {

335 
SCTP_ADDR_AVAILABLE
:

336 
°r
 = "ADDRESS AVAILABLE";

338 
SCTP_ADDR_UNREACHABLE
:

339 
°r
 = "ADDRESS UNAVAILABLE";

341 
SCTP_ADDR_REMOVED
:

342 
°r
 = "ADDRESS REMOVED";

344 
SCTP_ADDR_ADDED
:

345 
°r
 = "ADDRESS ADDED";

347 
SCTP_ADDR_MADE_PRIM
:

348 
°r
 = "ADDRESS MADE PRIMARY";

351 
°r
 = "UNKNOWN";

353 
sö6
 = (
sockaddr_ö6
 *)&
•c
->
•c_Øddr
;

354 i‡(
sö6
->
sö6_Ámûy
 =
AF_INET6
) {

355 
	`öë_¡›
(
AF_INET6
, (*)&
sö6
->
sö6_addr
, 
buf
, (buf));

357 
sö
 = (
sockaddr_ö
 *)&
•c
->
•c_Øddr
;

358 
	`öë_¡›
(
AF_INET
, (*)&
sö
->
sö_addr
, 
buf
, (buf));

360 
	`¥ötf
("SCTP_PEER_ADDR_CHANGE: %s,áddr=%s,ássoc=%xh\n", 
°r
,

361 
buf
, (
uöt32_t
)
•c
->
•c_assoc_id
);

363 
SCTP_REMOTE_ERROR
:

364 
§e
 = &
¢p
->
¢_ªmŸe_îr‹
;

365 
	`¥ötf
("SCTP_REMOTE_ERROR:ássoc=%xh\n",

366 (
uöt32_t
)
§e
->
§e_assoc_id
);

368 
SCTP_SEND_FAILED
:

369 
ssf
 = &
¢p
->
¢_£nd_Áûed
;

370 
	`¥ötf
("SCTP_SEND_FAILED:ássoc=%xh\n",

371 (
uöt32_t
)
ssf
->
ssf_assoc_id
);

373 
SCTP_ADAPTATION_INDICATION
:

375 
s˘p_ad≠èti⁄_evít
 *
´
;

376 
´
 = &
¢p
->
¢_ad≠èti⁄_evít
;

377 
	`¥ötf
("\nSCTP_adaptation_indication bits:0x%x\n",

378 (
u_öt
)
´
->
ßi_ad≠èti⁄_öd
);

381 
SCTP_PARTIAL_DELIVERY_EVENT
:

383 
s˘p_pd≠i_evít
 *
pd≠i
;

384 
pd≠i
 = &
¢p
->
¢_pd≠i_evít
;

385 
	`¥ötf
("SCTP_PD-APIÉvent:%u\n",

386 
pd≠i
->
pd≠i_ödiˇti⁄
);

387 if(
pd≠i
->
pd≠i_ödiˇti⁄
 == 0){

388 
	`¥ötf
("PDI- Aborted\n");

393 
SCTP_SHUTDOWN_EVENT
:

394 
s£
 = &
¢p
->
¢_shutdown_evít
;

395 
	`¥ötf
("SCTP_SHUTDOWN_EVENT:ássoc=%xh\n",

396 (
uöt32_t
)
s£
->
s£_assoc_id
);

399 
	`¥ötf
("UnknownÇotificationÉventÅype=%xh\n",

400 
¢p
->
¢_hódî
.
¢_ty≥
);

402 (
asocUp
);

403 
	}
}

406 
	gªadBuf„r
[65535];

407 
	gsz
=0;

408 
	gc⁄åﬁVe˘‹
[65535];

409 
msghdr
 
	gmsg
;

411 
	$my_s˘pRódI≈ut
(
fd
,
maxªad
)

416 
iovec
 
iov
[2];

417 
‰om
[200];

419 
	`mem£t
(&
msg
,0,(msg));

420 
	`mem£t
(
c⁄åﬁVe˘‹
,0,(controlVector));

421 
	`mem£t
(
ªadBuf„r
,0,(readBuffer));

423 
iov
[0].
iov_ba£
 = 
ªadBuf„r
;

424 
iov
[0].
iov_Àn
 = 
maxªad
;

425 
iov
[1].
iov_ba£
 = 
NULL
;

426 
iov
[1].
iov_Àn
 = 0;

427 
msg
.
msg_«me
 = (
ˇddr_t
)
‰om
;

428 
msg
.
msg_«mñí
 = (
‰om
);

429 
msg
.
msg_iov
 = 
iov
;

430 
msg
.
msg_iovÀn
 = 1;

431 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
)
c⁄åﬁVe˘‹
;

432 
msg
.
msg_c⁄åﬁÀn
 = (
c⁄åﬁVe˘‹
);

433 
î∫o
 = 0;

434 
sz
 = 
	`ªcvmsg
(
fd
,&
msg
,0);

435 
	`¥ötf
("Read fd:%dÑeturns %dÉrrno:%d controlÜen is %zu msgflg:%x\n",

436 
fd
,

437 
sz
,
î∫o
,

438 
msg
.
msg_c⁄åﬁÀn
,

439 
msg
.
msg_Êags
);

441 i‡(
msg
.
msg_Êags
 & 
MSG_NOTIFICATION
) {

442 
	`¥ötf
("GotáÇotification\n");

443 (
	`my_h™dÀ_nŸifiˇti⁄
(
fd
,
ªadBuf„r
));

445 
	`¥ötf
("Got data\n");

448 
	}
}

452 
	$pﬁl_fd
(
fd
)

454 
ˇmeup
;

455 
max
;

456 
fd_£t
 
ªadfds
,
wrôefds
,
ex˚±fds
;

457 
timevÆ
 
tv
;

459 
	`mem£t
(&
tv
,0,(tv));

460 
	`FD_ZERO
(&
ªadfds
);

461 
	`FD_ZERO
(&
wrôefds
);

462 
	`FD_ZERO
(&
ex˚±fds
);

463 
ˇmeup
 = 0;

464 
max
 = 
fd
 + 1;

466 
	`¥ötf
("poll_fd\n");

467 
	`FD_SET
(
fd
,&
ªadfds
);

469 
	`£À˘
(
max
,&
ªadfds
,&
wrôefds
,&
ex˚±fds
,
NULL
);

470 if(
	`FD_ISSET
(
fd
,&
ªadfds
)){

471 
	`¥ötf
("ReadÖlease\n");

472 
ˇmeup
 +
	`my_s˘pRódI≈ut
(
fd
,4100);

475 (
ˇmeup
);

476 
	}
}

478 
s˘p_assoc_t


479 
	$dig_out_asocid
()

481 
s˘p_¢drcvöfo
 *
s_öfo
;

482 
cmsghdr
 *
cmsg
;

483 
s_öfo
 = 
NULL
;

484 if(
msg
.
msg_c⁄åﬁÀn
){

488 
cmsg
 = (
cmsghdr
 *)
c⁄åﬁVe˘‹
;

489 
cmsg
){

490 if(
cmsg
->
cmsg_Àvñ
 =
IPPROTO_SCTP
){

491 if(
cmsg
->
cmsg_ty≥
 =
SCTP_SNDRCV
){

493 
s_öfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

497 
cmsg
 = 
	`CMSG_NXTHDR
(&
msg
,cmsg);

500 
	`¥ötf
("No CMSG?\n");

501 
	`exô
(0);

503 if(
s_öfo
 =
NULL
){

504 
	`¥ötf
("No sinfo?\n");

505 
	`exô
(0);

507 (
s_öfo
->
söfo_assoc_id
);

508 
	}
}

512 
	$¥o˚ss
(
fd
,
magic
)

514 
fd1
,
num_asoc
,
ªt
,
i
;

515 
s˘p_assoc_t
 
asoc
;

516 
time•ec
 
ts
;

517 
num_asoc
 = 0;

518 
i
 = 1;

519 
ts
.
tv_£c
 = 0;

520 
ts
.
tv_n£c
 = 10000;

522 
i
 < 4099){

523 
	`¥ötf
("∑s†%d\n",
i
);

524 
num_asoc
 < 2){

525 
ªt
 = 
	`pﬁl_fd
(
fd
);

526 if(
ªt
 >0 ){

527 
num_asoc
 +
ªt
;

528 }if(
ªt
 == 0){

529 
	`¶ìp
(1);

530 }if(
ªt
 < 0){

531 
	`¥ötf
("GŸ d©a? %d\n",
sz
);

532 
	`¶ìp
(1);

534 
	`¥ötf
("aso¯cou¡ i†%d\n",
num_asoc
);

536 
agaö
:

537 
	`¥ötf
("Reading for %d bytes from fd:%d\n",

538 
i
,
fd
);

539 
	`my_s˘pRódI≈ut
(
fd
,
i
);

540 if(
sz
 =
i
){

541 
	`mem˝y
(
buf„r1
,
ªadBuf„r
,
i
);

543 
	`¥ötf
("Huh Iám messed upÑead %d wanted %d\n",

544 
sz
,
i
);

545 
agaö
;

547 if(
msg
.
msg_Êags
 & 
MSG_EOR
){

548 
	`¥ötf
("Huh got EOR onÖaritialÑead?\n");

549 
	`exô
(0);

551 
asoc
 = 
	`dig_out_asocid
();

552 
	`«no¶ìp
(&
ts
,
NULL
);

554 
fd1
 = 
	`s˘p_≥ñoff
(
fd
,
asoc
);

555 if(
fd1
 == -1){

556 
	`¥ötf
("peeloff failed %d/err:%d\n",

557 
fd1
,
î∫o
);

558 
	`exô
(0);

560 
	`my_s˘pRódI≈ut
(
fd1
,(4100-
i
));

561 if(
sz
 > 0){

562 
	`mem˝y
(&
buf„r1
[
i
],
ªadBuf„r
,
sz
);

563 
	`¥ötf
("C›õd %d byãs\n",
sz
);

565 
	`¥ötf
("Huh o∆yÑód %d\n",
sz
);

567 if(
magic
 >
i
){

568 
	`¥ötf
("magicÉngaged\n");

569 
	`my_s˘pRódI≈ut
(
fd
,
i
);

571 
	`my_s˘pRódI≈ut
(
fd
,4100);

573 if(
sz
 > 0){

574 
	`mem˝y
(
buf„r2
,
ªadBuf„r
,
sz
);

575 
	`¥ötf
("c›õd %d byãs\n",
sz
);

577 
	`¥ötf
("Huh o∆yÑód %d\n",
sz
);

579 
	`my_s˘pRódI≈ut
(
fd1
,4100);

580 if(
sz
 > 0){

581 
	`mem˝y
(
buf„r3
,
ªadBuf„r
,
sz
);

582 
	`¥ötf
("c›õd %d byãs\n",
sz
);

584 
	`¥ötf
("Huh o∆yÑód %d\n",
sz
);

586 
	`my_s˘pRódI≈ut
(
fd
,4100);

587 if(
sz
 > 0){

588 
	`mem˝y
(
buf„r4
,
ªadBuf„r
,
sz
);

589 
	`¥ötf
("c›õd %d byãs\n",
sz
);

591 
	`¥ötf
("Huh o∆yÑód %d\n",
sz
);

593 if(
	`check_buf„rs
()){

594 
	`exô
(0);

596 
	`˛o£
(
fd1
);

597 
i
++;

598 
num_asoc
--;

600 
	}
}

603 
	$maö
(
¨gc
, **
¨gv
)

605 
i
,
fd
;

606 
uöt16_t
 
myp‹t
=0;

607 
magic
=0;

608 
s˘p_evít_subs¸ibe
 
evít
;

609 (
i

	`gë›t
(
¨gc
,
¨gv
,"m:M:")Ë!
EOF
){

610 
i
){

612 
myp‹t
 = (
uöt16_t
)
	`°πﬁ
(
›èrg
,
NULL
,0);

615 
magic
 = 
	`°πﬁ
(
›èrg
,
NULL
,0);

620 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

621 if(
fd
 == -1){

622 
	`¥ötf
("ˇn'à›í sockë:%d\n",
î∫o
);

625 
	`mem£t
(&
bödto
,0,(bindto));

627 
Àn
 = (
bödto
);

628 
bödto
.
sö_Ámûy
 = 
AF_INET
;

629 
	`¥ötf
("bödÖ‹à%d\n",
myp‹t
);

630 
bödto
.
sö_p‹t
 = 
	`ht⁄s
(
myp‹t
);

631 if(
	`böd
(
fd
,(
sockaddr
 *)&
bödto
, 
Àn
) < 0){

632 
	`¥ötf
("ˇn'àbödá sockë:%d\n",
î∫o
);

633 
	`˛o£
(
fd
);

636 if(
	`gësock«me
(
fd
,(
sockaddr
 *)&
gŸ
,&
Àn
) < 0){

637 
	`¥ötf
("gë sock«mêÁûedÉº:%d\n",
î∫o
);

638 
	`˛o£
(
fd
);

641 
	`¥ötf
("fd u£†p‹à%d\n",
	`¡ohs
(
gŸ
.
sö_p‹t
));

642 
	`li°í
(
fd
,100);

644 
evít
.
s˘p_d©a_io_evít
 = 1;

645 
evít
.
s˘p_assocüti⁄_evít
 = 1;

646 
evít
.
s˘p_addªss_evít
 = 1;

647 
evít
.
s˘p_£nd_Áûuª_evít
 = 1;

648 
evít
.
s˘p_≥î_îr‹_evít
 = 1;

649 
evít
.
s˘p_shutdown_evít
 = 1;

650 
evít
.
s˘p_∑πül_dñivîy_evít
 = 1;

651 
evít
.
s˘p_ad≠èti⁄_œyî_evít
 = 1;

652 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_SCTP
,

653 
SCTP_EVENTS
, &
evít
,

654 (
evít
)) != 0) {

655 
	`¥ötf
("Gak, c™'à£àevít†î∫o:%d\n",
î∫o
);

656 
	`exô
(0);

658 
	`¥ötf
("toÖrocess\n");

659 
	`¥o˚ss
(
fd
,
magic
);

661 
	}
}

	@sctp-tools/src/apps/sctp_darn.c

51 
	~<°dio.h
>

52 
	~<f˙é.h
>

53 
	~<°dlib.h
>

55 
	~<gë›t.h
>

56 
	~<√tdb.h
>

57 
	~<öây≥s.h
>

58 
	~<˘y≥.h
>

59 
	~<sys/ty≥s.h
>

60 
	~<sys/sockë.h
>

61 
	~<sys/uio.h
>

62 
	~<√töë/ö.h
>

63 
	~<sys/∑øm.h
>

64 
	~<sys/pﬁl.h
>

65 
	~<¨∑/öë.h
>

66 
	~<î∫o.h
>

67 
	~<√t/if.h
>

68 
	~<√töë/s˘p.h
>

69 
	~<uni°d.h
>

70 
	~<°rög.h
>

71 
	~<sig«l.h
>

72 
	~"s˘p_d¨n.h
"

74 *
	gTCID
 = 
__FILE__
;

75 
	gTST_TOTAL
 = 1;

76 
	gTST_CNT
 = 0;

78 
	#GEN_DATA_FIRST
 0x21

	)

79 
	#GEN_DATA_LAST
 0x7e

	)

82 
	#NIPQUAD
(
addr
) \

83 ((*)&
addr
)[0], \

84 ((*)&
addr
)[1], \

85 ((*)&
addr
)[2], \

86 ((*)&
addr
)[3]

	)

89 
	#NIP6
(
addr
) \

90 
	`¡ohs
((
addr
).
s6_addr16
[0]), \

91 
	`¡ohs
((
addr
).
s6_addr16
[1]), \

92 
	`¡ohs
((
addr
).
s6_addr16
[2]), \

93 
	`¡ohs
((
addr
).
s6_addr16
[3]), \

94 
	`¡ohs
((
addr
).
s6_addr16
[4]), \

95 
	`¡ohs
((
addr
).
s6_addr16
[5]), \

96 
	`¡ohs
((
addr
).
s6_addr16
[6]), \

97 
	`¡ohs
((
addr
).
s6_addr16
[7])

	)

100 *
	gloˇl_ho°
 = 
NULL
;

101 
	gloˇl_p‹t
 = 0;

102 *
	gªmŸe_ho°
 = 
NULL
;

103 
	gªmŸe_p‹t
 = 0;

104 
comm™d_t
 
	gcomm™d
 = 
COMMAND_NONE
;

105 
sockaddr
 *
	gbödx_add_addrs
 = 
NULL
;

106 
	gbödx_add_cou¡
 = 0;

107 
sockaddr
 *
	gbödx_ªm_addrs
 = 
NULL
;

108 
	gbödx_ªm_cou¡
 = 0;

109 
sockaddr
 *
	gc⁄√˘x_addrs
 = 
NULL
;

110 
	gc⁄√˘x_cou¡
 = 0;

111 
	göãø˘ive_mode
 = 0;

112 
	gpﬁl_skn
 = 0;

113 
	gn⁄blockög
 = 0;

114 
	g›t_•a˚
 = 0;

115 
	ggí_d©a
 = 
GEN_DATA_FIRST
;

116 *
	göãr_outbuf
 = 
NULL
;

117 
	göãr_ouéí
 = 0;

118 
	göãr_sk
 = 0;

119 
	gpﬁl_¢d_size
 = 0;

120 
	gu£_pﬁl
 = 0;

121 
	gsockë_ty≥
 = 
SOCK_SEQPACKET
;

122 
s˘p_assoc_t
 
	gassocid
 = 0;

123 
	gecho
 = 0;

124 *
	göãrÁ˚
 = "eth0";

125 
	gif_ödex
 = 0;

126 
sockaddr_°‹age_t
 
	gªmŸe_addr
;

127 
ß_Ámûy_t
 
	gø_Ámûy
;

128 
	gø_Àn
 = 0;

129 *
	gø_øw
;

130 
	g√w_c⁄√˘i⁄
 = 1;

132 
	eöãr_cmd_num
 {

133 
	mINTER_SND
 = 0,

134 
	mINTER_RCV
,

135 
	mINTER_SNDBUF
,

136 
	mINTER_RCVBUF
,

137 
	mINTER_BINDX_ADD
,

138 
	mINTER_BINDX_REM
,

139 
	mINTER_SET_PRIM
,

140 
	mINTER_SET_PEER_PRIM
,

141 
	mINTER_SHUTDOWN
,

142 
	mINTER_ABORT
,

143 
	mINTER_NODELAY
,

144 
	mINTER_MAXSEG
,

145 
	mINTER_HEARTBEAT
,

146 
	mINTER_GET_STATS


149 
	eshutdown_ty≥
 {

150 
	mSHUTDOWN_ABORT
 = 0,

151 
	mSHUTDOWN_SHUTDOWN


154 
	söãr_íåy
 {

155 *
	mcmd
;

156 
	mcmd_num
;

159 
öãr_íåy
 
	göãr_comm™ds
[] = {

160 {"¢d", 
INTER_SND
},

161 {"rcv", 
INTER_RCV
},

162 {"¢dbuf", 
INTER_SNDBUF
},

163 {"rcvbuf", 
INTER_RCVBUF
},

164 {"bödx-add", 
INTER_BINDX_ADD
},

165 {"bödx-ªm", 
INTER_BINDX_REM
},

166 {"¥im¨y", 
INTER_SET_PRIM
},

167 {"≥î_¥im¨y", 
INTER_SET_PEER_PRIM
},

168 {"shutdown", 
INTER_SHUTDOWN
},

169 {"ab‹t", 
INTER_ABORT
},

170 {"nodñay", 
INTER_NODELAY
},

171 {"max£g", 
INTER_MAXSEG
},

172 {"hóπbót", 
INTER_HEARTBEAT
},

173 {"°©s", 
INTER_GET_STATS
},

174 {
NULL
, -1},

177 
	#POLL_SK_MAX
 256

	)

178 
	gpﬁl_sks
[
POLL_SK_MAX
];

179 
pﬁlfd
 
	gpﬁl_fds
[
POLL_SK_MAX
];

180 
	#POLL_SND_SIZE
 16384

	)

183 
sockaddr
 *
≠≥nd_addr
(c⁄° *
∑rm
, sockadd∏*
addrs
,

184 *
ªt_cou¡
) ;

185 
buûd_ídpoöt
(*
¨gv0
, 
p‹äum
);

186 
∑r£_öãr_comm™ds
(*, *, );

187 
¢d_func
(*);

188 
¢dbuf_func
(*, , , );

189 
rcvbuf_func
(*, , , );

190 
sockaddr
 *
gë_bödx_addr
(*, *);

191 
bödx_func
(*, , 
sockaddr
 *, , , );

192 
c⁄√˘x_func
(*, , 
sockaddr
 *, );

193 
¥im¨y_func
(*, , *, );

194 
≥î_¥im¨y_func
(*, , *, );

195 
•p_hb_dem™d_func
(*, , *, );

196 
nodñay_func
(*, , 
vÆ
, 
£t
);

197 
max£g_func
(*, , 
vÆ
, 
£t
);

198 
shutdown_func
(*
¨gv0
, *
skp
, 
shutdown_ty≥
);

199 
gë_assoc°©s_func
(, 
s˘p_assoc_t
);

200 
ã°_sk_f‹_assoc
(
sk
, 
s˘p_assoc_t
 
assoc_id
);

201 * 
gí_mesßge
();

202 
s˘p_assoc_t
 
ã°_ªcv_assoc_ch™ge
();

203 
s˘p_assoc_t
 
ã°_vîify_assoc_ch™ge
(
msghdr
 *);

204 
¥öt_addr_buf
(* 
œddrs
, 
n_œddrs
);

205 
¥öt_sockaddr
(
sockaddr
 *
ß_addr
);

208 
	$maö
(
¨gc
, *
¨gv
[]) {

209 
sk
 = -1;

210 
îr‹
 = 0;

211 
i
;

213 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

215 
	`∑r£_¨gumíts
(
¨gc
, 
¨gv
);

217 
comm™d
) {

218 
COMMAND_NONE
:

219 
	`Ârötf
(
°dîr
, "%s: Please specifyá command.\n",

220 
¨gv
[0]);

221 
	`exô
(1);

223 
COMMAND_LISTEN
:

224 
sk
 = 
	`buûd_ídpoöt
(
¨gv
[0], 
loˇl_p‹t
);

225 
îr‹
 = 
	`comm™d_li°í
(
¨gv
[0], 
sk
);

227 
COMMAND_SEND
:

228 
sk
 = 
	`buûd_ídpoöt
(
¨gv
[0], 
loˇl_p‹t
);

229 
îr‹
 = 
	`comm™d_£nd
(
¨gv
[0], &
sk
);

231 
COMMAND_POLL
:

232 i‡(
u£_pﬁl
) {

233 
i
 = 0; i < 
pﬁl_skn
; i++) {

234 
pﬁl_fds
[
i
].
fd
 = 
	`buûd_ídpoöt
(
¨gv
[0],

235 
loˇl_p‹t
 + 
i
);

238 
i
 = 0; i < 
pﬁl_skn
; i++) {

239 
pﬁl_sks
[
i
] = 
	`buûd_ídpoöt
(
¨gv
[0],

240 
loˇl_p‹t
 + 
i
);

243 
îr‹
 = 
	`comm™d_pﬁl
(
¨gv
[0]);

246 
	`Ârötf
(
°dîr
, "%s: illegal command %d\n",

247 
¨gv
[0], 
comm™d
);

248 
	`exô
(1);

252 i‡(
COMMAND_POLL
 !
comm™d
) {

253 
	`˛o£
(
sk
);

256 i‡(
u£_pﬁl
) {

257 
i
 = 0; i < 
pﬁl_skn
; i++) {

258 
	`˛o£
(
pﬁl_fds
[
i
].
fd
);

261 
i
 = 0; i < 
pﬁl_skn
; i++) {

262 
	`˛o£
(
pﬁl_sks
[
i
]);

267 
	`exô
(
îr‹
);

268 
	}
}

275 
	$∑r£_¨gumíts
(
¨gc
, *
¨gv
[]) {

276 
›ti⁄_ödex
 = 0;

277 
c
;

278 
sockaddr
 *
tmp_addrs
 = 
NULL
;

280 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

291 {"öãrÁ˚", 
›ti⁄Æ_¨gumít
, 0, 5,},

298 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "B:H:IP:b:h:i:p:lm:nstz:ec:",

299 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

300 i‡(
c
 == -1)

303 
c
) {

305 
	`¥ötf
("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

306 i‡(
›èrg
) {

307 
	`¥ötf
(" wôhárg %s", 
›èrg
);

309 
	`¥ötf
("\n");

313 
loˇl_ho°
 = 
›èrg
;

317 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

321 
ªmŸe_ho°
 = 
›èrg
;

325 
ªmŸe_p‹t
 = 
	`©oi
(
›èrg
);

328 i‡(
›èrg
)

329 
öãrÁ˚
 = 
›èrg
;

330 
if_ödex
 = 
	`if_«mëoödex
(
öãrÁ˚
);

331 i‡(!
if_ödex
) {

332 
	`¥ötf
("I¡îÁ˚ %†unknown\n", 
öãrÁ˚
);

333 
	`exô
(1);

339 i‡(
comm™d
) {

340 
	`Ârötf
(
°dîr
,

342 
¨gv
[0]);

343 
	`exô
(1);

345 
comm™d
 = 
COMMAND_LISTEN
;

351 i‡(
comm™d
) {

352 
	`Ârötf
(
°dîr
,

354 
¨gv
[0]);

355 
	`exô
(1);

357 
comm™d
 = 
COMMAND_SEND
;

363 
tmp_addrs
 =

364 
	`≠≥nd_addr
(
›èrg
, 
bödx_add_addrs
,

365 &
bödx_add_cou¡
);

366 i‡(
NULL
 =
tmp_addrs
) {

370 
	`Ârötf
(
°dîr
, "No memoryÅoádd ");

371 
	`Ârötf
(
°dîr
, "%s\n", 
›èrg
);

372 
	`exô
(2);

374 
bödx_add_addrs
 = 
tmp_addrs
;

380 
tmp_addrs
 =

381 
	`≠≥nd_addr
(
›èrg
, 
bödx_ªm_addrs
,

382 &
bödx_ªm_cou¡
);

383 i‡(
NULL
 =
tmp_addrs
) {

387 
	`Ârötf
(
°dîr
, "No memoryÅoádd ");

388 
	`Ârötf
(
°dîr
, "%s\n", 
›èrg
);

389 
	`exô
(2);

391 
bödx_ªm_addrs
 = 
tmp_addrs
;

395 
tmp_addrs
 =

396 
	`≠≥nd_addr
(
›èrg
, 
c⁄√˘x_addrs
,

397 &
c⁄√˘x_cou¡
);

398 i‡(
NULL
 =
tmp_addrs
) {

402 
	`Ârötf
(
°dîr
, "No memoryÅoádd ");

403 
	`Ârötf
(
°dîr
, "%s\n", 
›èrg
);

404 
	`exô
(2);

406 
c⁄√˘x_addrs
 = 
tmp_addrs
;

409 
u£_pﬁl
 = 1;

412 
öãø˘ive_mode
 = 1;

415 
comm™d
 = 
COMMAND_POLL
;

416 
pﬁl_skn
 = 
	`©oi
(
›èrg
);

417 i‡(
pﬁl_skn
 <0 ||Öﬁl_sk¿> 
POLL_SK_MAX
) {

418 
	`Ârötf
(
°dîr
, "Too many sockets for ");

419 
	`Ârötf
(
°dîr
, "forÖolling\n");

420 
	`exô
(2);

424 
›t_•a˚
 = 
	`©oi
(
›èrg
);

427 
n⁄blockög
 = 1;

430 
sockë_ty≥
 = 
SOCK_STREAM
;

433 
pﬁl_¢d_size
 = 
	`©oi
(
›èrg
);

434 i‡(
pﬁl_¢d_size
 <= 0) {

435 
	`Ârötf
(
°dîr
, "Bad message size.\n");

436 
	`exô
(2);

440 
echo
 = 1;

443 
	`ußge
(
¨gv
[0]);

444 
	`exô
(1);

447 
	`¥ötf
 ("%s: unrecognized option 0%c\n",

448 
¨gv
[0], 
c
);

449 
	`ußge
(
¨gv
[0]);

450 
	`exô
(1);

454 i‡(
›töd
 < 
¨gc
)

456 
	`Ârötf
(
°dîr
, "%s:Çon-optionárgumentsáre illegal: ",

457 
¨gv
[0]);

458 
›töd
 < 
¨gc
)

459 
	`Ârötf
(
°dîr
, "%†", 
¨gv
[
›töd
++]);

460 
	`Ârötf
 (
°dîr
, "\n");

461 
	`ußge
(
¨gv
[0]);

462 
	`exô
(1);

466 i‡(
NULL
 =
loˇl_ho°
) {

467 
	`Ârötf
(
°dîr
, "%s: You MUSTÖrovideáÜocal host.\n",

468 
¨gv
[0]);

469 
	`ußge
(
¨gv
[0]);

470 
	`exô
(1);

473 i‡(
comm™d
 =
COMMAND_SEND
 && 
NULL
 =
ªmŸe_ho°


474 && 
c⁄√˘x_cou¡
 == 0) {

475 
	`Ârötf
(
°dîr
, "%s: You MUSTÖrovideáÑemote host for sending.\n",

476 
¨gv
[0]);

477 
	`ußge
(
¨gv
[0]);

478 
	`exô
(1);

481 i‡(
ªmŸe_ho°
 !
NULL
 && 
c⁄√˘x_cou¡
 != 0) {

482 
	`Ârötf
(
°dîr
, "%s: You canÇotÖrovide both -hánd -c options.\n",

483 
¨gv
[0]);

484 
	`ußge
(
¨gv
[0]);

485 
	`exô
(1);

487 
	}
}

491 
	$buûd_ídpoöt
(*
¨gv0
, 
p‹äum
)

493 
ªtvÆ
;

494 
ho°ít
 *
h°
;

495 
sockaddr_°‹age_t
 
loˇl_addr
;

496 
ß_Ámûy_t
 
œ_Ámûy
;

497 
œ_Àn
;

498 *
œ_øw
;

499 
îr‹
;

500 
s˘p_evít_subs¸ibe
 
subs¸ibe
;

503 
h°
 = 
	`gëho°by«me
(
loˇl_ho°
);

504 i‡(
h°
 =
NULL
) {

505 
h°
 = 
	`gëho°by«me2
(
loˇl_ho°
, 
AF_INET6
);

508 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

509 
	`Ârötf
(
°dîr
, "%s: bad ho°«me: %s\n", 
¨gv0
, 
loˇl_ho°
);

510 
	`exô
(1);

513 
œ_Ámûy
 = 
h°
->
h_addπy≥
;

514 
œ_Ámûy
) {

515 
AF_INET
:

516 
œ_Àn
 = (
loˇl_addr
.
v4
);

517 
œ_øw
 = &
loˇl_addr
.
v4
.
sö_addr
;

518 
loˇl_addr
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
p‹äum
);

519 
loˇl_addr
.
v4
.
sö_Ámûy
 = 
AF_INET
;

521 
AF_INET6
:

522 
œ_Àn
 = (
loˇl_addr
.
v6
);

523 
œ_øw
 = &
loˇl_addr
.
v6
.
sö6_addr
;

524 
loˇl_addr
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹äum
);

525 
loˇl_addr
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

526 
loˇl_addr
.
v6
.
sö6_sc›e_id
 = 
if_ödex
;

529 
	`Ârötf
(
°dîr
, "InvalidáddressÅype.\n");

530 
	`exô
(1);

533 
	`mem˝y
(
œ_øw
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

536 
ªtvÆ
 = 
	`sockë
(
œ_Ámûy
, 
sockë_ty≥
, 
IPPROTO_SCTP
);

537 i‡(
ªtvÆ
 < 0) {

538 
	`Ârötf
(
°dîr
, "%s: failedÅo create socket: %s.\n",

539 
¨gv0
, 
	`°ªº‹
(
î∫o
));

540 
	`exô
(1);

543 i‡(
SOCK_SEQPACKET
 =
sockë_ty≥
) {

544 
	`mem£t
(&
subs¸ibe
, 0, (subscribe));

545 
subs¸ibe
.
s˘p_d©a_io_evít
 = 1;

546 
subs¸ibe
.
s˘p_assocüti⁄_evít
 = 1;

547 
îr‹
 = 
	`£tsock›t
(
ªtvÆ
, 
SOL_SCTP
, 
SCTP_EVENTS
,

548 (*)&
subs¸ibe
, (subscribe));

549 i‡(
îr‹
) {

550 
	`Ârötf
(
°dîr
, "SCTP_EVENTS:Éº‹: %d\n", 
îr‹
);

551 
	`exô
(1);

556 
îr‹
 = 
	`böd
(
ªtvÆ
, &
loˇl_addr
.
ß
, 
œ_Àn
);

557 i‡(
îr‹
 != 0) {

558 
	`Ârötf
(
°dîr
, "%s: canÇot bindÅo %s:%d: %s.\n",

559 
¨gv0
, 
loˇl_ho°
, 
p‹äum
,

560 
	`°ªº‹
(
î∫o
));

561 
	`exô
(1);

565 i‡(
bödx_add_addrs
) {

566 i‡(0 !
	`bödx_func
(
¨gv0
, 
ªtvÆ
, 
bödx_add_addrs
,

567 
bödx_add_cou¡
, 
SCTP_BINDX_ADD_ADDR
, 
p‹äum
)) {

568 
	`Ârötf
(
°dîr
, "bindx_func (add) failed.\n");

569 
	`exô
(1);

574 i‡(
bödx_ªm_addrs
) {

575 i‡(0 !
	`bödx_func
(
¨gv0
, 
ªtvÆ
, 
bödx_ªm_addrs
,

576 
bödx_ªm_cou¡
, 
SCTP_BINDX_REM_ADDR
, 
p‹äum
)) {

577 
	`Ârötf
(
°dîr
, "bindx_func (remove) failed.\n");

578 
	`exô
(1);

583 i‡(
n⁄blockög
) {

584 
îr‹
 = 
	`f˙é
(
ªtvÆ
, 
F_SETFL
, 
O_NONBLOCK
);

585 i‡(
îr‹
 != 0) {

586 
	`Ârötf
(
°dîr
, "%s:Érror fcntl: %s.\n",

587 
¨gv0
, 
	`°ªº‹
(
î∫o
));

588 
	`exô
(1);

592 i‡(
›t_•a˚
) {

593 
	`¢dbuf_func
(
¨gv0
, 
ªtvÆ
, 
›t_•a˚
, 1);

594 
	`rcvbuf_func
(
¨gv0
, 
ªtvÆ
, 
›t_•a˚
, 1);

597  
ªtvÆ
;

599 
	}
}

603 
s˘p_öômsg
 
	möô
;

604 
s˘p_¢drcvöfo
 
	m¢drcvöfo
;

605 } 
	t_s˘p_cmsg_d©a_t
;

610 
	$comm™d_li°í
(*
¨gv0
, 
sk
)

612 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

613 
iovec
 
iov
;

614 
msghdr
 
ömesßge
;

615 
sockaddr_°‹age_t
 
msg«me
;

616 
mesßge
[
REALLY_BIG
];

617 
d⁄e
 = 0;

618 
îr‹
;

619 
c
;

620 
ªcvsk
 = 0;

623 
îr‹
 = 
	`li°í
(
sk
, 5);

624 i‡(
îr‹
 != 0) {

625 
	`¥ötf
("\n\n\t\tlisten Failure: %s.\n\n\n",

626 
	`°ªº‹
(
î∫o
));

627 
	`exô
(1);

630 i‡(
n⁄blockög
) {

631 i‡(!
öãø˘ive_mode
) {

632 
	`¥ötf
("Use -I for interactive mode with");

633 
	`¥ötf
(" -nÇonblocking\n");

634 
	`exô
(1);

639 i‡(
öãø˘ive_mode
) {

640 
öãr_sk
 = 
sk
;

644 
	`mem£t
(&
ömesßge
, 0, (inmessage));

645 i‡((
iov
.
iov_ba£
 = 
	`mÆloc
(
REALLY_BIG
)Ë=
NULL
) {

646 
	`¥ötf
("%s: C™'àÆloˇã mem‹y.\n", 
¨gv0
);

647 
	`exô
(1);

649 
iov
.
iov_Àn
 = 
REALLY_BIG
;

650 
ömesßge
.
msg_iov
 = &
iov
;

651 
ömesßge
.
msg_iovÀn
 = 1;

653 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

654 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

655 
ömesßge
.
msg_«me
 = &
msg«me
;

656 
ömesßge
.
msg_«mñí
 = (
msg«me
);

658 
	`¥ötf
("%†li°íög...\n", 
¨gv0
);

660 
d⁄e
 = 0;

661 !
d⁄e
) {

662 i‡(
öãø˘ive_mode
) {

664 i‡(
ªmŸe_ho°
) {

665 
	`¥ötf
("%s:%d-%s:%d Interactive mode> ",

666 
loˇl_ho°
, 
loˇl_p‹t
, 
ªmŸe_ho°
,

667 
ªmŸe_p‹t
);

669 
	`¥ötf
("%s:%d-", 
loˇl_ho°
, 
loˇl_p‹t
);

670 i‡(
associd
) {

671 
	`¥öt_sockaddr
(&
ªmŸe_addr
.
ß
);

673 
	`¥ötf
("?:%d", 
ªmŸe_p‹t
);

675 
	`¥ötf
(" Interactive mode> ");

677 
	`fÊush
(
°dout
);

678 i‡(
NULL
 =
	`fgës
(
mesßge
, 
REALLY_BIG
, 
°dö
)) {

679 
d⁄e
 = 1;

683 i‡(0 <(
c
 = 
	`∑r£_öãr_comm™ds
(
¨gv0
, 
mesßge
,

685 i‡(
INTER_RCV
 !
c
) {

693 i‡(
sockë_ty≥
 =
SOCK_STREAM
) {

694 
sockÀn_t
 
Àn
 = 0;

696 i‡(!
ªcvsk
) {

697 i‡((
ªcvsk
 = 
	`ac˚±
(
sk
, 
NULL
, &
Àn
)) < 0) {

698 
	`Ârötf
(
°dîr
, "%s:Érror: %s.\n",

699 
¨gv0
, 
	`°ªº‹
(
î∫o
));

700 
	`exô
(1);

705 
ªcvsk
 = 
sk
;

708 
îr‹
 = 
	`ªcvmsg
(
ªcvsk
, &
ömesßge
, 
MSG_WAITALL
);

709 i‡(
îr‹
 < 0) {

710 i‡(
n⁄blockög
 && (
EAGAIN
 =
î∫o
)) {

711 
îr‹
 = 0;

715 i‡(
sockë_ty≥
 =
SOCK_STREAM
) {

716 i‡(
ENOTCONN
 !
î∫o
)

718 
	`¥ötf
("Noássociation isÖresentÇow!!\n");

719 
	`˛o£
(
ªcvsk
);

720 
ªcvsk
 = 0;

729 i‡(
ömesßge
.
msg_Êags
 & 
MSG_NOTIFICATION
)

730 
associd
 = 
	`ã°_vîify_assoc_ch™ge
(&
ömesßge
);

732 i‡(
echo
) {

733 if–!(
MSG_NOTIFICATION
 & 
ömesßge
.
msg_Êags
)) {

734 
	`£ndto
(
ªcvsk
, 
ömesßge
.
msg_iov
->
iov_ba£
,

735 
îr‹
, 0, (
sockaddr
 *)&
msg«me
,

736 (
msg«me
));

740 
	`ã°_¥öt_mesßge
(
sk
, &
ömesßge
, 
îr‹
);

742 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

743 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

744 
ömesßge
.
msg_«me
 = &
msg«me
;

745 
ömesßge
.
msg_«mñí
 = (
msg«me
);

746 
iov
.
iov_Àn
 = 
REALLY_BIG
;

749 i‡(0 !
	`ã°_sk_f‹_assoc
(
ªcvsk
, 
associd
)) {

750 
	`¥ötf
("Noássociation isÖresentÇow!!\n");

751 i‡(
sockë_ty≥
 =
SOCK_STREAM
) {

752 
	`˛o£
(
ªcvsk
);

753 
ªcvsk
 = 0;

758 i‡(
îr‹
 < 0) {

759 
	`Ârötf
(
°dîr
, "%s:Érror: %s.\n",

760 
¨gv0
, 
	`°ªº‹
(
î∫o
));

761 
	`exô
(1);

764  
îr‹
;

766 
	}
}

770 
	$comm™d_£nd
(*
¨gv0
, *
skp
)

772 
msghdr
 
outmsg
;

773 
iovec
 
iov
;

774 
d⁄e
 = 0;

775 
mesßge
[
REALLY_BIG
];

776 
ho°ít
 *
h°
;

777 
c
;

778 
sockaddr
 *
addrs
;

779 
msgÀn
;

780 
îr‹
 = 0;

781 
sk
 = *
skp
;

784 i‡(
ªmŸe_ho°
 !
NULL
) {

785 
h°
 = 
	`gëho°by«me
(
ªmŸe_ho°
);

786 i‡(
h°
 =
NULL
) {

787 
h°
 = 
	`gëho°by«me2
(
ªmŸe_ho°
, 
AF_INET6
);

790 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

791 
	`Ârötf
(
°dîr
, "%s: bad hostname: %s\n",

792 
¨gv0
, 
ªmŸe_ho°
);

793 
	`exô
(1);

796 
ø_Ámûy
 = 
h°
->
h_addπy≥
;

797 
ø_Ámûy
) {

798 
AF_INET
:

799 
ø_Àn
 = (
ªmŸe_addr
.
v4
);

800 
ø_øw
 = &
ªmŸe_addr
.
v4
.
sö_addr
;

801 
ªmŸe_addr
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

802 
ªmŸe_addr
.
v4
.
sö_Ámûy
 = 
AF_INET
;

804 
AF_INET6
:

805 
ø_Àn
 = (
ªmŸe_addr
.
v6
);

806 
ø_øw
 = &
ªmŸe_addr
.
v6
.
sö6_addr
;

807 
ªmŸe_addr
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

808 
ªmŸe_addr
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

809 
ªmŸe_addr
.
v6
.
sö6_sc›e_id
 = 
if_ödex
;

812 
	`Ârötf
(
°dîr
, "InvalidáddressÅype.\n");

813 
	`exô
(1);

816 
	`mem˝y
(
ø_øw
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

820 i‡(
öãø˘ive_mode
) {

821 
öãr_sk
 = 
sk
;

824 
	`¥ötf
("%†ªadyÅÿ£nd...\n", 
¨gv0
);

825 !
d⁄e
) {

827 i‡(
ªmŸe_ho°
) {

828 i‡(
öãø˘ive_mode
) {

829 
	`¥ötf
("%s:%d-%s:%d Interactive mode> ",

830 
loˇl_ho°
, 
loˇl_p‹t
, 
ªmŸe_ho°
,

831 
ªmŸe_p‹t
);

833 
	`¥ötf
("%s:%d-%s:%d> ",

834 
loˇl_ho°
, 
loˇl_p‹t
,

835 
ªmŸe_ho°
, 
ªmŸe_p‹t
);

838 
	`¥ötf
("%s:%d-", 
loˇl_ho°
, 
loˇl_p‹t
);

839 i‡(
associd
) {

840 
	`¥öt_sockaddr
(&
ªmŸe_addr
.
ß
);

842 
	`¥ötf
("XXXXXX:%d", 
ªmŸe_p‹t
);

844 i‡(
öãø˘ive_mode
) {

845 
	`¥ötf
(" Interactive mode> ");

847 
	`¥ötf
("> ");

850 
	`fÊush
(
°dout
);

851 i‡(
NULL
 =
	`fgës
(
mesßge
, 
REALLY_BIG
, 
°dö
)) {

852 
d⁄e
 = 1;

856 i‡(
öãø˘ive_mode
) {

858 i‡(0 <(
c
 = 
	`∑r£_öãr_comm™ds
(
¨gv0
, 
mesßge
,

860 i‡(
INTER_SND
 =
c
) {

861 
iov
.
iov_ba£
 = 
öãr_outbuf
;

862 
msgÀn
 = 
öãr_ouéí
;

863 
iov
.
iov_Àn
 = 
msgÀn
;

874 
msgÀn
 = 
	`°æí
(
mesßge
) + 1;

875 
iov
.
iov_Àn
 = 
msgÀn
;

882 i‡((
SOCK_SEQPACKET
 =
sockë_ty≥
Ë&& 
associd
 &&

883 (0 !
	`ã°_sk_f‹_assoc
(
sk
, 
associd
))) {

884 
associd
 = 
	`ã°_ªcv_assoc_ch™ge
(
sk
);

885 
	`¥ötf
("Oldássociation gone, StartingáÇew one!\n");

886 
√w_c⁄√˘i⁄
 = 1;

889 i‡(
√w_c⁄√˘i⁄
 && 
c⁄√˘x_cou¡
 != 0) {

891 
îr‹
 = 
	`c⁄√˘x_func
(
¨gv0
, 
sk
, 
c⁄√˘x_addrs
,

892 
c⁄√˘x_cou¡
);

893 i‡(0 !
îr‹
) {

894 i‡(
îr‹
 == -2) {

895 
	`¥ötf
("ConnectionÑefused\n");

896 i‡(
SOCK_SEQPACKET
 =
sockë_ty≥
) {

897 
associd
 = 
	`ã°_ªcv_assoc_ch™ge
(
sk
);

901 
	`Ârötf
(
°dîr
, "connectx failed.\n");

902 
	`exô
(1);

904 i‡(
SOCK_SEQPACKET
 =
sockë_ty≥
) {

905 
associd
 = 
	`ã°_ªcv_assoc_ch™ge
(
sk
);

907 
associd
 = 1;

909 
rc
 = 
	`s˘p_gë∑ddrs
(
sk
, 
associd
, &
addrs
);

910 i‡(0 >
rc
) {

911 i‡(
rc
 == 0) {

912 
	`Ârötf
(
°dîr
, "sctp_getpaddrs failed,ÇoÖeers.\n");

914 
	`Ârötf
(
°dîr
, "s˘p_gë∑ddr†Áûed %s(%d).\n", 
	`°ªº‹
(
î∫o
),Érrno);

916 
	`exô
(1);

918 
	`¥ötf
("New connection,Öeeráddresses\n");

919 
	`¥öt_addr_buf
(
addrs
, 
rc
);

920 
ø_Ámûy
 = 
addrs
[0].
ß_Ámûy
;

921 
ø_Ámûy
) {

922 
AF_INET
:

923 
ø_Àn
 = (
ªmŸe_addr
.
v4
);

925 
AF_INET6
:

926 
ø_Àn
 = (
ªmŸe_addr
.
v6
);

929 
	`Ârötf
(
°dîr
, "InvalidáddressÅype.\n");

930 
	`exô
(1);

932 
	`mem˝y
(&
ªmŸe_addr
, &
addrs
[0], 
ø_Àn
);

933 
	`s˘p_‰ì∑ddrs
(
addrs
);

934 
√w_c⁄√˘i⁄
 = 0;

938 i‡(
SOCK_SEQPACKET
 =
sockë_ty≥
 ||

939 (
c⁄√˘x_cou¡
 =0 && 
√w_c⁄√˘i⁄
)) {

943 i‡(!
öãø˘ive_mode
) {

944 
iov
.
iov_ba£
 = 
mesßge
;

945 
iov
.
iov_Àn
 = 
msgÀn
;

947 
outmsg
.
msg_iov
 = &
iov
;

948 
outmsg
.
msg_iovÀn
 = 1;

949 
outmsg
.
msg_c⁄åﬁ
 = 
NULL
;

950 
outmsg
.
msg_c⁄åﬁÀn
 = 0;

951 
outmsg
.
msg_«me
 = &
ªmŸe_addr
;

952 
outmsg
.
msg_«mñí
 = 
ø_Àn
;

954 
îr‹
 = 
	`£ndmsg
(
sk
, &
outmsg
, 0);

956 
îr‹
 = 
	`£nd
(
sk
, 
mesßge
, 
msgÀn
, 0);

957 i‡(
îr‹
 =-1 && 
î∫o
 =
EPIPE
) {

958 
îr‹
 = 
	`˛o£
(
sk
);

959 i‡(
îr‹
 != 0) {

960 
	`Ârötf
(
°dîr
, "˛o£ faûed %s\n", 
	`°ªº‹
(
î∫o
));

961 
	`exô
(1);

963 *
skp
 = 
sk
 = 
	`buûd_ídpoöt
(
¨gv0
, 
loˇl_p‹t
);

968 i‡(
îr‹
 !
msgÀn
) {

969 
	`Ârötf
(
°dîr
, "%s:Érror: %s.\n",

970 
¨gv0
, 
	`°ªº‹
(
î∫o
));

971 i‡(
n⁄blockög
 && 
EAGAIN
 =
î∫o
) {

972 i‡(
öãø˘ive_mode
) {

977 
	`exô
(1);

981 } 
îr‹
 !
msgÀn
);

986 i‡((
SOCK_SEQPACKET
 =
sockë_ty≥
Ë&& (0 =
associd
))

987 
associd
 = 
	`ã°_ªcv_assoc_ch™ge
(
sk
);

990 i‡(0 !
	`ã°_sk_f‹_assoc
(
sk
, 
associd
)) {

991 
	`¥ötf
("Noássociation isÖresentÇow!!\n");

992 
√w_c⁄√˘i⁄
 = 1;

994 i‡(
√w_c⁄√˘i⁄
) {

995 
rc
 = 
	`s˘p_gë∑ddrs
(
sk
, 
associd
, &
addrs
);

996 i‡(0 >
rc
) {

997 i‡(
rc
 == 0) {

998 
	`Ârötf
(
°dîr
, "sctp_getpaddrs failed,ÇoÖeers.\n");

1000 
	`Ârötf
(
°dîr
, "s˘p_gë∑ddr†Áûed %s(%d).\n", 
	`°ªº‹
(
î∫o
),Érrno);

1002 
	`exô
(1);

1004 
	`¥ötf
("New connection,Öeeráddresses\n");

1005 
	`¥öt_addr_buf
(
addrs
, 
rc
);

1006 
	`s˘p_‰ì∑ddrs
(
addrs
);

1007 
√w_c⁄√˘i⁄
 = 0;

1012 i‡(
öãø˘ive_mode
) {

1013 
	`‰ì
(
öãr_outbuf
);

1014 
öãr_outbuf
 = 
NULL
;

1018  
îr‹
;

1020 
	}
}

1024 
	$comm™d_pﬁl
(*
¨gv0
)

1026 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

1027 
iovec
 
iov
;

1028 
msghdr
 
ömesßge
;

1029 
d⁄e
 = 0;

1030 
îr‹
 = 0;

1031 
max_fd
, 
i
, 
ªt
;

1032 
size
;

1033 
fd_£t
 *
ibô•
 = 
NULL
;

1034 
fd_£t
 *
obô•
 = 
NULL
;

1035 
fd_£t
 *
xbô•
 = 
NULL
;

1037 
msghdr
 
outmsg
;

1038 
ho°ít
 *
h°
;

1039 
msgÀn
;

1040 
ãmp_fd
, 
ãmp_£t
;

1045 i‡(
ªmŸe_ho°
) {

1047 
h°
 = 
	`gëho°by«me
(
ªmŸe_ho°
);

1048 i‡(
h°
 =
NULL
) {

1049 
h°
 = 
	`gëho°by«me2
(
ªmŸe_ho°
, 
AF_INET6
);

1052 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

1053 
	`Ârötf
(
°dîr
, "%s: bad hostname: %s\n",

1054 
¨gv0
, 
ªmŸe_ho°
);

1055 
	`exô
(1);

1058 
ø_Ámûy
 = 
h°
->
h_addπy≥
;

1059 
ø_Ámûy
) {

1060 
AF_INET
:

1061 
ø_Àn
 = (
ªmŸe_addr
.
v4
);

1062 
ø_øw
 = &
ªmŸe_addr
.
v4
.
sö_addr
;

1063 
ªmŸe_addr
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1064 
ªmŸe_addr
.
v4
.
sö_Ámûy
 = 
AF_INET
;

1066 
AF_INET6
:

1067 
ø_Àn
 = (
ªmŸe_addr
.
v6
);

1068 
ø_øw
 = &
ªmŸe_addr
.
v6
.
sö6_addr
;

1069 
ªmŸe_addr
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1070 
ªmŸe_addr
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

1071 
ªmŸe_addr
.
v6
.
sö6_sc›e_id
 = 
if_ödex
;

1074 
	`Ârötf
(
°dîr
, "InvalidáddressÅype.\n");

1075 
	`exô
(1);

1078 
	`mem˝y
(
ø_øw
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

1083 
outmsg
.
msg_iov
 = &
iov
;

1084 
outmsg
.
msg_iovÀn
 = 1;

1085 
outmsg
.
msg_c⁄åﬁ
 = 
NULL
;

1086 
outmsg
.
msg_c⁄åﬁÀn
 = 0;

1087 
outmsg
.
msg_«me
 = &
ªmŸe_addr
;

1088 
outmsg
.
msg_«mñí
 = 
ø_Àn
;

1092 
max_fd
 = -1;

1095 i‡(
u£_pﬁl
) {

1096 
i
 = 0; i < 
pﬁl_skn
; i++) {

1097 
îr‹
 = 
	`li°í
(
pﬁl_fds
[
i
].
fd
, 1);

1098 i‡(
îr‹
 != 0) {

1099 
	`¥ötf
("%s: Listen failed on socketÇumber ",

1100 
¨gv0
);

1101 
	`¥ötf
("%d: %s.\n", 
i
, 
	`°ªº‹
(
î∫o
));

1102 
	`exô
(1);

1105 
	`¥ötf
("%†li°íög...\n", 
¨gv0
);

1107 
i
 = 0; i < 
pﬁl_skn
; i++) {

1108 
îr‹
 = 
	`li°í
(
pﬁl_sks
[
i
], 1);

1109 i‡(
îr‹
 != 0) {

1110 
	`¥ötf
("%s: Listen failed on socketÇumber ",

1111 
¨gv0
);

1112 
	`¥ötf
("%d: %s.\n", 
i
, 
	`°ªº‹
(
î∫o
));

1113 
	`exô
(1);

1115 i‡(
pﬁl_sks
[
i
] > 
max_fd
) {

1116 
max_fd
 = 
pﬁl_sks
[
i
];

1119 
	`¥ötf
("%†li°íög...\n", 
¨gv0
);

1121 
size
 = 
	`howm™y
(
max_fd
 + 1, 
NFDBITS
Ë* (
fd_mask
);

1122 i‡((
ibô•
 = (
fd_£t
 *)
	`mÆloc
(
size
)Ë=
NULL
) {

1123 
	`¥ötf
("%s: C™'àÆloˇã mem‹y.\n", 
¨gv0
);

1124 
	`exô
(1);

1126 i‡((
obô•
 = (
fd_£t
 *)
	`mÆloc
(
size
)Ë=
NULL
) {

1127 
	`¥ötf
("%s: C™'àÆloˇã mem‹y.\n", 
¨gv0
);

1128 
	`exô
(1);

1130 i‡((
xbô•
 = (
fd_£t
 *)
	`mÆloc
(
size
)Ë=
NULL
) {

1131 
	`¥ötf
("%s: C™'àÆloˇã mem‹y.\n", 
¨gv0
);

1132 
	`exô
(1);

1134 
	`mem£t
(
ibô•
, 0, 
size
);

1135 
	`mem£t
(
obô•
, 0, 
size
);

1136 
	`mem£t
(
xbô•
, 0, 
size
);

1141 
	`mem£t
(&
ömesßge
, 0, (inmessage));

1142 i‡((
iov
.
iov_ba£
 = 
	`mÆloc
(
REALLY_BIG
)Ë=
NULL
) {

1143 
	`¥ötf
("%s: C™'àÆloˇã mem‹y.\n", 
¨gv0
);

1144 
	`exô
(1);

1146 
iov
.
iov_Àn
 = 
REALLY_BIG
;

1147 
ömesßge
.
msg_iov
 = &
iov
;

1148 
ömesßge
.
msg_iovÀn
 = 1;

1150 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

1151 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

1154 
d⁄e
 = 0;

1156 i‡(!
pﬁl_¢d_size
) {

1157 
pﬁl_¢d_size
 = 
POLL_SND_SIZE
;

1160 !
d⁄e
) {

1162 i‡(
u£_pﬁl
) {

1163 
i
 = 0; i < 
pﬁl_skn
; i++) {

1164 
pﬁl_fds
[
i
].
evíts
 = 
POLLIN
;

1166 i‡(
ªmŸe_ho°
) {

1168 
pﬁl_fds
[0].
evíts
 |
POLLOUT
;

1171 i‡((
ªt
 = 
	`pﬁl
(
pﬁl_fds
, 
pﬁl_skn
, -1))) {

1172 i‡(
ªt
 == -1) {

1177 
i
 = 0; i < 
pﬁl_skn
; i++) {

1178 
	`FD_SET
(
pﬁl_sks
[
i
], 
ibô•
);

1179 
	`FD_SET
(
pﬁl_sks
[
i
], 
xbô•
);

1181 i‡(
ªmŸe_ho°
) {

1183 
	`FD_SET
(
pﬁl_sks
[0], 
obô•
);

1187 i‡((
ªt
 = 
	`£À˘
(
max_fd
 + 1, 
ibô•
, 
obô•
, 
xbô•
,

1188 (
timevÆ
 *)0)) < 0) {

1189 i‡(
ªt
 == -1) {

1196 i‡(
ªmŸe_ho°
) {

1197 i‡(
u£_pﬁl
) {

1198 
ãmp_£t
 = 
pﬁl_fds
[0].
ªvíts
 & 
POLLOUT
;

1199 
ãmp_fd
 = 
pﬁl_fds
[0].
fd
;

1201 
ãmp_£t
 = 
	`FD_ISSET
(
pﬁl_sks
[0], 
obô•
);

1202 
ãmp_fd
 = 
pﬁl_sks
[0];

1205 i‡(
ãmp_£t
) {

1206 
öãr_outbuf
 = 
	`gí_mesßge
(
pﬁl_¢d_size
);

1207 i‡(!
öãr_outbuf
) {

1208 
	`Ârötf
(
°dîr
,

1210 
	`exô
(1);

1212 
iov
.
iov_ba£
 = 
öãr_outbuf
;

1213 
msgÀn
 = 
pﬁl_¢d_size
;

1214 
iov
.
iov_Àn
 = 
msgÀn
;

1216 
îr‹
 = 
	`£ndmsg
(
ãmp_fd
, &
outmsg
, 0);

1217 
	`Ârötf
(
°dîr
,

1219 
msgÀn
);

1221 i‡(
îr‹
 !
msgÀn
) {

1222 
	`Ârötf
(
°dîr
, "%s:Érror: %s.\n",

1223 
¨gv0
, 
	`°ªº‹
(
î∫o
));

1224 i‡((!
n⁄blockög
) ||

1225 (
EAGAIN
 !
î∫o
)) {

1226 
	`exô
(1);

1231 
	`‰ì
(
öãr_outbuf
);

1232 
öãr_outbuf
 = 
NULL
;

1237 
i
 = 0; !
d⁄e
 && (ò< 
pﬁl_skn
); i++) {

1238 i‡(
u£_pﬁl
) {

1239 
ãmp_£t
 = 
pﬁl_fds
[
i
].
ªvíts
 & 
POLLIN
;

1240 
ãmp_fd
 = 
pﬁl_fds
[
i
].
fd
;

1242 
ãmp_£t
 = 
	`FD_ISSET
(
pﬁl_sks
[
i
], 
ibô•
);

1243 
ãmp_fd
 = 
pﬁl_sks
[
i
];

1245 i‡(
ãmp_£t
) {

1246 
îr‹
 = 
	`ªcvmsg
(
ãmp_fd
, &
ömesßge
,

1247 
MSG_WAITALL
);

1248 i‡(
îr‹
 < 0) {

1249 i‡((
EAGAIN
 =
î∫o
)) {

1250 
îr‹
 = 0;

1254 
	`Ârötf
(
°dîr
,

1256 
¨gv0
,

1257 
	`°ªº‹
(
î∫o
));

1258 
	`exô
(1);

1261 
	`ã°_¥öt_mesßge
(
ãmp_fd
, &
ömesßge
, 
îr‹
);

1262 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

1263 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

1264 
iov
.
iov_Àn
 = 
REALLY_BIG
;

1270 i‡(
ömesßge
.
msg_Êags
 & 
MSG_NOTIFICATION
)

1271 
associd
 = 
	`ã°_vîify_assoc_ch™ge
(&
ömesßge
);

1274 i‡(0 !
	`ã°_sk_f‹_assoc
(
pﬁl_sks
[
i
], 
associd
)) {

1275 
	`¥ötf
("Noássociation isÖresent in sk "

1276 "No.%dÇow!!\n",
i
);

1282 i‡(!
u£_pﬁl
) {

1283 
	`‰ì
(
ibô•
);

1284 
	`‰ì
(
obô•
);

1285 
	`‰ì
(
xbô•
);

1288  
îr‹
;

1290 
	}
}

1296 
	#FPS
(
¨g
Ë
	`Ârötf
(
°dîr
,árg)

	)

1299 
	$ußge
(*
¨gv0
)

1321 
	`Ârötf
(
°dîr
, "Usage: %s -H <localhost> -P <localport> "

1364 
¨gv0
);

1365 
	}
}

1372 
	$u£r_ã°_check_mesßge
(
msghdr
 *
msg
,

1373 
c⁄åﬁÀn
,

1374 
s˘p_cmsg_t
 
evít
)

1378 i‡(
msg
->
msg_c⁄åﬁÀn
 !
c⁄åﬁÀn
) {

1379 
	`Ârötf
(
°dîr
,

1381 
msg
->
msg_c⁄åﬁÀn
, 
c⁄åﬁÀn
);

1382 
	`exô
(1);

1384 i‡(
c⁄åﬁÀn
 > 0 && 
evít
 !
	`CMSG_FIRSTHDR
(
msg
)->
cmsg_ty≥
) {

1385 
	`Ârötf
(
°dîr
, "Wrong kind ofÉvent: %d,Çot %d\n",

1386 
	`CMSG_FIRSTHDR
(
msg
)->
cmsg_ty≥
, 
evít
);

1387 
	`exô
(1);

1392 
	}
}

1398 
sockaddr
 *

1399 
	$≠≥nd_addr
(c⁄° *
∑rm
, 
sockaddr
 *
addrs
, *
ªt_cou¡
)

1401 
sockaddr
 *
√w_addrs
 = 
NULL
;

1402 *
≠å
;

1403 
sockaddr
 *
ß_addr
;

1404 
sockaddr_ö
 *
b4≠
;

1405 
sockaddr_ö6
 *
b6≠
;

1406 
ho°ít
 *
h°4
 = 
NULL
;

1407 
ho°ít
 *
h°6
 = 
NULL
;

1408 
i4
 = 0;

1409 
i6
 = 0;

1410 
j
;

1411 
‹ig_cou¡
 = *
ªt_cou¡
;

1412 
cou¡
 = 
‹ig_cou¡
;

1416 
h°4
 = 
	`gëho°by«me
(
∑rm
);

1417 
h°6
 = 
	`gëho°by«me2
(
∑rm
, 
AF_INET6
);

1419 i‡((
NULL
 =
h°4
 || h°4->
h_Àngth
 < 1)

1420 && (
NULL
 =
h°6
 || h°6->
h_Àngth
 < 1)) {

1421 
	`Ârötf
(
°dîr
, "bad ho°«me: %s\n", 
∑rm
);

1422 
föÆly
;

1427 i‡(
NULL
 !
h°4
) {

1428 
i4
 = 0; 
NULL
 !
h°4
->
h_addr_li°
[i4]; ++i4) {

1429 
cou¡
++;

1432 i‡(
NULL
 !
h°6
) {

1433 
i6
 = 0; 
NULL
 !
h°6
->
h_addr_li°
[i6]; ++i6) {

1434 
cou¡
++;

1441 
√w_addrs
 = (
sockaddr
 *)

1442 
	`ªÆloc
(
addrs
, (
sockaddr_ö6
Ë* 
cou¡
);

1444 i‡(
NULL
 =
√w_addrs
) {

1445 
cou¡
 = *
ªt_cou¡
;

1446 
föÆly
;

1450 
≠å
 = 
√w_addrs
;

1451 
j
 = 0; j < 
‹ig_cou¡
; j++) {

1452 
ß_addr
 = (
sockaddr
 *)
≠å
;

1453 
ß_addr
->
ß_Ámûy
) {

1454 
AF_INET
:

1455 
≠å
 +(
sockaddr_ö
);

1457 
AF_INET6
:

1458 
≠å
 +(
sockaddr_ö6
);

1461 
cou¡
 = 
‹ig_cou¡
;

1462 
föÆly
;

1467 i‡(
NULL
 !
h°4
) {

1468 
j
 = 0; j < 
i4
; ++j) {

1469 
b4≠
 = (
sockaddr_ö
 *)
≠å
;

1470 
	`mem£t
(
b4≠
, 0x00, (*b4ap));

1471 
b4≠
->
sö_Ámûy
 = 
AF_INET
;

1472 
b4≠
->
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

1473 
	`bc›y
(
h°4
->
h_addr_li°
[
j
], &
b4≠
->
sö_addr
,

1474 
h°4
->
h_Àngth
);

1476 
≠å
 +(
sockaddr_ö
);

1480 i‡(
NULL
 !
h°6
) {

1481 
j
 = 0; j < 
i6
; ++j) {

1482 
b6≠
 = (
sockaddr_ö6
 *)
≠å
;

1483 
	`mem£t
(
b6≠
, 0x00, (*b6ap));

1484 
b6≠
->
sö6_Ámûy
 = 
AF_INET6
;

1485 
b6≠
->
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

1486 
b6≠
->
sö6_sc›e_id
 = 
if_ödex
;

1487 
	`bc›y
(
h°6
->
h_addr_li°
[
j
], &
b6≠
->
sö6_addr
,

1488 
h°6
->
h_Àngth
);

1490 
≠å
 +(
sockaddr_ö6
);

1494 
föÆly
:

1496 *
ªt_cou¡
 = 
cou¡
;

1498  
√w_addrs
;

1500 
	}
}

1503 
	$∑r£_öãr_comm™ds
(*
¨gv0
, *
öput
, 
¢d_⁄ly
)

1505 
i
;

1506 *
p
;

1507 
Àn
;

1508 
£t
 = 0;

1509 
vÆ
;

1510 
sockaddr
 *
tmp_addrs
 = 
NULL
;

1513 
p
 = 
öput
;

1514 i‡(*
p
 == '?' || *p == '\n') {

1515 
	`¥ötf
("Interactive commands:\n");

1516 
	`¥ötf
("snd=<int> - Doá sendmsg withÅhe specified");

1517 
	`¥ötf
("Üength.\n");

1518 
	`¥ötf
("rcv=<int> - DoáÑecvmsg.");

1519 
	`¥ötf
("TheÜength is ignored forÇow.\n");

1520 
	`¥ötf
("bindx-add=<addr> - AddáÜocaláddress");

1521 
	`¥ötf
(" with bindx. \n");

1522 
	`¥ötf
("bindx-rem=<addr> - RemoveáÜocaláddress");

1523 
	`¥ötf
(" with bindx. \n");

1524 
	`¥ötf
("rcvbuf=<int> - Get/SetÑeceive buffer size\n");

1525 
	`¥ötf
("sndbuf=<int> - Get/Set send buffer size.\n");

1526 
	`¥ötf
("primary=<addr> - Get/Setássociation'sÖrimary\n");

1527 
	`¥ötf
("peer_primary=addr- Setássociation'sÖeer_primary\n");

1528 
	`¥ötf
("heartbeat=<addr> - Requestá user initiated heartbeat\n");

1529 
	`¥ötf
("maxseg=<int> - Get/Set Maximum fragment size.\n");

1530 
	`¥ötf
("nodelay=<0|1> - Get/Set NODELAY option.\n");

1531 
	`¥ötf
("shutdown - ShutdownÅheássociation.\n");

1532 
	`¥ötf
("abort - AbortÅheássociation.\n");

1533 
	`¥ötf
("stats - Print GET_ASSOC_STATS (ifávailable in kernel).\n");

1534 
	`¥ötf
("? - Help. DisplayÅhis message.\n");

1538 
i
 = 0; i < 
REALLY_BIG
; i++) {

1539 i‡(('=' =*
p
) ||

1540 ('?' =*
p
) ||

1541 ('\n' =*
p
)) {

1542 i‡('=' =*
p
) {

1543 
£t
 = 1;

1545 *
p
++ = '\0';

1548 
p
++;

1550 i‡(
i
 >
REALLY_BIG
) {

1551 
	`¥ötf
("Invalid input.\n");

1555 
i
 = 0;

1556 
NULL
 !
öãr_comm™ds
[
i
].
cmd
) {

1557 i‡(!
	`°rcmp
(
öput
, 
öãr_comm™ds
[
i
].
cmd
)) {

1558 
i
) {

1559 
INTER_SND
:

1560 i‡(
¢d_⁄ly
) {

1561 i‡(*
p
 < '0' || *p > '9') {

1562 
îr_öput
;

1564 
	`¢d_func
(
p
);

1566 
îr_öput
;

1569 
INTER_RCV
:

1570 i‡(
¢d_⁄ly
) {

1571 
îr_öput
;

1574 
INTER_SNDBUF
:

1575 i‡(
£t
) {

1576 i‡(*
p
 < '0' || *p > '9') {

1577 
îr_öput
;

1580 
Àn
 = (
£t
Ë? 
	`©oi
(
p
) : 0;

1581 
	`¢dbuf_func
(
¨gv0
, 
öãr_sk
, 
Àn
, 
£t
);

1583 
INTER_RCVBUF
:

1584 i‡(
£t
) {

1585 i‡(*
p
 < '0' || *p > '9') {

1586 
îr_öput
;

1589 
Àn
 = (
£t
Ë? 
	`©oi
(
p
) : 0;

1590 
	`rcvbuf_func
(
¨gv0
, 
öãr_sk
, 
Àn
, 
£t
);

1592 
INTER_BINDX_ADD
:

1593 
tmp_addrs
 = 
	`gë_bödx_addr
(
p
, &
Àn
);

1594 
	`bödx_func
(
¨gv0
, 
öãr_sk
, 
tmp_addrs
, 
Àn
,

1595 
SCTP_BINDX_ADD_ADDR
, 
loˇl_p‹t
);

1596 
	`‰ì
(
tmp_addrs
);

1598 
INTER_BINDX_REM
:

1599 
tmp_addrs
 = 
	`gë_bödx_addr
(
p
, &
Àn
);

1600 
	`bödx_func
(
¨gv0
, 
öãr_sk
, 
tmp_addrs
, 
Àn
,

1601 
SCTP_BINDX_REM_ADDR
, 
loˇl_p‹t
);

1602 
	`‰ì
(
tmp_addrs
);

1604 
INTER_SET_PRIM
:

1605 
	`¥im¨y_func
(
¨gv0
, 
öãr_sk
, 
p
, 
£t
);

1607 
INTER_SET_PEER_PRIM
:

1608 
	`≥î_¥im¨y_func
(
¨gv0
, 
öãr_sk
, 
p
, 
£t
);

1610 
INTER_HEARTBEAT
:

1611 
	`•p_hb_dem™d_func
(
¨gv0
, 
öãr_sk
, 
p
, 
£t
);

1613 
INTER_SHUTDOWN
:

1614 
	`shutdown_func
(
¨gv0
, &
öãr_sk
, 
SHUTDOWN_SHUTDOWN
);

1616 
INTER_ABORT
:

1617 
	`shutdown_func
(
¨gv0
, &
öãr_sk
, 
SHUTDOWN_ABORT
);

1619 
INTER_NODELAY
:

1620 i‡(
£t
) {

1621 i‡(*
p
 < '0' || *p > '9') {

1622 
îr_öput
;

1625 
vÆ
 = (
£t
Ë? 
	`©oi
(
p
) : 0;

1626 
	`nodñay_func
(
¨gv0
, 
öãr_sk
, 
vÆ
, 
£t
);

1628 
INTER_MAXSEG
:

1629 i‡(
£t
) {

1630 i‡(*
p
 < '0' || *p > '9') {

1631 
îr_öput
;

1634 
vÆ
 = (
£t
Ë? 
	`©oi
(
p
) : 0;

1635 
	`max£g_func
(
¨gv0
, 
öãr_sk
, 
vÆ
, 
£t
);

1637 
INTER_GET_STATS
:

1638 
	`gë_assoc°©s_func
(
öãr_sk
, 
associd
);

1641 
îr_öput
;

1645  
i
;

1647 
i
++;

1650 
îr_öput
:

1651 
	`¥ötf
("Invalid input.\n");

1654 
	}
}

1657 
	$gí_mesßge
(
Àn
)

1660 *
buf
;

1661 *
p
;

1662 
i
;

1664 
buf
 = 
	`mÆloc
(
Àn
);

1666 i‡(
NULL
 !
buf
) {

1667 
i
 = 0, 
p
 = 
buf
; i < 
Àn
; i++,Ö++) {

1668 i‡(
gí_d©a
 > 
GEN_DATA_LAST
) {

1669 
gí_d©a
 = 
GEN_DATA_FIRST
;

1671 *
p
 = 
gí_d©a
++;

1675 (
buf
);

1677 
	}
}

1680 
	$¢d_func
(*
öput
)

1683 
Àn
;

1685 
Àn
 = 
	`©oi
(
öput
);

1686 i‡(!(
öãr_outbuf
 = 
	`gí_mesßge
(
Àn
))) {

1687 
	`Ârötf
(
°dîr
, "Cannotállocate out message.\n");

1688 
	`exô
(1);

1690 
öãr_ouéí
 = 
Àn
;

1692 
	}
}

1695 
	$¢dbuf_func
(*
¨gv0
, 
sk
, 
Àn
, 
£t
)

1697 
îr‹
;

1698 
sockÀn_t
 
›éí
;

1700 i‡(
£t
) {

1701 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_SNDBUF
,

1702 (*)&
Àn
, (len));

1704 
›éí
 = (
Àn
);

1705 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SOCKET
, 
SO_SNDBUF
,

1706 (*)&
Àn
, &
›éí
);

1708 i‡(
îr‹
 != 0) {

1709 
	`Ârötf
(
°dîr
, "%s: Error setting/getting sndbuf: %s.\n",

1710 
¨gv0
, 
	`°ªº‹
(
î∫o
));

1711 
	`exô
(1);

1714 i‡(!
£t
) {

1715 
	`¥ötf
("¢dbu‡i†%d.\n", 
Àn
);

1718 
	}
}

1721 
	$rcvbuf_func
(*
¨gv0
, 
sk
, 
Àn
, 
£t
)

1723 
îr‹
;

1724 
sockÀn_t
 
›éí
;

1726 i‡(
£t
) {

1727 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_RCVBUF
,

1728 (*)&
Àn
, (len));

1730 
›éí
 = (
Àn
);

1731 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SOCKET
, 
SO_RCVBUF
,

1732 (*)&
Àn
, &
›éí
);

1734 i‡(
îr‹
 != 0) {

1735 
	`Ârötf
(
°dîr
, "%s: Error setting/gettingÑcvbuf: %s.\n",

1736 
¨gv0
, 
	`°ªº‹
(
î∫o
));

1737 
	`exô
(1);

1740 i‡(!
£t
) {

1741 
	`¥ötf
("rcvbu‡i†%d.\n", 
Àn
);

1744 
	}
}

1747 
sockaddr
 *

1748 
	$gë_bödx_addr
(*
ö
, *
cou¡
)

1751 
sockaddr
 *
tmp_addrs
 = 
NULL
;

1752 *
p
 = 
ö
;

1755 '\n' !*
p
) {

1756 
p
++;

1758 *
p
 = '\0';

1760 *
cou¡
 = 0;

1762 
tmp_addrs
 = 
	`≠≥nd_addr
(
ö
,Åmp_addrs, 
cou¡
);

1763 i‡(
NULL
 =
tmp_addrs
) {

1767 
	`Ârötf
(
°dîr
, "No memoryÅoádd ");

1768 
	`Ârötf
(
°dîr
, "%s\n", 
ö
);

1769 
	`exô
(2);

1771  
tmp_addrs
;

1773 
	}
}

1776 
	$bödx_func
(*
¨gv0
, 
sk
, 
sockaddr
 *
addrs
, 
cou¡
, 
Êag
, 
p‹äum
)

1779 
îr‹
;

1780 
i
;

1781 
sockaddr
 *
ß_addr
;

1782 *
≠å
;

1785 i‡(0 =
p‹äum
) {

1786 
	`Ârötf
(
°dîr
, "%s: AÇ⁄-0Üoˇ»p‹ànumbî i†", 
¨gv0
);

1787 
	`Ârötf
(
°dîr
, "required for bindxÅo work!\n");

1792 
≠å
 = 
addrs
;

1793 
i
 = 0; i < 
cou¡
; i++) {

1794 
ß_addr
 = (
sockaddr
 *)
≠å
;

1796 
ß_addr
->
ß_Ámûy
) {

1797 
AF_INET
:

1798 ((
sockaddr_ö
 *)
ß_addr
)->
sö_p‹t
 =

1799 
	`ht⁄s
(
p‹äum
);

1800 
≠å
 +(
sockaddr_ö
);

1802 
AF_INET6
:

1803 ((
sockaddr_ö6
 *)
ß_addr
)->
sö6_p‹t
 =

1804 
	`ht⁄s
(
p‹äum
);

1805 
≠å
 +(
sockaddr_ö6
);

1808 
	`Ârötf
(
°dîr
, "Invalidáddress family\n");

1813 
îr‹
 = 
	`s˘p_bödx
(
sk
, 
addrs
, 
cou¡
, 
Êag
);

1815 i‡(
îr‹
 != 0) {

1816 i‡(
Êag
 =
SCTP_BINDX_ADD_ADDR
) {

1817 
	`Ârötf
(
°dîr
, "%s:Érroráddingáddrs: %s.\n",

1818 
¨gv0
, 
	`°ªº‹
(
î∫o
));

1821 
	`Ârötf
(
°dîr
, "%s:ÉrrorÑemovingáddrs: %s.\n",

1822 
¨gv0
, 
	`°ªº‹
(
î∫o
));

1829 
	}
}

1832 
	$c⁄√˘x_func
(*
¨gv0
, 
sk
, 
sockaddr
 *
addrs
, 
cou¡
)

1835 
îr‹
;

1836 
i
;

1837 
sockaddr
 *
ß_addr
;

1838 *
≠å
;

1841 i‡(0 =
ªmŸe_p‹t
) {

1842 
	`Ârötf
(
°dîr
, "%s: AÇ⁄-0ÑemŸêp‹ànumbî i†", 
¨gv0
);

1843 
	`Ârötf
(
°dîr
, "required for connectxÅo work!\n");

1848 
≠å
 = 
addrs
;

1849 
i
 = 0; i < 
cou¡
; i++) {

1850 
ß_addr
 = (
sockaddr
 *)
≠å
;

1852 
ß_addr
->
ß_Ámûy
) {

1853 
AF_INET
:

1854 ((
sockaddr_ö
 *)
ß_addr
)->
sö_p‹t
 =

1855 
	`ht⁄s
(
ªmŸe_p‹t
);

1856 
≠å
 +(
sockaddr_ö
);

1858 
AF_INET6
:

1859 ((
sockaddr_ö6
 *)
ß_addr
)->
sö6_p‹t
 =

1860 
	`ht⁄s
(
ªmŸe_p‹t
);

1861 
≠å
 +(
sockaddr_ö6
);

1864 
	`Ârötf
(
°dîr
, "Invalidáddress family\n");

1869 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk
, 
addrs
, 
cou¡
, 
NULL
);

1871 i‡(
îr‹
 != 0) {

1872 i‡(
î∫o
 =
ECONNREFUSED
)

1874 
	`Ârötf
(
°dîr
, "%s:Érror connectingÅoáddrs: %s.\n",

1875 
¨gv0
, 
	`°ªº‹
(
î∫o
));

1881 
	}
}

1884 
	$¥im¨y_func
(*
¨gv0
, 
sk
, *
˝
, 
£t
)

1886 
s˘p_¥im
 
¥im
;

1887 
sockaddr_ö
 *
ö_addr
;

1888 
sockaddr_ö6
 *
ö6_addr
;

1889 
sockaddr
 *
ßddr
;

1890 
sockÀn_t
 
¥im_Àn
;

1891 
ªt
;

1892 *
p
 = 
˝
;

1893 
addr_buf
[
INET6_ADDRSTRLEN
];

1894 c⁄° *
≠
 = 
NULL
;

1896 
¥im_Àn
 = (
s˘p_¥im
);

1897 i‡(!
£t
) {

1898 
¥im
.
s•_assoc_id
 = 
associd
;

1899 
ªt
 = 
	`gësock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_PRIMARY_ADDR
,

1900 &
¥im
, &
¥im_Àn
);

1901 i‡(
ªt
 < 0)

1902 
îr
;

1904 
ßddr
 = (
sockaddr
 *)&
¥im
.
s•_addr
;

1905 i‡(
AF_INET
 =
ßddr
->
ß_Ámûy
) {

1906 
ö_addr
 = (
sockaddr_ö
 *)&
¥im
.
s•_addr
;

1907 
≠
 = 
	`öë_¡›
(
AF_INET
, &
ö_addr
->
sö_addr
, 
addr_buf
,

1908 
INET6_ADDRSTRLEN
);

1909 } i‡(
AF_INET6
 =
ßddr
->
ß_Ámûy
) {

1910 
ö6_addr
 = (
sockaddr_ö6
 *)&
¥im
.
s•_addr
;

1911 
≠
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addr
->
sö6_addr
, 
addr_buf
,

1912 
INET6_ADDRSTRLEN
);

1914 i‡(!
≠
)

1915 
îr
;

1916 
	`¥ötf
("%s\n", 
≠
);

1921 '\n' !*
p
)

1922 
p
++;

1923 *
p
 = '\0';

1925 
¥im
.
s•_assoc_id
 = 
associd
;

1926 i‡(
	`°rchr
(
˝
, '.')) {

1927 
ö_addr
 = (
sockaddr_ö
 *)&
¥im
.
s•_addr
;

1928 
ö_addr
->
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1929 
ö_addr
->
sö_Ámûy
 = 
AF_INET
;

1930 
ªt
 = 
	`öë_±⁄
 (
AF_INET
, 
˝
, &
ö_addr
->
sö_addr
);

1931 i‡(
ªt
 <= 0)

1932 
îr
;

1933 } i‡(
	`°rchr
(
˝
, ':')) {

1934 
ö6_addr
 = (
sockaddr_ö6
 *)&
¥im
.
s•_addr
;

1935 
ö6_addr
->
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1936 
ö6_addr
->
sö6_Ámûy
 = 
AF_INET6
;

1937 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
˝
, &
ö6_addr
->
sö6_addr
);

1938 i‡(
ªt
 <= 0)

1939 
îr
;

1941 
îr
;

1943 
ªt
 = 
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_PRIMARY_ADDR
,

1944 &
¥im
, (
s˘p_¥im
));

1945 i‡(
ªt
 < 0)

1946 
îr
;

1949 
îr
:

1950 i‡(!
î∫o
)

1951 
î∫o
 = 
EINVAL
;

1952 
	`Ârötf
(
°dîr
, "%s:Éº‹ %†¥im¨y: %s.\n", 
¨gv0
,

1953 (
£t
)?"£âög":"gëtög", 
	`°ªº‹
(
î∫o
));

1954 
	}
}

1957 
	$≥î_¥im¨y_func
(*
¨gv0
, 
sk
, *
˝
, 
£t
)

1959 
s˘p_£çìΩrim
 
£çìΩrim
;

1960 
sockaddr_ö
 *
ö_addr
;

1961 
sockaddr_ö6
 *
ö6_addr
;

1962 
ªt
;

1963 *
p
 = 
˝
;

1965 i‡(!
£t
) {

1966 
îr
;

1970 '\n' !*
p
)

1971 
p
++;

1972 *
p
 = '\0';

1974 
£çìΩrim
.
s•p_assoc_id
 = 
associd
;

1975 i‡(
	`°rchr
(
˝
, '.')) {

1976 
ö_addr
 = (
sockaddr_ö
 *)&
£çìΩrim
.
s•p_addr
;

1977 
ö_addr
->
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

1978 
ö_addr
->
sö_Ámûy
 = 
AF_INET
;

1979 
ªt
 = 
	`öë_±⁄
 (
AF_INET
, 
˝
, &
ö_addr
->
sö_addr
);

1980 i‡(
ªt
 <= 0)

1981 
îr
;

1982 } i‡(
	`°rchr
(
˝
, ':')) {

1983 
ö6_addr
 = (
sockaddr_ö6
 *)&
£çìΩrim
.
s•p_addr
;

1984 
ö6_addr
->
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

1985 
ö6_addr
->
sö6_Ámûy
 = 
AF_INET6
;

1986 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
˝
, &
ö6_addr
->
sö6_addr
);

1987 i‡(
ªt
 <= 0)

1988 
îr
;

1990 
îr
;

1992 
ªt
 = 
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_SET_PEER_PRIMARY_ADDR
,

1993 &
£çìΩrim
, (
s˘p_£çìΩrim
));

1994 i‡(
ªt
 < 0)

1995 
îr
;

1998 
îr
:

1999 i‡(!
î∫o
)

2000 
î∫o
 = 
EINVAL
;

2001 
	`Ârötf
(
°dîr
, "%s:Éº‹ %†≥î_¥im¨y: %s.\n", 
¨gv0
,

2002 (
£t
)?"£âög":"gëtög", 
	`°ªº‹
(
î∫o
));

2003 
	}
}

2006 
	$•p_hb_dem™d_func
(*
¨gv0
, 
sk
, *
˝
, 
£t
)

2008 
s˘p_∑ddΩ¨ams
 
∑øms
;

2009 
sockaddr_ö
 *
ö_addr
;

2010 
sockaddr_ö6
 *
ö6_addr
;

2011 
ªt
;

2012 *
p
 = 
˝
;

2014 
	`mem£t
(&
∑øms
, 0, (
s˘p_∑ddΩ¨ams
));

2015 
∑øms
.
•p_assoc_id
 = 
associd
;

2016 
∑øms
.
•p_Êags
 = 
SPP_HB_DEMAND
;

2018 i‡(
£t
) {

2020 '\n' !*
p
)

2021 
p
++;

2022 *
p
 = '\0';

2024 i‡(
	`°rchr
(
˝
, '.')) {

2025 
ö_addr
 = (
sockaddr_ö
 *)&
∑øms
.
•p_addªss
;

2026 
ö_addr
->
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

2027 
ö_addr
->
sö_Ámûy
 = 
AF_INET
;

2028 
ªt
 = 
	`öë_±⁄
(
AF_INET
, 
˝
, &
ö_addr
->
sö_addr
);

2029 i‡(
ªt
 <= 0)

2030 
îr
;

2031 } i‡(
	`°rchr
(
˝
, ':')) {

2032 
ö6_addr
 = (
sockaddr_ö6
 *)&
∑øms
.
•p_addªss
;

2033 
ö6_addr
->
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

2034 
ö6_addr
->
sö6_Ámûy
 = 
AF_INET6
;

2035 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
˝
, &
ö6_addr
->
sö6_addr
);

2036 i‡(
ªt
 <= 0)

2037 
îr
;

2039 
îr
;

2042 
ªt
 = 
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

2043 &
∑øms
, (
s˘p_∑ddΩ¨ams
));

2044 i‡(
ªt
 < 0)

2045 
îr
;

2048 
îr
:

2049 i‡(!
î∫o
)

2050 
î∫o
 = 
EINVAL
;

2051 
	`Ârötf
(
°dîr
, "%s:Éº‹ %†≥î_addr_∑øms: %s.\n", 
¨gv0
,

2052 (
£t
)?"£âög":"gëtög", 
	`°ªº‹
(
î∫o
));

2053 
	}
}

2056 
	$nodñay_func
(*
¨gv0
, 
sk
, 
vÆ
, 
£t
)

2058 
sockÀn_t
 
›éí
;

2059 
îr‹
;

2061 i‡(
£t
) {

2062 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SCTP
, 
SCTP_NODELAY
,

2063 (*)&
vÆ
, (val));

2065 
›éí
 = (
vÆ
);

2066 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SCTP
, 
SCTP_NODELAY
,

2067 (*)&
vÆ
, &
›éí
);

2069 i‡(
îr‹
 != 0) {

2070 
	`Ârötf
(
°dîr
, "%s: Error setting/gettingÇodelay: %s.\n",

2071 
¨gv0
, 
	`°ªº‹
(
î∫o
));

2072 
	`exô
(1);

2075 i‡(!
£t
) {

2076 
	`¥ötf
("nodñay i†%d.\n", 
vÆ
);

2079  
îr‹
;

2080 
	}
}

2083 
	$max£g_func
(*
¨gv0
, 
sk
, 
vÆ
, 
£t
)

2085 
sockÀn_t
 
›éí
;

2086 
îr‹
;

2088 i‡(
£t
) {

2089 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SCTP
, 
SCTP_MAXSEG
,

2090 (*)&
vÆ
, (val));

2092 
›éí
 = (
vÆ
);

2093 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SCTP
, 
SCTP_MAXSEG
,

2094 (*)&
vÆ
, &
›éí
);

2096 i‡(
îr‹
 != 0) {

2097 
	`Ârötf
(
°dîr
, "%s: Error setting/getting maxseg: %s.\n",

2098 
¨gv0
, 
	`°ªº‹
(
î∫o
));

2099 
	`exô
(1);

2102 i‡(!
£t
) {

2103 
	`¥ötf
("max£g i†%d.\n", 
vÆ
);

2106  
îr‹
;

2107 
	}
}

2110 
	$shutdown_func
(*
¨gv0
, *
skp
, 
shutdown_ty≥
)

2112 
msghdr
 
outmesßge
;

2113 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

2114 
cmsghdr
 *
cmsg
;

2115 
îr‹
=0, 
byãs_£¡
;

2116 
s˘p_¢drcvöfo
 *
söfo
;

2117 
ho°ít
 *
h°
;

2118 *
sd_ty≥
;

2119 
sk
 = *
skp
;

2121 i‡(
shutdown_ty≥
 =
SHUTDOWN_ABORT
)

2122 
sd_ty≥
 = "ABORT";

2124 
sd_ty≥
 = "SHUTDOWN";

2127 
îr‹
 = 
	`ã°_sk_f‹_assoc
(
sk
, 
associd
);

2128 i‡(
îr‹
 != 0) {

2129 
	`¥ötf
("Thêassocüti⁄ i¢'à¥e£¡ yë! C™nŸ %s!\n", 
sd_ty≥
);

2133 i‡(
sockë_ty≥
 =
SOCK_SEQPACKET
) {

2135 i‡(
ªmŸe_ho°
) {

2136 
h°
 = 
	`gëho°by«me
(
ªmŸe_ho°
);

2137 i‡(
h°
 =
NULL
) {

2138 
h°
 = 
	`gëho°by«me2
(
ªmŸe_ho°
, 
AF_INET6
);

2141 i‡(
h°
 =
NULL
 || h°->
h_Àngth
 < 1) {

2142 
	`Ârötf
(
°dîr
, "%s: bad hostname: %s\n",

2143 
¨gv0
, 
ªmŸe_ho°
);

2144 
	`exô
(1);

2147 
ø_Ámûy
 = 
h°
->
h_addπy≥
;

2148 
ø_Ámûy
) {

2149 
AF_INET
:

2150 
ø_Àn
 = (
ªmŸe_addr
.
v4
);

2151 
ø_øw
 = &
ªmŸe_addr
.
v4
.
sö_addr
;

2152 
ªmŸe_addr
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

2153 
ªmŸe_addr
.
v4
.
sö_Ámûy
 = 
AF_INET
;

2155 
AF_INET6
:

2156 
ø_Àn
 = (
ªmŸe_addr
.
v6
);

2157 
ø_øw
 = &
ªmŸe_addr
.
v6
.
sö6_addr
;

2158 
ªmŸe_addr
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

2159 
ªmŸe_addr
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

2162 
	`Ârötf
(
°dîr
, "InvalidáddressÅype.\n");

2163 
	`exô
(1);

2166 
	`mem˝y
(
ø_øw
, 
h°
->
h_addr_li°
[0], h°->
h_Àngth
);

2172 
outmesßge
.
msg_«me
 = &
ªmŸe_addr
;

2173 
outmesßge
.
msg_«mñí
 = 
ø_Àn
;

2175 
outmesßge
.
msg_iov
 = 
NULL
;

2176 
outmesßge
.
msg_iovÀn
 = 0;

2177 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

2178 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

2179 
outmesßge
.
msg_Êags
 = 0;

2181 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

2182 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

2183 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

2184 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

2185 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

2186 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

2187 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

2188 i‡(
shutdown_ty≥
 =
SHUTDOWN_ABORT
)

2189 
söfo
->
söfo_Êags
 |
SCTP_ABORT
;

2191 
söfo
->
söfo_Êags
 |
SCTP_EOF
;

2193 
söfo
->
söfo_assoc_id
 = 
associd
;

2195 
byãs_£¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, 0);

2196 i‡(
byãs_£¡
 != 0) {

2197 
	`¥ötf
("Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

2202 
	`ã°_ªcv_assoc_ch™ge
(
sk
);

2204 i‡(
shutdown_ty≥
 =
SHUTDOWN_ABORT
) {

2205 
	slögî
 {

2206 
l_⁄off
;

2207 
l_lögî
;

2208 } 
d©a
 = {1, 0};

2209 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_LINGER
,

2210 (*)&
d©a
, (data));

2211 i‡(
îr‹
 != 0) {

2212 
	`¥ötf
("£tsock›àÁûed %s\n", 
	`°ªº‹
(
î∫o
));

2213 
	`exô
(1);

2216 
îr‹
 = 
	`˛o£
(
sk
);

2217 i‡(
îr‹
 != 0) {

2218 
	`¥ötf
("˛o£ faûed %s\n", 
	`°ªº‹
(
î∫o
));

2219 
	`exô
(1);

2221 *
skp
 = 
sk
 = 
	`buûd_ídpoöt
(
¨gv0
, 
loˇl_p‹t
);

2225 
îr‹
 = 
	`ã°_sk_f‹_assoc
(
sk
, 
associd
);

2226 i‡(
îr‹
 != 0) {

2227 
	`¥ötf
("Suc˚ssfuŒy %†thê‹igöÆássocüti⁄\n", 
sd_ty≥
);

2228 
associd
 = 0;

2229 
√w_c⁄√˘i⁄
 = 1;

2231 
	`¥ötf
("%†Áûed\n", 
sd_ty≥
);

2232 
	`exô
(1);

2236 
	}
}

2239 
	$gë_assoc°©s_func
(
sk
, 
s˘p_assoc_t
 
assoc_id
)

2241 
îr‹
 = 0;

2242 
s˘p_assoc_°©s
 
°©s
;

2243 
sockÀn_t
 
Àn
;

2245 i‡(
assoc_id
 == 0) {

2246 
	`¥ötf
("NoássociationÖresent yet\n");

2250 
	`mem£t
(&
°©s
, 0, (
s˘p_assoc_°©s
));

2251 
°©s
.
ßs_assoc_id
 = 
assoc_id
;

2252 
Àn
 = (
s˘p_assoc_°©s
);

2253 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SCTP
, 
SCTP_GET_ASSOC_STATS
,

2254 (*)&
°©s
, &
Àn
);

2255 i‡(
îr‹
 != 0) {

2256 
	`¥ötf
("gë_assoc_°©s(ËÁûed %s\n", 
	`°ªº‹
(
î∫o
));

2257  
îr‹
;

2260 
	`¥ötf
("Rëønsmôãd Chunks: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_πxchunks
);

2261 
	`¥ötf
("G≠ AcknowÀdgemít†Re˚ived: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_g≠˙t
);

2262 
	`¥ötf
("TSNÑe˚ived >Çexàex≥˘ed: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_outof£qt¢s
);

2263 
	`¥ötf
("SACK†£¡: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_oßcks
);

2264 
	`¥ötf
("SACK†ª˚ived: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_ißcks
);

2265 
	`¥ötf
("C⁄åﬁ chunk†£¡: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_o˘æchunks
);

2266 
	`¥ötf
("C⁄åﬁ chunk†ª˚ived: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_i˘æchunks
);

2267 
	`¥ötf
("Ordîed d©®chunk†£¡: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_oodchunks
);

2268 
	`¥ötf
("Ordîed d©®chunk†ª˚ived: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_iodchunks
);

2269 
	`¥ötf
("Un‹dîed d©®chunk†£¡: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_ouodchunks
);

2270 
	`¥ötf
("Un‹dîed d©®chunk†ª˚ived: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_iuodchunks
);

2271 
	`¥ötf
("Dup†ª˚ived (‹dîed+un‹dîed): %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_idupchunks
);

2272 
	`¥ötf
("Packë†£¡: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_›ackës
);

2273 
	`¥ötf
("Packë†ª˚ived: %" 
PRIu64
 "\n", (
uöt64_t
Ë
°©s
.
ßs_ùackës
);

2274 
	`¥ötf
("Maximum Ob£rved RTOÅhi†≥riod: %" 
PRIu64
 " - Tøn•‹t: ", (
uöt64_t
Ë
°©s
.
ßs_maxπo
);

2275 
	`¥öt_sockaddr
((
sockaddr
 *)&
°©s
.
ßs_obs_πo_ùaddr
);

2276 
	`¥ötf
("\n");

2279 
	}
}

2282 
	$ã°_sk_f‹_assoc
(
sk
, 
s˘p_assoc_t
 
assoc_id
)

2284 
îr‹
 = 0;

2285 
s˘p_°©us
 
°©us
;

2286 
sockÀn_t
 
°©us_Àn
;

2288 
	`mem£t
(&
°©us
, 0, (status));

2289 i‡(
assoc_id
)

2290 
°©us
.
s°©_assoc_id
 = 
assoc_id
;

2291 
°©us_Àn
 = (
s˘p_°©us
);

2292 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SCTP
, 
SCTP_STATUS
,

2293 (*)&
°©us
, &
°©us_Àn
);

2294  
îr‹
;

2295 
	}
}

2300 
s˘p_assoc_t


2301 
	$ã°_ªcv_assoc_ch™ge
(
sk
)

2303 
msghdr
 
ömesßge
;

2304 
iovec
 
iov
;

2305 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

2306 
îr‹
;

2309 
	`mem£t
(&
ömesßge
, 0, (inmessage));

2310 i‡((
iov
.
iov_ba£
 = 
	`mÆloc
(
REALLY_BIG
)Ë=
NULL
) {

2311 
	`¥ötf
("%s: C™'àÆloˇã mem‹y.\n", 
__FUNCTION__
);

2312 
	`exô
(1);

2314 
iov
.
iov_Àn
 = 
REALLY_BIG
;

2315 
ömesßge
.
msg_iov
 = &
iov
;

2316 
ömesßge
.
msg_iovÀn
 = 1;

2318 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

2319 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

2321 
îr‹
 = 
	`ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
);

2322 i‡(
îr‹
 < 0) {

2323 
	`¥ötf
("%s:Ñecvmsg: %s\n", 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

2324 
	`exô
(1);

2327  
	`ã°_vîify_assoc_ch™ge
(&
ömesßge
);

2328 
	}
}

2333 
s˘p_assoc_t


2334 
	$ã°_vîify_assoc_ch™ge
(
msghdr
 *
msg
)

2336 
s˘p_nŸifiˇti⁄
 *
¢
;

2338 i‡(!(
msg
->
msg_Êags
 & 
MSG_NOTIFICATION
)) {

2339 
	`Ârötf
(
°dîr
, "%s: Received data whenÇotification isÉxpected\n",

2340 
__FUNCTION__
);

2341 
	`exô
(1);

2344 
¢
 = (
s˘p_nŸifiˇti⁄
 *)
msg
->
msg_iov
->
iov_ba£
;

2345 i‡(
SCTP_ASSOC_CHANGE
 !
¢
->
¢_hódî
.
¢_ty≥
) {

2346 
	`Ârötf
(
°dîr
, "%s: Received unexpectedÇotification: %d",

2347 
__FUNCTION__
, 
¢
->
¢_hódî
.
¢_ty≥
);

2348 
	`exô
(1);

2351 
¢
->
¢_assoc_ch™ge
.
ßc_°©e
)

2353 
SCTP_COMM_UP
:

2354 
	`¥ötf
("Received SCTP_COMM_UP\n");

2356 
SCTP_COMM_LOST
:

2357 
	`¥ötf
("Received SCTP_COMM_LOST\n");

2359 
SCTP_RESTART
:

2360 
	`¥ötf
("Received SCTP_RESTART\n");

2362 
SCTP_SHUTDOWN_COMP
:

2363 
	`¥ötf
("Received SCTP_SHUTDOWN_COMP\n");

2365 
SCTP_CANT_STR_ASSOC
:

2366 
	`¥ötf
("Received SCTP_CANT_STR_ASSOC\n");

2370 i‡(
SCTP_COMM_UP
 =
¢
->
¢_assoc_ch™ge
.
ßc_°©e
)

2371  
¢
->
¢_assoc_ch™ge
.
ßc_assoc_id
;

2374 
	}
}

2376 
	$¥öt_addr_buf
(* 
œddrs
, 
n_œddrs
)

2378 *
addr_buf
 = 
œddrs
;

2379 
i
;

2381 
i
 = 0; i < 
n_œddrs
; i++) {

2382 
addr_buf
 +
	`¥öt_sockaddr
((
sockaddr
 *)addr_buf);

2383 
	`¥ötf
("\n");

2385 
	}
}

2387 
	$¥öt_sockaddr
(
sockaddr
 *
ß_addr
)

2389 
sockaddr_ö
 *
ö_addr
;

2390 
sockaddr_ö6
 *
ö6_addr
;

2392 i‡(
AF_INET
 =
ß_addr
->
ß_Ámûy
) {

2393 
ö_addr
 = (
sockaddr_ö
 *)
ß_addr
;

2394 
	`¥ötf
("%d.%d.%d.%d:%d",

2395 
	`NIPQUAD
(
ö_addr
->
sö_addr
),

2396 
	`¡ohs
(
ö_addr
->
sö_p‹t
));

2397  (
sockaddr_ö
);

2399 
ö6_addr
 = (
sockaddr_ö6
 *)
ß_addr
;

2400 
	`¥ötf
("%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",

2401 
	`NIP6
(
ö6_addr
->
sö6_addr
),

2402 
	`¡ohs
(
ö6_addr
->
sö6_p‹t
));

2403  (
sockaddr_ö6
);

2405 
	}
}

	@sctp-tools/src/apps/sctp_darn.h

1 #i‚de‡
__s˘p_d¨n_h__


2 
	#__s˘p_d¨n_h__


	)

4 
	#REALLY_BIG
 65536

	)

5 
	#SCTP_TESTPORT_1
 1

	)

6 
	#SCTP_TESTPORT_2
 2

	)

8 
∑r£_¨gumíts
(
¨gc
, *
¨gv
[]);

9 
ußge
(*
¨gv0
);

10 
comm™d_li°í
(*
¨g0
, 
sk
);

11 
comm™d_£nd
(*
¨g0
, *
skp
);

12 
comm™d_pﬁl
(*
¨g0
);

13 
ã°_¥öt_mesßge
(
sk
, 
msghdr
 *, 
size_t
 
msg_Àn
);

16 
	mCOMMAND_NONE
 = 0,

17 
	mCOMMAND_LISTEN
,

18 
	mCOMMAND_SEND
,

19 
	mCOMMAND_POLL
,

20 } 
	tcomm™d_t
;

23 
sockaddr_°‹age
 
	mss
;

24 
sockaddr_ö
 
	mv4
;

25 
sockaddr_ö6
 
	mv6
;

26 
sockaddr
 
	mß
;

27 } 
	tsockaddr_°‹age_t
;

	@sctp-tools/src/apps/sctp_status.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/sockë.h
>

39 
	~<¨∑/öë.h
>

40 
	~<√t/if.h
>

41 
	~<√töë/s˘p.h
>

42 
	~<sig«l.h
>

43 
	~<sys/time.h
>

44 
	~<uni°d.h
>

45 
	~<î∫o.h
>

46 
	~<√tdb.h
>

47 
	~<°rög.h
>

49 
	#DEFAULT_SEC
 0

	)

50 
	#DEFAULT_USEC
 5000

	)

52 
	#REALLY_BIG
 65536

	)

54 
	#SERVER
 0

	)

55 
	#CLIENT
 1

	)

56 
	#NOT_DEFINED
 666

	)

58 
	#DEBUG_NONE
 0

	)

59 
	#DEBUG_MIN
 1

	)

60 
	#DEBUG_MAX
 2

	)

62 
	#ORDER_PATTERN_UNORDERED
 0

	)

63 
	#ORDER_PATTERN_ORDERED
 1

	)

64 
	#ORDER_PATTERN_ALTERNATE
 2

	)

65 
	#ORDER_PATTERN_RANDOM
 3

	)

67 
	#STREAM_PATTERN_SEQUENTIAL
 0

	)

68 
	#STREAM_PATTERN_RANDOM
 1

	)

70 
	#MAX_BIND_RETRYS
 10

	)

71 
	#BIG_REPEAT
 1000000

	)

72 
	#REPEAT
 10

	)

74 
	#DEFAULT_MAX_WINDOW
 32768

	)

75 
	#DEFAULT_MIN_WINDOW
 1500

	)

77 
	#MSG_CNT
 10

	)

79 
	#DEBUG_PRINT
(
Àvñ
, 
¥öt_this
...) \

81 i‡(
debug_Àvñ
 >
Àvñ
) { \

82 
	`Ârötf
(
°dout
, 
¥öt_this
); \

83 
	`fÊush
(
°dout
); \

85 }

	)

87 *
	gloˇl_ho°
 = 
NULL
;

88 
	gloˇl_p‹t
 = 0;

89 *
	gªmŸe_ho°
 = 
NULL
;

90 
	gªmŸe_p‹t
 = 0;

91 
sockaddr_°‹age
 
	gs_ªm
, 
	gs_loc
;

92 
	gr_Àn
, 
	gl_Àn
;

93 
	gsize_¨g
 = 0;

94 
	gdebug_Àvñ
 = 
DEBUG_NONE
;

95 
	g‹dî_∑âîn
 = 
ORDER_PATTERN_UNORDERED
;

96 
	g‹dî_°©e
 = 0;

97 
	g°ªam_∑âîn
 = 
STREAM_PATTERN_SEQUENTIAL
;

98 
	g°ªam_°©e
 = 0;

99 
	gª≥©
 = 
REPEAT
;

100 
	gª≥©_cou¡
 = 0;

101 
	gmax_msgsize
 = 
DEFAULT_MAX_WINDOW
;

102 
	gmsg_˙t
 = 
MSG_CNT
;

103 
	gdøö
 = 0;

104 
	gmax_°ªam
 = 0;

105 
	ggsk
 = -1;

106 
	g≥riod
 = 1;

107 *
	g°©usfûe
 = 
NULL
;

109 
¥öt°©us
(
sk
);

110 
sigh™dÀr
(
signo
);

111 
£âimîh™dÀ
();

112 
ußge
(*
¨gv0
);

113 
°¨t_ã°
(
rﬁe
);

115 
	gmsg
[] = "012345678901234567890123456789012345678901234567890";

119 
s˘p_öômsg
 
	möô
;

120 
s˘p_¢drcvöfo
 
	m¢drcvöfo
;

121 } 
	t_s˘p_cmsg_d©a_t
;

123 
	$maö
(
¨gc
, *
¨gv
[]) {

124 
c
, 
rﬁe
 = 
NOT_DEFINED
;

125 *
öãrÁ˚
 = 
NULL
;

126 
sockaddr_ö
 *
t_addr
;

127 
sockaddr_ö6
 *
t_addr6
;

130 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, ":H:L:P:h:p:c:d:lm:sx:X:o:M:Di:I:f:")) >= 0 ) {

131 
c
) {

133 
loˇl_ho°
 = 
›èrg
;

136 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

139 
ªmŸe_ho°
 = 
›èrg
;

142 
ªmŸe_p‹t
 = 
	`©oi
(
›èrg
);

145 i‡(
rﬁe
 !
NOT_DEFINED
) {

146 
	`¥ötf
("%s: o∆y -†‹ -l\n", 
¨gv
[0]);

147 
	`ußge
(
¨gv
[0]);

148 
	`exô
(1);

150 
rﬁe
 = 
SERVER
;

153 i‡(
rﬁe
 !
NOT_DEFINED
) {

154 
	`¥ötf
("%s: o∆y -†‹ -l\n", 
¨gv
[0]);

155 
	`ußge
(
¨gv
[0]);

156 
	`exô
(1);

158 
rﬁe
 = 
CLIENT
;

161 
døö
 = 1;

164 
debug_Àvñ
 = 
	`©oi
(
›èrg
);

165 i‡(
debug_Àvñ
 < 
DEBUG_NONE


166 || 
debug_Àvñ
 > 
DEBUG_MAX
) {

167 
	`ußge
(
¨gv
[0]);

168 
	`exô
(1);

172 
≥riod
 = 
	`©oi
(
›èrg
);

173 i‡(
≥riod
 < 0) {

174 
	`ußge
(
¨gv
[0]);

175 
	`exô
(1);

179 
ª≥©
 = 
	`©oi
(
›èrg
);

180 i‡(!
ª≥©
) {

181 
ª≥©
 = 
BIG_REPEAT
;

185 
msg_˙t
 = 
	`©oi
(
›èrg
);

186 i‡((
msg_˙t
 <0Ë|| (msg_˙à> 
MSG_CNT
)) {

187 
	`ußge
(
¨gv
[0]);

188 
	`exô
(1);

192 
size_¨g
 = 
	`©oi
(
›èrg
);

193 i‡(
size_¨g
 < 0) {

194 
	`ußge
(
¨gv
[0]);

195 
	`exô
(1);

200 
‹dî_∑âîn
 = 
	`©oi
(
›èrg
);

201 i‡(
‹dî_∑âîn
 < 
ORDER_PATTERN_UNORDERED


202 || 
‹dî_∑âîn
 > 
ORDER_PATTERN_RANDOM
 ) {

203 
	`ußge
(
¨gv
[0]);

204 
	`exô
(1);

208 
max_°ªam
 = 
	`©oi
(
›èrg
);

209 i‡(
max_°ªam
 < 0

210 || 
max_°ªam
 >= (1<<16)) {

211 
	`ußge
(
¨gv
[0]);

212 
	`exô
(1);

216 
max_msgsize
 = 
	`©oi
(
›èrg
);

219 
öãrÁ˚
 = 
›èrg
;

222 
°©usfûe
 = 
›èrg
;

226 
	`ußge
(
¨gv
[0]);

227 
	`exô
(0);

231 i‡(
NOT_DEFINED
 =
rﬁe
) {

232 
	`ußge
(
¨gv
[0]);

233 
	`exô
(1);

236 i‡(
SERVER
 =
rﬁe
 && 
NULL
 =
loˇl_ho°
 && 
ªmŸe_ho°
 != NULL) {

237 
	`Ârötf
(
°dîr
, "%s: ServerÇeedsÜocaláddress, "

238 "nŸÑemŸêaddªss\n", 
¨gv
[0]);

239 
	`ußge
(
¨gv
[0]);

240 
	`exô
(1);

242 i‡(
CLIENT
 =
rﬁe
 && 
NULL
 =
ªmŸe_ho°
) {

243 
	`Ârötf
(
°dîr
, "%s: ClientÇeedsátÜeastÑemoteáddress "

244 "&Ö‹t\n", 
¨gv
[0]);

245 
	`ußge
(
¨gv
[0]);

246 
	`exô
(1);

249 i‡(
›töd
 < 
¨gc
) {

250 
	`Ârötf
(
°dîr
, "%s:Ç⁄-›ti⁄árgumít†¨êûÀgÆ: ", 
¨gv
[0]);

251 
›töd
 < 
¨gc
)

252 
	`Ârötf
(
°dîr
, "%†", 
¨gv
[
›töd
++]);

253 
	`Ârötf
 (
°dîr
, "\n");

254 
	`ußge
(
¨gv
[0]);

255 
	`exô
(1);

258 i‡(
ªmŸe_ho°
 !
NULL
 && 
ªmŸe_p‹t
 != 0) {

259 
addröfo
 *
ªs
;

260 
îr‹
;

261 *
ho°_s
, *
£rv_s
;

263 i‡((
ho°_s
 = 
	`mÆloc
(
NI_MAXHOST
)Ë=
NULL
) {

264 
	`Ârötf
(
°dîr
, "\n*** host_s malloc failed!!! ***\n");

265 
	`exô
(1);

267 i‡((
£rv_s
 = 
	`mÆloc
(
NI_MAXSERV
)Ë=
NULL
) {

268 
	`Ârötf
(
°dîr
, "\n*** serv_s malloc failed!!! ***\n");

269 
	`exô
(1);

272 
îr‹
 = 
	`gëaddröfo
(
ªmŸe_ho°
, 0, 
NULL
, &
ªs
);

273 i‡(
îr‹
) {

274 
	`¥ötf
("%s.\n", 
	`gai_°ªº‹
(
îr‹
));

275 
	`ußge
(
¨gv
[0]);

276 
	`exô
(1);

279 
ªs
->
ai_Ámûy
) {

280 
AF_INET
:

281 
t_addr
 = (
sockaddr_ö
 *)&
s_ªm
;

283 
t_addr
->
sö_Ámûy
 = 
AF_INET
;

284 
t_addr
->
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

285 
	`öë_±⁄
(
AF_INET
, 
ªmŸe_ho°
, &
t_addr
->
sö_addr
);

287 
r_Àn
 =  (
sockaddr_ö
);

288 #ifde‡
__FªeBSD__


289 
t_addr
->
sö_Àn
 = 
r_Àn
;

292 
AF_INET6
:

293 
t_addr6
 = (
sockaddr_ö6
 *)&
s_ªm
;

295 i‡(
öãrÁ˚
)

296 
t_addr6
->
sö6_sc›e_id
 = 
	`if_«mëoödex
(
öãrÁ˚
);

297 
t_addr6
->
sö6_Ámûy
 = 
AF_INET6
;

298 
t_addr6
->
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

299 
	`öë_±⁄
(
AF_INET6
, 
ªmŸe_ho°
, &
t_addr6
->
sö6_addr
);

301 
r_Àn
 =  (
sockaddr_ö6
);

303 #ifde‡
__FªeBSD__


304 
t_addr6
->
sö6_Àn
 = 
r_Àn
;

309 
	`gë«meöfo
((
sockaddr
 *)&
s_ªm
, 
r_Àn
, 
ho°_s
,

310 
NI_MAXHOST
, 
£rv_s
, 
NI_MAXSERV
, 
NI_NUMERICHOST
);

312 
	`DEBUG_PRINT
(
DEBUG_MAX
, "remote:addr=%s,Öort=%s, family=%d\n",

313 
ho°_s
, 
£rv_s
, 
ªs
->
ai_Ámûy
);

316 i‡(
loˇl_ho°
 !
NULL
) {

317 
addröfo
 *
ªs
;

318 
îr‹
;

319 *
ho°_s
, *
£rv_s
;

320 
sockaddr_ö
 *
t_addr
;

321 
sockaddr_ö6
 *
t_addr6
;

323 i‡((
ho°_s
 = 
	`mÆloc
(
NI_MAXHOST
)Ë=
NULL
) {

324 
	`Ârötf
(
°dîr
, "\n*** host_s malloc failed!!! ***\n");

325 
	`exô
(1);

327 i‡((
£rv_s
 = 
	`mÆloc
(
NI_MAXSERV
)Ë=
NULL
) {

328 
	`Ârötf
(
°dîr
, "\n*** serv_s malloc failed!!! ***\n");

329 
	`exô
(1);

332 i‡(
	`°rcmp
(
loˇl_ho°
, "0") == 0)

333 
loˇl_ho°
 = "0.0.0.0";

335 
îr‹
 = 
	`gëaddröfo
(
loˇl_ho°
, 0, 
NULL
, &
ªs
);

336 i‡(
îr‹
) {

337 
	`¥ötf
("%s.\n", 
	`gai_°ªº‹
(
îr‹
));

338 
	`ußge
(
¨gv
[0]);

339 
	`exô
(1);

342 
ªs
->
ai_Ámûy
) {

343 
AF_INET
:

344 
t_addr
 = (
sockaddr_ö
 *)&
s_loc
;

345 
t_addr
->
sö_Ámûy
 = 
AF_INET
;

346 
t_addr
->
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

347 
	`öë_±⁄
(
AF_INET
, 
loˇl_ho°
, &
t_addr
->
sö_addr
);

349 
l_Àn
 =  (
sockaddr_ö
);

350 #ifde‡
__FªeBSD__


351 
t_addr
->
sö_Àn
 = 
l_Àn
;

354 
AF_INET6
:

355 
t_addr6
 = (
sockaddr_ö6
 *)&
s_loc
;

357 i‡(
öãrÁ˚
)

358 
t_addr6
->
sö6_sc›e_id
 = 
	`if_«mëoödex
(
öãrÁ˚
);

359 
t_addr6
->
sö6_Ámûy
 = 
AF_INET6
;

360 
t_addr6
->
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

362 
	`öë_±⁄
(
AF_INET6
, 
loˇl_ho°
, &
t_addr6
->
sö6_addr
);

364 
l_Àn
 =  (
sockaddr_ö6
);

366 #ifde‡
__FªeBSD__


367 
t_addr6
->
sö6_Àn
 = 
l_Àn
;

372 
îr‹
 = 
	`gë«meöfo
((
sockaddr
 *)&
s_loc
, 
l_Àn
, 
ho°_s
,

373 
NI_MAXHOST
, 
£rv_s
, 
NI_MAXSERV
, 
NI_NUMERICHOST
);

375 i‡(
îr‹
)

376 
	`¥ötf
("%s..\n", 
	`gai_°ªº‹
(
îr‹
));

378 
	`DEBUG_PRINT
(
DEBUG_MAX
, "local:addr=%s,Öort=%s, family=%d\n",

379 
ho°_s
, 
£rv_s
, 
ªs
->
ai_Ámûy
);

383 
	`°¨t_ã°
(
rﬁe
);

386 
	}
}

388 
	$böd_r
(
sk
, 
sockaddr_°‹age
 *
ßddr
) {

389 
îr‹
 = 0, 
i
 = 0;

390 *
ho°_s
, *
£rv_s
;

392 i‡((
ho°_s
 = 
	`mÆloc
(
NI_MAXHOST
)Ë=
NULL
) {

393 
	`Ârötf
(
°dîr
, "\n\t\t*** host_s malloc failed!!! ***\n");

394 
	`exô
(1);

396 i‡((
£rv_s
 = 
	`mÆloc
(
NI_MAXSERV
)Ë=
NULL
) {

397 
	`Ârötf
(
°dîr
, "\n\t\t*** serv_s malloc failed!!! ***\n");

398 
	`exô
(1);

402 i‡(
i
 > 0Ë
	`¶ìp
(1);

404 
îr‹
 = 
	`gë«meöfo
((
sockaddr
 *)
ßddr
, 
l_Àn
, 
ho°_s
,

405 
NI_MAXHOST
, 
£rv_s
, 
NI_MAXSERV
,

406 
NI_NUMERICHOST
);

408 i‡(
îr‹
)

409 
	`¥ötf
("%s\n", 
	`gai_°ªº‹
(
îr‹
));

411 
	`DEBUG_PRINT
(
DEBUG_MIN
,

413 
sk
, 
ho°_s
, 
£rv_s
, 
i
+1, 
MAX_BIND_RETRYS
);

415 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *)
ßddr
, 
l_Àn
);

417 i‡(
îr‹
 != 0) {

418 if–
î∫o
 !
EADDRINUSE
 ) {

419 
	`Ârötf
(
°dîr
, "\n\n\t\t***bind: can "

421 
ho°_s
, 
£rv_s
, 
	`°ªº‹
(
î∫o
));

422 
	`exô
(1);

425 
i
++;

426 i‡(
i
 >
MAX_BIND_RETRYS
) {

427 
	`Ârötf
(
°dîr
, "Maximum bind()áttempts. "

429 
	`exô
(1);

431 } 
îr‹
 < 0 && 
i
 < 
MAX_BIND_RETRYS
);

434 
	}
}

436 
	$li°í_r
(
sk
, 
li°í_cou¡
) {

437 
îr‹
 = 0;

439 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tlisten(sk=%d,backlog=%d)\n",

440 
sk
, 
li°í_cou¡
);

443 
îr‹
 = 
	`li°í
(
sk
, 1);

444 i‡(
îr‹
 != 0) {

445 
	`Ârötf
(
°dîr
, "\n\n\t\t***Üi°í: %†***\n\n\n", 
	`°ªº‹
(
î∫o
));

446 
	`exô
(1);

450 
	}
}

452 
	$ac˚±_r
(
sk
){

453 
sockÀn_t
 
Àn
 = 0;

455 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\èc˚±(sk=%d)\n", 
sk
);

457 
gsk
 = 
	`ac˚±
(
sk
, 
NULL
, &
Àn
);

458 i‡(
gsk
 < 0) {

459 
	`Ârötf
(
°dîr
, "\n\n\t\t***ác˚±: %†***\n\n\n", 
	`°ªº‹
(
î∫o
));

460 
	`exô
(1);

464 
	}
}

466 
	$c⁄√˘_r
(
sk
, c⁄° 
sockaddr
 *
£rv_addr
, 
sockÀn_t
 
addæí
) {

467 
îr‹
 = 0;

469 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tc⁄√˘(sk=%d)\n", 
sk
);

472 
îr‹
 = 
	`c⁄√˘
(
sk
, 
£rv_addr
, 
addæí
);

473 i‡(
îr‹
 != 0) {

474 
	`Ârötf
(
°dîr
, "\n\n\t\t*** connect: %s ***\n\n\n",

475 
	`°ªº‹
(
î∫o
));

476 
	`exô
(1);

479 
gsk
 = 
sk
;

482 
	}
}

484 
	$˛o£_r
(
sk
) {

485 
îr‹
 = 0;

487 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\t˛o£(sk=%d)\n",
sk
);

489 
îr‹
 = 
	`˛o£
(
sk
);

490 i‡(
îr‹
 != 0) {

491 
	`Ârötf
(
°dîr
, "\n\n\t\t*** close: %s ***\n\n",

492 
	`°ªº‹
(
î∫o
));

493 
	`exô
(1);

495 
	`fÊush
(
°dout
);

497 
	}
}

499 
	$ª˚ive_r
(
sk
)

501 
îr‹
 = 0;

502 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

503 
iovec
 
iov
;

504 
msghdr
 
ömesßge
;

507 
	`mem£t
(&
ömesßge
, 0, (inmessage));

508 i‡((
iov
.
iov_ba£
 = 
	`mÆloc
(
REALLY_BIG
)Ë=
NULL
) {

509 
	`Ârötf
(
°dîr
, "\n\t\t*** mallocÇotÉnough memory!!! ***\n");

510 
	`exô
(1);

512 
iov
.
iov_Àn
 = 
REALLY_BIG
;

513 
ömesßge
.
msg_iov
 = &
iov
;

514 
ömesßge
.
msg_iovÀn
 = 1;

516 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

517 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

521 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\åecvmsg(sk=%dË", 
sk
);

523 
îr‹
 = 
	`ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
);

524 i‡(
îr‹
 < 0 &&Éº‹ !
EAGAIN
) {

525 
	`Ârötf
(
°dîr
, "\n\t\t***Ñecvmsg: %s ***\n\n",

526 
	`°ªº‹
(
î∫o
));

527 
	`fÊush
(
°dout
);

528 
	`˛o£
(
sk
);

529 
	`‰ì
(
iov
.
iov_ba£
);

530 
	`exô
(1);

531 } i‡(
îr‹
 == 0) {

532 
	`¥ötf
("\n\t\trecvmsg()Ñeturned 0 !!!!\n");

533 
	`fÊush
(
°dout
);

536 if(
MSG_NOTIFICATION
 & 
ömesßge
.
msg_Êags
)

539 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

540 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

541 
iov
.
iov_Àn
 = 
REALLY_BIG
;

545 
	`‰ì
(
iov
.
iov_ba£
);

547 
	}
}

549 
	$£rvî
(
sk
) {

550 
i
;

552 i‡(
max_msgsize
 > 
DEFAULT_MAX_WINDOW
) {

553 i‡(
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SO_RCVBUF
, &
max_msgsize
,

554 (
max_msgsize
)) < 0) {

555 
	`≥º‹
("setsockopt(SO_RCVBUF)");

556 
	`exô
(1);

560 
i
 = 0; i < 
msg_˙t
; i++) {

561 
	`ª˚ive_r
(
sk
);

562 
	`DEBUG_PRINT
(
DEBUG_MIN
, "cou¡ %d\n", 
i
+1);

564 
	}
}

566 * 
	$buûd_msg
(
Àn
) {

567 
i
 = 
Àn
 - 1;

568 
n
;

569 *
msg_buf
, *
p
;

571 
msg_buf
 = 
	`mÆloc
(
Àn
);

572 i‡(
NULL
 =
msg_buf
) {

573 
	`Ârötf
(
°dîr
, "\n\t\t*** mallocÇotÉnough memory!!! ***\n");

574 
	`exô
(1);

576 
p
 = 
msg_buf
;

579 
n
 = ((
i
 > 50)?50:i);

580 
	`mem˝y
(
p
, 
msg
, ((
i
 > 50)?50:i));

581 
p
 +
n
;

582 
i
 -
n
;

583 } 
i
 > 0);

585 
msg_buf
[
Àn
-1] = '\0';

587 (
msg_buf
);

589 
	}
}

591 
	$£nd_r
(
sk
, 
°ªam
, 
‹dî
, 
£nd_size
, 
assoc_i
) {

592 
îr‹
 = 0;

593 
msghdr
 
outmsg
;

594 
iovec
 
iov
;

595 *
mesßge
 = 
NULL
;

596 
msgÀn
 = 0;

597 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

598 
cmsghdr
 *
cmsg
;

599 
s˘p_¢drcvöfo
 *
söfo
;

601 i‡(
£nd_size
 > 0) {

602 
mesßge
 = 
	`buûd_msg
(
£nd_size
);

603 
msgÀn
 = 
	`°æí
(
mesßge
) + 1;

604 
iov
.
iov_ba£
 = 
mesßge
;

605 
iov
.
iov_Àn
 = 
msgÀn
;

607 
	`exô
(1);

610 
outmsg
.
msg_«me
 = &
s_ªm
;

611 
outmsg
.
msg_«mñí
 = (
sockaddr_°‹age
);

612 
outmsg
.
msg_iov
 = &
iov
;

613 
outmsg
.
msg_iovÀn
 = 1;

614 
outmsg
.
msg_c⁄åﬁ
 = 
outcmsg
;

615 
outmsg
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

616 
outmsg
.
msg_Êags
 = 0;

618 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmsg
);

619 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

620 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

621 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

623 
outmsg
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

624 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

625 
	`mem£t
(
söfo
, 0, (
s˘p_¢drcvöfo
));

626 
söfo
->
söfo_µid
 = 
	`ønd
();

627 
söfo
->
söfo_°ªam
 = 
°ªam
;

628 
söfo
->
söfo_Êags
 = 0;

629 i‡(!
‹dî
)

630 
söfo
->
söfo_Êags
 = 
SCTP_UNORDERED
;

632 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tsendmsg(sk=%d,ássoc=%d) %4d bytes.\n",

633 
sk
, 
assoc_i
, 
£nd_size
);

634 
	`DEBUG_PRINT
(
DEBUG_MAX
, "\t SNDRCV");

635 i‡(
DEBUG_MAX
 =
debug_Àvñ
) {

636 
	`¥ötf
("(°ªam=%u ", 
söfo
->
söfo_°ªam
);

637 
	`¥ötf
("Êags=0x%x ", 
söfo
->
söfo_Êags
);

638 
	`¥ötf
("µid=%u)\n", 
söfo
->
söfo_µid
);

642 
îr‹
 = 
	`£ndmsg
(
sk
, &
outmsg
, 
MSG_WAITALL
);

643 i‡(
îr‹
 !
msgÀn
) {

644 
	`Ârötf
(
°dîr
, "\n\t\t*** sendmsg: %s ***\n\n",

645 
	`°ªº‹
(
î∫o
));

646 
	`fÊush
(
°dout
);

647 
	`exô
(1);

650 i‡(
£nd_size
 > 0Ë
	`‰ì
(
mesßge
);

652 
	}
}

654 
	$√xt_‹dî
(
°©e
, 
∑âîn
)

656 
∑âîn
){

657 
ORDER_PATTERN_UNORDERED
:

658 
°©e
 = 0;

660 
ORDER_PATTERN_ORDERED
:

661 
°©e
 = 1;

663 
ORDER_PATTERN_ALTERNATE
:

664 
°©e
 = state ? 0 : 1;

666 
ORDER_PATTERN_RANDOM
:

667 
°©e
 = 
	`ønd
() % 2;

671  
°©e
;

672 
	}
}

674 
	$√xt_°ªam
(
°©e
, 
∑âîn
)

676 
∑âîn
){

677 
STREAM_PATTERN_RANDOM
:

678 
°©e
 = 
	`ønd
(Ë% 
max_°ªam
;

680 
STREAM_PATTERN_SEQUENTIAL
:

681 
°©e
 = state + 1;

682 i‡(
°©e
 >
max_°ªam
)

683 
°©e
 = 0;

687  
°©e
;

688 
	}
}

690 
	$√xt_msg_size
(
msg_˙t
)

692 
msg_size
;

694 i‡(
size_¨g
) {

695 
msg_size
 = 
size_¨g
;

697 
msg_size
 = (
	`ønd
(Ë% 
max_msgsize
) + 1;

700  
msg_size
;

702 
	}
}

704 
	$˛õ¡
(
sk
) {

705 
msg_size
;

706 
i
;

708 
i
 = 0; i < 
msg_˙t
; i++) {

709 
msg_size
 = 
	`√xt_msg_size
(
i
);

710 
‹dî_°©e
 = 
	`√xt_‹dî
(‹dî_°©e, 
‹dî_∑âîn
);

711 
°ªam_°©e
 = 
	`√xt_°ªam
(°ªam_°©e, 
°ªam_∑âîn
);

713 i‡(
	`£nd_r
(
sk
, 
°ªam_°©e
, 
‹dî_°©e
, 
msg_size
, 0) < 0) {

714 
	`˛o£
(
sk
);

719 i‡(
døö
 && ((
i
 + 1Ë% 
≥riod
 == 0)) {

720 
	`ª˚ive_r
(
sk
);

723 
	}
}

725 
	$°¨t_ã°
(
rﬁe
) {

726 
sk
, 
pid
, 
ªt
;

727 
i
 = 0;

729 
	`DEBUG_PRINT
(
DEBUG_NONE
, "\nStartingÅests...\n");

731 
ª≥©_cou¡
 = 
ª≥©
;

733 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tsocket(SOCK_STREAM, IPPROTO_SCTP)");

735 i‡((
sk
 = 
	`sockë
(
s_loc
.
ss_Ámûy
, 
SOCK_STREAM
, 
IPPROTO_SCTP
)) < 0 ) {

736 
	`Ârötf
(
°dîr
, "\n\n\t\t*** socket: failedÅo create"

737 " sockë: %†***\n", 
	`°ªº‹
(
î∫o
));

738 
	`exô
(1);

740 
	`DEBUG_PRINT
(
DEBUG_MIN
, " -> sk=%d\n", 
sk
);

742 
	`böd_r
(
sk
, &
s_loc
);

744 i‡(
rﬁe
 =
SERVER
) {

745 
	`li°í_r
(
sk
, 1);

746 
	`ac˚±_r
(
sk
);

748 i‡(
max_°ªam
 > 0) {

749 
s˘p_öômsg
 
öômsg
;

751 
	`mem£t
(&
öômsg
, 0, (initmsg));

752 
öômsg
.
söô_num_o°ªams
 = 
max_°ªam
;

753 
öômsg
.
söô_max_ö°ªams
 = 
max_°ªam
;

754 
öômsg
.
söô_max_©ãm±s
 = 3;

756 
ªt
 = 
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_INITMSG
,

757 &
öômsg
, (initmsg));

758 i‡(
ªt
 < 0) {

759 
	`≥º‹
("setsockopt(SCTP_INITMSG)");

760 
	`exô
(0);

764 
	`c⁄√˘_r
(
sk
, (
sockaddr
 *)&
s_ªm
, 
r_Àn
);

767 i‡((
pid
 = 
	`f‹k
()) == 0) {

768 
	`£âimîh™dÀ
();

769 
	`¥öt°©us
(
gsk
);

772 i‡(!
debug_Àvñ
) {

773 
	`¥ötf
(" ");

776 
i
 = 0; i < 
ª≥©_cou¡
; i++) {

778 i‡(
rﬁe
 =
SERVER
) {

779 
	`DEBUG_PRINT
(
DEBUG_NONE
, "Server: ReceivingÖackets.(%d/%d)\n",

780 
i
+1, 
ª≥©_cou¡
);

781 
	`£rvî
(
gsk
);

783 
	`DEBUG_PRINT
(
DEBUG_NONE
, "Client: SendingÖackets.(%d/%d)\n",

784 
i
+1, 
ª≥©_cou¡
);

785 
	`˛õ¡
(
sk
);

788 
	`fÊush
(
°dout
);

791 i‡(
rﬁe
 =
SERVER
Ë
	`˛o£_r
(
gsk
);

792 
	`˛o£_r
(
sk
);

794 
	}
}

796 
	$£âimîh™dÀ
() {

797 
siga˘i⁄
 
a˘
;

798 
ôimîvÆ
 
öãrvÆ
;

800 
a˘
.
ß_h™dÀr
 = 
sigh™dÀr
;

801 
a˘
.
ß_Êags
 = 0;

802 
	`sigem±y£t
(&
a˘
.
ß_mask
);

803 
	`siga˘i⁄
(
SIGPROF
, &
a˘
, 
NULL
);

805 
öãrvÆ
.
ô_vÆue
.
tv_£c
 = 
DEFAULT_SEC
;

806 
öãrvÆ
.
ô_vÆue
.
tv_u£c
 = 
DEFAULT_USEC
;

807 
öãrvÆ
.
ô_öãrvÆ
 = i¡îvÆ.
ô_vÆue
;

809 
	`£tôimî
(
ITIMER_PROF
, &
öãrvÆ
, 
NULL
);

810 
	}
}

812 
	$ußge
(*
¨gv0
) {

813 
	`Ârötf
(
°dîr
, "\nusage:\n");

814 
	`Ârötf
(
°dîr
, " server:\n");

815 
	`Ârötf
(
°dîr
, " %8s -HÜocal-addr -PÜocal-port -l [-dÜevel] [-x]\n"

820 
¨gv0
);

821 
	`Ârötf
(
°dîr
, "\n");

822 
	`Ârötf
(
°dîr
, " client:\n");

823 
	`Ârötf
(
°dîr
, " %8s -HÜocal-addr -PÜocal-port -hÑemote-addr\n"

831 
¨gv0
);

832 
	`Ârötf
(
°dîr
, "\n");

833 
	`Ârötf
(
°dîr
, "\t-c value = Packets of specifed size.\n");

834 
	`Ârötf
(
°dîr
, "\t-m msgsize(1500-65515, default value 32768)\n");

835 
	`Ârötf
(
°dîr
, "\t-xÇumber ofÑepeats\n");

836 
	`Ârötf
(
°dîr
, "\t-XÇumber of messages\n");

837 
	`Ârötf
(
°dîr
, "\t-o order-pattern\n");

838 
	`Ârötf
(
°dîr
, "\t 0 =áll unordered(default) \n");

839 
	`Ârötf
(
°dîr
, "\t 1 =áll ordered \n");

840 
	`Ârötf
(
°dîr
, "\t 2 =álternating \n");

841 
	`Ârötf
(
°dîr
, "\t 3 =Ñandom\n");

842 
	`Ârötf
(
°dîr
, "\t-M max-stream (default value 0)\n");

843 
	`Ârötf
(
°dîr
, "\t-D drain. If in client mode doáÑead following send.\n");

844 
	`Ârötf
(
°dîr
, "\t-IÑeceiveáfter <n>Åimes of send, default value 1.\n");

845 
	`Ârötf
(
°dîr
, "\n");

846 
	`fÊush
(
°dîr
);

848 
	}
}

850 
	$sigh™dÀr
(
signo
) {

851 
	`DEBUG_PRINT
(
DEBUG_MAX
, "timeout sig\n");

852 
	`¥öt°©us
(
gsk
);

853 
	}
}

855 * 
	$gë_s°©_°©e
(
°©e
) {

856 
°©e
) {

857 
SCTP_EMPTY
:

859 
SCTP_CLOSED
:

861 
SCTP_COOKIE_WAIT
:

863 
SCTP_COOKIE_ECHOED
:

865 
SCTP_ESTABLISHED
:

867 
SCTP_SHUTDOWN_PENDING
:

869 
SCTP_SHUTDOWN_SENT
:

871 
SCTP_SHUTDOWN_RECEIVED
:

873 
SCTP_SHUTDOWN_ACK_SENT
:

878 
	}
}

880 
	$¥öt°©us
(
sk
) {

881 
cwnd
 = 0;

882 
cou¡
 = 0;

883 
s˘p_°©us
 
°©us
;

884 
sockÀn_t
 
›éí
;

885 
FILE
 * 
Â
;

886 c⁄° *
°©e_to_°r
[] = {

887 [
SCTP_INACTIVE
] = "INACTIVE",

888 [
SCTP_PF
] = "PF",

889 [
SCTP_ACTIVE
] = "ACTIVE",

890 [
SCTP_UNCONFIRMED
] = "UNCONFIRMED",

893 
›éí
 = (
s˘p_°©us
);

894 if(
	`gësock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_STATUS
, &
°©us
, &
›éí
) < 0) {

895 
	`Ârötf
(
°dîr
, "Eº‹ gëtög sètus: %s.\n", 
	`°ªº‹
(
î∫o
));

896 
	`exô
(1);

899 i‡(
°©usfûe
 !
NULL
) {

900 i‡(
cou¡
 == 0)

901 
	`u∆ök
(
°©usfûe
);

903 if((
Â
 = 
	`f›í
(
°©usfûe
, "a+")Ë=
NULL
) {

904 
	`≥º‹
("fopen");

905 
	`exô
(1);

908 
Â
 = 
°dout
;

910 i‡(
cou¡
 == 0)

911 
	`Ârötf
(
Â
, "NO. ASSOC-ID STATE RWND UNACKDATA PENDDATA INSTRMS OUTSTRMS "

914 i‡(
cwnd
 !
°©us
.
s°©_¥im¨y
.
•öfo_cwnd
) {

915 
cou¡
++;

917 
	`Ârötf
(
Â
, "%-3d %-8d %-17†%-8d %-9d %-8d %-7d %-8d %-10d %-12†%-11d %-11d %-10d %d\n", 
cou¡
,

918 
°©us
.
s°©_assoc_id
, 
	`gë_s°©_°©e
(°©us.
s°©_°©e
),

919 
°©us
.
s°©_rwnd
, sètus.
s°©_u«ckd©a
, sètus.
s°©_≥ndd©a
,

920 
°©us
.
s°©_ö°rms
, sètus.
s°©_out°rms
, sètus.
s°©_‰agmíèti⁄_poöt
,

921 
°©e_to_°r
[
°©us
.
s°©_¥im¨y
.
•öfo_°©e
],

922 
°©us
.
s°©_¥im¨y
.
•öfo_cwnd
, sètus.s°©_¥im¨y.
•öfo_§â
,

923 
°©us
.
s°©_¥im¨y
.
•öfo_πo
, sètus.s°©_¥im¨y.
•öfo_mtu
);

926 
cwnd
 = 
°©us
.
s°©_¥im¨y
.
•öfo_cwnd
;

928 
	`fÊush
(
Â
);

930 i‡(
Â
 !
°dout
)

931 
	`f˛o£
(
Â
);

933 i‡(
°©us
.
s°©_¥im¨y
.
•öfo_°©e
 !
SCTP_ACTIVE
) {

934 
	`˛o£_r
(
sk
);

935 
	`exô
(1);

937 
	}
}

	@sctp-tools/src/apps/sctp_test.c

42 
	~<˘y≥.h
>

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<uni°d.h
>

46 
	~<time.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/uio.h
>

50 
	~<√töë/ö.h
>

51 
	~<î∫o.h
>

52 
	~<√töë/s˘p.h
>

53 
	~<°rög.h
>

54 
	~<¨∑/öë.h
>

55 
	~<sys/waô.h
>

56 
	~<sys/∑øm.h
>

57 
	~<f˙é.h
>

58 
	~<√tdb.h
>

59 
	~<√t/if.h
>

61 
	~<sys/ªsour˚.h
>

64 
	#REALLY_BIG
 65536

	)

66 
	#SERVER
 0

	)

67 
	#CLIENT
 1

	)

68 
	#MIXED
 2

	)

69 
	#NOT_DEFINED
 666

	)

71 
	#REPEAT
 10

	)

72 
	#BIG_REPEAT
 1000000

	)

73 
	#MAX_BIND_RETRYS
 10

	)

74 
	#BODYSIZE
 10

	)

75 
	#MSG_CNT
 10

	)

78 
	#DEFAULT_MAX_WINDOW
 32768

	)

79 
	#DEFAULT_MIN_WINDOW
 1500

	)

81 
	#DEBUG_NONE
 0

	)

82 
	#DEBUG_MIN
 1

	)

83 
	#DEBUG_MAX
 2

	)

85 
	#STREAM_PATTERN_SEQUENTIAL
 0

	)

86 
	#STREAM_PATTERN_RANDOM
 1

	)

88 
	#ORDER_PATTERN_UNORDERED
 0

	)

89 
	#ORDER_PATTERN_ORDERED
 1

	)

90 
	#ORDER_PATTERN_ALTERNATE
 2

	)

91 
	#ORDER_PATTERN_RANDOM
 3

	)

93 
	#ASSOC_PATTERN_SEQUENTIAL
 0

	)

94 
	#ASSOC_PATTERN_RANDOM
 1

	)

96 
	#NCASES
 6

	)

97 
	#MAX_POLL_SKS
 256

	)

99 
	#DEBUG_PRINT
(
Àvñ
, 
¥öt_this
...) \

101 i‡(
debug_Àvñ
 >
Àvñ
) { \

102 
	`Ârötf
(
°dout
, 
¥öt_this
); \

103 
	`fÊush
(
°dout
); \

105 }

	)

109 
s˘p_öômsg
 
	möô
;

110 
s˘p_¢drcvöfo
 
	m¢drcvöfo
;

111 } 
	t_s˘p_cmsg_d©a_t
;

113 #ifde‡
__FªeBSD__


115 
	møw
;

116 
s˘p_öômsg
 
	möô
;

117 
s˘p_¢drcvöfo
 
	m¢drcv
;

118 } 
	ts˘p_cmsg_d©a_t
;

121 
	#CMSG_SPACE_INITMSG
 (
	`CMSG_SPACE
((
s˘p_öômsg
)))

	)

122 
	#CMSG_SPACE_SNDRCV
 (
	`CMSG_SPACE
((
s˘p_¢drcvöfo
)))

	)

125 
	mªm_p‹t
;

126 
	m‹dî_°©e
;

127 
	m°ªam_°©e
;

128 
	mmsg_˙t
;

129 
	mmsg_£¡
;

130 
	mcy˛e
;

131 } 
	t_assoc_°©e
;

134 
	msk
;

135 
	massoc_i
;

136 
_assoc_°©e
 *
	massoc_°©e
;

137 } 
	t_pﬁl_sks
;

139 *
	gloˇl_ho°
 = 
NULL
;

140 
	gloˇl_p‹t
 = 0;

141 *
	gªmŸe_ho°
 = 
NULL
;

142 
	gªmŸe_p‹t
 = 0;

144 
sockaddr_°‹age
 
	gs_ªm
, 
	gs_loc
;

145 
	gr_Àn
, 
	gl_Àn
;

146 
	gã°_ˇ£
 = 0;

147 
	gsize_¨g
 = 0;

148 
	gxÊag
 = 0;

149 
	gdebug_Àvñ
 = 
DEBUG_MAX
;

150 
	gdo_exô
 = 1;

151 
	g°ªam_∑âîn
 = 
STREAM_PATTERN_SEQUENTIAL
;

152 
	g°ªam_°©e
 = 0;

153 
	g‹dî_∑âîn
 = 
ORDER_PATTERN_UNORDERED
;

154 
	g‹dî_°©e
 = 0;

155 
	gmax_°ªam
 = 0;

156 
	g£ed
 = 0;

157 
	gmax_msgsize
 = 
DEFAULT_MAX_WINDOW
;

158 
	gtimëﬁive
 = 0;

159 
	gassoc_∑âîn
 = 
ASSOC_PATTERN_SEQUENTIAL
;

160 
	gsockë_ty≥
 = 
SOCK_SEQPACKET
;

161 
	gª≥©_cou¡
 = 0;

162 
	gli°íîs
 = 0;

163 
	gto£nd
 = 0;

164 
_pﬁl_sks
 
	gpﬁl_sks
[
MAX_POLL_SKS
];

165 
	gª≥©
 = 
REPEAT
;

166 
	gmsg_˙t
 = 
MSG_CNT
;

167 
	gdøö
 = 0;

168 
	grﬁe
 = 
NOT_DEFINED
;

169 
sockaddr
 *
	gbödx_add_addrs
 = 
NULL
;

170 
	gbödx_add_cou¡
 = 0;

171 
sockaddr
 *
	gc⁄√˘x_addrs
 = 
NULL
;

172 
	gc⁄√˘x_cou¡
 = 0;

173 
	gif_ödex
 = 0;

175 
	gmsg
[] = "012345678901234567890123456789012345678901234567890";

177 
	gmsg_sizes
[
NCASES
][
MSG_CNT
] =

186 c⁄° *
	gßc_°©e_tbl
[] = {

194 
	$ußge
(*
¨gv0
)

196 
	`Ârötf
(
°dîr
, "\nusage:\n");

197 
	`Ârötf
(
°dîr
, " server:\n");

198 
	`Ârötf
(
°dîr
, " %8s -HÜocal-addr -PÜocal-port -l [-dÜevel] [-x]\n"

202 
¨gv0
);

203 
	`Ârötf
(
°dîr
, "\n");

204 
	`Ârötf
(
°dîr
, " client:\n");

205 
	`Ârötf
(
°dîr
, " %8s -HÜocal-addr -PÜocal-port -hÑemote-addr\n"

213 
¨gv0
);

214 
	`Ârötf
(
°dîr
, "\n");

215 
	`Ârötf
(
°dîr
, "\t-aássoc_pattern inÅhe mixed mode\n");

216 
	`Ârötf
(
°dîr
, "\t 0 = sequentialáscending(default)\n");

217 
	`Ârötf
(
°dîr
, "\t 1 =Ñandom\n");

218 
	`Ârötf
(
°dîr
, "\t-d debug\n");

219 
	`Ârötf
(
°dîr
, "\t 0 =Çone\n");

220 
	`Ârötf
(
°dîr
, "\t 1 = min(default)\n");

221 
	`Ârötf
(
°dîr
, "\t 2 = max\n");

222 
	`Ârötf
(
°dîr
, "\t-cÅestcase\n");

223 
	`Ârötf
(
°dîr
, "\t 0 = 1 byteÖackets.\n");

224 
	`Ârötf
(
°dîr
, "\t 1 = 1452 byteÖackets.\n");

225 
	`Ârötf
(
°dîr
, "\t (fragmentationÖoint forán i/f with ");

226 
	`Ârötf
(
°dîr
, "1500ás mtu.)\n");

227 
	`Ârötf
(
°dîr
, "\t 2 = 1453 byteÖackets.\n");

228 
	`Ârötf
(
°dîr
, "\t (min. sizeát which fragmentation occurs\n");

229 
	`Ârötf
(
°dîr
, "\t forán i/f with 1500ás mtu.)\n");

230 
	`Ârötf
(
°dîr
, "\t 3 = Sequence of 1, 1453, 32768 byteÖackets.\n");

231 
	`Ârötf
(
°dîr
, "\t 4 = Sequence of following sizeÖackets.\n");

232 
	`Ârötf
(
°dîr
, "\t (1, 1000, 2000, 3000, 5000, 10000,");

233 
	`Ârötf
(
°dîr
, "15000, 20000, 25000, 32768)\n");

234 
	`Ârötf
(
°dîr
, "\t 5 = 32768 byteÖackets.\n");

235 
	`Ârötf
(
°dîr
, "\t (default maxÑeceive window size.)\n");

236 
	`Ârötf
(
°dîr
, "\t 6 =Ñandom sizeÖackets.\n");

237 
	`Ârötf
(
°dîr
, "\t -ve value = Packets of specifed size.\n");

238 
	`Ârötf
(
°dîr
, "\t-m msgsize(1500-65515, default value 32768)\n");

239 
	`Ârötf
(
°dîr
, "\t-xÇumber ofÑepeats\n");

240 
	`Ârötf
(
°dîr
, "\t-o order-pattern\n");

241 
	`Ârötf
(
°dîr
, "\t 0 =áll unordered(default) \n");

242 
	`Ârötf
(
°dîr
, "\t 1 =áll ordered \n");

243 
	`Ârötf
(
°dîr
, "\t 2 =álternating \n");

244 
	`Ârötf
(
°dîr
, "\t 3 =Ñandom\n");

245 
	`Ârötf
(
°dîr
, "\t-t stream-pattern\n");

246 
	`Ârötf
(
°dîr
, "\t 0 = sequentialáscending(default)\n");

247 
	`Ârötf
(
°dîr
, "\t 1 =Ñandom\n");

248 
	`Ârötf
(
°dîr
, "\t-M max-stream (default value 0)\n");

249 
	`Ârötf
(
°dîr
, "\t-r seed (default 0, useÅime())\n");

250 
	`Ârötf
(
°dîr
, "\t-LÇum-ports (default value 0). RunÅhe mixed mode\n");

251 
	`Ârötf
(
°dîr
, "\t-SÇum-ports (default value 0). RunÅhe mixed mode\n");

252 
	`Ârötf
(
°dîr
, "\t-D drain. If in client mode doáÑead following send.\n");

253 
	`Ârötf
(
°dîr
, "\t-T use SOCK_STREAMÅcp-style sockets.\n");

254 
	`Ârötf
(
°dîr
, "\t-BáddÅhe specifiedáddress(es)ásádditional bind\n");

255 
	`Ârötf
(
°dîr
, "\táddresses ofÅheÜocal socket. Multipleáddresses can\n");

256 
	`Ârötf
(
°dîr
, "\t be specified by usingÅhisárgument multipleÅimes.\n");

257 
	`Ârötf
(
°dîr
, "\t ForÉxample, '-B 10.0.0.1 -B 20.0.0.2'.\n");

258 
	`Ârötf
(
°dîr
, "\t-C useÅhe specifiedáddress(es) for connectionÅoÅhe\n");

259 
	`Ârötf
(
°dîr
, "\tÖeer socket. Multipleáddresses can be specified by\n");

260 
	`Ârötf
(
°dîr
, "\t usingÅhisárgument multipleÅimes.\n");

261 
	`Ârötf
(
°dîr
, "\t ForÉxample, '-C 10.0.0.1 -C 20.0.0.2'.\n");

262 
	`Ârötf
(
°dîr
, "\t This option is incompatible withÅhe -h option.\n");

263 
	`Ârötf
(
°dîr
, "\t-OÅimeÅoÜive (default value 0)\n");

264 
	`Ârötf
(
°dîr
, "\n");

265 
	`fÊush
(
°dîr
);

267 
	}
}

270 
	$buûd_msg
(
Àn
)

272 
i
 = 
Àn
 - 1;

273 
n
;

274 *
msg_buf
, *
p
;

276 
msg_buf
 = 
	`mÆloc
(
Àn
);

277 i‡(
NULL
 =
msg_buf
) {

278 
	`Ârötf
(
°dîr
, "\n\t\t*** mallocÇotÉnough memory!!! ***\n");

279 
	`exô
(1);

281 
p
 = 
msg_buf
;

284 
n
 = ((
i
 > 50)?50:i);

285 
	`mem˝y
(
p
, 
msg
, ((
i
 > 50)?50:i));

286 
p
 +
n
;

287 
i
 -
n
;

288 } 
i
 > 0);

290 
msg_buf
[
Àn
-1] = '\0';

292 (
msg_buf
);

294 
	}
}

297 
	$¥öt_cmsg
(
ty≥
, 
s˘p_cmsg_d©a_t
 *
d©a
)

299 
ty≥
) {

300 
SCTP_INIT
:

301 
	`DEBUG_PRINT
(
DEBUG_MAX
, "\tINIT\n");

302 i‡(
DEBUG_MAX
 =
debug_Àvñ
) {

303 
	`¥ötf
("\t\tsinit_num_ostreams=%d ",

304 
d©a
->
öô
.
söô_num_o°ªams
);

305 
	`¥ötf
("sinit_max_instreams=%d ",

306 
d©a
->
öô
.
söô_max_ö°ªams
);

307 
	`¥ötf
("sinit_max_attempts=%d ",

308 
d©a
->
öô
.
söô_max_©ãm±s
);

309 
	`¥ötf
("sinit_max_init_timeo=%d\n",

310 
d©a
->
öô
.
söô_max_öô_timeo
);

313 
SCTP_SNDRCV
:

314 
	`DEBUG_PRINT
(
DEBUG_MAX
, "\t SNDRCV");

315 i‡(
DEBUG_MAX
 =
debug_Àvñ
) {

316 
	`¥ötf
("(°ªam=%u ", 
d©a
->
¢drcv
.
söfo_°ªam
);

317 
	`¥ötf
("s¢=%u ", 
d©a
->
¢drcv
.
söfo_s¢
);

318 
	`¥ötf
("t¢=%u ", 
d©a
->
¢drcv
.
söfo_t¢
);

319 
	`¥ötf
("Êags=0x%x ", 
d©a
->
¢drcv
.
söfo_Êags
);

320 
	`¥ötf
("µid=%u\n", 
d©a
->
¢drcv
.
söfo_µid
);

321 
	`¥ötf
("cumt¢=%u\n", 
d©a
->
¢drcv
.
söfo_cumt¢
);

325 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tUnknow¿ty≥: %d\n", 
ty≥
);

328 
	`fÊush
(
°dout
);

331 
	}
}

335 
	$¥öt_mesßge
(c⁄° 
sk
, 
msghdr
 *
msg
, 
size_t
 
msg_Àn
) {

336 
cmsghdr
 *
scmsg
;

337 
s˘p_cmsg_d©a_t
 *
d©a
;

338 
i
;

340 i‡(!(
MSG_NOTIFICATION
 & 
msg
->
msg_Êags
)) {

341 
ödex
 = 0;

343 
	`DEBUG_PRINT
(
DEBUG_MIN
, "D©®%zu byãs.", 
msg_Àn
);

344 
	`DEBUG_PRINT
(
DEBUG_MAX
, " First %zu bytes: ",

345 (
msg_Àn
 < 
BODYSIZE
)?msg_len:BODYSIZE);

349  
msg_Àn
 > 0 ) {

350 *
ãxt
, 
tm±ext
[
BODYSIZE
];

351 
Àn
;

353 
	`mem£t
(
tm±ext
, 0x0, 
BODYSIZE
);

355 
ãxt
 = 
msg
->
msg_iov
[
ödex
].
iov_ba£
;

356 
Àn
 = 
msg
->
msg_iov
[
ödex
].
iov_Àn
;

358 i‡(
msg_Àn
 =1 && 
ãxt
[0] == 0) {

359 
	`DEBUG_PRINT
(
DEBUG_MIN
, "<empty>Åext[0]=%d",

360 
ãxt
[0]);

364 i‡–
Àn
 > 
msg_Àn
 ) {

366 
ãxt
[(
Àn
 = 
msg_Àn
)] = '\0';

369 i‡–(
msg_Àn
 -
Àn
Ë> 0 ) { 
ödex
++; }

371 
i
 = 0; i < 
Àn
 - 1; ++i) {

372 i‡(!
	`i•röt
(
ãxt
[
i
]))Åext[i] = '.';

375 
	`°∫˝y
(
tm±ext
, 
ãxt
, 
BODYSIZE
);

376 
tm±ext
[
BODYSIZE
-1] = '\0';

378 
	`DEBUG_PRINT
(
DEBUG_MAX
, "%s", 
tm±ext
);

381 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\n");

382 
	`fÊush
(
°dout
);

384 
s˘p_assoc_ch™ge
 *
ßc
;

385 
s˘p_£nd_Áûed
 *
ssf
;

386 
s˘p_∑ddr_ch™ge
 *
•c
;

387 
s˘p_ªmŸe_îr‹
 *
§e
;

388 
s˘p_nŸifiˇti⁄
 *
¢p
;

389 
addrbuf
[
INET6_ADDRSTRLEN
];

390 c⁄° *
≠
;

391 
sockaddr_ö
 *
sö
;

392 
sockaddr_ö6
 *
sö6
;

393 
ödex
 = 0;

395 
¢p
 = (
s˘p_nŸifiˇti⁄
 *)
msg
->
msg_iov
[
ödex
].
iov_ba£
;

397 
	`DEBUG_PRINT
(
DEBUG_MIN
, "Notification:");

399 
¢p
->
¢_hódî
.
¢_ty≥
) {

400 
SCTP_ASSOC_CHANGE
:

401 
ßc
 = &
¢p
->
¢_assoc_ch™ge
;

402 
	`DEBUG_PRINT
(
DEBUG_MIN
,

404 
ßc_°©e_tbl
[
ßc
->
ßc_°©e
]);

405 
	`DEBUG_PRINT
(
DEBUG_MAX
,

409 
ßc
->
ßc_°©e
, sac->
ßc_îr‹
,

410 
ßc
->
ßc_öbound_°ªams
,

411 
ßc
->
ßc_outbound_°ªams
);

413 
SCTP_PEER_ADDR_CHANGE
:

414 
•c
 = &
¢p
->
¢_∑ddr_ch™ge
;

415 
	`DEBUG_PRINT
(
DEBUG_MIN
,

417 i‡(
•c
->
•c_Øddr
.
ss_Ámûy
 =
AF_INET
) {

418 
sö
 = (
sockaddr_ö
 *)

419 &
•c
->
•c_Øddr
;

420 
≠
 = 
	`öë_¡›
(
AF_INET
, &
sö
->
sö_addr
,

421 
addrbuf
,

422 
INET6_ADDRSTRLEN
);

424 
sö6
 = (
sockaddr_ö6
 *)

425 &
•c
->
•c_Øddr
;

426 
≠
 = 
	`öë_¡›
(
AF_INET6
,

427 &
sö6
->
sö6_addr
,

428 
addrbuf
,

429 
INET6_ADDRSTRLEN
);

431 
	`DEBUG_PRINT
(
DEBUG_MAX
,

434 
≠
, 
•c
->
•c_°©e
,

435 
•c
->
•c_îr‹
);

437 
SCTP_SEND_FAILED
:

438 
ssf
 = &
¢p
->
¢_£nd_Áûed
;

439 
	`DEBUG_PRINT
(
DEBUG_MIN
,

441 
	`DEBUG_PRINT
(
DEBUG_MAX
,

444 
ssf
->
ssf_Àngth
, ssf->
ssf_îr‹
);

446 
SCTP_REMOTE_ERROR
:

447 
§e
 = &
¢p
->
¢_ªmŸe_îr‹
;

448 
	`DEBUG_PRINT
(
DEBUG_MIN
,

450 
	`DEBUG_PRINT
(
DEBUG_MAX
,

452 
	`¡ohs
(
§e
->
§e_îr‹
));

454 
SCTP_SHUTDOWN_EVENT
:

455 
	`DEBUG_PRINT
(
DEBUG_MIN
,

459 
	`DEBUG_PRINT
(
DEBUG_MIN
,

461 
¢p
->
¢_hódî
.
¢_ty≥
);

465 
	`fÊush
(
°dout
);

470 
scmsg
 = 
	`CMSG_FIRSTHDR
(
msg
);

471 
scmsg
 !
NULL
;

472 
scmsg
 = 
	`CMSG_NXTHDR
(
msg
, scmsg)) {

474 
d©a
 = (
s˘p_cmsg_d©a_t
 *)
	`CMSG_DATA
(
scmsg
);

475 i‡(
debug_Àvñ
Ë
	`¥öt_cmsg
(
scmsg
->
cmsg_ty≥
, 
d©a
);

479 
	`fÊush
(
°dout
);

482 
	}
}

484 
sockaddr
 *

485 
	$≠≥nd_addr
(c⁄° *
∑rm
, 
sockaddr
 *
addrs
, *
ªt_cou¡
)

487 
sockaddr
 *
√w_addrs
 = 
NULL
;

488 *
≠å
;

489 
sockaddr
 *
ß_addr
;

490 
sockaddr_ö
 *
b4≠
;

491 
sockaddr_ö6
 *
b6≠
;

492 
ho°ít
 *
h°4
 = 
NULL
;

493 
ho°ít
 *
h°6
 = 
NULL
;

494 
i4
 = 0;

495 
i6
 = 0;

496 
j
;

497 
‹ig_cou¡
 = *
ªt_cou¡
;

498 
cou¡
 = 
‹ig_cou¡
;

501 
h°4
 = 
	`gëho°by«me
(
∑rm
);

502 
h°6
 = 
	`gëho°by«me2
(
∑rm
, 
AF_INET6
);

504 i‡((
NULL
 =
h°4
 || h°4->
h_Àngth
 < 1)

505 && (
NULL
 =
h°6
 || h°6->
h_Àngth
 < 1)) {

506 
	`Ârötf
(
°dîr
, "bad ho°«me: %s\n", 
∑rm
);

507 
föÆly
;

511 i‡(
NULL
 !
h°4
) {

512 
i4
 = 0; 
NULL
 !
h°4
->
h_addr_li°
[i4]; ++i4) {

513 
cou¡
++;

516 i‡(
NULL
 !
h°6
) {

517 
i6
 = 0; 
NULL
 !
h°6
->
h_addr_li°
[i6]; ++i6) {

518 
cou¡
++;

525 
√w_addrs
 = (
sockaddr
 *)

526 
	`ªÆloc
(
addrs
, (
sockaddr_ö6
Ë* 
cou¡
);

528 i‡(
NULL
 =
√w_addrs
) {

529 
cou¡
 = *
ªt_cou¡
;

530 
föÆly
;

534 
≠å
 = 
√w_addrs
;

535 
j
 = 0; j < 
‹ig_cou¡
; j++) {

536 
ß_addr
 = (
sockaddr
 *)
≠å
;

537 
ß_addr
->
ß_Ámûy
) {

538 
AF_INET
:

539 
≠å
 +(
sockaddr_ö
);

541 
AF_INET6
:

542 
≠å
 +(
sockaddr_ö6
);

545 
cou¡
 = 
‹ig_cou¡
;

546 
föÆly
;

551 i‡(
NULL
 !
h°4
) {

552 
j
 = 0; j < 
i4
; ++j) {

553 
b4≠
 = (
sockaddr_ö
 *)
≠å
;

554 
	`mem£t
(
b4≠
, 0x00, (*b4ap));

555 
b4≠
->
sö_Ámûy
 = 
AF_INET
;

556 
b4≠
->
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

557 
	`bc›y
(
h°4
->
h_addr_li°
[
j
], &
b4≠
->
sö_addr
,

558 
h°4
->
h_Àngth
);

560 
≠å
 +(
sockaddr_ö
);

564 i‡(
NULL
 !
h°6
) {

565 
j
 = 0; j < 
i6
; ++j) {

566 
b6≠
 = (
sockaddr_ö6
 *)
≠å
;

567 
	`mem£t
(
b6≠
, 0x00, (*b6ap));

568 
b6≠
->
sö6_Ámûy
 = 
AF_INET6
;

569 
b6≠
->
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

570 
b6≠
->
sö6_sc›e_id
 = 
if_ödex
;

571 
	`bc›y
(
h°6
->
h_addr_li°
[
j
], &
b6≠
->
sö6_addr
,

572 
h°6
->
h_Àngth
);

574 
≠å
 +(
sockaddr_ö6
);

578 
föÆly
:

580 *
ªt_cou¡
 = 
cou¡
;

582  
√w_addrs
;

584 
	}
}

586 
	$sockë_r
()

588 
s˘p_evít_subs¸ibe
 
subs¸ibe
;

589 
sk
, 
îr‹
;

591 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tsocket(%s, IPPROTO_SCTP)",

592 (
sockë_ty≥
 =
SOCK_SEQPACKET
) ? "SOCK_SEQPACKET" : "SOCK_STREAM");

594 i‡((
sk
 = 
	`sockë
(
s_loc
.
ss_Ámûy
, 
sockë_ty≥
, 
IPPROTO_SCTP
)) < 0 ) {

595 i‡(
do_exô
) {

596 
	`Ârötf
(
°dîr
, "\n\n\t\t*** socket: failedÅo create"

598 
	`°ªº‹
(
î∫o
));

599 
	`exô
(1);

604 
	`DEBUG_PRINT
(
DEBUG_MIN
, " -> sk=%d\n", 
sk
);

606 
	`mem£t
(&
subs¸ibe
, 0, (subscribe));

607 
subs¸ibe
.
s˘p_d©a_io_evít
 = 1;

608 
subs¸ibe
.
s˘p_assocüti⁄_evít
 = 1;

609 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SCTP
, 
SCTP_EVENTS
, (*)&
subs¸ibe
,

610 (
subs¸ibe
));

611 i‡(
îr‹
) {

612 
	`Ârötf
(
°dîr
, "SCTP_EVENTS:Éº‹: %d\n", 
îr‹
);

613 
	`exô
(1);

616  
sk
;

618 
	}
}

620 
	$böd_r
(
sk
, 
sockaddr_°‹age
 *
ßddr
)

622 
îr‹
 = 0, 
i
 = 0;

623 *
ho°_s
, *
£rv_s
;

625 i‡((
ho°_s
 = 
	`mÆloc
(
NI_MAXHOST
)Ë=
NULL
) {

626 
	`Ârötf
(
°dîr
, "\n\t\t*** host_s malloc failed!!! ***\n");

627 
	`exô
(1);

629 i‡((
£rv_s
 = 
	`mÆloc
(
NI_MAXSERV
)Ë=
NULL
) {

630 
	`Ârötf
(
°dîr
, "\n\t\t*** serv_s malloc failed!!! ***\n");

631 
	`exô
(1);

635 i‡(
i
 > 0Ë
	`¶ìp
(1);

637 
îr‹
 = 
	`gë«meöfo
((
sockaddr
 *)
ßddr
, 
l_Àn
, 
ho°_s
,

638 
NI_MAXHOST
, 
£rv_s
, 
NI_MAXSERV
,

639 
NI_NUMERICHOST
);

641 i‡(
îr‹
)

642 
	`¥ötf
("%s\n", 
	`gai_°ªº‹
(
îr‹
));

644 
	`DEBUG_PRINT
(
DEBUG_MIN
,

646 
sk
, 
ho°_s
, 
£rv_s
, 
i
+1, 
MAX_BIND_RETRYS
);

648 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *)
ßddr
, 
l_Àn
);

650 i‡(
îr‹
 != 0) {

651 if–
î∫o
 !
EADDRINUSE
 ) {

652 i‡(
do_exô
) {

653 
	`Ârötf
(
°dîr
, "\n\n\t\t***bind: can "

655 
ho°_s
, 
£rv_s
,

656 
	`°ªº‹
(
î∫o
));

657 
	`exô
(1);

663 
i
++;

664 i‡(
i
 >
MAX_BIND_RETRYS
) {

665 
	`Ârötf
(
°dîr
, "Maximum bind()áttempts. "

667 
	`exô
(1);

669 } 
îr‹
 < 0 && 
i
 < 
MAX_BIND_RETRYS
);

673 
	}
}

676 
	$bödx_r
(
sk
, 
sockaddr
 *
addrs
, 
cou¡
, 
Êag
)

678 
îr‹
;

679 
i
;

680 
sockaddr
 *
ß_addr
;

681 *
≠å
;

684 
≠å
 = 
addrs
;

685 
i
 = 0; i < 
cou¡
; i++) {

686 
ß_addr
 = (
sockaddr
 *)
≠å
;

688 
ß_addr
->
ß_Ámûy
) {

689 
AF_INET
:

690 ((
sockaddr_ö
 *)
ß_addr
)->
sö_p‹t
 =

691 
	`ht⁄s
(
loˇl_p‹t
);

692 
≠å
 +(
sockaddr_ö
);

694 
AF_INET6
:

695 ((
sockaddr_ö6
 *)
ß_addr
)->
sö6_p‹t
 =

696 
	`ht⁄s
(
loˇl_p‹t
);

697 
≠å
 +(
sockaddr_ö6
);

700 
	`Ârötf
(
°dîr
, "Invalidáddress family\n");

701 
	`exô
(1);

705 
îr‹
 = 
	`s˘p_bödx
(
sk
, 
addrs
, 
cou¡
, 
Êag
);

706 i‡(
îr‹
 != 0) {

707 
	`Ârötf
(
°dîr
, "\n\n\t\t***bindx_r:Érroráddingáddrs:"

708 " %s. ***\n", 
	`°ªº‹
(
î∫o
));

709 
	`exô
(1);

714 
	}
}

716 
	$li°í_r
(
sk
, 
li°í_cou¡
)

718 
îr‹
 = 0;

720 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tlisten(sk=%d,backlog=%d)\n",

721 
sk
, 
li°í_cou¡
);

724 
îr‹
 = 
	`li°í
(
sk
, 
li°í_cou¡
);

725 i‡(
îr‹
 != 0) {

726 i‡(
do_exô
) {

727 
	`Ârötf
(
°dîr
, "\n\n\t\t***Üisten: %s ***\n\n\n",

728 
	`°ªº‹
(
î∫o
));

729 
	`exô
(1);

735 
	}
}

737 
	$ac˚±_r
(
sk
){

738 
sockÀn_t
 
Àn
 = 0;

739 
subsk
;

741 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\èc˚±(sk=%d)\n", 
sk
);

743 
subsk
 = 
	`ac˚±
(
sk
, 
NULL
, &
Àn
);

744 i‡(
subsk
 < 0) {

745 
	`Ârötf
(
°dîr
, "\n\n\t\t***ác˚±: %†***\n\n\n", 
	`°ªº‹
(
î∫o
));

746 
	`exô
(1);

749  
subsk
;

750 
	}
}

752 
	$c⁄√˘_r
(
sk
, c⁄° 
sockaddr
 *
£rv_addr
, 
sockÀn_t
 
addæí
)

754 
îr‹
 = 0;

756 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tc⁄√˘(sk=%d)\n", 
sk
);

759 
îr‹
 = 
	`c⁄√˘
(
sk
, 
£rv_addr
, 
addæí
);

760 i‡(
îr‹
 != 0) {

761 i‡(
do_exô
) {

762 
	`Ârötf
(
°dîr
, "\n\n\t\t*** connect: %s ***\n\n\n",

763 
	`°ªº‹
(
î∫o
));

764 
	`exô
(1);

770 
	}
}

772 
	$c⁄√˘x_r
(
sk
, 
sockaddr
 *
addrs
, 
cou¡
)

774 
îr‹
;

775 
i
;

776 
sockaddr
 *
ß_addr
;

777 *
≠å
;

780 
≠å
 = 
addrs
;

781 
i
 = 0; i < 
cou¡
; i++) {

782 
ß_addr
 = (
sockaddr
 *)
≠å
;

784 
ß_addr
->
ß_Ámûy
) {

785 
AF_INET
:

786 ((
sockaddr_ö
 *)
ß_addr
)->
sö_p‹t
 =

787 
	`ht⁄s
(
ªmŸe_p‹t
);

788 
≠å
 +(
sockaddr_ö
);

790 
AF_INET6
:

791 ((
sockaddr_ö6
 *)
ß_addr
)->
sö6_p‹t
 =

792 
	`ht⁄s
(
ªmŸe_p‹t
);

793 
≠å
 +(
sockaddr_ö6
);

796 
	`Ârötf
(
°dîr
, "Invalidáddress family\n");

797 
	`exô
(1);

801 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk
, 
addrs
, 
cou¡
, 
NULL
);

802 i‡(
îr‹
 != 0) {

803 
	`Ârötf
(
°dîr
, "\n\n\t\t*** connectx_r:Érror connecting"

804 "Åÿaddrs: %†***\n", 
	`°ªº‹
(
î∫o
));

805 
	`exô
(1);

810 
	}
}

812 
	$ª˚ive_r
(
sk
, 
⁄˚
)

814 
ªcvsk
 = 
sk
, 
i
 = 0, 
îr‹
 = 0;

815 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

816 
iovec
 
iov
;

817 
msghdr
 
ömesßge
;

820 
	`mem£t
(&
ömesßge
, 0, (inmessage));

821 i‡((
iov
.
iov_ba£
 = 
	`mÆloc
(
REALLY_BIG
)Ë=
NULL
) {

822 
	`Ârötf
(
°dîr
, "\n\t\t*** mallocÇotÉnough memory!!! ***\n");

823 
	`exô
(1);

825 
iov
.
iov_Àn
 = 
REALLY_BIG
;

826 
ömesßge
.
msg_iov
 = &
iov
;

827 
ömesßge
.
msg_iovÀn
 = 1;

829 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

830 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

835 i‡(
ªcvsk
 =
sk
 && 
sockë_ty≥
 =
SOCK_STREAM
 &&

836 
rﬁe
 =
SERVER
)

837 
ªcvsk
 = 
	`ac˚±_r
(
sk
);

839 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\åecvmsg(sk=%dË", 
sk
);

841 
îr‹
 = 
	`ªcvmsg
(
ªcvsk
, &
ömesßge
, 
MSG_WAITALL
);

842 i‡(
îr‹
 < 0 &&Éº‹ !
EAGAIN
) {

843 i‡(
î∫o
 =
ENOTCONN
 && 
sockë_ty≥
 =
SOCK_STREAM
 &&

844 
rﬁe
 =
SERVER
) {

845 
	`¥ötf
("Noássociation isÖresentÇow!!\n");

846 
	`˛o£
(
ªcvsk
);

847 
ªcvsk
 = 
sk
;

851 
	`Ârötf
(
°dîr
, "\n\t\t***Ñecvmsg: %s ***\n\n",

852 
	`°ªº‹
(
î∫o
));

853 
	`fÊush
(
°dout
);

854 i‡(
do_exô
Ë
	`exô
(1);

855 
îr‹_out
;

857 i‡(
îr‹
 == 0) {

858 i‡(
sockë_ty≥
 =
SOCK_STREAM
 && 
rﬁe
 =
SERVER
) {

859 
	`¥ötf
("Noássociation isÖresentÇow!!\n");

860 
	`˛o£
(
ªcvsk
);

861 
ªcvsk
 = 
sk
;

864 
	`¥ötf
("\n\t\trecvmsg()Ñeturned 0 !!!!\n");

865 
	`fÊush
(
°dout
);

868 i‡(
	`¥öt_mesßge
(
ªcvsk
, &
ömesßge
, 
îr‹
) > 0)

871 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

872 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

873 
iov
.
iov_Àn
 = 
REALLY_BIG
;

874 
i
++;

875 i‡(
⁄˚
)

879 i‡(
ªcvsk
 !
sk
)

880 
	`˛o£
(
ªcvsk
);

882 
	`‰ì
(
iov
.
iov_ba£
);

884 
îr‹_out
:

885 
	`˛o£
(
sk
);

886 
	`‰ì
(
iov
.
iov_ba£
);

889 
	}
}

891 
	$√xt_‹dî
(
°©e
, 
∑âîn
)

893 
∑âîn
){

894 
ORDER_PATTERN_UNORDERED
:

895 
°©e
 = 0;

897 
ORDER_PATTERN_ORDERED
:

898 
°©e
 = 1;

900 
ORDER_PATTERN_ALTERNATE
:

901 
°©e
 = state ? 0 : 1;

903 
ORDER_PATTERN_RANDOM
:

904 
°©e
 = 
	`ønd
() % 2;

908  
°©e
;

909 
	}
}

911 
	$√xt_°ªam
(
°©e
, 
∑âîn
)

913 
∑âîn
){

914 
STREAM_PATTERN_RANDOM
:

915 
°©e
 = 
	`ønd
(Ë% (
max_°ªam
 + 1);

917 
STREAM_PATTERN_SEQUENTIAL
:

918 
°©e
 = state + 1;

919 i‡(
°©e
 > 
max_°ªam
)

920 
°©e
 = 0;

924  
°©e
;

925 
	}
}

927 
	$√xt_msg_size
(
msg_˙t
)

929 
msg_size
;

931 i‡(
size_¨g
) {

932 
msg_size
 = 
size_¨g
;

933 } i‡(
ã°_ˇ£
 < 
NCASES
) {

934 
msg_size
 = 
msg_sizes
[
ã°_ˇ£
][
msg_˙t
];

936 
msg_size
 = (
	`ønd
(Ë% 
max_msgsize
) + 1;

939  
msg_size
;

941 
	}
}

943 
	$√xt_assoc
(
i
, 
°©e
, 
∑âîn
)

945 
j
;

946 
found
 = 0;

947 
_assoc_°©e
 *
as
;

950 
∑âîn
){

951 
ASSOC_PATTERN_RANDOM
:

952 
°©e
 = 
	`ønd
(Ë% 
to£nd
;

954 
ASSOC_PATTERN_SEQUENTIAL
:

955 
°©e
 = state + 1;

956 i‡(
°©e
 >
to£nd
)

957 
°©e
 = 0;

961 
as
 = 
pﬁl_sks
[
i
].
assoc_°©e
;

962 
j
 = 
°©e
;

964 i‡(
as
[
j
].
msg_£¡
 < 
ª≥©_cou¡
) {

965 
found
 = 1;

968 i‡(++
j
 >
to£nd
) {

969 
j
 = 0;

971 } 
j
 !
°©e
);

973 i‡(
found
) {

974  
j
;

979 
	}
}

981 
	$£nd_r
(
sk
, 
°ªam
, 
‹dî
, 
£nd_size
, 
assoc_i
)

983 
îr‹
 = 0;

984 
msghdr
 
outmsg
;

985 
iovec
 
iov
;

986 *
mesßge
 = 
NULL
;

987 
msgÀn
 = 0;

988 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

989 
cmsghdr
 *
cmsg
;

990 
s˘p_¢drcvöfo
 *
söfo
;

992 i‡(
£nd_size
 > 0) {

993 
mesßge
 = 
	`buûd_msg
(
£nd_size
);

994 
msgÀn
 = 
	`°æí
(
mesßge
) + 1;

995 
iov
.
iov_ba£
 = 
mesßge
;

996 
iov
.
iov_Àn
 = 
msgÀn
;

999 i‡(
do_exô
) {

1000 
	`exô
(1);

1002 
îr‹_out
;

1006 
outmsg
.
msg_«me
 = &
s_ªm
;

1007 
outmsg
.
msg_«mñí
 = (
sockaddr_°‹age
);

1008 
outmsg
.
msg_iov
 = &
iov
;

1009 
outmsg
.
msg_iovÀn
 = 1;

1010 
outmsg
.
msg_c⁄åﬁ
 = 
outcmsg
;

1011 
outmsg
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

1012 
outmsg
.
msg_Êags
 = 0;

1014 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmsg
);

1015 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

1016 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

1017 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

1019 
outmsg
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

1020 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

1021 
	`mem£t
(
söfo
, 0, (
s˘p_¢drcvöfo
));

1022 
söfo
->
söfo_µid
 = 
	`ønd
();

1023 
söfo
->
söfo_°ªam
 = 
°ªam
;

1024 
söfo
->
söfo_Êags
 = 0;

1025 i‡(!
‹dî
)

1026 
söfo
->
söfo_Êags
 = 
SCTP_UNORDERED
;

1027 i‡(
timëﬁive
)

1028 
söfo
->
söfo_timëﬁive
 = 
timëﬁive
;

1030 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\tsendmsg(sk=%d,ássoc=%d) %4d bytes.\n",

1031 
sk
, 
assoc_i
, 
£nd_size
);

1032 
	`DEBUG_PRINT
(
DEBUG_MAX
, "\t SNDRCV");

1033 i‡(
DEBUG_MAX
 =
debug_Àvñ
) {

1034 
	`¥ötf
("(°ªam=%u ", 
söfo
->
söfo_°ªam
);

1035 
	`¥ötf
("Êags=0x%x ", 
söfo
->
söfo_Êags
);

1036 
	`¥ötf
("µid=%u\n", 
söfo
->
söfo_µid
);

1040 
îr‹
 = 
	`£ndmsg
(
sk
, &
outmsg
, 
MSG_WAITALL
);

1041 i‡(
îr‹
 !
msgÀn
) {

1042 
	`Ârötf
(
°dîr
, "\n\t\t*** sendmsg: %s ***\n\n",

1043 
	`°ªº‹
(
î∫o
));

1044 
	`fÊush
(
°dout
);

1046 i‡(
do_exô
) {

1047 
	`exô
(1);

1049 i‡(!
døö
)

1050 
îr‹_out
;

1054 i‡(
£nd_size
 > 0Ë
	`‰ì
(
mesßge
);

1056 
îr‹_out
:

1057 i‡(
£nd_size
 > 0Ë
	`‰ì
(
mesßge
);

1060 
	}
}

1062 
	$˛o£_r
(
sk
)

1064 
îr‹
 = 0;

1066 
	`DEBUG_PRINT
(
DEBUG_MIN
, "\t˛o£(sk=%d)\n",
sk
);

1068 
îr‹
 = 
	`˛o£
(
sk
);

1069 i‡(
îr‹
 != 0) {

1070 i‡(
do_exô
) {

1071 
	`Ârötf
(
°dîr
, "\n\n\t\t*** close: %s ***\n\n",

1072 
	`°ªº‹
(
î∫o
));

1073 
	`exô
(1);

1078 
	`fÊush
(
°dout
);

1081 
	}
}

1084 
	$£rvî
(
sk
)

1086 i‡(
max_msgsize
 > 
DEFAULT_MAX_WINDOW
) {

1087 i‡(
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
max_msgsize
,

1088 (
max_msgsize
)) < 0) {

1089 
	`≥º‹
("setsockopt(SO_RCVBUF)");

1090 
	`exô
(1);

1094 
	`ª˚ive_r
(
sk
, 0);

1096 
	}
}

1099 
	$˛õ¡
(
sk
)

1101 
msg_size
;

1102 
i
;

1104 
i
 = 0; i < 
msg_˙t
; i++) {

1106 
msg_size
 = 
	`√xt_msg_size
(
i
);

1107 
‹dî_°©e
 = 
	`√xt_‹dî
(‹dî_°©e, 
‹dî_∑âîn
);

1108 
°ªam_°©e
 = 
	`√xt_°ªam
(°ªam_°©e, 
°ªam_∑âîn
);

1110 i‡(
	`£nd_r
(
sk
, 
°ªam_°©e
, 
‹dî_°©e
, 
msg_size
, 0) < 0) {

1111 
	`˛o£
(
sk
);

1115 i‡(
døö
) {

1116 
	`ª˚ive_r
(
sk
, 1);

1119 
	}
}

1122 
	$mixed_mode_ã°
()

1124 
îr‹
, 
i
, 
j
, 
max_fd
, 
sks
, 
size
;

1125 
assoc_i
, 
n_msg_size
, 
n_‹dî
, 
n_°ªam
;

1126 
d⁄e
 = 0;

1127 
fd_£t
 *
ibô•
 = 
NULL
, *
obô•
 = NULL, *
xbô•
 = NULL;

1128 
öcmsg
[
	`CMSG_SPACE
((
_s˘p_cmsg_d©a_t
))];

1129 
iovec
 
iov
;

1130 
msghdr
 
ömesßge
;

1131 
_assoc_°©e
 *
as
;

1137 
iov
.
iov_ba£
 = 
NULL
;

1138 
max_fd
 = -1;

1139 
sks
 = (0 =
li°íîs
) ? 1 :Üisteners;

1140 
	`mem£t
(
pﬁl_sks
, 0, (
sks
 * (
_pﬁl_sks
)));

1142 
i
 = 0; i < 
sks
; i++) {

1143 
pﬁl_sks
[
i
].
sk
 = 
	`sockë_r
();

1145 i‡(
s_loc
.
ss_Ámûy
 =
AF_INET6
)

1146 –(
sockaddr_ö6
 *)&
s_loc
)->
sö6_p‹t
 =

1147 
	`ht⁄s
(
loˇl_p‹t
 + 
i
);

1149 –(
sockaddr_ö
 *)&
s_loc
)->
sö_p‹t
 =

1150 
	`ht⁄s
(
loˇl_p‹t
 + 
i
);

1152 
	`böd_r
(
pﬁl_sks
[
i
].
sk
, &
s_loc
);

1153 i‡(
li°íîs
) {

1154 
	`li°í_r
(
pﬁl_sks
[
i
].
sk
, 100);

1156 i‡(
max_msgsize
 > 
DEFAULT_MAX_WINDOW
) {

1157 i‡(
	`£tsock›t
(
pﬁl_sks
[
i
].
sk
, 
SOL_SOCKET
, 
SO_RCVBUF
,

1158 &
max_msgsize
, (max_msgsize)) < 0) {

1159 
	`≥º‹
("setsockopt(SO_RCVBUF)");

1160 
	`exô
(1);

1164 i‡(
to£nd
) {

1165 i‡((
pﬁl_sks
[
i
].
assoc_°©e
 = (
_assoc_°©e
 *)
	`mÆloc
(

1166 (
_assoc_°©e
Ë* 
to£nd
)Ë=
NULL
) {

1167 
	`¥ötf
("Can'tállocate memory.\n");

1168 
˛ón_up
;

1170 
	`mem£t
(
pﬁl_sks
[
i
].
assoc_°©e
, 0,

1171 (
_assoc_°©e
Ë* 
to£nd
);

1174 i‡(
pﬁl_sks
[
i
].
sk
 > 
max_fd
) {

1175 
max_fd
 = 
pﬁl_sks
[
i
].
sk
;

1179 
size
 = 
	`howm™y
(
max_fd
 + 1, 
NFDBITS
Ë* (
fd_mask
);

1180 i‡((
ibô•
 = (
fd_£t
 *)
	`mÆloc
(
size
)Ë=
NULL
) {

1181 
	`¥ötf
("Can'tállocate memory.\n");

1182 
˛ón_up
;

1184 i‡((
obô•
 = (
fd_£t
 *)
	`mÆloc
(
size
)Ë=
NULL
) {

1185 
	`¥ötf
("Can'tállocate memory.\n");

1186 
˛ón_up
;

1188 i‡((
xbô•
 = (
fd_£t
 *)
	`mÆloc
(
size
)Ë=
NULL
) {

1189 
	`¥ötf
("Can'tállocate memory.\n");

1190 
˛ón_up
;

1193 
	`mem£t
(
ibô•
, 0, 
size
);

1194 
	`mem£t
(
obô•
, 0, 
size
);

1195 
	`mem£t
(
xbô•
, 0, 
size
);

1199 
	`mem£t
(&
ömesßge
, 0, (inmessage));

1200 i‡((
iov
.
iov_ba£
 = 
	`mÆloc
(
REALLY_BIG
)Ë=
NULL
) {

1201 
	`Ârötf
(
°dîr
, "\n\t\t*** mallocÇotÉnough memory!!! ***\n");

1202 
˛ón_up
;

1204 
iov
.
iov_Àn
 = 
REALLY_BIG
;

1205 
ömesßge
.
msg_iov
 = &
iov
;

1206 
ömesßge
.
msg_iovÀn
 = 1;

1208 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

1209 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

1212 
i
 = 0; i < 
sks
; i++) {

1213 
as
 = 
pﬁl_sks
[
i
].
assoc_°©e
;

1214 
j
 = 0; j < 
to£nd
; j++) {

1215 
as
[
j
].
ªm_p‹t
 = 
ªmŸe_p‹t
 + j;

1219 !
d⁄e
) {

1221 
i
 = 0; i < 
sks
; i++) {

1222 
	`FD_SET
(
pﬁl_sks
[
i
].
sk
, 
ibô•
);

1223 
	`FD_SET
(
pﬁl_sks
[
i
].
sk
, 
obô•
);

1224 
	`FD_SET
(
pﬁl_sks
[
i
].
sk
, 
xbô•
);

1226 i‡((
îr‹
 = 
	`£À˘
(
max_fd
 + 1, 
ibô•
, 
obô•
, 
xbô•
,

1227 (
timevÆ
 *)0)) < 0) {

1228 
	`Ârötf
(
°dîr
, "\n\t\t*** select() failed ");

1229 
	`Ârötf
(
°dîr
, "withÉrror: %s\n\n",

1230 
	`°ªº‹
(
î∫o
));

1231 
	`fÊush
(
°dout
);

1232 
˛ón_up
;

1235 
i
 = 0; i < 
sks
; i++) {

1237 i‡(
li°íîs
 && 
	`FD_ISSET
(
pﬁl_sks
[
i
].
sk
, 
ibô•
)) {

1239 
	`FD_CLR
(
pﬁl_sks
[
i
].
sk
, 
ibô•
);

1240 
îr‹
 = 
	`ªcvmsg
(
pﬁl_sks
[
i
].
sk
, &
ömesßge
,

1241 
MSG_WAITALL
);

1242 i‡(
îr‹
 < 0) {

1243 
	`Ârötf
(
°dîr
,

1245 
	`°ªº‹
(
î∫o
));

1246 
	`fÊush
(
°dout
);

1247 
˛ón_up
;

1249 i‡(
îr‹
 == 0) {

1250 
	`¥ötf
("\n\t\trecvmsg()Ñeturned ");

1251 
	`¥ötf
("0 !!!!\n");

1252 
	`fÊush
(
°dout
);

1255 
	`¥öt_mesßge
(
pﬁl_sks
[
i
].
sk
, &
ömesßge
,

1256 
îr‹
);

1258 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

1259 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

1260 
iov
.
iov_Àn
 = 
REALLY_BIG
;

1264 i‡(
to£nd
 && 
	`FD_ISSET
(
pﬁl_sks
[
i
].
sk
, 
obô•
)) {

1266 
	`FD_CLR
(
pﬁl_sks
[
i
].
sk
, 
obô•
);

1269 
assoc_i
 = 
	`√xt_assoc
(
i
, 
pﬁl_sks
[i].assoc_i,

1270 
assoc_∑âîn
);

1271 i‡(
assoc_i
 < 0) {

1274 i‡(!
li°íîs
) {

1275 
d⁄e
 = 1;

1279 
pﬁl_sks
[
i
].
assoc_i
 =ássoc_i;

1281 
as
 = 
pﬁl_sks
[
i
].
assoc_°©e
;

1282 
n_msg_size
 = 
	`√xt_msg_size
(
as
[
assoc_i
].
msg_˙t
);

1283 
n_‹dî
 = 
as
[
assoc_i
].
‹dî_°©e
 =

1284 
	`√xt_‹dî
(
as
[
assoc_i
].
‹dî_°©e
,

1285 
‹dî_∑âîn
);

1286 
n_°ªam
 = 
as
[
assoc_i
].
°ªam_°©e
 =

1287 
	`√xt_°ªam
(
as
[
assoc_i
].
°ªam_°©e
,

1288 
°ªam_∑âîn
);

1291 i‡(
s_ªm
.
ss_Ámûy
 =
AF_INET6
)

1292 –(
sockaddr_ö6
 *)&
s_ªm
)->

1293 
sö6_p‹t
 =

1294 
	`ht⁄s
(
as
[
assoc_i
].
ªm_p‹t
);

1296 –(
sockaddr_ö
 *)&
s_ªm
)->

1297 
sö_p‹t
 =

1298 
	`ht⁄s
(
as
[
assoc_i
].
ªm_p‹t
);

1301 i‡(
	`£nd_r
(
pﬁl_sks
[
i
].
sk
, 
n_°ªam
, 
n_‹dî
,

1302 
n_msg_size
, 
assoc_i
) < 0) {

1310 i‡(++
as
[
assoc_i
].
msg_˙t
 >
MSG_CNT
) {

1311 
as
[
assoc_i
].
msg_˙t
 = 0;

1313 i‡(++
as
[
assoc_i
].
msg_£¡
 >=

1314 
ª≥©_cou¡
) {

1315 
	`Ârötf
(
°dîr
, "Association #%d in ",

1316 
assoc_i
);

1317 
	`Ârötf
(
°dîr
, "sk=%d has ",

1318 
pﬁl_sks
[
i
].
sk
);

1319 
	`Ârötf
(
°dîr
, "completed %d msgás ",

1320 
as
[
assoc_i
].
msg_£¡
);

1321 
	`Ârötf
(
°dîr
, "cycle %d.\n",

1322 ++
as
[
assoc_i
].
cy˛e
);

1329 i‡(
xÊag
) {

1330 
as
[
assoc_i
].
msg_£¡
 = 0;

1339 
˛ón_up
:

1340 
i
 = 0; i < 
sks
; i++) {

1341 
	`˛o£
(
pﬁl_sks
[
i
].
sk
);

1342 i‡(
pﬁl_sks
[
i
].
assoc_°©e
) {

1343 
	`‰ì
(
pﬁl_sks
[
i
].
assoc_°©e
);

1347 i‡(
ibô•
Ë
	`‰ì
(ibitsp);

1348 i‡(
obô•
Ë
	`‰ì
(obitsp);

1349 i‡(
xbô•
Ë
	`‰ì
(xbitsp);

1351 i‡(
iov
.
iov_ba£
Ë
	`‰ì
(iov.iov_base);

1353 
	}
}

1355 
	$°¨t_ã°
(
rﬁe
)

1357 
sk
;

1358 
i
 = 0;

1360 
	`DEBUG_PRINT
(
DEBUG_NONE
, "\nStartingÅests...\n");

1362 
ª≥©_cou¡
 = 
ª≥©
;

1365 i‡(
MIXED
 =
rﬁe
) {

1366 
ª≥©_cou¡
 =Ñïót_cou¡ * 
msg_˙t
;

1367 
	`mixed_mode_ã°
();

1371 
sk
 = 
	`sockë_r
();

1372 
	`böd_r
(
sk
, &
s_loc
);

1375 i‡(
bödx_add_addrs
)

1376 
	`bödx_r
(
sk
, 
bödx_add_addrs
, 
bödx_add_cou¡
,

1377 
SCTP_BINDX_ADD_ADDR
);

1379 i‡(
rﬁe
 =
SERVER
) {

1380 
	`li°í_r
(
sk
, 100);

1382 i‡(
sockë_ty≥
 =
SOCK_STREAM
 && 
c⁄√˘x_cou¡
 == 0)

1383 
	`c⁄√˘_r
(
sk
, (
sockaddr
 *)&
s_ªm
, 
r_Àn
);

1385 i‡(
c⁄√˘x_cou¡
 != 0)

1386 
	`c⁄√˘x_r
(
sk
, 
c⁄√˘x_addrs
, 
c⁄√˘x_cou¡
);

1389 i‡(!
debug_Àvñ
) {

1390 
	`¥ötf
(" ");

1393 
i
 = 0; i < 
ª≥©_cou¡
; i++) {

1395 i‡(
rﬁe
 =
SERVER
) {

1396 
	`DEBUG_PRINT
(
DEBUG_NONE
,

1398 
	`£rvî
(
sk
);

1400 
	`DEBUG_PRINT
(
DEBUG_NONE
,

1402 
i
+1, 
ª≥©_cou¡
);

1403 
	`˛õ¡
(
sk
);

1406 
	`fÊush
(
°dout
);

1409 
	`˛o£_r
(
sk
);

1411 
	}
}

1414 
	$maö
(
¨gc
, *
¨gv
[])

1416 
c
;

1417 *
öãrÁ˚
 = 
NULL
;

1418 
sockaddr_ö
 *
t_addr
;

1419 
sockaddr_ö6
 *
t_addr6
;

1420 
sockaddr
 *
tmp_addrs
 = 
NULL
;

1423 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, ":H:L:P:S:a:h:p:c:d:lm:sx:X:o:t:M:r:w:Di:TB:C:O:")) >= 0 ) {

1425 
c
) {

1427 
loˇl_ho°
 = 
›èrg
;

1430 
rﬁe
 = 
MIXED
;

1431 
li°íîs
 = 
	`©oi
(
›èrg
);

1432 i‡(
li°íîs
 > 
MAX_POLL_SKS
) {

1433 
	`ußge
(
¨gv
[0]);

1434 
	`exô
(1);

1438 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

1441 
rﬁe
 = 
MIXED
;

1442 
to£nd
 = 
	`©oi
(
›èrg
);

1443 i‡(
to£nd
 > 
MAX_POLL_SKS
) {

1444 
	`ußge
(
¨gv
[0]);

1445 
	`exô
(1);

1449 
assoc_∑âîn
 = 
	`©oi
(
›èrg
);

1450 i‡(
assoc_∑âîn
 < 
ASSOC_PATTERN_SEQUENTIAL


1451 || 
assoc_∑âîn
 > 
ASSOC_PATTERN_RANDOM
 ) {

1452 
	`ußge
(
¨gv
[0]);

1453 
	`exô
(1);

1457 
ªmŸe_ho°
 = 
›èrg
;

1460 
døö
 = 1;

1461 
do_exô
 = 0;

1464 
ªmŸe_p‹t
 = 
	`©oi
(
›èrg
);

1467 i‡(
rﬁe
 !
NOT_DEFINED
) {

1468 
	`¥ötf
("%s: o∆y -†‹ -l\n", 
¨gv
[0]);

1469 
	`ußge
(
¨gv
[0]);

1470 
	`exô
(1);

1472 
rﬁe
 = 
CLIENT
;

1475 i‡(
rﬁe
 !
NOT_DEFINED
) {

1476 
	`¥ötf
("%s: o∆y -†‹ -l\n", 
¨gv
[0]);

1477 
	`ußge
(
¨gv
[0]);

1478 
	`exô
(1);

1480 
rﬁe
 = 
SERVER
;

1483 
debug_Àvñ
 = 
	`©oi
(
›èrg
);

1484 i‡(
debug_Àvñ
 < 
DEBUG_NONE


1485 || 
debug_Àvñ
 > 
DEBUG_MAX
) {

1486 
	`ußge
(
¨gv
[0]);

1487 
	`exô
(1);

1491 
ª≥©
 = 
	`©oi
(
›èrg
);

1492 i‡(!
ª≥©
) {

1493 
xÊag
 = 1;

1494 
ª≥©
 = 
BIG_REPEAT
;

1498 
msg_˙t
 = 
	`©oi
(
›èrg
);

1499 i‡((
msg_˙t
 <0Ë|| (msg_˙à> 
MSG_CNT
)) {

1500 
	`ußge
(
¨gv
[0]);

1501 
	`exô
(1);

1505 
ã°_ˇ£
 = 
	`©oi
(
›èrg
);

1506 i‡(
ã°_ˇ£
 > 
NCASES
) {

1507 
	`ußge
(
¨gv
[0]);

1508 
	`exô
(1);

1510 i‡(
ã°_ˇ£
 < 0) {

1511 
size_¨g
 = -
ã°_ˇ£
;

1516 
‹dî_∑âîn
 = 
	`©oi
(
›èrg
);

1517 i‡(
‹dî_∑âîn
 < 
ORDER_PATTERN_UNORDERED


1518 || 
‹dî_∑âîn
 > 
ORDER_PATTERN_RANDOM
 ) {

1519 
	`ußge
(
¨gv
[0]);

1520 
	`exô
(1);

1524 
timëﬁive
 = 
	`©oi
(
›èrg
);

1525 i‡(
timëﬁive
 < 0) {

1526 
	`ußge
(
¨gv
[0]);

1527 
	`exô
(1);

1531 
°ªam_∑âîn
 = 
	`©oi
(
›èrg
);

1532 i‡(
°ªam_∑âîn
 < 
STREAM_PATTERN_SEQUENTIAL


1533 || 
°ªam_∑âîn
 > 
STREAM_PATTERN_RANDOM
 ) {

1534 
	`ußge
(
¨gv
[0]);

1535 
	`exô
(1);

1539 
max_°ªam
 = 
	`©oi
(
›èrg
);

1540 i‡(
max_°ªam
 < 0

1541 || 
max_°ªam
 >= (1<<16)) {

1542 
	`ußge
(
¨gv
[0]);

1543 
	`exô
(1);

1547 
£ed
 = 
	`©oi
(
›èrg
);

1550 
max_msgsize
 = 
	`©oi
(
›èrg
);

1552 i‡((
max_msgsize
 < 
DEFAULT_MIN_WINDOW
) ||

1553 (
max_msgsize
 > 65515)) {

1554 
	`ußge
(
¨gv
[0]);

1555 
	`exô
(1);

1560 
öãrÁ˚
 = 
›èrg
;

1561 
if_ödex
 = 
	`if_«mëoödex
(
öãrÁ˚
);

1562 i‡(!
if_ödex
) {

1563 
	`¥ötf
("I¡îÁ˚ %†unknown\n", 
öãrÁ˚
);

1564 
	`exô
(1);

1568 
sockë_ty≥
 = 
SOCK_STREAM
;

1571 
tmp_addrs
 = 
	`≠≥nd_addr
(
›èrg
, 
bödx_add_addrs
,

1572 &
bödx_add_cou¡
);

1573 i‡(
NULL
 =
tmp_addrs
) {

1574 
	`Ârötf
(
°dîr
, "No memoryÅoádd ");

1575 
	`Ârötf
(
°dîr
, "%s\n", 
›èrg
);

1576 
	`exô
(1);

1578 
bödx_add_addrs
 = 
tmp_addrs
;

1581 
tmp_addrs
 = 
	`≠≥nd_addr
(
›èrg
, 
c⁄√˘x_addrs
,

1582 &
c⁄√˘x_cou¡
);

1583 i‡(
NULL
 =
tmp_addrs
) {

1584 
	`Ârötf
(
°dîr
, "No memoryÅoádd ");

1585 
	`Ârötf
(
°dîr
, "%s\n", 
›èrg
);

1586 
	`exô
(1);

1588 
c⁄√˘x_addrs
 = 
tmp_addrs
;

1592 
	`ußge
(
¨gv
[0]);

1593 
	`exô
(0);

1597 i‡(
NOT_DEFINED
 =
rﬁe
) {

1598 
	`ußge
(
¨gv
[0]);

1599 
	`exô
(1);

1603 i‡(
SERVER
 =
rﬁe
 && 
NULL
 =
loˇl_ho°
 && 
ªmŸe_ho°
 != NULL) {

1604 
	`Ârötf
 (
°dîr
, "%s: ServerÇeedsÜocaláddress, "

1605 "nŸÑemŸêaddªss\n", 
¨gv
[0]);

1606 
	`ußge
(
¨gv
[0]);

1607 
	`exô
(1);

1609 i‡(
CLIENT
 =
rﬁe
 && 
NULL
 =
ªmŸe_ho°
 && 
c⁄√˘x_cou¡
 == 0) {

1610 
	`Ârötf
 (
°dîr
, "%s: ClientÇeedsátÜeastÑemoteáddress "

1611 "&Ö‹t\n", 
¨gv
[0]);

1612 
	`ußge
(
¨gv
[0]);

1613 
	`exô
(1);

1615 i‡(
MIXED
 =
rﬁe
) {

1616 i‡(
li°íîs
 && 
NULL
 =
loˇl_ho°
) {

1617 
	`Ârötf
 (
°dîr
, "%s: ServersÇeedÜocaláddress\n",

1618 
¨gv
[0]);

1619 
	`ußge
(
¨gv
[0]);

1620 
	`exô
(1);

1622 i‡(
to£nd
 && 
NULL
 =
ªmŸe_ho°
) {

1623 
	`Ârötf
 (
°dîr
, "%s: ClientsÇeedÑemoteáddress ",

1624 
¨gv
[0]);

1625 
	`Ârötf
 (
°dîr
, "&Öort\n");

1626 
	`ußge
(
¨gv
[0]);

1627 
	`exô
(1);

1631 i‡(
›töd
 < 
¨gc
) {

1632 
	`Ârötf
(
°dîr
, "%s:Çon-optionárgumentsáre illegal: ",

1633 
¨gv
[0]);

1634 
›töd
 < 
¨gc
)

1635 
	`Ârötf
(
°dîr
, "%†", 
¨gv
[
›töd
++]);

1636 
	`Ârötf
 (
°dîr
, "\n");

1637 
	`ußge
(
¨gv
[0]);

1638 
	`exô
(1);

1641 i‡(
ªmŸe_ho°
 !
NULL
 && 
c⁄√˘x_cou¡
 != 0) {

1642 
	`Ârötf
(
°dîr
, "%s: You canÇotÖrovide both -hánd -C options.\n",

1643 
¨gv
[0]);

1644 
	`ußge
(
¨gv
[0]);

1645 
	`exô
(1);

1648 i‡(
ªmŸe_ho°
 !
NULL
 && 
ªmŸe_p‹t
 != 0) {

1649 
addröfo
 *
ªs
;

1650 
îr‹
;

1651 *
ho°_s
, *
£rv_s
;

1653 i‡((
ho°_s
 = 
	`mÆloc
(
NI_MAXHOST
)Ë=
NULL
) {

1654 
	`Ârötf
(
°dîr
, "\n*** host_s malloc failed!!! ***\n");

1655 
	`exô
(1);

1657 i‡((
£rv_s
 = 
	`mÆloc
(
NI_MAXSERV
)Ë=
NULL
) {

1658 
	`Ârötf
(
°dîr
, "\n*** serv_s malloc failed!!! ***\n");

1659 
	`exô
(1);

1662 
îr‹
 = 
	`gëaddröfo
(
ªmŸe_ho°
, 0, 
NULL
, &
ªs
);

1663 i‡(
îr‹
) {

1664 
	`¥ötf
("%s.\n", 
	`gai_°ªº‹
(
îr‹
));

1665 
	`ußge
(
¨gv
[0]);

1666 
	`exô
(1);

1669 
ªs
->
ai_Ámûy
) {

1670 
AF_INET
:

1671 
t_addr
 = (
sockaddr_ö
 *)&
s_ªm
;

1673 
	`mem˝y
(
t_addr
, 
ªs
->
ai_addr
,

1674 
ªs
->
ai_addæí
);

1675 
t_addr
->
sö_Ámûy
 = 
ªs
->
ai_Ámûy
;

1676 
t_addr
->
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1678 
r_Àn
 = 
ªs
->
ai_addæí
;

1680 #ifde‡
__FªeBSD__


1681 
t_addr
->
sö_Àn
 = 
r_Àn
;

1684 
AF_INET6
:

1686 
t_addr6
 = (
sockaddr_ö6
 *)&
s_ªm
;

1688 
	`mem˝y
(
t_addr6
, 
ªs
->
ai_addr
,

1689 
ªs
->
ai_addæí
);

1690 
t_addr6
->
sö6_Ámûy
 = 
ªs
->
ai_Ámûy
;

1691 
t_addr6
->
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1692 i‡(
öãrÁ˚
)

1693 
t_addr6
->
sö6_sc›e_id
 =

1694 
	`if_«mëoödex
(
öãrÁ˚
);

1696 
r_Àn
 = 
ªs
->
ai_addæí
;

1698 #ifde‡
__FªeBSD__


1699 
t_addr6
->
sö6_Àn
 = 
r_Àn
;

1704 
	`gë«meöfo
((
sockaddr
 *)&
s_ªm
, 
r_Àn
, 
ho°_s
,

1705 
NI_MAXHOST
, 
£rv_s
, 
NI_MAXSERV
, 
NI_NUMERICHOST
);

1707 
	`DEBUG_PRINT
(
DEBUG_MAX
, "remote:addr=%s,Öort=%s, family=%d\n",

1708 
ho°_s
, 
£rv_s
, 
ªs
->
ai_Ámûy
);

1710 
	`‰ìaddröfo
(
ªs
);

1713 i‡(
c⁄√˘x_cou¡
 != 0) {

1714 
c⁄√˘x_addrs
->
ß_Ámûy
) {

1715 
AF_INET
:

1716 
t_addr
 = (
sockaddr_ö
 *)&
s_ªm
;

1717 
r_Àn
 = (
sockaddr_ö
);

1718 
	`mem˝y
(
t_addr
, 
c⁄√˘x_addrs
, 
r_Àn
);

1719 
t_addr
->
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1721 
AF_INET6
:

1722 
t_addr6
 = (
sockaddr_ö6
 *)&
s_ªm
;

1723 
r_Àn
 = (
sockaddr_ö6
);

1724 
	`mem˝y
(
t_addr6
, 
c⁄√˘x_addrs
, 
r_Àn
);

1725 
t_addr6
->
sö6_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1730 i‡(
loˇl_ho°
 !
NULL
) {

1731 
addröfo
 *
ªs
;

1732 
îr‹
;

1733 *
ho°_s
, *
£rv_s
;

1734 
sockaddr_ö
 *
t_addr
;

1735 
sockaddr_ö6
 *
t_addr6
;

1737 i‡((
ho°_s
 = 
	`mÆloc
(
NI_MAXHOST
)Ë=
NULL
) {

1738 
	`Ârötf
(
°dîr
, "\n*** host_s malloc failed!!! ***\n");

1739 
	`exô
(1);

1741 i‡((
£rv_s
 = 
	`mÆloc
(
NI_MAXSERV
)Ë=
NULL
) {

1742 
	`Ârötf
(
°dîr
, "\n*** serv_s malloc failed!!! ***\n");

1743 
	`exô
(1);

1746 i‡(
	`°rcmp
(
loˇl_ho°
, "0") == 0)

1747 
loˇl_ho°
 = "0.0.0.0";

1749 
îr‹
 = 
	`gëaddröfo
(
loˇl_ho°
, 0, 
NULL
, &
ªs
);

1750 i‡(
îr‹
) {

1751 
	`¥ötf
("%s.\n", 
	`gai_°ªº‹
(
îr‹
));

1752 
	`ußge
(
¨gv
[0]);

1753 
	`exô
(1);

1756 
ªs
->
ai_Ámûy
) {

1757 
AF_INET
:

1758 
t_addr
 = (
sockaddr_ö
 *)&
s_loc
;

1759 
	`mem˝y
(
t_addr
, 
ªs
->
ai_addr
,

1760 
ªs
->
ai_addæí
);

1761 
t_addr
->
sö_Ámûy
 = 
ªs
->
ai_Ámûy
;

1762 
t_addr
->
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

1764 
l_Àn
 = 
ªs
->
ai_addæí
;

1766 #ifde‡
__FªeBSD__


1767 
t_addr
->
sö_Àn
 = 
l_Àn
;

1770 
AF_INET6
:

1771 
t_addr6
 = (
sockaddr_ö6
 *)&
s_loc
;

1773 
	`mem˝y
(
t_addr6
, 
ªs
->
ai_addr
,

1774 
ªs
->
ai_addæí
);

1775 
t_addr6
->
sö6_Ámûy
 = 
ªs
->
ai_Ámûy
;

1776 
t_addr6
->
sö6_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

1777 i‡(
öãrÁ˚
)

1778 
t_addr6
->
sö6_sc›e_id
 =

1779 
	`if_«mëoödex
(
öãrÁ˚
);

1781 
l_Àn
 = 
ªs
->
ai_addæí
;

1783 #ifde‡
__FªeBSD__


1784 
t_addr6
->
sö6_Àn
 = 
l_Àn
;

1789 
îr‹
 = 
	`gë«meöfo
((
sockaddr
 *)&
s_loc
, 
l_Àn
, 
ho°_s
,

1790 
NI_MAXHOST
, 
£rv_s
, 
NI_MAXSERV
, 
NI_NUMERICHOST
);

1792 i‡(
îr‹
)

1793 
	`¥ötf
("%s..\n", 
	`gai_°ªº‹
(
îr‹
));

1795 
	`DEBUG_PRINT
(
DEBUG_MAX
, "local:addr=%s,Öort=%s, family=%d\n",

1796 
ho°_s
, 
£rv_s
, 
ªs
->
ai_Ámûy
);

1798 
	`‰ìaddröfo
(
ªs
);

1803 i‡(
£ed
 == 0 ) {

1804 
£ed
 = 
	`time
(0);

1805 
	`DEBUG_PRINT
(
DEBUG_NONE
, "£ed = %d\n", 
£ed
);

1808 
	`§™d
(
£ed
);

1811 
	`°¨t_ã°
(
rﬁe
);

1815 
	}
}

	@sctp-tools/src/apps/sctp_xconnect.c

35 
	~<°dio.h
>

36 
	~<uni°d.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<f˙é.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/sockë.h
>

42 
	~<sys/uio.h
>

43 
	~<√töë/ö.h
>

44 
	~<î∫o.h
>

45 
	~<√töë/s˘p.h
>

46 
	~<s˘putû.h
>

47 
	~<√tdb.h
>

48 
	~<gë›t.h
>

50 *
	gTCID
 = 
__FILE__
;

51 
	gTST_TOTAL
 = 1;

52 
	gTST_CNT
 = 0;

54 
	#MAXHOSTNAME
 64

	)

56 
	#MAXCLIENTNUM
 10000

	)

58 
	#TRUE
 1

	)

60 
	#SERVER
 1

	)

61 
	#CLIENT
 0

	)

62 
	#NOT_DEFINED
 -1

	)

64 
	gmode
 = 
NOT_DEFINED
;

66 
	gassoc_num
,

67 
	gªmŸe_p‹t
,

68 
	gloˇl_p‹t
;

69 
	ga˘ive
 = 0;

71 *
	gloˇl_ho°
 = 
NULL
;

72 *
	gªmŸe_ho°
 = 
NULL
;

73 
sockaddr_°‹age_t
 
	g˛õ¡_lo›
,

74 
	g£rvî_lo›
;

75 
ho°ít
 *
	gh°
;

76 
	gbig_buf„r
[
REALLY_BIG
];

78 
ußge
(*
¨gv0
);

79 
∑r£_¨gumíts
(
¨gc
, *
¨gv
[]);

80 
d©a_ª˚ived
(
msghdr
 *
ömesßge
, 
Àn
, 
°ªam
,

81 
£rvî_sockë
);

82 
evít_ª˚ived
(
msghdr
 *
ömesßge
, 
assoc_num
);

83 
¥o˚ss_ªady_sockës
(
˛õ¡_sockë
[], 
assoc_num
, 
fd_£t
 *
rfds
);

84 
£rvî_mode
();

85 
˛õ¡_mode
();

88 
	$ußge
(*
¨gv0
)

90 
	`¥ötf
("usage: %s -HÜocalhost -PÜocalport -l|c [-hÑemotehost]\n"

100 
¨gv0
);

101 
	}
}

104 
	$∑r£_¨gumíts
(
¨gc
, *
¨gv
[]) {

105 
c
;

107 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, ":H:P:ach:ln:p:")) >= 0) {

108 
c
) {

110 
loˇl_ho°
 = 
›èrg
;

113 
loˇl_p‹t
 = 
	`©oi
(
›èrg
);

116 i‡(
mode
 =
NOT_DEFINED
)

117 
mode
 = 
CLIENT
;

119 
	`ußge
(
¨gv
[0]);

120 
	`exô
(0);

124 
a˘ive
 = 1;

127 
ªmŸe_ho°
 = 
›èrg
;

130 i‡(
mode
 =
NOT_DEFINED
)

131 
mode
 = 
SERVER
;

133 
	`ußge
(
¨gv
[0]);

134 
	`exô
(0);

138 
assoc_num
 = 
	`©oi
(
›èrg
);

141 
ªmŸe_p‹t
 = 
	`©oi
(
›èrg
);

144 
	`ußge
(
¨gv
[0]);

145 
	`exô
(0);

149 i‡(
mode
 =
CLIENT
) {

150 i‡(
assoc_num
) {

151 i‡(
assoc_num
 > 
MAXCLIENTNUM
) {

152 
	`¥ötf
("TheÇumber ofássociations indicated "

154 
	`¥ötf
("maxÇumber ofássociations "

155 "Ælowed(%d).", 
MAXCLIENTNUM
);

156 
	`ußge
(
¨gv
[0]);

157 
	`exô
(0);

160 
assoc_num
 = 1;

162 i‡(
ªmŸe_ho°
 && 
ªmŸe_p‹t
) {

163 
h°
 = 
	`gëho°by«me
(
ªmŸe_ho°
);

165 
	`mem˝y
(&
£rvî_lo›
.
v4
.
sö_addr
, 
h°
->
h_addr_li°
[0],

166 (
£rvî_lo›
.
v4
.
sö_addr
));

168 
£rvî_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

169 
£rvî_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

171 
	`¥ötf
("Remote hostándÑemoteÖort must be defined "

173 
	`ußge
(
¨gv
[0]);

174 
	`exô
(0);

177 i‡(
loˇl_ho°
) {

178 
h°
 = 
	`gëho°by«me
(
loˇl_ho°
);

180 
	`mem˝y
(&
˛õ¡_lo›
.
v4
.
sö_addr
, 
h°
->
h_addr_li°
[0],

181 (
˛õ¡_lo›
.
v4
.
sö_addr
));

183 
˛õ¡_lo›
.
v4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

185 i‡(
loˇl_p‹t
)

186 
˛õ¡_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

188 
˛õ¡_lo›
.
v4
.
sö_p‹t
 = 0;

190 
˛õ¡_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

191 } i‡(
mode
 =
SERVER
) {

192 i‡(
a˘ive
) {

193 
	`¥ötf
("This option if for client use only");

194 
	`ußge
(
¨gv
[0]);

195 
	`exô
(0);

198 i‡(
ªmŸe_ho°
 || 
ªmŸe_p‹t
) {

199 
	`¥ötf
("Remote valuesÇotÇeeded in server mode.\n");

200 
	`ußge
(
¨gv
[0]);

201 
	`exô
(0);

204 i‡(
loˇl_ho°
) {

205 
h°
 = 
	`gëho°by«me
(
loˇl_ho°
);

207 
	`mem˝y
(&
£rvî_lo›
.
v4
.
sö_addr
, 
h°
->
h_addr_li°
[0],

208 (
£rvî_lo›
.
v4
.
sö_addr
));

210 
£rvî_lo›
.
v4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

212 i‡(
loˇl_p‹t
)

213 
£rvî_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

215 
	`¥ötf
("SpecifyáÜocalÖort in server mode.\n");

216 
	`ußge
(
¨gv
[0]);

217 
	`exô
(0);

220 
£rvî_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

222 
	`¥ötf
("Mustássisgná client or server mode.\n");

223 
	`ußge
(
¨gv
[0]);

224 
	`exô
(0);

226 
	}
}

229 
	$d©a_ª˚ived
(
msghdr
 *
ömesßge
, 
Àn
, 
°ªam
, 
sockë
) {

231 
µid
, 
îr‹
;

232 *
pög
 = "PING";

234 i‡(
mode
 =
SERVER
) {

235 
µid
 = 
	`ønd
();

237 
îr‹
 = 
	`s˘p_£ndmsg
(
sockë
,

238 
ömesßge
->
msg_iov
->
iov_ba£
,

239 
Àn
,

240 (
sockaddr
 *)
ömesßge
->
msg_«me
,

241 
ömesßge
->
msg_«mñí
,

242 
µid
,

244 
°ªam
,

247 i‡(
îr‹
 < 0) {

248 
	`¥ötf
("Síd Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

249 
DUMP_CORE
;

252 
µid
 = 
	`ønd
();

254 
	`¥ötf
("D©®Re˚ived by sockë #: %d.\n", 
sockë
);

255 
	`¥ötf
("\tMessage = %s\n",

256 (*)
ömesßge
->
msg_iov
->
iov_ba£
);

258 i‡(
a˘ive
) {

259 
	`s˘p_£ndmsg
(
sockë
,

260 
pög
,

261 
	`°æí
(
pög
) + 1,

262 (
sockaddr
 *)&
£rvî_lo›
,

263  (
£rvî_lo›
),

264 
µid
,

266 
°ªam
,

270 
	}
}

273 
	$¥öt_s˘p_ßc_°©e
(
msghdr
 *
msg
) {

275 *
d©a
;

276 
s˘p_nŸifiˇti⁄
 *
¢
;

278 i‡(
msg
->
msg_Êags
 & 
MSG_NOTIFICATION
) {

279 
d©a
 = (*)
msg
->
msg_iov
[0].
iov_ba£
;

281 
¢
 = (
s˘p_nŸifiˇti⁄
 *)
d©a
;

283 
¢
->
¢_assoc_ch™ge
.
ßc_°©e
) {

284 
SCTP_COMM_UP
:

285 
	`¥ötf
("SCTP_COMM_UP\n");

287 
SCTP_COMM_LOST
:

288 
	`¥ötf
("SCTP_COMM_LOST\n");

290 
SCTP_RESTART
:

291 
	`¥ötf
("SCTP_RESTART");

293 
SCTP_SHUTDOWN_COMP
:

294 
	`¥ötf
("SCTP_SHUTDOWN_COMP\n");

296 
SCTP_CANT_STR_ASSOC
:

297 
	`¥ötf
("SCTP_CANT_STR_ASSOC\n");

303 
	}
}

316 
	$ã°_check_nŸifiˇti⁄_ty≥
(
msghdr
 *
msg
,

317 
uöt16_t
 
¢_ty≥
,

318 
uöt32_t
 
addôi⁄Æ
) {

320 *
d©a
;

321 
s˘p_nŸifiˇti⁄
 *
¢
;

323 i‡(!(
msg
->
msg_Êags
 & 
MSG_NOTIFICATION
)) {

328 
d©a
 = (*)
msg
->
msg_iov
[0].
iov_ba£
;

330 
¢
 = (
s˘p_nŸifiˇti⁄
 *)
d©a
;

332 i‡(
¢
->
¢_hódî
.
¢_ty≥
 != sn_type)

334 i‡(
¢
->
¢_hódî
.
¢_ty≥
 =
SCTP_ASSOC_CHANGE
)

335 i‡(
¢
->
¢_assoc_ch™ge
.
ßc_°©e
 =
addôi⁄Æ
)

339 
	}
}

344 
	$evít_ª˚ived
(
msghdr
 *
ömesßge
, 
assoc_num
) {

346 
îr‹
;

348 
	`¥ötf
("Event Received\n");

350 
	`¥öt_s˘p_ßc_°©e
(
ömesßge
);

352 i‡(
mode
 =
SERVER
) {

354 
îr‹
 = 
	`ã°_check_nŸifiˇti⁄_ty≥
(
ömesßge
,

355 
SCTP_ASSOC_CHANGE
,

356 
SCTP_COMM_UP
);

357 i‡(
îr‹
 > 0) {

358 
assoc_num
++;

359 
	`¥ötf
("Assosiation Established: count = %d.\n",

360 
assoc_num
);

362 
îr‹
 = 
	`ã°_check_nŸifiˇti⁄_ty≥
(
ömesßge
,

363 
SCTP_ASSOC_CHANGE
,

364 
SCTP_SHUTDOWN_COMP
);

366 i‡(
îr‹
 > 0) {

367 
assoc_num
--;

368 
	`¥ötf
("Assosiation Shutdown: count = %d.\n",

369 
assoc_num
);

373  
assoc_num
;

374 
	}
}

376 
	$£rvî_mode
() {

377 
sockaddr_°‹age_t
 
msg«me
;

378 
£rvî_sockë
,

379 
îr‹
,

380 
°ªam
;

381 
assoc_num
 =0;

382 
msghdr
 
ömesßge
;

383 
iovec
 
iov
;

384 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

387 
	`¥ötf
("Running in Server Mode...\n");

389 
	`mem£t
(&
ömesßge
, 0, (inmessage));

390 
iov
.
iov_ba£
 = 
big_buf„r
;

391 
iov
.
iov_Àn
 = 
REALLY_BIG
;

392 
ömesßge
.
msg_iov
 = &
iov
;

393 
ömesßge
.
msg_iovÀn
 =1;

394 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

395 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

396 
ömesßge
.
msg_«me
 = &
msg«me
;

397 
ömesßge
.
msg_«mñí
 =  (
msg«me
);

399 
°ªam
 = 1;

401 
£rvî_sockë
 = 
	`sockë
(
PF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

402 i‡(
£rvî_sockë
 < 0) {

403 
	`¥ötf
("Sockë Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

404 
DUMP_CORE
;

407 
îr‹
 = 
	`böd
(
£rvî_sockë
, &
£rvî_lo›
.
ß
, (server_loop));

408 i‡(
îr‹
 != 0 ) {

409 
	`¥ötf
("Böd Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

410 
DUMP_CORE
;

413 
îr‹
 = 
	`li°í
(
£rvî_sockë
, 1);

414 i‡(
îr‹
 != 0) {

415 
	`¥ötf
("Li°í Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

416 
DUMP_CORE
;

418 
TRUE
) {

419 
îr‹
 = 
	`ªcvmsg
(
£rvî_sockë
, &
ömesßge
, 
MSG_WAITALL
);

420 i‡(
îr‹
 < 0) {

421 
	`¥ötf
("Receive Failure: %s\n",

422 
	`°ªº‹
(
î∫o
));

424 i‡(
ömesßge
.
msg_Êags
 & 
MSG_NOTIFICATION
)

425 
assoc_num
 = 
	`evít_ª˚ived
(&
ömesßge
,ássoc_num);

427 
	`d©a_ª˚ived
(&
ömesßge
, 
îr‹
, 
°ªam
, 
£rvî_sockë
);

430 
	}
}

432 
	$˛õ¡_mode
() {

434 
i
, 
îr‹
, 
°ªam
, 
max_sockë
 = 0;

435 
uöt32_t
 
µid
 = 0;

436 
˛õ¡_sockë
[
assoc_num
];

437 *
mesßge
 = "Awake";

438 
fd_£t
 
rfds
;

439 
timevÆ
 
tv
;

441 
°ªam
 = 1;

443 
	`¥ötf
("Running in Client Mode...\n");

446 
i
 = 0; i < 
assoc_num
; i++) {

447 
˛õ¡_sockë
[
i
] = 
	`sockë
(
PF_INET
, 
SOCK_SEQPACKET
,

448 
IPPROTO_SCTP
);

449 i‡(
˛õ¡_sockë
[
i
] < 0 ){

450 
	`¥ötf
("Sockë Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

451 
DUMP_CORE
;

454 i‡(
loˇl_p‹t
) {

455 
îr‹
 = 
	`böd
(
˛õ¡_sockë
[
i
], &
˛õ¡_lo›
.
ß
,

456 (
˛õ¡_lo›
));

457 i‡(
îr‹
 < 0) {

458 
	`¥ötf
("Böd Faûuª: %s\n", 
	`°ªº‹
(
î∫o
));

459 
DUMP_CORE
;

463 
	`¥ötf
("Cª©êSockë #: %d\n", 
˛õ¡_sockë
[
i
]);

466 
îr‹
 = 
	`c⁄√˘
(
˛õ¡_sockë
[
i
], &
£rvî_lo›
.
ß
,

467 (
£rvî_lo›
));

468 i‡(
îr‹
 < 0){

469 
	`¥ötf
("C⁄√˘ Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

470 
DUMP_CORE
;

473 
max_sockë
 = 
˛õ¡_sockë
[
i
];

475 
µid
++;

478 
îr‹
 = 
	`s˘p_£ndmsg
(
˛õ¡_sockë
[
i
],

479 
mesßge
,

480 
	`°æí
(
mesßge
) + 1,

481 (
sockaddr
 *)&
£rvî_lo›
,

482 (
£rvî_lo›
),

483 
µid
,

485 
°ªam
,

487 i‡(
îr‹
 < 0 ) {

488 
	`¥ötf
("Síd Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

489 
DUMP_CORE
;

493 
TRUE
){

496 
	`FD_ZERO
(&
rfds
);

499 
tv
.
tv_£c
 = 5;

500 
tv
.
tv_u£c
 = 0;

503 
i
 = 0; i < 
assoc_num
; i++) {

504 
	`FD_SET
(
˛õ¡_sockë
[
i
], &
rfds
);

510 
îr‹
 = 
	`£À˘
(
max_sockë
 + 1, &
rfds
, 
NULL
, NULL, &
tv
);

512 i‡(
îr‹
 < 0) {

513 
	`¥ötf
("Sñe˘ Faûuª: %s.\n", 
	`°ªº‹
(
î∫o
));

514 
DUMP_CORE
;

515 } i‡(
îr‹
) {

519 
	`¥o˚ss_ªady_sockës
(
˛õ¡_sockë
, 
assoc_num
, &
rfds
);

522 
	}
}

524 
	$¥o˚ss_ªady_sockës
(
˛õ¡_sockë
[], 
assoc_num
, 
fd_£t
 *
rfds
) {

526 
i
, 
°ªam
, 
îr‹
;

527 
msghdr
 
ömesßge
;

528 
iovec
 
iov
;

529 
öcmsg
[
	`CMSG_SPACE
( (
s˘p_cmsg_d©a_t
))];

530 
sockaddr_°‹age_t
 
msg«me
;

533 
	`mem£t
(&
ömesßge
, 0,  (inmessage));

534 
iov
.
iov_ba£
 = 
big_buf„r
;

535 
iov
.
iov_Àn
 = 
REALLY_BIG
;

536 
ömesßge
.
msg_iov
 = &
iov
;

537 
ömesßge
.
msg_iovÀn
 =1;

538 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

539 
ömesßge
.
msg_c⁄åﬁÀn
 =  (
öcmsg
);

540 
ömesßge
.
msg_«me
 = &
msg«me
;

541 
ömesßge
.
msg_«mñí
 =  (
msg«me
);

543 
°ªam
 = 1;

545  
i
 = 0; i < 
assoc_num
; i++) {

546 i‡(
	`FD_ISSET
(
˛õ¡_sockë
[
i
], 
rfds
)) {

547 
îr‹
 = 
	`ªcvmsg
(
˛õ¡_sockë
[
i
], &
ömesßge
,

548 
MSG_WAITALL
);

549 i‡(
îr‹
 < 0)

550 
	`¥ötf
("Receive Failure: %s\n",

551 
	`°ªº‹
(
î∫o
));

554 i‡(
ömesßge
.
msg_Êags
 &

555 
MSG_NOTIFICATION
)

556 
	`evít_ª˚ived
(&
ömesßge
,

560 
	`d©a_ª˚ived
(&
ömesßge
, 
îr‹
,

561 
°ªam
,

562 
˛õ¡_sockë
[
i
]);

566 
	}
}

568 
	$maö
(
¨gc
, *
¨gv
[]) {

570 
	`∑r£_¨gumíts
(
¨gc
, 
¨gv
);

572 i‡(
mode
 =
SERVER
) {

573 
	`£rvî_mode
();

574 } i‡(
mode
 =
CLIENT
){

575 
	`˛õ¡_mode
();

577 
	`exô
(1);

578 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_accept_close.c

53 
	~<°dio.h
>

54 
	~<uni°d.h
>

55 
	~<f˙é.h
>

56 
	~<°dlib.h
>

57 
	~<°rög.h
>

58 
	~<sys/ty≥s.h
>

59 
	~<sys/sockë.h
>

60 
	~<√töë/ö.h
>

61 
	~<¨∑/öë.h
>

62 
	~<î∫o.h
>

63 
	~<√töë/s˘p.h
>

64 
	~<sys/uio.h
>

65 
	~<s˘putû.h
>

67 *
	gTCID
 = 
__FILE__
;

68 
	gTST_TOTAL
 = 10;

69 
	gTST_CNT
 = 0;

71 
	#SK_MAX
 10

	)

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
sockÀn_t
 
Àn
;

77 
i
;

78 
sk
,
l°n_sk
,
˛¡_sk
[
SK_MAX
],
a˝t_sk
,
pf_˛ass
;

79 
√w_sk
[
SK_MAX
],
˛¡2_sk
[SK_MAX];

80 
îr‹
;

81 
fd
, 
îr_no
 = 0;

82 
fûíame
[21];

84 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
a˝t_addr
;

89 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

90 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

92 
pf_˛ass
 = 
PF_INET
;

94 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

96 
i
=0 ; i < 
SK_MAX
 ; i++)

97 
√w_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

100 
i
 = 0 ; i < 
SK_MAX
 ; i++)

101 
˛¡_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

103 
i
 = 0 ; i < 
SK_MAX
 ; i++)

104 
˛¡2_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

107 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

109 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

110 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

111 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

113 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

114 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

115 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

118 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

121 
	`ã°_li°í
(
l°n_sk
, 
SK_MAX
 );

126 
i
 = 0;

127 
Àn
 = (
sockaddr_ö
);

128 
	`ã°_c⁄√˘
(
˛¡_sk
[
i
++], (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

131 
îr‹
 = 
	`ac˚±
(-1, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

132 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

133 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept withá bad socket descriptor"

134 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

136 
	`t°_ªsm
(
TPASS
, "accept() withá bad socket descriptor - EBADF");

139 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

140 
fd
 = 
	`mk°emp
(
fûíame
);

141 i‡(
fd
 == -1)

142 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

143 
fûíame
, 
	`°ªº‹
(
î∫o
));

144 
îr‹
 = 
	`ac˚±
(
fd
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

145 i‡(
îr‹
 == -1)

146 
îr_no
 = 
î∫o
;

147 
	`˛o£
(
fd
);

148 
	`u∆ök
(
fûíame
);

149 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

150 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept with invalid socket"

151 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

153 
	`t°_ªsm
(
TPASS
, "accept() with invalid socket - ENOTSOCK");

156 
îr‹
 = 
	`ac˚±
(
l°n_sk
, (
sockaddr
 *Ë-1, &
Àn
);

157 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

158 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept with invalidáddress"

159 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

161 
	`t°_ªsm
(
TPASS
, "accept() with invalidáddress - EFAULT");

163 
	`ã°_c⁄√˘
(
˛¡_sk
[
i
++], (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

166 
îr‹
 = 
	`ac˚±
(
sk
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

167 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

168 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept onáÇon-listening socket"

169 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

171 
	`t°_ªsm
(
TPASS
, "accept() onáÇon-listening socket - EINVAL");

173 
	`ã°_c⁄√˘
(
˛¡_sk
[
i
++], (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

176 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

180 
îr‹
 = 
	`ac˚±
(
a˝t_sk
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

181 i‡(
îr‹
 !-1 || (
î∫o
 !
EINVAL
 &&Éºnÿ!
EACCES
)) {

182 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept onánÉstablished socket"

183 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

186 
	`t°_ªsm
(
TPASS
, "ac˚±(Ë⁄á¿e°ablished sockë - %d", 
î∫o
);

189 
	`˛o£
(
a˝t_sk
);

191 
	`ã°_c⁄√˘
(
˛¡_sk
[
i
], (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

194 
a˝t_sk
 = 
	`ac˚±
(
l°n_sk
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

195 i‡(
a˝t_sk
 < 0)

196 
	`t°_brkm
(
TBROK
, 
t°_exô
, "acceptá closedássociation"

197 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

199 
	`t°_ªsm
(
TPASS
, "accept()á closedássociation - SUCCESS");

201 
	`˛o£
(
a˝t_sk
);

205 
i
 = 0 ; i < (
SK_MAX
 - 1); i++)

206 
	`ã°_c⁄√˘
(
˛¡2_sk
[
i
], (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

208 
i
 = 0 ; i < (
SK_MAX
 - 1); i++)

209 
√w_sk
[
i
] = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
a˝t_addr
,

210 &
Àn
);

212 
	`t°_ªsm
(
TPASS
, "accept() onáÜistening socket - SUCCESS");

216 
îr‹
 = 
	`˛o£
(-1);

217 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

218 
	`t°_brkm
(
TBROK
, 
t°_exô
, "close withá bad socket descriptor "

219 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

221 
	`t°_ªsm
(
TPASS
, "close() withá bad socket descriptor - EBADF");

224 
îr‹
 = 
	`˛o£
(
sk
);

225 i‡(
îr‹
 < 0)

226 
	`t°_brkm
(
TBROK
, 
t°_exô
, "close withá valid socket descriptor"

227 "Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

229 
	`t°_ªsm
(
TPASS
, "close() withá valid socket descriptor - SUCCESS");

232 
îr‹
 = 
	`˛o£
(
sk
);

233 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

234 
	`t°_brkm
(
TBROK
, 
t°_exô
, "close withá closed socket "

235 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

237 
	`t°_ªsm
(
TPASS
, "close() withá closed socket descriptor - EBADF");

239 
i
 = 0 ; i < 
SK_MAX
 ; i++) {

240 
	`˛o£
(
˛¡_sk
[
i
]);

241 
	`˛o£
(
√w_sk
[
i
]);

242 
	`˛o£
(
˛¡2_sk
[
i
]);

246 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_addrs.c

59 
	~<°dio.h
>

60 
	~<uni°d.h
>

61 
	~<f˙é.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<sys/ty≥s.h
>

65 
	~<sys/sockë.h
>

66 
	~<√töë/ö.h
>

67 
	~<¨∑/öë.h
>

68 
	~<î∫o.h
>

69 
	~<√töë/s˘p.h
>

70 
	~<sys/uio.h
>

71 
	~<s˘putû.h
>

73 *
	gTCID
 = 
__FILE__
;

74 
	gTST_TOTAL
 = 10;

75 
	gTST_CNT
 = 0;

78 
	$maö
(
¨gc
, *
¨gv
[])

80 
îr‹
;

81 
sockÀn_t
 
Àn
;

82 
l°n_sk
,
˛¡_sk
,
a˝t_sk
,
pf_˛ass
,
sk1
;

83 
msghdr
 
outmesßge
;

84 
msghdr
 
ömesßge
;

85 *
mesßge
 = "hello, world!\n";

86 
iovec
 
iov_rcv
;

87 
s˘p_¢drcvöfo
 *
söfo
;

88 
msg_cou¡
;

89 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

90 
cmsghdr
 *
cmsg
;

91 
iovec
 
out_iov
;

92 * 
buf„r_rcv
;

93 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

94 
sockaddr
 *
œddrs
, *
∑ddrs
;

95 
fd
, 
îr_no
 = 0;

96 
fûíame
[21];

98 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
a˝t_addr
;

99 
sockaddr_ö
 *
addr
;

104 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

105 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

107 
pf_˛ass
 = 
PF_INET
;

110 
˛¡_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

113 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

115 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

116 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

117 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

119 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

120 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

121 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

124 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

127 
	`ã°_li°í
(
l°n_sk
, 1);

129 
Àn
 = (
sockaddr_ö
);

131 
	`ã°_c⁄√˘
(
˛¡_sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

133 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

135 
	`mem£t
(&
ömesßge
, 0, (inmessage));

136 
buf„r_rcv
 = 
	`mÆloc
(
REALLY_BIG
);

138 
iov_rcv
.
iov_ba£
 = 
buf„r_rcv
;

139 
iov_rcv
.
iov_Àn
 = 
REALLY_BIG
;

140 
ömesßge
.
msg_iov
 = &
iov_rcv
;

141 
ömesßge
.
msg_iovÀn
 = 1;

142 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

143 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

145 
msg_cou¡
 = 
	`°æí
(
mesßge
) + 1;

147 
	`mem£t
(&
outmesßge
, 0, (outmessage));

148 
outmesßge
.
msg_«me
 = &
l°n_addr
;

149 
outmesßge
.
msg_«mñí
 = (
l°n_addr
);

150 
outmesßge
.
msg_iov
 = &
out_iov
;

151 
outmesßge
.
msg_iovÀn
 = 1;

152 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

153 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

154 
outmesßge
.
msg_Êags
 = 0;

156 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

157 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

158 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

159 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

160 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

161 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

162 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

164 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

165 
outmesßge
.
msg_iov
->
iov_Àn
 = 
msg_cou¡
;

167 
	`ã°_£ndmsg
(
˛¡_sk
, &
outmesßge
, 
MSG_NOSIGNAL
, 
msg_cou¡
);

169 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
MSG_NOSIGNAL
);

172 
îr‹
 = 
	`s˘p_gëœddrs
(-1, 0, &
œddrs
);

173 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

174 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getladdrs withá bad socket "

175 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

177 
	`t°_ªsm
(
TPASS
, "sctp_getladdrs() withá bad socket descriptor - "

181 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

182 
fd
 = 
	`mk°emp
(
fûíame
);

183 i‡(
fd
 == -1)

184 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

185 
fûíame
, 
	`°ªº‹
(
î∫o
));

186 
îr‹
 = 
	`s˘p_gëœddrs
(
fd
, 0, &
œddrs
);

187 i‡(
îr‹
 == -1)

188 
îr_no
 = 
î∫o
;

189 
	`˛o£
(
fd
);

190 
	`u∆ök
(
fûíame
);

191 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

192 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getladdrs with invalid socket "

193 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

195 
	`t°_ªsm
(
TPASS
, "sctp_getladdrs() with invalid socket - ENOTSOCK");

199 
sk1
 = 
	`sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_IP
);

200 
îr‹
 = 
	`s˘p_gëœddrs
(
sk1
, 0, &
œddrs
);

201 i‡(
îr‹
 !-1 || 
î∫o
 !
EOPNOTSUPP
)

202 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getladdrs with socket of "

203 "dif„ª¡ÖrŸocﬁÉº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

205 
	`t°_ªsm
(
TPASS
, "sctp_getladdrs() with socket of differentÖrotocol - "

209 
îr‹
 = 
	`s˘p_gëœddrs
(
l°n_sk
, 0, &
œddrs
);

210 i‡(
îr‹
 < 0)

211 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getladdrs with valid socket "

212 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

214 
addr
 = (
sockaddr_ö
 *)
œddrs
;

215 i‡(
addr
->
sö_p‹t
 !
l°n_addr
.sin_port ||

216 
addr
->
sö_Ámûy
 !
l°n_addr
.sin_family ||

217 
addr
->
sö_addr
.
s_addr
 !
l°n_addr
.sin_addr.s_addr)

218 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getladdrs comparision failed");

220 
	`t°_ªsm
(
TPASS
, "sctp_getladdrs() - SUCCESS");

223 i‡((
	`s˘p_‰ìœddrs
(
œddrs
)) < 0)

224 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_freeladdrs "

225 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

227 
	`t°_ªsm
(
TPASS
, "sctp_freeladdrs() - SUCCESS");

230 
îr‹
 = 
	`s˘p_gë∑ddrs
(-1, 0, &
∑ddrs
);

231 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

232 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getpaddrs withá bad socket "

233 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

235 
	`t°_ªsm
(
TPASS
, "sctp_getpaddrs() withá bad socket descriptor - "

239 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

240 
fd
 = 
	`mk°emp
(
fûíame
);

241 i‡(
fd
 == -1)

242 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

243 
fûíame
, 
	`°ªº‹
(
î∫o
));

244 
îr‹
 = 
	`s˘p_gë∑ddrs
(
fd
, 0, &
∑ddrs
);

245 i‡(
îr‹
 == -1)

246 
îr_no
 = 
î∫o
;

247 
	`˛o£
(
fd
);

248 
	`u∆ök
(
fûíame
);

249 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

250 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getpaddrs with invalid socket "

251 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

253 
	`t°_ªsm
(
TPASS
, "sctp_getpaddrs() with invalid socket - ENOTSOCK");

257 
îr‹
 = 
	`s˘p_gë∑ddrs
(
sk1
, 0, &
œddrs
);

258 i‡(
îr‹
 !-1 || 
î∫o
 !
EOPNOTSUPP
)

259 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getpaddrs with socket of "

260 "dif„ª¡ÖrŸocﬁÉº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

262 
	`t°_ªsm
(
TPASS
, "sctp_getpaddrs() with socket of differentÖrotocol - "

266 
îr‹
 = 
	`s˘p_gë∑ddrs
(
a˝t_sk
, 0, &
∑ddrs
);

267 i‡(
îr‹
 < 0)

268 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getpaddrs with valid socket "

269 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

271 
addr
 = (
sockaddr_ö
 *)
∑ddrs
;

272 i‡(
addr
->
sö_p‹t
 !
a˝t_addr
.sin_port ||

273 
addr
->
sö_Ámûy
 !
a˝t_addr
.sin_family ||

274 
addr
->
sö_addr
.
s_addr
 !
a˝t_addr
.sin_addr.s_addr)

275 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getpaddrs comparision failed");

277 
	`t°_ªsm
(
TPASS
, "sctp_getpaddrs() - SUCCESS");

280 i‡((
	`s˘p_‰ì∑ddrs
(
∑ddrs
)) < 0)

281 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_freepaddrs "

282 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

284 
	`t°_ªsm
(
TPASS
, "sctp_freepaddrs() - SUCCESS");

286 
	`˛o£
(
˛¡_sk
);

289 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_connect.c

47 
	~<°dio.h
>

48 
	~<uni°d.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 
	~<löux/sockë.h
>

55 
	~<√töë/ö.h
>

56 
	~<¨∑/öë.h
>

57 
	~<î∫o.h
>

58 
	~<sys/uio.h
>

59 
	~<√töë/s˘p.h
>

60 
	~"s˘putû.h
"

62 *
	gTCID
 = 
__FILE__
;

63 
	gTST_TOTAL
 = 10;

64 
	gTST_CNT
 = 0;

66 
	#SK_MAX
 10

	)

69 
	$maö
(
¨gc
, *
¨gv
[])

71 
îr‹
,
i
;

72 
sockÀn_t
 
Àn
;

73 
sk
,
l°n_sk
,
˛¡_sk
[
SK_MAX
],
a˝t_sk
[SK_MAX],
pf_˛ass
;

74 
sk1
,
˛¡2_sk
;

75 
fd
, 
îr_no
 = 0;

76 
fûíame
[21];

78 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
a˝t_addr
;

83 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

84 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

86 
pf_˛ass
 = 
PF_INET
;

88 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

89 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

92 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

95 
i
 = 0 ; i < 
SK_MAX
 ; i++)

96 
˛¡_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

98 
˛¡2_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

100 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

101 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

102 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

104 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

105 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

106 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

109 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

112 
	`ã°_li°í
(
l°n_sk
, 
SK_MAX
-1);

116 
Àn
 = (
sockaddr_ö
);

117 
îr‹
 = 
	`c⁄√˘
(-1, (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

118 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

119 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect with bad socket "

120 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

122 
	`t°_ªsm
(
TPASS
, "connect() with bad socket descriptor - EBADF");

125 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

126 
fd
 = 
	`mk°emp
(
fûíame
);

127 i‡(
fd
 == -1)

128 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

129 
fûíame
, 
	`°ªº‹
(
î∫o
));

130 
îr‹
 = 
	`c⁄√˘
(
fd
, (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

131 i‡(
îr‹
 == -1)

132 
îr_no
 = 
î∫o
;

133 
	`˛o£
(
fd
);

134 
	`u∆ök
(
fûíame
);

135 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

136 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect with invalid socket "

137 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

139 
	`t°_ªsm
(
TPASS
, "connect() with invalid socket - ENOTSOCK");

142 
îr‹
 = 
	`c⁄√˘
(
sk
, (c⁄° 
sockaddr
 *Ë-1, 
Àn
);

143 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

144 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect with invalidáddress "

145 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

147 
	`t°_ªsm
(
TPASS
, "connect() with invalidáddress - EFAULT");

150 
îr‹
 = 
	`c⁄√˘
(
sk
, (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, (
Àn
 - 3));

151 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

152 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect with invalidáddressÜength "

153 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

155 
	`t°_ªsm
(
TPASS
, "connect() with invalidáddressÜength - EINVAL");

158 
c⁄n_addr
.
sö_Ámûy
 = 9090;

159 
îr‹
 = 
	`c⁄√˘
(
sk
, (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

160 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

161 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect with invalidáddress family "

162 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

164 
	`t°_ªsm
(
TPASS
, "connect() with invalidáddress family - EINVAL");

166 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

171 
i
 = 0 ; i < 
SK_MAX
 ; i++) {

172 
îr‹
 = 
	`c⁄√˘
(
˛¡_sk
[
i
], (c⁄° 
sockaddr
 *)&
c⁄n_addr
,

173 
Àn
);

174 i‡(
îr‹
 < 0)

175 
	`t°_brkm
(
TBROK
, 
t°_exô
, "valid blocking connect "

176 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

179 
	`t°_ªsm
(
TPASS
, "valid blocking connect() - SUCCESS");

184 
îr‹
 = 
	`c⁄√˘
(
˛¡2_sk
, (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

185 i‡(
îr‹
 !-1 || 
î∫o
 !
ECONNREFUSED
)

186 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect whenáccept queue is full "

187 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

189 
	`t°_ªsm
(
TPASS
, "connect() whenáccept queue is full - ECONNREFUSED");

192 
i
=0 ; i < 
SK_MAX
 ; i++)

193 
a˝t_sk
[
i
] = 
	`ã°_ac˚±
(
l°n_sk
,

194 (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

197 
îr‹
 = 
	`c⁄√˘
(
l°n_sk
, (c⁄° 
sockaddr
 *Ë&
l°n_addr
, 
Àn
);

198 i‡(
îr‹
 !-1 || 
î∫o
 !
EISCONN
)

199 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect onáÜistening socket "

200 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

202 
	`t°_ªsm
(
TPASS
, "connect() onáÜistening socket - EISCONN");

205 
i
=0;

206 
îr‹
 = 
	`c⁄√˘
(
a˝t_sk
[
i
], (c⁄° 
sockaddr
 *Ë&
l°n_addr
, 
Àn
);

207 i‡(
îr‹
 !-1 || 
î∫o
 !
EISCONN
)

208 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect onánÉstablished socket "

209 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

211 
	`t°_ªsm
(
TPASS
, "connect() onánÉstablished socket - EISCONN");

213 
i
 = 0 ; i < 4 ; i++) {

214 
	`˛o£
(
˛¡_sk
[
i
]);

215 
	`˛o£
(
a˝t_sk
[
i
]);

221 
îr‹
 = 
	`c⁄√˘
(
sk1
, (c⁄° 
sockaddr
 *)&
c⁄n_addr
, 
Àn
);

222 i‡(
îr‹
 < 0)

223 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Re-establishánássociationÅhat "

224 "i†˛o£dÉº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

226 
	`t°_ªsm
(
TPASS
, "connect()ÅoÑe-establishá closedássociation - "

229 
	`˛o£
(
sk
);

230 
	`˛o£
(
sk1
);

231 
	`˛o£
(
l°n_sk
);

234 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_connectx.c

47 
	~<°dio.h
>

48 
	~<uni°d.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 
	~<löux/sockë.h
>

55 
	~<√töë/ö.h
>

56 
	~<¨∑/öë.h
>

57 
	~<î∫o.h
>

58 
	~<sys/uio.h
>

59 
	~<√töë/s˘p.h
>

60 
	~"s˘putû.h
"

62 *
	gTCID
 = 
__FILE__
;

63 
	gTST_TOTAL
 = 10;

64 
	gTST_CNT
 = 0;

66 
	#SK_MAX
 10

	)

69 
	$maö
(
¨gc
, *
¨gv
[])

71 
îr‹
,
i
;

72 
sockÀn_t
 
Àn
;

73 
sk
,
l°n_sk
,
˛¡_sk
[
SK_MAX
],
a˝t_sk
[SK_MAX],
pf_˛ass
;

74 
sk1
,
˛¡2_sk
;

76 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
a˝t_addr
;

77 
sockaddr
 *
tmp_addr
;

82 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

83 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

85 
pf_˛ass
 = 
PF_INET
;

87 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

88 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

91 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

94 
i
 = 0 ; i < 
SK_MAX
 ; i++)

95 
˛¡_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

97 
˛¡2_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

99 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

100 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

101 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

103 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

104 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

105 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

108 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

111 
	`ã°_li°í
(
l°n_sk
, 
SK_MAX
-1);

115 
Àn
 = (
sockaddr_ö
);

116 
îr‹
 = 
	`s˘p_c⁄√˘x
(-1, (
sockaddr
 *Ë&
c⁄n_addr
, 1, 
NULL
);

117 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

118 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx with bad socket "

119 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

121 
	`t°_ªsm
(
TPASS
, "sctp_connectx() with bad socket descriptor - EBADF");

124 
îr‹
 = 
	`s˘p_c⁄√˘x
(0, (
sockaddr
 *Ë&
c⁄n_addr
, 1, 
NULL
);

125 i‡(
îr‹
 !-1 || 
î∫o
 !
ENOTSOCK
)

126 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx with invalid socket "

127 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

129 
	`t°_ªsm
(
TPASS
, "sctp_connectx() with invalid socket - ENOTSOCK");

132 
tmp_addr
 = (
sockaddr
 *Ë
	`mÆloc
((sockaddr) - 1);

133 
tmp_addr
->
ß_Ámûy
 = 
AF_INET
;

134 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk
, 
tmp_addr
, 1, 
NULL
);

135 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

136 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx with invalidáddress "

137 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

139 
	`t°_ªsm
(
TPASS
, "sctp_connectx() with invalidáddress - EINVAL");

142 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 0, 
NULL
);

143 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

144 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx with invalidáddressÜength "

145 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

147 
	`t°_ªsm
(
TPASS
, "sctp_connectx() with invalidáddressÜength - EINVAL");

150 
c⁄n_addr
.
sö_Ámûy
 = 9090;

151 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 1, 
NULL
);

152 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

153 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx with invalidáddress family "

154 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

156 
	`t°_ªsm
(
TPASS
, "sctp_connectx() with invalidáddress family - EINVAL");

158 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

163 
i
 = 0 ; i < 
SK_MAX
 ; i++) {

164 
îr‹
 = 
	`s˘p_c⁄√˘x
(
˛¡_sk
[
i
], (
sockaddr
 *)&
c⁄n_addr
,

165 1, 
NULL
);

166 i‡(
îr‹
 < 0)

167 
	`t°_brkm
(
TBROK
, 
t°_exô
, "valid blocking sctp_connectx "

168 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

171 
	`t°_ªsm
(
TPASS
, "valid blocking sctp_connectx() - SUCCESS");

176 
îr‹
 = 
	`s˘p_c⁄√˘x
(
˛¡2_sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 1, 
NULL
);

177 i‡(
îr‹
 !-1 || 
î∫o
 !
ECONNREFUSED
)

178 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx whenáccept queue is full "

179 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

181 
	`t°_ªsm
(
TPASS
, "sctp_connectx() whenáccept queue is full - ECONNREFUSED");

184 
i
=0 ; i < 
SK_MAX
 ; i++)

185 
a˝t_sk
[
i
] = 
	`ã°_ac˚±
(
l°n_sk
,

186 (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

189 
îr‹
 = 
	`s˘p_c⁄√˘x
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, 1, 
NULL
);

190 i‡(
îr‹
 !-1 || 
î∫o
 !
EISCONN
)

191 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx onáÜistening socket "

192 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

194 
	`t°_ªsm
(
TPASS
, "sctp_connectx() onáÜistening socket - EISCONN");

197 
i
=0;

198 
îr‹
 = 
	`s˘p_c⁄√˘x
(
a˝t_sk
[
i
], (
sockaddr
 *Ë&
l°n_addr
, 1, 
NULL
);

199 i‡(
îr‹
 !-1 || 
î∫o
 !
EISCONN
)

200 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_connectx onánÉstablished socket "

201 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

203 
	`t°_ªsm
(
TPASS
, "sctp_connectx() onánÉstablished socket - EISCONN");

205 
i
 = 0 ; i < 4 ; i++) {

206 
	`˛o£
(
˛¡_sk
[
i
]);

207 
	`˛o£
(
a˝t_sk
[
i
]);

213 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk1
, (
sockaddr
 *)&
c⁄n_addr
, 1, 
NULL
);

214 i‡(
îr‹
 < 0)

215 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Re-establishánássociationÅhat "

216 "i†˛o£dÉº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

218 
	`t°_ªsm
(
TPASS
, "sctp_connectx()ÅoÑe-establishá closedássociation - "

221 
	`˛o£
(
sk
);

222 
	`˛o£
(
sk1
);

223 
	`˛o£
(
l°n_sk
);

226 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_events.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<°dlib.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<sys/sockë.h
>

41 
	~<sys/uio.h
>

42 
	~<√töë/ö.h
>

43 
	~<î∫o.h
>

44 
	~<√töë/s˘p.h
>

45 
	~<s˘putû.h
>

46 
	~<°rög.h
>

48 *
	gTCID
 = 
__FILE__
;

49 
	gTST_TOTAL
 = 4;

50 
	gTST_CNT
 = 0;

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
svr_sk
, 
˛t_sk
,
a˝t_sk
;

56 
sockaddr_ö
 
svr_lo›
, 
˛t_lo›
,
a˝t_lo›
;

57 
iovec
 
iov
, 
out_iov
;

58 
msghdr
 
ömesßge
, 
outmesßge
;

59 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

60 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

61 
îr‹
;

62 
sockÀn_t
 
Àn
;

63 *
big_buf„r
;

64 
s˘p_evít_subs¸ibe
 
evít
;

65 
cmsghdr
 *
cmsg
;

66 
s˘p_¢drcvöfo
 *
söfo
;

67 *
mesßge
 = "hello, world!\n";

68 
uöt32_t
 
µid
;

69 
uöt32_t
 
°ªam
;

74 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

77 
svr_lo›
.
sö_Ámûy
 = 
AF_INET
;

78 
svr_lo›
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

79 
svr_lo›
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

81 
˛t_lo›
.
sö_Ámûy
 = 
AF_INET
;

82 
˛t_lo›
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

83 
˛t_lo›
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

86 
svr_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

87 
	`ã°_böd
(
svr_sk
, (
sockaddr
 *Ë&
svr_lo›
, (svr_loop));

90 
	`ã°_li°í
(
svr_sk
, 3);

93 
˛t_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

95 
evít
.
s˘p_d©a_io_evít
 = 1;

96 
evít
.
s˘p_assocüti⁄_evít
 = 1;

97 
evít
.
s˘p_shutdown_evít
 = 1;

98 
Àn
 = (
s˘p_evít_subs¸ibe
);

99 
	`ã°_£tsock›t
(
svr_sk
, 
SCTP_EVENTS
, &
evít
, 
Àn
);

100 
	`ã°_£tsock›t
(
˛t_sk
, 
SCTP_EVENTS
, &
evít
, 
Àn
);

102 
Àn
 = (
sockaddr_ö
);

103 
	`ã°_c⁄√˘
(
˛t_sk
, (
sockaddr
 *Ë&
˛t_lo›
, 
Àn
);

105 
a˝t_sk
 = 
	`ã°_ac˚±
(
svr_sk
, (
sockaddr
 *Ë&
a˝t_lo›
, &
Àn
);

108 
	`mem£t
(&
outmesßge
, 0, (outmessage));

109 
outmesßge
.
msg_«me
 = &
svr_lo›
;

110 
outmesßge
.
msg_«mñí
 = (
svr_lo›
);

111 
outmesßge
.
msg_iov
 = &
out_iov
;

112 
outmesßge
.
msg_iovÀn
 = 1;

113 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

114 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

115 
outmesßge
.
msg_Êags
 = 0;

117 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

118 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

119 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

120 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

121 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

122 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

123 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

124 
µid
 = 
	`ønd
();

125 
°ªam
 = 1;

127 
söfo
->
söfo_µid
 = 
µid
;

128 
söfo
->
söfo_°ªam
 = 
°ªam
;

130 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

131 
outmesßge
.
msg_iov
->
iov_Àn
 = (
	`°æí
(
mesßge
) + 1);

134 
	`ã°_£ndmsg
(
˛t_sk
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

136 
	`mem£t
(&
ömesßge
, 0, (inmessage));

138 
big_buf„r
 = 
	`mÆloc
(
REALLY_BIG
);

139 i‡(!
big_buf„r
Ë{ 
DUMP_CORE
; }

144 
iov
.
iov_ba£
 = 
big_buf„r
;

145 
iov
.
iov_Àn
 = 
REALLY_BIG
;

146 
ömesßge
.
msg_iov
 = &
iov
;

147 
ömesßge
.
msg_iovÀn
 = 1;

148 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

149 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

151 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
, &
ömesßge
, 
MSG_WAITALL
);

152 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
,

153 
îr‹
,

154 (
s˘p_assoc_ch™ge
),

155 
SCTP_ASSOC_CHANGE
,

156 
SCTP_COMM_UP
);

158 
	`t°_ªsm
(
TPASS
, "COMM_UPÇotification on client socket - SUCCESS");

160 
îr‹
 = 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
MSG_WAITALL
);

161 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
,

162 
îr‹
,

163 (
s˘p_assoc_ch™ge
),

164 
SCTP_ASSOC_CHANGE
,

165 
SCTP_COMM_UP
);

167 
	`t°_ªsm
(
TPASS
, "COMM_UPÇotification on server socket - SUCCESS");

169 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

170 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

171 
îr‹
 = 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
MSG_WAITALL
);

172 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

173 
MSG_EOR
, 
°ªam
, 
µid
);

175 
	`t°_ªsm
(
TPASS
, "Data message on server socket - SUCCESS");

177 
	`˛o£
(
˛t_sk
);

178 
îr‹
 = 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
MSG_WAITALL
);

179 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
,

180 
îr‹
,

181 (
s˘p_shutdown_evít
),

182 
SCTP_SHUTDOWN_EVENT
,

185 
	`t°_ªsm
(
TPASS
, "SHUTDOWNÇotification onáccepted socket - SUCCESS");

186 
	`˛o£
(
svr_sk
);

187 
	`˛o£
(
a˝t_sk
);

190 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_initmsg_connect.c

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

39 
	~<f˙é.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<î∫o.h
>

47 
	~<√töë/s˘p.h
>

48 
	~<sys/uio.h
>

49 
	~<s˘putû.h
>

51 *
	gTCID
 = 
__FILE__
;

52 
	gTST_TOTAL
 = 1;

53 
	gTST_CNT
 = 0;

56 
	$maö
 (
¨gc
, **
¨gv
)

58 
sk1
, 
sk2
, 
sk3
, 
pf_˛ass
;

59 
sockÀn_t
 
Àn
;

60 
sockaddr_ö
 
l°n_addr
, 
a˝t_addr
;

61 
sockaddr_ö
 
c⁄n_addr
;

62 * 
buf„r_rcv
;

63 
s˘p_öômsg
 
sömsg
;

64 *
mesßge
 = "Hello World!\n";

69 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

70 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

74 
pf_˛ass
 = 
PF_INET
;

76 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

77 
sk3
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

79 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

80 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

81 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

83 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

84 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

85 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

87 
	`ã°_böd
(
sk3
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

89 
Àn
 = (
s˘p_öômsg
);

90 
sömsg
.
söô_num_o°ªams
 = 65535;

91 
sömsg
.
söô_max_ö°ªams
 = 10;

92 
sömsg
.
söô_max_©ãm±s
 = 1;

93 
sömsg
.
söô_max_öô_timeo
 = 0;

94 
	`ã°_£tsock›t
(
sk1
, 
SCTP_INITMSG
, &
sömsg
, 
Àn
);

95 
sömsg
.
söô_num_o°ªams
 = 10;

96 
sömsg
.
söô_max_ö°ªams
 = 65535;

97 
	`ã°_£tsock›t
(
sk3
, 
SCTP_INITMSG
, &
sömsg
, 
Àn
);

99 
	`ã°_li°í
(
sk3
, 1);

101 
Àn
 = (
sockaddr_ö
);

102 
	`ã°_c⁄√˘
(
sk1
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

104 
sk2
 = 
	`ã°_ac˚±
(
sk3
, (
sockaddr
 *Ë&
a˝t_addr
, &
Àn
);

106 
	`ã°_s˘p_£ndmsg
(
sk1
, 
mesßge
, 
	`°æí
(message) + 1,

107 (
sockaddr
 *)&
c⁄n_addr
, 
Àn
,

110 
buf„r_rcv
 = 
	`mÆloc
(100);

111 
	`ã°_ªcv
(
sk2
, 
buf„r_rcv
, (
	`°æí
(
mesßge
Ë+ 1), 
MSG_NOSIGNAL
);

113 
	`t°_ªsm
(
TPASS
, "connect() with initÅimeout setÅo 0 - SUCCESS");

115 
	`˛o£
 (
sk1
);

116 
	`˛o£
 (
sk2
);

117 
	`˛o£
 (
sk3
);

120 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_nonblock.c

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<f˙é.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<√töë/ö.h
>

52 
	~<¨∑/öë.h
>

53 
	~<î∫o.h
>

54 
	~<√töë/s˘p.h
>

55 
	~<sys/uio.h
>

56 
	~<löux/sockë.h
>

57 
	~<s˘putû.h
>

59 *
	gTCID
 = 
__FILE__
;

60 
	gTST_TOTAL
 = 5;

61 
	gTST_CNT
 = 0;

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
îr‹
,
msg_cou¡
;

67 
sockÀn_t
 
Àn
;

68 
sk
,
pf_˛ass
,
l°n_sk
,
a˝t_sk
,
Êag
,
cÊag
,
sÊag
;

69 
msghdr
 
outmesßge
;

70 
msghdr
 
ömesßge
;

71 *
mesßge
 = "hello, world!\n";

72 
iovec
 
iov_rcv
;

73 
s˘p_¢drcvöfo
 *
söfo
;

74 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

75 
cmsghdr
 *
cmsg
;

76 
iovec
 
out_iov
;

77 * 
buf„r_rcv
;

78 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

80 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
svr_addr
;

85 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

86 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

88 
pf_˛ass
 = 
PF_INET
;

90 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

92 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

94 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

95 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

96 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

98 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

99 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

100 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

103 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

106 
	`ã°_li°í
(
l°n_sk
, 10);

108 
Àn
 = (
sockaddr_ö
);

109 
Êag
 = 
MSG_NOSIGNAL
;

112 
sÊag
 = 
	`f˙é
(
l°n_sk
, 
F_GETFL
, 0);

113 i‡(
sÊag
 < 0)

114 
	`t°_brkm
(
TBROK
, 
t°_exô
, "fcnt F_GETFL failed "

115 "sÊag:%d,Éºno:%d", 
sÊag
, 
î∫o
);

117 
îr‹
 = 
	`f˙é
(
l°n_sk
, 
F_SETFL
, 
sÊag
 | 
O_NONBLOCK
);

118 i‡(
îr‹
 < 0)

119 
	`t°_brkm
(
TBROK
, 
t°_exô
, "fcnt F_SETFL failed "

120 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

123 
îr‹
 = 
	`ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

124 i‡(
îr‹
 !-1 || 
î∫o
 !
EAGAIN
)

125 
	`t°_brkm
(
TBROK
, 
t°_exô
, "non-blockingáccept "

126 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

128 
	`t°_ªsm
(
TPASS
, "non-blockingáccept() - EAGAIN");

132 
cÊag
 = 
	`f˙é
(
sk
, 
F_GETFL
, 0);

133 i‡(
cÊag
 < 0)

134 
	`t°_brkm
(
TBROK
, 
t°_exô
, "fcnt F_GETFL failed "

135 "cÊag:%d,Éºno:%d", 
cÊag
, 
î∫o
);

137 
îr‹
 = 
	`f˙é
(
sk
, 
F_SETFL
, 
sÊag
 | 
O_NONBLOCK
);

138 i‡(
îr‹
 < 0)

139 
	`t°_brkm
(
TBROK
, 
t°_exô
, "fcnt F_SETFL failed "

140 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

142 
îr‹
 = 
	`c⁄√˘
(
sk
, (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

143 i‡(
îr‹
 !-1 || 
î∫o
 !
EINPROGRESS
)

144 
	`t°_brkm
(
TBROK
, 
t°_exô
, "non-blocking connect "

145 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

147 
	`t°_ªsm
(
TPASS
, "non-blocking connect() - EINPROGRESS");

150 
a˝t_sk
 = 
	`ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

151 i‡(
a˝t_sk
 < 0)

152 
	`t°_brkm
(
TBROK
, 
t°_exô
, "acceptáfteráÇon-blocking connect "

153 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

155 
	`t°_ªsm
(
TPASS
, "accept()áfteráÇon-blocking connect - SUCCESS");

157 
	`mem£t
(&
outmesßge
, 0, (outmessage));

158 
outmesßge
.
msg_«me
 = &
svr_addr
;

159 
outmesßge
.
msg_«mñí
 = (
svr_addr
);

160 
outmesßge
.
msg_iov
 = &
out_iov
;

161 
outmesßge
.
msg_iovÀn
 = 1;

162 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

163 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

164 
outmesßge
.
msg_Êags
 = 0;

166 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

167 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

168 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

169 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

170 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

171 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

172 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

174 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

175 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

177 
	`mem£t
(&
ömesßge
, 0, (inmessage));

178 
buf„r_rcv
 = 
	`mÆloc
(
REALLY_BIG
);

180 
iov_rcv
.
iov_ba£
 = 
buf„r_rcv
;

181 
iov_rcv
.
iov_Àn
 = 
REALLY_BIG
;

182 
ömesßge
.
msg_iov
 = &
iov_rcv
;

183 
ömesßge
.
msg_iovÀn
 = 1;

184 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

185 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

187 
msg_cou¡
 = 
	`°æí
(
mesßge
) + 1;

190 
îr‹
 = 
	`ªcvmsg
(
sk
, &
ömesßge
, 
MSG_WAITALL
);

191 i‡–
îr‹
 !-1 || 
î∫o
 !
EAGAIN
)

192 
	`t°_brkm
(
TBROK
, 
t°_exô
, "non-blockingÑecvmsg "

193 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

195 
	`t°_ªsm
(
TPASS
, "non-blockingÑecvmsg() - EAGAIN");

197 
	`ã°_£ndmsg
(
a˝t_sk
, &
outmesßge
, 
Êag
, 
msg_cou¡
);

200 
îr‹
 = 
	`ã°_ªcvmsg
(
sk
, &
ömesßge
, 
Êag
);

201 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
msg_cou¡
, 
MSG_EOR
, 0, 0);

203 
	`t°_ªsm
(
TPASS
, "non-blockingÑecvmsg() when data isávailable - "

206 
	`˛o£
(
l°n_sk
);

207 
	`˛o£
(
a˝t_sk
);

209 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_recvfrom.c

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<f˙é.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<√töë/ö.h
>

52 
	~<¨∑/öë.h
>

53 
	~<î∫o.h
>

54 
	~<√töë/s˘p.h
>

55 
	~<sys/uio.h
>

56 
	~<löux/sockë.h
>

57 
	~<s˘putû.h
>

59 *
	gTCID
 = 
__FILE__
;

60 
	gTST_TOTAL
 = 7;

61 
	gTST_CNT
 = 0;

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
msg_cou¡
;

67 
sockÀn_t
 
Àn
;

68 
sk
,
pf_˛ass
,
l°n_sk
,
a˝t_sk
, 
Êag
;

69 *
mesßge
 = "hello, world!\n";

70 *
mesßge_rcv
;

71 
cou¡
;

72 
fd
, 
îr_no
 = 0;

73 
fûíame
[21];

75 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
svr_addr
;

80 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

81 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

83 
mesßge_rcv
 = 
	`mÆloc
(512);

85 
pf_˛ass
 = 
PF_INET
;

87 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

89 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

91 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

92 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

93 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

95 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

96 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

97 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

100 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

103 
	`ã°_li°í
(
l°n_sk
, 10);

105 
Àn
 = (
sockaddr_ö
);

107 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

109 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

111 
msg_cou¡
 = (
	`°æí
(
mesßge
) + 1);

113 
Êag
 = 
MSG_NOSIGNAL
;

115 
cou¡
 = 
	`ã°_£nd
(
sk
, 
mesßge
, 
msg_cou¡
, 
Êag
);

118 
cou¡
 = 
	`ªcv‰om
(-1, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
,

119 (
sockaddr
 *)&
svr_addr
, &
Àn
);

120 i‡(
cou¡
 !-1 || 
î∫o
 !
EBADF
)

121 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom withá bad socket "

122 "des¸ùt‹ cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

124 
	`t°_ªsm
(
TPASS
, "recvfrom() withá bad socket descriptor - EBADF");

127 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

128 
fd
 = 
	`mk°emp
(
fûíame
);

129 i‡(
fd
 == -1)

130 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

131 
fûíame
, 
	`°ªº‹
(
î∫o
));

132 
cou¡
 = 
	`ªcv‰om
(
fd
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
,

133 (
sockaddr
 *)&
svr_addr
, &
Àn
);

134 i‡(
cou¡
 == -1)

135 
îr_no
 = 
î∫o
;

136 
	`˛o£
(
fd
);

137 
	`u∆ök
(
fûíame
);

138 i‡(
cou¡
 !-1 || 
îr_no
 !
ENOTSOCK
)

139 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom with invalid socket "

140 "cou¡:%d,Éºno:%d", 
cou¡
, 
îr_no
);

142 
	`t°_ªsm
(
TPASS
, "recvfrom() with invalid socket - ENOTSOCK");

145 
cou¡
 = 
	`ªcv‰om
(
a˝t_sk
, (*)-1, 
msg_cou¡
, 
Êag
,

146 (
sockaddr
 *)&
svr_addr
, &
Àn
);

147 i‡(
cou¡
 !-1 || 
î∫o
 !
EFAULT
)

148 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom with invalid message "

149 "poöã∏cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

151 
	`t°_ªsm
(
TPASS
, "recvfrom() with invalid messageÖtr - EFAULT");

154 
cou¡
 = 
	`ªcv‰om
(
l°n_sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
,

155 (
sockaddr
 *)&
svr_addr
, &
Àn
);

156 i‡(
cou¡
 !-1 || 
î∫o
 !
ENOTCONN
)

157 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom onÜistening socket "

158 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

160 
	`t°_ªsm
(
TPASS
, "recvfrom() onÜistening socket - ENOTCONN");

162 
cou¡
 = 
	`ã°_£nd
(
a˝t_sk
, 
mesßge
, 
msg_cou¡
, 
Êag
);

164 
	`ã°_shutdown
(
sk
, 
SHUT_WR
);

167 
cou¡
 = 
	`ªcv‰om
(
a˝t_sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
,

168 (
sockaddr
 *)&
svr_addr
, &
Àn
);

169 i‡(
cou¡
 < 0)

170 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom oná socketÅhat has "

171 "ª˚ived shutdow¿cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

173 
	`t°_ªsm
(
TPASS
, "recvfrom() oná socketÅhat hasÑeceived shutdown - "

178 
cou¡
 = 
	`ªcv‰om
(
sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
,

179 (
sockaddr
 *)&
svr_addr
, &
Àn
);

180 i‡(
cou¡
 < 0)

181 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom oná socket withÖending "

183 
cou¡
, 
î∫o
);

185 
	`t°_ªsm
(
TPASS
, "recvfrom() oná socket withÖending messageÅhat has "

190 
cou¡
 = 
	`ªcv‰om
(
sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
,

191 (
sockaddr
 *)&
svr_addr
, &
Àn
);

192 i‡(
cou¡
 !-1 || 
î∫o
 !
ENOTCONN
)

193 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvfrom oná socket withÇo "

195 "î∫o:%d", 
cou¡
, 
î∫o
);

197 
	`t°_ªsm
(
TPASS
, "recvfrom() oná socket withÇoÖending messagesánd "

200 
	`˛o£
(
sk
);

201 
	`˛o£
(
l°n_sk
);

202 
	`˛o£
(
a˝t_sk
);

205 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_recvmsg.c

45 
	~<°dio.h
>

46 
	~<uni°d.h
>

47 
	~<f˙é.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/sockë.h
>

52 
	~<√töë/ö.h
>

53 
	~<¨∑/öë.h
>

54 
	~<î∫o.h
>

55 
	~<√töë/s˘p.h
>

56 
	~<sys/uio.h
>

57 
	~<löux/sockë.h
>

58 
	~<s˘putû.h
>

60 *
	gTCID
 = 
__FILE__
;

61 
	gTST_TOTAL
 = 8;

62 
	gTST_CNT
 = 0;

65 
	$maö
(
¨gc
, *
¨gv
[])

67 
sockÀn_t
 
Àn
;

68 
sk
,
pf_˛ass
,
l°n_sk
,
a˝t_sk
;

69 
Êag
 = 0;

70 
fd
, 
îr_no
 = 0;

71 
fûíame
[21];

72 
msghdr
 
ömesßge
;

73 *
mesßge
 = "hello, world!\n";

74 
iovec
 
iov_rcv
;

75 
cou¡
;

76 * 
buf„r_rcv
;

77 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

78 *
mesßge1
 = "hello, world!\n";

80 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
svr_addr
;

85 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

86 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

88 
pf_˛ass
 = 
PF_INET
;

90 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

92 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

94 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

95 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

96 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

98 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

99 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

100 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

103 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

106 
	`ã°_li°í
(
l°n_sk
, 10);

108 
Àn
 = (
sockaddr_ö
);

110 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

112 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

114 
	`mem£t
(&
ömesßge
, 0, (inmessage));

115 
buf„r_rcv
 = 
	`mÆloc
(
REALLY_BIG
);

117 
iov_rcv
.
iov_ba£
 = 
buf„r_rcv
;

118 
iov_rcv
.
iov_Àn
 = 
REALLY_BIG
;

119 
ömesßge
.
msg_iov
 = &
iov_rcv
;

120 
ömesßge
.
msg_iovÀn
 = 1;

121 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

122 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

125 
cou¡
 = 
	`ªcvmsg
(-1, &
ömesßge
, 
Êag
);

126 i‡(
cou¡
 !-1 || 
î∫o
 !
EBADF
)

127 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg withá bad socket "

128 "des¸ùt‹ cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

130 
	`t°_ªsm
(
TPASS
, "recvmsg() withá bad socket descriptor - EBADF");

133 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

134 
fd
 = 
	`mk°emp
(
fûíame
);

135 i‡(
fd
 == -1)

136 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

137 
fûíame
, 
	`°ªº‹
(
î∫o
));

138 
cou¡
 = 
	`ªcvmsg
(
fd
, &
ömesßge
, 
Êag
);

139 i‡(
cou¡
 == -1)

140 
îr_no
 = 
î∫o
;

141 
	`˛o£
(
fd
);

142 
	`u∆ök
(
fûíame
);

143 i‡(
cou¡
 !-1 || 
îr_no
 !
ENOTSOCK
)

144 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg with invalid socket "

145 "cou¡:%d,Éºno:%d", 
cou¡
, 
îr_no
);

147 
	`t°_ªsm
(
TPASS
, "recvmsg() with invalid socket - ENOTSOCK");

150 
ömesßge
.
msg_iov
 = (
iovec
 *)-1;

151 
cou¡
 = 
	`ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
Êag
);

152 i‡(
cou¡
 !-1 || 
î∫o
 !
EFAULT
)

153 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg with invalid iovec "

154 "poöã∏cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

156 
	`t°_ªsm
(
TPASS
, "recvmsg() with invalid iovecÖtr - EFAULT");

158 
ömesßge
.
msg_iov
 = &
iov_rcv
;

161 
cou¡
 = 
	`ªcvmsg
(
a˝t_sk
, (
msghdr
 *)-1, 
Êag
);

162 i‡(
cou¡
 !-1 || 
î∫o
 !
EFAULT
)

163 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg with invalid msghdr "

164 "poöã∏cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

166 
	`t°_ªsm
(
TPASS
, "recvmsg() with invalid msghdrÖtr - EFAULT");

169 
cou¡
 = 
	`ªcvmsg
(
l°n_sk
, &
ömesßge
, 
Êag
);

170 i‡(
cou¡
 !-1 || 
î∫o
 !
ENOTCONN
)

171 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg onÜistening socket "

172 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

174 
	`t°_ªsm
(
TPASS
, "recvmsg() onÜistening socket - ENOTCONN");

176 
cou¡
 = 
	`ã°_£nd
(
a˝t_sk
, 
mesßge1
, 
	`°æí
(
mesßge
), 0);

178 
	`ã°_shutdown
(
sk
, 
SHUT_WR
);

180 
Êag
 = 
MSG_NOSIGNAL
;

182 
cou¡
 = 
	`ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
Êag
);

183 i‡(
cou¡
 < 0)

184 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg oná socketÅhat has "

185 "ª˚ived shutdow¿cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

187 
	`t°_ªsm
(
TPASS
, "recvmsg() oná socketÅhat hasÑeceived shutdown - "

192 
cou¡
 = 
	`ªcvmsg
(
sk
, &
ömesßge
, 
Êag
);

193 i‡(
cou¡
 < 0)

194 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg oná socket withÖending "

196 
cou¡
, 
î∫o
);

198 
	`t°_ªsm
(
TPASS
, "recvmsg() oná socket withÖending messageÅhat has "

203 
cou¡
 = 
	`ªcvmsg
(
sk
, &
ömesßge
, 
Êag
);

204 i‡(
cou¡
 !-1 || 
î∫o
 !
ENOTCONN
)

205 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg oná socket withÇo "

207 "î∫o:%d", 
cou¡
, 
î∫o
);

209 
	`t°_ªsm
(
TPASS
, "recvmsg() oná socket withÇoÖending messagesánd "

212 
	`˛o£
(
sk
);

213 
	`˛o£
(
l°n_sk
);

214 
	`˛o£
(
a˝t_sk
);

216 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_rtoinfo.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<f˙é.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/sockë.h
>

48 
	~<löux/sockë.h
>

49 
	~<löux/ö.h
>

50 
	~<löux/ö6.h
>

51 
	~<î∫o.h
>

52 
	~<sys/uio.h
>

53 
	~<√töë/s˘p.h
>

54 
	~<s˘putû.h
>

56 *
	gTCID
 = 
__FILE__
;

57 
	gTST_TOTAL
 = 3;

58 
	gTST_CNT
 = 0;

61 
	$maö
()

64 
sd
, 
ªt
;

65 
sockÀn_t
 
Àn
;

66 
s˘p_πoöfo
 
§toöfo
;

67 
s˘p_πoöfo
 
gπoöfo
;

69 
sd
 = 
	`ã°_sockë
 (
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

71 
Àn
 = (
s˘p_πoöfo
);

74 
ªt
 = 
	`gësock›t
(
sd
, 
IPPROTO_SCTP
, 
SCTP_RTOINFO
, &
gπoöfo
, &
Àn
);

75 i‡(
ªt
 < 0)

76 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_RTOINFO "

77 "ªt:%d,Éºno:%d", 
ªt
, 
î∫o
);

79 
	`t°_ªsm
(
TPASS
, "getsockopt() SCTP_RTOINFO - SUCCESS");

82 
§toöfo
.
§to_öôül
=60;

83 
§toöfo
.
§to_max
=100;

84 
§toöfo
.
§to_mö
=40;

87 
ªt
 = 
	`£tsock›t
(
sd
, 
IPPROTO_SCTP
, 
SCTP_RTOINFO
, &
§toöfo
,

88 (
s˘p_πoöfo
));

89 i‡(
ªt
 < 0)

90 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt SCTP_RTOINFO "

91 "ªt:%d,Éºno:%d", 
ªt
, 
î∫o
);

93 
	`t°_ªsm
(
TPASS
, "setsockopt() SCTP_RTOINFO - SUCCESS");

96 
ªt
 = 
	`gësock›t
(
sd
, 
IPPROTO_SCTP
, 
SCTP_RTOINFO
, &
gπoöfo
, &
Àn
);

97 i‡(
ªt
 < 0)

98 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_RTOINFO "

99 "ªt:%d,Éºno:%d", 
ªt
, 
î∫o
);

102 i‡(
§toöfo
.
§to_öôül
 !
gπoöfo
.srto_initial &&

103 
§toöfo
.
§to_max
 !
gπoöfo
.srto_max &&

104 
§toöfo
.
§to_mö
 !
gπoöfo
.srto_min)

105 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt/getsockopt SCTP_RTOINFO "

108 
	`t°_ªsm
(
TPASS
, "setsockopt()/getsockopt SCTP_RTOINFO compare - "

111 
	`˛o£
(
sd
);

114 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_send.c

45 
	~<°dio.h
>

46 
	~<uni°d.h
>

47 
	~<f˙é.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<sys/sockë.h
>

52 
	~<√töë/ö.h
>

53 
	~<¨∑/öë.h
>

54 
	~<î∫o.h
>

55 
	~<√töë/s˘p.h
>

56 
	~<sys/uio.h
>

57 
	~<löux/sockë.h
>

58 
	~<s˘putû.h
>

60 *
	gTCID
 = 
__FILE__
;

61 
	gTST_TOTAL
 = 8;

62 
	gTST_CNT
 = 0;

65 
	$maö
(
¨gc
, *
¨gv
[])

67 
sockÀn_t
 
Àn
,
Àn_¢d
;

68 
msg_cou¡
;

69 
sk
,
sk1
,
pf_˛ass
,
l°n_sk
,
a˝t_sk
,
a˝t1_sk
, 
Êag
, 
cou¡
;

70 *
mesßge
 = "hello, world!\n";

71 *
mesßge_rcv
;

72 
fd
, 
îr_no
 = 0;

73 
fûíame
[21];

75 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
svr_addr
;

80 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

81 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

83 
pf_˛ass
 = 
PF_INET
;

85 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

87 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

89 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

91 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

92 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

93 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

95 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

96 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

97 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

100 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

103 
	`ã°_li°í
(
l°n_sk
, 10);

105 
Àn
 = (
sockaddr_ö
);

107 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

109 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

111 
Àn_¢d
 = (
	`°æí
(
mesßge
) + 1);

113 
Êag
 = 
MSG_NOSIGNAL
;

115 
cou¡
 = 
	`£nd
(-1, 
mesßge
, 
Àn_¢d
, 
Êag
);

116 i‡(
cou¡
 !-1 || 
î∫o
 !
EBADF
)

117 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send withá bad socket "

118 "des¸ùt‹ cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

120 
	`t°_ªsm
(
TPASS
, "send() withá bad socket descriptor - EBADF");

123 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

124 
fd
 = 
	`mk°emp
(
fûíame
);

125 i‡(
fd
 == -1)

126 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

127 
fûíame
, 
	`°ªº‹
(
î∫o
));

128 
cou¡
 = 
	`£nd
(
fd
, 
mesßge
, 
Àn_¢d
, 
Êag
);

129 i‡(
cou¡
 == -1)

130 
îr_no
 = 
î∫o
;

131 
	`˛o£
(
fd
);

132 
	`u∆ök
(
fûíame
);

133 i‡(
cou¡
 !-1 || 
îr_no
 !
ENOTSOCK
)

134 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send with invalid socket "

135 "cou¡:%d,Éºno:%d", 
cou¡
, 
îr_no
);

137 
	`t°_ªsm
(
TPASS
, "send() with invalid socket - ENOTSOCK");

140 
cou¡
 = 
	`£nd
(
l°n_sk
, 
mesßge
, 
Àn_¢d
, 
Êag
);

141 i‡(
cou¡
 !-1 || 
î∫o
 !
EPIPE
)

142 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send onáÜistening socket "

143 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

145 
	`t°_ªsm
(
TPASS
, "send() onáÜistening socket - EPIPE");

149 
cou¡
 = 
	`£nd
(
sk
, (*)0x1, 
Àn_¢d
, 
Êag
);

150 i‡(
cou¡
 !-1 || 
î∫o
 !
EFAULT
)

151 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send with invalid message "

152 "poöã∏cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

154 
	`t°_ªsm
(
TPASS
, "send() with invalid messageÖtr - EFAULT");

157 
	`ã°_c⁄√˘
(
sk1
, (
sockaddr
 *Ë&
l°n_addr
, 
Àn
);

159 
cou¡
 = 
	`ã°_£nd
(
sk1
, 
mesßge
, 
Àn_¢d
, 
Êag
);

161 
	`˛o£
(
sk1
);

163 
a˝t1_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
c⁄n_addr
, &
Àn
);

166 
cou¡
 = 
	`£nd
(
a˝t1_sk
, 
mesßge
, 
Àn_¢d
, 
Êag
);

167 i‡(
cou¡
 !-1 || 
î∫o
 !
EPIPE
)

168 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send oná closedássociation "

169 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

171 
	`t°_ªsm
(
TPASS
, "send() oná closedássociation - EPIPE");

173 
	`˛o£
(
a˝t1_sk
);

174 
	`˛o£
(
sk
);

175 
	`˛o£
(
l°n_sk
);

176 
	`˛o£
(
a˝t_sk
);

178 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

180 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

182 
mesßge_rcv
 = 
	`mÆloc
(512);

185 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

188 
	`ã°_li°í
(
l°n_sk
, 10);

190 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

191 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

192 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

194 
Àn
 = (
sockaddr_ö
);

196 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

198 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

200 
msg_cou¡
 = 
	`°æí
(
mesßge
) + 1;

203 
cou¡
 = 
	`£nd
(
sk
, 
mesßge
, 
msg_cou¡
, 
Êag
);

204 i‡(
cou¡
 !
msg_cou¡
)

205 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send from clientÅo server "

206 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

208 
	`t°_ªsm
(
TPASS
, "send() from clientÅo server - SUCCESS");

210 
	`ã°_ªcv
(
a˝t_sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
);

212 
	`°∫˝y
(
mesßge_rcv
,"\0",512);

215 
cou¡
 = 
	`£nd
(
a˝t_sk
, 
mesßge
, 
msg_cou¡
, 
Êag
);

216 i‡(
cou¡
 !
msg_cou¡
)

217 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send fromáccept socketÅo client "

218 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

220 
	`t°_ªsm
(
TPASS
, "send() fromáccept socketÅo client - SUCCESS");

222 
	`ã°_ªcv
(
sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
);

226 
	`ã°_£nd
(
sk
, 
mesßge
, 5 , 
Êag
);

227 
	`ã°_ªcv
(
a˝t_sk
, 
mesßge_rcv
, 5, 
Êag
);

229 
	`t°_ªsm
(
TPASS
, "send()Öartial data fromá buffer - SUCCESS");

232 
	`ã°_s˘p_£nd
(
sk
, 
mesßge
, 
	`°æí
(mesßgeË+ 1 , 
NULL
, 
Êag
);

233 
	`ã°_ªcv
(
a˝t_sk
, 
mesßge_rcv
, 
	`°æí
(
mesßge
Ë+ 1, 
Êag
);

234 
	`t°_ªsm
(
TPASS
, "sctp_send() withÇo sinfo - SUCCESS");

236 
	`˛o£
(
sk1
);

237 
	`˛o£
(
l°n_sk
);

238 
	`˛o£
(
a˝t_sk
);

241 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_sendmsg.c

52 
	~<°dio.h
>

53 
	~<uni°d.h
>

54 
	~<f˙é.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 
	~<sys/ty≥s.h
>

58 
	~<sys/sockë.h
>

59 
	~<√töë/ö.h
>

60 
	~<¨∑/öë.h
>

61 
	~<î∫o.h
>

62 
	~<√töë/s˘p.h
>

63 
	~<sys/uio.h
>

64 
	~<löux/sockë.h
>

65 
	~<s˘putû.h
>

67 *
	gTCID
 = 
__FILE__
;

68 
	gTST_TOTAL
 = 14;

69 
	gTST_CNT
 = 0;

72 
	$maö
(
¨gc
, *
¨gv
[])

74 
sockÀn_t
 
Àn
;

75 
msg_cou¡
;

76 
sk
,
sk1
,
pf_˛ass
,
l°n_sk
,
a˝t_sk
,
a˝t1_sk
, 
Êag
;

77 
msghdr
 
outmesßge
;

78 *
mesßge
 = "hello, world!\n";

79 
s˘p_¢drcvöfo
 *
söfo
;

80 
cou¡
;

81 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

82 
cmsghdr
 *
cmsg
;

83 
iovec
 
out_iov
;

84 
msghdr
 
ömesßge
;

85 * 
buf„r_rcv
;

86 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
svr_addr
;

87 
iovec
 
iov_rcv
;

88 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

89 
fd
, 
îr_no
 = 0;

90 
fûíame
[21];

95 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

96 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

98 
pf_˛ass
 = 
PF_INET
;

100 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

102 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

104 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

106 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

107 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

108 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

110 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

111 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

112 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

115 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

118 
	`ã°_li°í
(
l°n_sk
, 10);

120 
Àn
 = (
sockaddr_ö
);

122 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

124 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

126 
	`mem£t
(&
outmesßge
, 0, (outmessage));

127 
outmesßge
.
msg_«me
 = &
c⁄n_addr
;

128 
outmesßge
.
msg_«mñí
 = (
c⁄n_addr
);

129 
outmesßge
.
msg_iov
 = &
out_iov
;

130 
outmesßge
.
msg_iovÀn
 = 1;

131 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

132 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

133 
outmesßge
.
msg_Êags
 = 0;

135 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

136 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

137 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

138 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

139 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

140 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

141 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

143 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

144 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

146 
Êag
 = 
MSG_NOSIGNAL
;

148 
cou¡
 = 
	`£ndmsg
(-1, &
outmesßge
, 
Êag
);

149 i‡(
cou¡
 !-1 || 
î∫o
 !
EBADF
)

150 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg withá bad socket "

151 "des¸ùt‹ cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

153 
	`t°_ªsm
(
TPASS
, "sendmsg() withá bad socket descriptor - EBADF");

156 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

157 
fd
 = 
	`mk°emp
(
fûíame
);

158 i‡(
fd
 == -1)

159 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

160 
fûíame
, 
	`°ªº‹
(
î∫o
));

161 
cou¡
 = 
	`£ndmsg
(
fd
, &
outmesßge
, 
Êag
);

162 i‡(
cou¡
 == -1)

163 
îr_no
 = 
î∫o
;

164 
	`˛o£
(
fd
);

165 
	`u∆ök
(
fûíame
);

166 i‡(
cou¡
 !-1 || 
îr_no
 !
ENOTSOCK
)

167 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with invalid socket "

168 "cou¡:%d,Éºno:%d", 
cou¡
, 
îr_no
);

170 
	`t°_ªsm
(
TPASS
, "sendmsg() with invalid socket - ENOTSOCK");

173 
cou¡
 = 
	`£ndmsg
(
l°n_sk
, &
outmesßge
, 
Êag
);

174 i‡(
cou¡
 !-1 || 
î∫o
 !
EPIPE
)

175 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg onáÜistening socket "

176 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

178 
	`t°_ªsm
(
TPASS
, "sendmsg() onáÜistening socket - EPIPE");

181 
outmesßge
.
msg_iov
 = (
iovec
 *)-1;

182 
cou¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, 
Êag
);

183 i‡(
cou¡
 !-1 || 
î∫o
 !
EFAULT
)

184 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with invalid iovec "

185 "poöã∏cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

187 
	`t°_ªsm
(
TPASS
, "sendmsg() with invalid iovecÖtr - EFAULT");

189 
outmesßge
.
msg_iov
 = &
out_iov
;

192 
outmesßge
.
msg_iovÀn
 = 0;

193 
cou¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, 
Êag
);

194 i‡(
cou¡
 !-1 || 
î∫o
 !
EINVAL
)

195 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with invalid iovec "

196 "Àngth cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

198 
	`t°_ªsm
(
TPASS
, "sendmsg() with invalid iovecÜength - EINVAL");

200 
outmesßge
.
msg_iovÀn
 = 1;

203 
cou¡
 = 
	`£ndmsg
(
sk
, (
msghdr
 *)-1, 
Êag
);

204 i‡(
cou¡
 !-1 || 
î∫o
 !
EFAULT
)

205 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with invalid msghdr "

206 "poöã∏cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

208 
	`t°_ªsm
(
TPASS
, "sendmsg() with invalid msghdrÖtr - EFAULT");

211 
söfo
->
söfo_Êags
 = 999;

212 
cou¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, -1);

213 i‡(
cou¡
 !-1 || 
î∫o
 !
EINVAL
)

214 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with invalid sinfo "

215 "Êag†cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

217 
	`t°_ªsm
(
TPASS
, "sendmsg() with invalid sinfo flags - EINVAL");

220 
söfo
->
söfo_Êags
 = 
SCTP_EOF
;

221 
cou¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, 
Êag
);

222 i‡(
cou¡
 !-1 || 
î∫o
 !
EINVAL
)

223 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with SCTP_EOF flag "

224 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

226 
	`t°_ªsm
(
TPASS
, "sendmsg() with SCTP_EOF flag - EINVAL");

229 
söfo
->
söfo_Êags
 = 
SCTP_ABORT
;

230 
cou¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, 
Êag
);

231 i‡(
cou¡
 !-1 || 
î∫o
 !
EINVAL
)

232 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with SCTP_ABORT flag "

233 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

235 
	`t°_ªsm
(
TPASS
, "sendmsg() with SCTP_ABORT flag - EINVAL");

237 
söfo
->
söfo_Êags
 = 0;

239 
	`ã°_c⁄√˘
(
sk1
, (
sockaddr
 *Ë&
l°n_addr
, 
Àn
);

241 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 
Êag
, 
	`°æí
(
mesßge
)+1);

243 
	`˛o£
(
sk1
);

244 
a˝t1_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
c⁄n_addr
, &
Àn
);

247 
cou¡
 = 
	`£ndmsg
(
a˝t1_sk
, &
outmesßge
, 
Êag
);

248 i‡(
cou¡
 !-1 || 
î∫o
 !
EPIPE
)

249 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg oná closedássociation "

250 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

252 
	`t°_ªsm
(
TPASS
, "sendmsg() oná closedássociation - EPIPE");

254 
	`˛o£
(
a˝t1_sk
);

255 
	`˛o£
(
sk
);

256 
	`˛o£
(
l°n_sk
);

257 
	`˛o£
(
a˝t_sk
);

259 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

261 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

263 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

264 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

265 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

267 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

268 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

269 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

272 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

275 
	`ã°_li°í
(
l°n_sk
, 10);

277 
Àn
 = (
sockaddr_ö
);

278 
Êag
 = 
MSG_NOSIGNAL
;

280 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

282 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

284 
	`mem£t
(&
outmesßge
, 0, (outmessage));

285 
outmesßge
.
msg_«me
 = &
svr_addr
;

286 
outmesßge
.
msg_«mñí
 = (
svr_addr
);

287 
outmesßge
.
msg_iov
 = &
out_iov
;

288 
outmesßge
.
msg_iovÀn
 = 1;

289 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

290 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

291 
outmesßge
.
msg_Êags
 = 0;

293 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

294 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

295 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

296 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

297 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

298 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

299 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

301 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

302 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

304 
	`mem£t
(&
ömesßge
, 0, (inmessage));

305 
buf„r_rcv
 = 
	`mÆloc
(
REALLY_BIG
);

307 
iov_rcv
.
iov_ba£
 = 
buf„r_rcv
;

308 
iov_rcv
.
iov_Àn
 = 
REALLY_BIG
;

309 
ömesßge
.
msg_iov
 = &
iov_rcv
;

310 
ömesßge
.
msg_iovÀn
 = 1;

311 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

312 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

314 
msg_cou¡
 = 
	`°æí
(
mesßge
) + 1;

317 
cou¡
 = 
	`£ndmsg
(
a˝t_sk
, &
outmesßge
, 
Êag
);

318 i‡(
cou¡
 !
msg_cou¡
)

319 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg fromáccept socketÅo "

320 "˛õ¡ cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

322 
	`t°_ªsm
(
TPASS
, "sendmsg() fromáccept socketÅo client - SUCCESS");

324 
cou¡
 = 
	`ã°_ªcvmsg
(
sk
, &
ömesßge
, 
Êag
);

325 
	`ã°_check_msg_d©a
(&
ömesßge
, 
cou¡
, 
msg_cou¡
, 
MSG_EOR
, 0, 0);

327 
outmesßge
.
msg_«me
 = &
c⁄n_addr
;

328 
outmesßge
.
msg_«mñí
 = (
c⁄n_addr
);

330 
cou¡
 = 
	`£ndmsg
(
sk
, &
outmesßge
, 
Êag
);

331 i‡(
cou¡
 !
msg_cou¡
)

332 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg from clientÅo server "

333 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

335 
	`t°_ªsm
(
TPASS
, "sendmsg() from clientÅo server - SUCCESS");

337 
cou¡
 = 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
Êag
);

338 
	`ã°_check_msg_d©a
(&
ömesßge
, 
cou¡
, 
msg_cou¡
, 
MSG_EOR
, 0, 0);

340 
outmesßge
.
msg_«me
 = &
c⁄n_addr
;

341 
outmesßge
.
msg_«mñí
 = (
c⁄n_addr
);

342 
	`˛o£
(
sk
);

343 
	`˛o£
(
a˝t_sk
);

344 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

348 
cou¡
 = 
	`£ndmsg
(
sk1
, &
outmesßge
, 
Êag
);

349 i‡(
cou¡
 !
msg_cou¡
)

350 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg from unconnected clientÅo "

351 "£rvî cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

353 
	`t°_ªsm
(
TPASS
, "sendmsg() from unconnected cltÅo server - SUCCESS");

355 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

357 
cou¡
 = 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
Êag
);

358 
	`ã°_check_msg_d©a
(&
ömesßge
, 
cou¡
, 
msg_cou¡
, 
MSG_EOR
, 0, 0);

360 
	`ã°_shutdown
(
sk1
, 
SHUT_RD
);

363 
cou¡
 = 
	`£ndmsg
(
sk1
, &
outmesßge
, 
Êag
);

364 i‡(
cou¡
 !
msg_cou¡
)

365 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg oná SHUT_RD socket "

366 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

368 
	`t°_ªsm
(
TPASS
, "sendmsg() oná SHUT_RD socket - SUCCESS");

370 
cou¡
 = 
	`ã°_ªcvmsg
(
a˝t_sk
, &
ömesßge
, 
Êag
);

371 
	`ã°_check_msg_d©a
(&
ömesßge
, 
cou¡
, 
msg_cou¡
, 
MSG_EOR
, 0, 0);

373 
	`˛o£
(
sk1
);

374 
	`˛o£
(
l°n_sk
);

375 
	`˛o£
(
a˝t_sk
);

377 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_sendto.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<f˙é.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/sockë.h
>

48 
	~<√töë/ö.h
>

49 
	~<¨∑/öë.h
>

50 
	~<î∫o.h
>

51 
	~<√töë/s˘p.h
>

52 
	~<sys/uio.h
>

53 
	~<löux/sockë.h
>

54 
	~<s˘putû.h
>

56 *
	gTCID
 = 
__FILE__
;

57 
	gTST_TOTAL
 = 4;

58 
	gTST_CNT
 = 0;

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
msg_cou¡
;

64 
sockÀn_t
 
Àn
;

65 
sk
,
sk1
,
pf_˛ass
,
l°n_sk
,
a˝t_sk
,
Êag
;

66 *
mesßge
 = "hello, world!\n";

67 *
mesßge_rcv
;

68 
cou¡
;

70 
sockaddr_ö
 
c⁄n_addr
,
l°n_addr
,
svr_addr
;

75 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

76 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

78 
pf_˛ass
 = 
PF_INET
;

80 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

82 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

84 
mesßge_rcv
 = 
	`mÆloc
(512);

85 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

86 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

87 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

89 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

90 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

91 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

94 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

97 
	`ã°_li°í
(
l°n_sk
, 10);

99 
Àn
 = (
sockaddr_ö
);

100 
Êag
 = 
MSG_NOSIGNAL
;

102 
	`ã°_c⁄√˘
(
sk
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

104 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

106 
msg_cou¡
 = 
	`°æí
(
mesßge
) + 1;

109 
cou¡
 = 
	`£ndto
(
sk
, 
mesßge
, 
msg_cou¡
, 
Êag
,

110 (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

111 i‡(
cou¡
 !
msg_cou¡
)

112 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendto from clientÅo server "

113 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

115 
	`t°_ªsm
(
TPASS
, "sendto() from clientÅo server - SUCCESS");

117 
	`ã°_ªcv
(
a˝t_sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
);

119 
	`°∫˝y
(
mesßge_rcv
,"\0",512);

122 
cou¡
 = 
	`£ndto
(
a˝t_sk
, 
mesßge
, 
msg_cou¡
, 
Êag
,

123 (c⁄° 
sockaddr
 *Ë&
svr_addr
, 
Àn
);

124 i‡(
cou¡
 !
msg_cou¡
)

125 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendto fromáccept socketÅo client "

126 "cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

128 
	`t°_ªsm
(
TPASS
, "sendto() fromáccept socketÅo client - SUCCESS");

130 
	`ã°_ªcv
(
sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
);

132 
	`˛o£
(
sk
);

133 
	`˛o£
(
a˝t_sk
);

135 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

139 
cou¡
 = 
	`£ndto
(
sk1
, 
mesßge
, 
msg_cou¡
, 
Êag
,

140 (c⁄° 
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

141 i‡(
cou¡
 !
msg_cou¡
)

142 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendto from unconnected clientÅo "

143 "£rvî cou¡:%d,Éºno:%d", 
cou¡
, 
î∫o
);

145 
	`t°_ªsm
(
TPASS
, "sendto() from unconnected clientÅo server - SUCCESS");

147 
a˝t_sk
 = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

149 
	`ã°_ªcv
(
a˝t_sk
, 
mesßge_rcv
, 
msg_cou¡
, 
Êag
);

153 
	`ã°_£ndto
(
sk
, 
mesßge
, 5 , 
Êag
, (c⁄° 
sockaddr
 *)&
c⁄n_addr
,

154 
Àn
);

155 
	`ã°_ªcv
(
a˝t_sk
, 
mesßge_rcv
, 5, 
Êag
);

157 
	`t°_ªsm
(
TPASS
, "sendto()Öartial data fromá buffer - SUCCESS");

159 
	`˛o£
(
sk1
);

160 
	`˛o£
(
l°n_sk
);

161 
	`˛o£
(
a˝t_sk
);

164 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_shutdown.c

43 
	~<°dio.h
>

44 
	~<î∫o.h
>

45 
	~<sys/sockë.h
>

46 
	~<√töë/ö.h
>

47 
	~<¨∑/öë.h
>

48 
	~<löux/sockë.h
>

49 
	~<√töë/s˘p.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<uni°d.h
>

52 
	~<°rög.h
>

53 
	~<°dlib.h
>

54 
	~<s˘putû.h
>

56 *
	gTCID
 = 
__FILE__
;

57 
	gTST_TOTAL
 = 6;

58 
	gTST_CNT
 = 0;

60 
	#MAX_CLIENTS
 10

	)

63 
	$maö
(
¨gc
, *
¨gv
[])

65 
˛¡_sk
[
MAX_CLIENTS
], 
a˝t_sk
[MAX_CLIENTS],
sk
;

66 
l°n_sk
;

67 
sockaddr_ö
 
l°n_addr
, 
a˝t_addr
;

68 
sockÀn_t
 
addæí
;

69 
îr‹
, 
i
;

70 *
mesßge
 = "hello, world!\n";

71 
msgbuf
[100];

72 
pf_˛ass
;

73 
fd
, 
îr_no
 = 0;

74 
fûíame
[21];

79 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

80 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

83 
pf_˛ass
 = 
PF_INET
;

85 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

86 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

87 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

89 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

90 
l°n_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

92 
	`ã°_böd
(
l°n_sk
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

94 
	`ã°_li°í
(
l°n_sk
, 
MAX_CLIENTS
);

96 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

97 
˛¡_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

98 
	`ã°_c⁄√˘
(
˛¡_sk
[
i
], (
sockaddr
 *)&
l°n_addr
,

99 (
l°n_addr
));

102 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

103 
addæí
 = (
a˝t_addr
);

104 
a˝t_sk
[
i
] = 
	`ã°_ac˚±
(
l°n_sk
, (
sockaddr
 *)&
a˝t_addr
,

105 &
addæí
);

109 
îr‹
 = 
	`shutdown
(-1, 
SHUT_WR
);

110 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

111 
	`t°_brkm
(
TBROK
, 
t°_exô
, "shutdown withá bad socket "

112 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

114 
	`t°_ªsm
(
TPASS
, "shutdown() withá bad socket descriptor - EBADF");

117 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

118 
fd
 = 
	`mk°emp
(
fûíame
);

119 i‡(
fd
 == -1)

120 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

121 
fûíame
, 
	`°ªº‹
(
î∫o
));

122 
îr‹
 = 
	`shutdown
(
fd
, 
SHUT_WR
);

123 i‡(
îr‹
 == -1)

124 
îr_no
 = 
î∫o
;

125 
	`˛o£
(
fd
);

126 
	`u∆ök
(
fûíame
);

127 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

128 
	`t°_brkm
(
TBROK
, 
t°_exô
, "shutdown withán invalid socket "

129 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

131 
	`t°_ªsm
(
TPASS
, "shutdown() withán invalid socket - ENOTSOCK");

133 
î∫o
 = 0;

135 
	`ã°_£nd
(
a˝t_sk
[0], 
mesßge
, 
	`°æí
(message), 0);

138 
îr‹
 = 
	`shutdown
(
˛¡_sk
[0], 
SHUT_WR
);

139 i‡(
îr‹
 < 0)

140 
	`t°_brkm
(
TBROK
, 
t°_exô
, "shutdown with SHUT_WR flag "

141 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

146 
îr‹
 = 
	`ªcv
(
a˝t_sk
[0], 
msgbuf
, 100, 0);

147 i‡((
îr‹
 !0Ë|| (
î∫o
 != 0))

148 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUTDOWNÑeceived socket "

149 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

154 
	`ã°_ªcv
(
˛¡_sk
[0], 
msgbuf
, 100, 0);

157 
îr‹
 = 
	`ªcv
(
˛¡_sk
[0], 
msgbuf
, 100, 0);

158 i‡((
îr‹
 !-1Ë|| (
î∫o
 !
ENOTCONN
))

159 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_WR socket withÇo "

160 "mesßge†îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

162 
	`t°_ªsm
(
TPASS
, "shutdown() with SHUT_WR flag - SUCCESS");

164 
î∫o
 = 0;

167 
	`ã°_shutdown
(
˛¡_sk
[1], 
SHUT_RD
);

169 
îr‹
 = 
	`ªcv
(
˛¡_sk
[1], 
msgbuf
, 100, 0);

170 i‡((
îr‹
 !0Ë|| (
î∫o
 != 0))

171 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RD socket "

172 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

175 
îr‹
 = 
	`ã°_£nd
(
˛¡_sk
[1], 
mesßge
, 
	`°æí
(message), 0);

176 i‡(
îr‹
 < 0)

177 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send oná SHUT_RD socket "

178 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

181 
	`ã°_ªcv
(
a˝t_sk
[1], 
msgbuf
, 100, 0);

184 
	`ã°_£nd
(
a˝t_sk
[1], 
mesßge
, 
	`°æí
(message), 0);

187 
îr‹
 = 
	`ªcv
(
˛¡_sk
[1], 
msgbuf
, 100, 0);

188 i‡((
îr‹
 !0Ë|| (
î∫o
 != 0))

189 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RD socket "

190 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

192 
	`t°_ªsm
(
TPASS
, "shutdown() with SHUT_RD flag - SUCCESS");

196 
	`ã°_shutdown
(
˛¡_sk
[2], 
SHUT_RDWR
);

198 
îr‹
 = 
	`ªcv
(
a˝t_sk
[2], 
msgbuf
, 100, 0);

199 i‡((
îr‹
 !0Ë|| (
î∫o
 != 0))

200 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUTDOWNÑeceived socket "

201 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

203 
îr‹
 = 
	`ªcv
(
˛¡_sk
[2], 
msgbuf
, 100, 0);

204 i‡((
îr‹
 !0Ë|| (
î∫o
 != 0))

205 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RDWR socket "

206 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

208 
	`t°_ªsm
(
TPASS
, "shutdown() with SHUT_RDWR flag - SUCCESS");

211 
îr‹
 = 
	`shutdown
(
sk
, 
SHUT_RD
);

212 i‡((
îr‹
 !-1Ë|| (
î∫o
 !
ENOTCONN
))

213 
	`t°_brkm
(
TBROK
, 
t°_exô
, "shutdown onán unconnected socket "

214 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

216 
	`t°_ªsm
(
TPASS
, "shutdown() onán unconnected socket - SUCCESS");

218 
i
 = 0; i < 
MAX_CLIENTS
; i++)

219 
	`˛o£
(
˛¡_sk
[
i
]);

220 
i
 = 0; i < 
MAX_CLIENTS
; i++)

221 
	`˛o£
(
a˝t_sk
[
i
]);

224 
	`˛o£
(
l°n_sk
);

225 
	`˛o£
(
sk
);

228 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_socket_bind_listen.c

61 
	~<°dio.h
>

62 
	~<uni°d.h
>

63 
	~<f˙é.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

68 
	~<√töë/ö.h
>

69 
	~<¨∑/öë.h
>

70 
	~<î∫o.h
>

71 
	~<√töë/s˘p.h
>

72 
	~<sys/uio.h
>

73 
	~<s˘putû.h
>

75 
	#SCTP_RESERVED_PORT
 7

	)

76 
	#SCTP_INV_LOOPBACK
 "172.31.43.112"

	)

78 *
	gTCID
 = 
__FILE__
;

79 
	gTST_TOTAL
 = 15;

80 
	gTST_CNT
 = 0;

83 
	$maö
(
¨gc
, *
¨gv
[])

85 
sk
,
pf_˛ass
;

86 
îr‹
 = 0;

87 
uid
;

88 
fd
, 
îr_no
 = 0;

89 
fûíame
[21];

91 
sockaddr_ö
 
böd_addr
;

96 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

97 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

99 
pf_˛ass
 = 
PF_INET
;

102 
sk
 = 
	`sockë
(-1, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

103 i‡(
sk
 !-1 || 
î∫o
 !
EAFNOSUPPORT
)

104 
	`t°_brkm
(
TBROK
, 
t°_exô
, "socket() with invalid domain "

105 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

107 
	`t°_ªsm
(
TPASS
, "socket() with invalid domain - EAFNOSUPPORT");

110 
sk
 = 
	`sockë
(
pf_˛ass
, -1, 
IPPROTO_SCTP
);

111 i‡(
sk
 !-1 || 
î∫o
 !
EINVAL
)

112 
	`t°_brkm
(
TBROK
, 
t°_exô
, "socket() with invalidÅype "

113 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

115 
	`t°_ªsm
(
TPASS
, "socket() with invalidÅype - EINVAL");

118 
sk
 = 
	`sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

119 i‡(
sk
 < 0)

120 
	`t°_brkm
(
TBROK
, 
t°_exô
, "valid socket() call "

121 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

123 
	`t°_ªsm
(
TPASS
, "socket() - SUCCESS");

126 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *)-1, (
sockaddr_ö
));

127 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

128 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() with invalidáddressÖtr "

129 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

131 
	`t°_ªsm
(
TPASS
, "bind() with invalidáddressÖtr - EFAULT");

134 
böd_addr
.
sö_Ámûy
 = 
AF_INET
;

135 
böd_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

136 
böd_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

138 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
, (bind_addr)-2);

139 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

140 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() with invalidáddressÜength "

141 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

143 
	`t°_ªsm
(
TPASS
, "bind() with invalidáddressÜength - EINVAL");

146 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

147 
fd
 = 
	`mk°emp
(
fûíame
);

148 i‡(
fd
 == -1)

149 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

150 
fûíame
, 
	`°ªº‹
(
î∫o
));

151 
îr‹
 = 
	`böd
(
fd
, (
sockaddr
 *Ë&
böd_addr
, (bind_addr));

152 i‡(
îr‹
 == -1)

153 
îr_no
 = 
î∫o
;

154 
	`˛o£
(
fd
);

155 
	`u∆ök
(
fûíame
);

156 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

157 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() with invalid socket "

158 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

160 
	`t°_ªsm
(
TPASS
, "bind() with invalid socket descriptor - ENOTSOCK");

164 
böd_addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
SCTP_INV_LOOPBACK
);

165 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
, (bind_addr));

166 i‡(
îr‹
 !-1 || 
î∫o
 !
EADDRNOTAVAIL
)

167 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() with invalidÜocal "

168 "addªs†îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

170 
	`t°_ªsm
(
TPASS
, "bind() with invalidÜocaláddress - EADDRNOTAVAIL");

174 
böd_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

176 
	`ã°_böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
, (bind_addr));

178 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
, (bind_addr));

179 i‡(
îr‹
 !-1 || 
î∫o
 !
EINVAL
)

180 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() onánálready bound socket "

181 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

183 
	`t°_ªsm
(
TPASS
, "bind() onánálready bound socket - EINVAL");

186 
	`˛o£
(
sk
);

189 
sk
 = 
	`sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

193 
uid
 = 
	`gëuid
();

194 i‡(
uid
 != 0) {

195 
böd_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_RESERVED_PORT
);

196 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
,

197 (
böd_addr
));

198 i‡(
îr‹
 !-1 || 
î∫o
 !
EACCES
)

199 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() onÑeserverdÖort "

200 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

202 
	`t°_ªsm
(
TPASS
, "bind() onÑeservedÖort - EACCESS");

207 
böd_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

208 
böd_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

209 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
,(bind_addr));

210 i‡–
îr‹
 < 0 )

211 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() with INADDR_ANYáddressánd "

212 "n⁄-zîÿp‹àîr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

214 
	`t°_ªsm
(
TPASS
, "bind() with INADDR_ANYáddressándÇon-zeroÖort - "

218 
	`˛o£
(
sk
);

221 
sk
 = 
	`sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

225 
böd_addr
.
sö_p‹t
 = 0;

226 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
,(bind_addr));

227 i‡–
îr‹
 < 0 )

228 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() with INADDR_ANYáddressánd "

229 "zîÿp‹àîr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

231 
	`t°_ªsm
(
TPASS
, "bind() with INADDR_ANYáddressánd zeroÖort - "

235 
	`˛o£
(
sk
);

238 
sk
 = 
	`sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

242 
böd_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

243 
böd_addr
.
sö_p‹t
 = 0;

244 
îr‹
 = 
	`böd
(
sk
, (
sockaddr
 *Ë&
böd_addr
,(bind_addr));

245 i‡–
îr‹
 < 0 )

246 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bind() withÜocaláddressánd "

247 "zîÿp‹àîr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

249 
	`t°_ªsm
(
TPASS
, "bind() withÜocaláddressánd zeroÖort - "

253 
îr‹
 = 
	`li°í
(-1, 3);

254 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

255 
	`t°_brkm
(
TBROK
, 
t°_exô
, "listen() with bad socket descriptor "

256 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

258 
	`t°_ªsm
(
TPASS
, "listen() with bad socket descriptor - EBADF");

261 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

262 
fd
 = 
	`mk°emp
(
fûíame
);

263 i‡(
fd
 == -1)

264 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

265 
fûíame
, 
	`°ªº‹
(
î∫o
));

266 
îr‹
 = 
	`li°í
(
fd
, 3);

267 i‡(
îr‹
 == -1)

268 
îr_no
 = 
î∫o
;

269 
	`˛o£
(
fd
);

270 
	`u∆ök
(
fûíame
);

271 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

272 
	`t°_brkm
(
TBROK
, 
t°_exô
, "listen() with invalid socket "

273 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

275 
	`t°_ªsm
(
TPASS
, "listen() with invalid socket - ENOTSOCK");

278 
îr‹
 = 
	`li°í
(
sk
, 3);

279 i‡–
îr‹
 < 0 )

280 
	`t°_brkm
(
TBROK
, 
t°_exô
, "listen() oná bound socket "

281 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

283 
	`t°_ªsm
(
TPASS
, "listen() oná bound socket - SUCCESS");

285 
	`˛o£
(
sk
);

288 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_sockopt.c

63 
	~<°dio.h
>

64 
	~<uni°d.h
>

65 
	~<f˙é.h
>

66 
	~<°dlib.h
>

67 
	~<°rög.h
>

68 
	~<sys/ty≥s.h
>

69 
	~<sys/sockë.h
>

70 
	~<√töë/ö.h
>

71 
	~<î∫o.h
>

72 
	~<√töë/s˘p.h
>

73 
	~<sys/uio.h
>

74 
	~<s˘putû.h
>

76 *
	gTCID
 = 
__FILE__
;

77 
	gTST_TOTAL
 = 22;

78 
	gTST_CNT
 = 0;

81 
	$maö
()

83 
îr‹
;

84 
sockÀn_t
 
Àn
;

85 
sk
, 
sk1
, 
sk2
, 
a˝t_sk
, 
pf_˛ass
;

86 
s˘p_πoöfo
 
gπöfo
;

87 
sockaddr_ö
 
l°n_addr
, 
c⁄n_addr
;

88 
s˘p_öômsg
 
gömsg
;

89 
s˘p_öômsg
 
sömsg
;

90 
lögî
 
¶ögî
;

91 
lögî
 
glögî
;

92 
sockaddr_ö
 
addr
;

93 
sockaddr_ö
 *
gaddr
;

94 
s˘p_°©us
 
g°©us
;

95 
rcvbuf_vÆ_gë
, 
rcvbuf_vÆ_£t
;

96 
¢dbuf_vÆ_gë
, 
¢dbuf_vÆ_£t
;

97 
s˘p_¥im
 
g¥imaddr
;

98 
s˘p_¥im
 
•rimaddr
;

99 
s˘p_asso˝¨ams
 
ßsso˝¨ams
;

100 
s˘p_asso˝¨ams
 
gasso˝¨ams
;

101 
fd
, 
îr_no
 = 0;

102 
fûíame
[21];

107 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

108 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

110 
pf_˛ass
 = 
PF_INET
;

112 
sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

115 
îr‹
 = 
	`£tsock›t
(-1, 
IPPROTO_SCTP
, 0, 0, 0);

116 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

117 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt withá bad socket "

118 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

120 
	`t°_ªsm
(
TPASS
, "setsockopt() withá bad socket descriptor - EBADF");

123 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

124 
fd
 = 
	`mk°emp
(
fûíame
);

125 i‡(
fd
 == -1)

126 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

127 
fûíame
, 
	`°ªº‹
(
î∫o
));

128 
îr‹
 = 
	`£tsock›t
(
fd
, 
IPPROTO_SCTP
, 0, 0, 0);

129 i‡(
îr‹
 == -1)

130 
îr_no
 = 
î∫o
;

131 
	`˛o£
(
fd
);

132 
	`u∆ök
(
fûíame
);

133 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

134 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt withán invalid socket "

135 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

137 
	`t°_ªsm
(
TPASS
, "setsockopt() withán invalid socket - ENOTSOCK");

140 
îr‹
 = 
	`£tsock›t
(
sk
, -1, 
SCTP_RTOINFO
, 0, 0);

141 i‡(
îr‹
 !-1 || 
î∫o
 !
ENOPROTOOPT
)

142 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt with invalidÜevel "

143 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

145 
	`t°_ªsm
(
TPASS
, "setsockopt() withán invalidÜevel - ENOPROTOOPT");

148 
îr‹
 = 
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_RTOINFO
,

149 (c⁄° 
s˘p_πoöfo
 *)-1, (sctp_rtoinfo));

150 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

151 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt with invalid option "

152 "buf„∏îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

154 
	`t°_ªsm
(
TPASS
, "setsockopt() with invalid option buffer - EFAULT");

157 
îr‹
 = 
	`£tsock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_AUTOCLOSE
, 0, 0);

158 i‡(
îr‹
 !-1 || 
î∫o
 !
EOPNOTSUPP
)

159 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt with invalid option "

160 "«mêîr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

162 
	`t°_ªsm
(
TPASS
, "setsockopt() with invalid optionÇame - EOPNOTSUPP");

165 
îr‹
 = 
	`gësock›t
(-1, 
IPPROTO_SCTP
, 0, 0, 0);

166 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

167 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt withá bad socket "

168 "des¸ùt‹Éº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

170 
	`t°_ªsm
(
TPASS
, "getsockopt() withá bad socket descriptor - EBADF");

173 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

174 
fd
 = 
	`mk°emp
(
fûíame
);

175 i‡(
fd
 == -1)

176 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

177 
fûíame
, 
	`°ªº‹
(
î∫o
));

178 
îr‹
 = 
	`gësock›t
(
fd
, 
IPPROTO_SCTP
, 0, 0, 0);

179 i‡(
îr‹
 == -1)

180 
îr_no
 = 
î∫o
;

181 
	`˛o£
(
fd
);

182 
	`u∆ök
(
fûíame
);

183 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

184 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt withán invalid socket "

185 "îr‹:%d,Éºno:%d", 
îr‹
, 
îr_no
);

187 
	`t°_ªsm
(
TPASS
, "getsockopt() withán invalid socket - ENOTSOCK");

194 
îr‹
 = 
	`gësock›t
(
sk
, -1, 
SCTP_RTOINFO
, 0, 0);

195 i‡(
îr‹
 !-1 || 
î∫o
 !
ENOPROTOOPT
)

196 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt with invalidÜevel "

197 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

199 
	`t°_ªsm
(
TPASS
, "getsockopt() withán invalidÜevel - ENOPROTOOPT");

201 
Àn
 = (
s˘p_πoöfo
);

204 
îr‹
 = 
	`gësock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_RTOINFO
,

205 (
s˘p_πoöfo
 *)-1, &
Àn
);

206 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

207 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt with invalid option "

208 "buf„∏îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

210 
	`t°_ªsm
(
TPASS
, "getsockopt() with invalid option buffer - EFAULT");

213 
îr‹
 = 
	`gësock›t
(
sk
, 
IPPROTO_SCTP
, 
SCTP_AUTOCLOSE
, &
gπöfo
, &
Àn
);

214 i‡(
îr‹
 !-1 || 
î∫o
 !
EOPNOTSUPP
)

215 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt with invalid option "

216 "«mêîr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

218 
	`t°_ªsm
(
TPASS
, "getsockopt() with invalid optionÇame - EOPNOTSUPP");

220 
	`˛o£
(
sk
);

222 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

223 
sk2
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

225 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

226 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

227 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

229 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

230 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

231 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

233 
Àn
 = (
s˘p_öômsg
);

236 
	`ã°_gësock›t
(
sk1
, 
SCTP_INITMSG
, &
gömsg
, &
Àn
);

238 
	`t°_ªsm
(
TPASS
, "getsockopt() SCTP_INITMSG - SUCCESS");

240 
sömsg
.
söô_num_o°ªams
 = 5;

241 
sömsg
.
söô_max_ö°ªams
 = 5;

242 
sömsg
.
söô_max_©ãm±s
 = 3;

243 
sömsg
.
söô_max_öô_timeo
 = 30;

245 
	`ã°_£tsock›t
(
sk1
, 
SCTP_INITMSG
, &
sömsg
, (sinmsg));

247 
	`ã°_gësock›t
(
sk1
, 
SCTP_INITMSG
, &
gömsg
, &
Àn
);

249 i‡(
sömsg
.
söô_num_o°ªams
 !
gömsg
.sinit_num_ostreams &&

250 
sömsg
.
söô_max_ö°ªams
 !
gömsg
.sinit_max_instreams &&

251 
sömsg
.
söô_max_©ãm±s
 !
gömsg
.sinit_max_attempts &&

252 
sömsg
.
söô_max_öô_timeo
 !
gömsg
.sinit_max_init_timeo)

253 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt/getsockopt SCTP_INITMSG "

256 
	`t°_ªsm
(
TPASS
, "setsockopt() SCTP_INITMSG - SUCCESS");

259 
	`ã°_gësock›t
(
sk2
, 
SCTP_INITMSG
, &
gömsg
, &
Àn
);

262 i‡(
sömsg
.
söô_num_o°ªams
 =
gömsg
.sinit_num_ostreams &&

263 
sömsg
.
söô_max_ö°ªams
 =
gömsg
.sinit_max_instreams &&

264 
sömsg
.
söô_max_©ãm±s
 =
gömsg
.sinit_max_attempts &&

265 
sömsg
.
söô_max_öô_timeo
 =
gömsg
.sinit_max_init_timeo)

266 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt/getsockopt SCTP_INITMSG "

270 
¶ögî
.
l_⁄off
 = 0;

271 
¶ögî
.
l_lögî
 = 0;

272 
	`ã°_böd
(
sk1
, (
sockaddr
 *Ë&
l°n_addr
, (lstn_addr));

273 
	`ã°_li°í
(
sk1
, 10 );

274 
Àn
 = (
sockaddr_ö
);

275 
	`ã°_c⁄√˘
(
sk2
, (
sockaddr
 *Ë&
c⁄n_addr
, 
Àn
);

277 
a˝t_sk
 = 
	`ã°_ac˚±
(
sk1
, (
sockaddr
 *)&
addr
, &
Àn
);

279 
Àn
 = (
lögî
);

281 
îr‹
 = 
	`£tsock›t
(
sk2
, 
SOL_SOCKET
, 
SO_LINGER
, &
¶ögî
, 
Àn
);

282 i‡(
îr‹
 < 0)

283 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt SO_LINGER "

284 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

286 
	`t°_ªsm
(
TPASS
, "setsockopt() SO_LINGER - SUCCESS");

289 
îr‹
 = 
	`gësock›t
(
sk2
, 
SOL_SOCKET
, 
SO_LINGER
, &
glögî
, &
Àn
);

290 i‡(
îr‹
 < 0)

291 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SO_LINGER "

292 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

294 
	`t°_ªsm
(
TPASS
, "getsockopt() SO_LINGER - SUCCESS");

296 i‡(
¶ögî
.
l_⁄off
 !
glögî
.l_onoff ||

297 
¶ögî
.
l_lögî
 !
glögî
.l_linger)

298 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt/getsockopt SO_LINGER "

303 
Àn
 = ();

305 
îr‹
 = 
	`gësock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
rcvbuf_vÆ_gë
, &
Àn
);

306 i‡(
îr‹
 < 0)

307 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SO_RCVBUF "

308 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

310 
	`t°_ªsm
(
TPASS
, "getsockopt() SO_RCVBUF - SUCCESS");

312 
Àn
 = (
s˘p_°©us
);

314 
îr‹
 = 
	`gësock›t
(
sk2
, 
IPPROTO_SCTP
, 
SCTP_STATUS
, &
g°©us
, &
Àn
);

315 i‡(
îr‹
 < 0)

316 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_STATUS "

317 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

319 
	`t°_ªsm
(
TPASS
, "getsockopt() SCTP_STATUS - SUCCESS");

323 
Àn
 = ();

324 
rcvbuf_vÆ_£t
 = 2048;

326 
îr‹
 = 
	`£tsock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
rcvbuf_vÆ_£t
, 
Àn
);

327 i‡(
îr‹
 < 0)

328 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt SO_RCVBUF "

329 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

331 
	`t°_ªsm
(
TPASS
, "setsockopt() SO_RCVBUF - SUCCESS");

333 
îr‹
 = 
	`gësock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
rcvbuf_vÆ_gë
, &
Àn
);

334 i‡(
îr‹
 < 0)

335 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SO_RCVBUF "

336 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

338 i‡((2 * 
rcvbuf_vÆ_£t
Ë!
rcvbuf_vÆ_gë
)

339 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Comparison failed:Set valueánd "

341 (2*
rcvbuf_vÆ_£t
), 
rcvbuf_vÆ_gë
);

343 
¢dbuf_vÆ_£t
 = 2304;

345 
îr‹
 = 
	`£tsock›t
(
sk2
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
¢dbuf_vÆ_£t
, 
Àn
);

346 i‡(
îr‹
 < 0)

347 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt SO_SNDBUF "

348 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

350 
	`t°_ªsm
(
TPASS
, "setsockopt() SO_SNDBUF - SUCCESS");

353 
îr‹
 = 
	`gësock›t
(
sk2
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
¢dbuf_vÆ_gë
, &
Àn
);

354 i‡(
îr‹
 < 0)

355 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SO_SNDBUF "

356 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

358 
	`t°_ªsm
(
TPASS
, "getsockopt() SO_SNDBUF - SUCCESS");

360 i‡((2 * 
¢dbuf_vÆ_£t
Ë!
¢dbuf_vÆ_gë
)

361 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Comparison failed:Set valueánd "

363 (2*
¢dbuf_vÆ_£t
), 
¢dbuf_vÆ_gë
);

367 
Àn
 = (
s˘p_¥im
);

369 
îr‹
 = 
	`gësock›t
(
sk2
,
IPPROTO_SCTP
, 
SCTP_PRIMARY_ADDR
, &
g¥imaddr
,

370 &
Àn
);

371 i‡(
îr‹
 < 0)

372 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_PRIMARY_ADDR "

373 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

375 
	`t°_ªsm
(
TPASS
, "getsockopt() SCTP_PRIMARY_ADDR - SUCCESS");

377 
gaddr
 = (
sockaddr_ö
 *Ë&
g¥imaddr
.
s•_addr
;

378 if(
	`ht⁄s
(
gaddr
->
sö_p‹t
Ë!
l°n_addr
.sin_port &&

379 
gaddr
->
sö_Ámûy
 !
l°n_addr
.sin_family &&

380 
gaddr
->
sö_addr
.
s_addr
 !
l°n_addr
.sin_addr.s_addr)

381 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_PRIMARY_ADDR value "

384 
	`mem˝y
(&
•rimaddr
, &
g¥imaddr
, (
s˘p_¥im
));

387 
îr‹
 = 
	`£tsock›t
(
sk2
,
IPPROTO_SCTP
, 
SCTP_PRIMARY_ADDR
, &
•rimaddr
,

388 
Àn
);

389 i‡(
îr‹
 < 0)

390 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt SCTP_PRIMARY_ADDR "

391 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

393 
	`t°_ªsm
(
TPASS
, "setsockopt() SCTP_PRIMARY_ADDR - SUCCESS");

397 
Àn
 = (
s˘p_asso˝¨ams
);

398 
îr‹
 = 
	`gësock›t
(
sk2
, 
IPPROTO_SCTP
, 
SCTP_ASSOCINFO
, &
gasso˝¨ams
,

399 &
Àn
);

400 i‡(
îr‹
 < 0)

401 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_ASSOCINFO "

402 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

404 
	`t°_ªsm
(
TPASS
, "getsockopt() SCTP_ASSOCINFO - SUCCESS");

407 
	`mem˝y
(&
ßsso˝¨ams
, &
gasso˝¨ams
, (
s˘p_asso˝¨ams
));

408 
ßsso˝¨ams
.
ßsoc_asocmaxrxt
 += 5;

409 
ßsso˝¨ams
.
ßsoc_cookõ_li„
 += 10;

411 
îr‹
 = 
	`£tsock›t
(
sk2
, 
IPPROTO_SCTP
, 
SCTP_ASSOCINFO
, &
ßsso˝¨ams
,

412 
Àn
);

413 i‡(
îr‹
 < 0)

414 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt SCTP_ASSOCINFO "

415 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

417 
îr‹
 = 
	`gësock›t
(
sk2
, 
IPPROTO_SCTP
, 
SCTP_ASSOCINFO
, &
gasso˝¨ams
,

418 &
Àn
);

419 i‡(
îr‹
 < 0)

420 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_ASSOCINFO "

421 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

423 i‡(
ßsso˝¨ams
.
ßsoc_asocmaxrxt
 !
gasso˝¨ams
.sasoc_asocmaxrxt ||

424 
ßsso˝¨ams
.
ßsoc_cookõ_li„
 !
gasso˝¨ams
.sasoc_cookie_life)

425 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt SCTP_ASSOCINFO value "

427 
	`t°_ªsm
(
TPASS
, "setsockopt() SCTP_ASSOCINFO - SUCCESS");

429 
	`˛o£
(
sk2
);

430 
	`˛o£
(
sk1
);

431 
	`˛o£
(
a˝t_sk
);

434 
	}
}

	@sctp-tools/src/func_tests/test_1_to_1_threads.c

37 
	~<±hªad.h
>

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<f˙é.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<¨∑/öë.h
>

47 
	~<î∫o.h
>

48 
	~<√töë/s˘p.h
>

49 
	~<sys/uio.h
>

50 
	~<löux/sockë.h
>

51 
	~<s˘putû.h
>

53 
	#THREADS
 10

	)

54 
	#THREAD_SND_RCV_LOOPS
 10

	)

56 *
	gTCID
 = 
__FILE__
;

57 
	gTST_TOTAL
 = 1;

58 
	gTST_CNT
 = 0;

60 
	g˛õ¡_sk
;

61 
	g£rvî_sk
;

62 
	ga˝t_sk
;

63 
sockaddr_ö
 
	gc⁄n_addr
;

64 *
	gmesßge
 = "hello, world!\n";

67 
	$t_ªcv
() {

68 
˙t
;

69 
msghdr
 
ömesßge
;

70 
iovec
 
iov
;

71 
öcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

72 * 
buf„r
;

74 
	`mem£t
(&
ömesßge
, 0, (inmessage));

75 
buf„r
 = 
	`mÆloc
(100);

77 
iov
.
iov_ba£
 = 
buf„r
;

78 
iov
.
iov_Àn
 = 100;

79 
ömesßge
.
msg_iov
 = &
iov
;

80 
ömesßge
.
msg_iovÀn
 = 1;

81 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

82 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

84 
˙t
 = 
	`ã°_ªcvmsg
(
a˝t_sk
,&
ömesßge
, 
MSG_WAITALL
);

85 
	`ã°_check_msg_d©a
(&
ömesßge
, 
˙t
, 
	`°æí
(
mesßge
Ë+ 1, 
MSG_EOR
,

87 
	}
}

90 
	$t_£nd
() {

91 
msghdr
 
outmesßge
;

92 
s˘p_¢drcvöfo
 *
söfo
;

93 
cmsghdr
 *
cmsg
;

94 
iovec
 
out_iov
;

95 
outcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

97 
	`mem£t
(&
outmesßge
, 0, (outmessage));

98 
outmesßge
.
msg_«me
 = &
c⁄n_addr
;

99 
outmesßge
.
msg_«mñí
 = (
c⁄n_addr
);

100 
outmesßge
.
msg_iov
 = &
out_iov
;

101 
outmesßge
.
msg_iovÀn
 = 1;

102 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

103 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

104 
outmesßge
.
msg_Êags
 = 0;

106 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

107 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

108 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

109 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

110 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

112 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

113 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

114 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

115 
outmesßge
.
msg_iov
->
iov_Àn
 = (
	`°æí
(
mesßge
) + 1);

117 
	`ã°_£ndmsg
(
˛õ¡_sk
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

118 
	}
}

120 *
	$ªœy
(*
¨g
)

122 
id
 = *(*Ë
¨g
;

124 i‡(
id
 == 0) {

125 
	`t_£nd
();

127 
	`t_ªcv
();

128 
	`t_£nd
();

131 
	`±hªad_exô
(
NULL
);

132 
	}
}

135 
	$maö
()

138 
˙t
,
i
;

139 
±h
[
THREADS
];

140 
±hªad_t
 
thªad
[
THREADS
];

141 
°©us
;

142 
exô_°©us
;

143 * 
ªsu…
;

144 
±hªad_©å_t
 
©å
;

145 
sockaddr_ö
 
l°n_addr
;

146 
sockÀn_t
 
Àn
 = (
sockaddr_ö
);

147 
sockaddr_ö
 
svr_addr
;

149 
	`±hªad_©å_öô
(&
©å
);

150 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

152 
£rvî_sk
 = 
	`ã°_sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

153 
˛õ¡_sk
 = 
	`ã°_sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

155 
l°n_addr
.
sö_Ámûy
 = 
AF_INET
;

156 
l°n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

157 
l°n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

159 
c⁄n_addr
.
sö_Ámûy
 = 
AF_INET
;

160 
c⁄n_addr
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

161 
c⁄n_addr
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

163 
	`ã°_böd
(
£rvî_sk
, (
sockaddr
 *)&
l°n_addr
,

164 (
sockaddr_ö
));

166 
	`ã°_li°í
(
£rvî_sk
,10);

168 
	`ã°_c⁄√˘
(
˛õ¡_sk
,(
sockaddr
 *)&
c⁄n_addr
,
Àn
);

170 
a˝t_sk
 = 
	`ã°_ac˚±
(
£rvî_sk
, (
sockaddr
 *)&
svr_addr
, &
Àn
);

172  
i
 = 0; i < 
THREAD_SND_RCV_LOOPS
; i++ ) {

173 
˙t
 = 0; c¡ < 
THREADS
; cnt++) {

174 
±h
[
˙t
] = cnt;

175 
°©us
 = 
	`±hªad_¸óã
(&
thªad
[
˙t
], &
©å
, 
ªœy
, &
±h
[cnt]);

176 i‡(
°©us
)

177 
	`t°_brkm
(
TBROK
, 
t°_exô
, "pthread_create "

178 "Áûed sètus:%d,Éºno:%d", 
°©us
,

179 
î∫o
);

182 
	`±hªad_©å_de°roy
(&
©å
);

183 
˙t
 = 0; c¡ < 
THREADS
 ; cnt++) {

184 
exô_°©us
 = 
	`±hªad_joö
 (
thªad
[
˙t
], &
ªsu…
);

185 i‡(
exô_°©us
 == -1)

186 
	`t°_brkm
(
TBROK
, 
t°_exô
, "pthread_join "

188 
˙t
, 
exô_°©us
);

192 
	`t°_ªsm
(
TPASS
, "sendándÑeceive dataácross multipleÅhreads - "

196 
	}
}

	@sctp-tools/src/func_tests/test_assoc_abort.c

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/sockë.h
>

50 
	~<sys/uio.h
>

51 
	~<√töë/ö.h
>

52 
	~<î∫o.h
>

53 
	~<√töë/s˘p.h
>

54 
	~<s˘putû.h
>

56 *
	gTCID
 = 
__FILE__
;

57 
	gTST_TOTAL
 = 1;

58 
	gTST_CNT
 = 0;

60 
	#MAX_CLIENTS
 10

	)

63 
	$maö
(
¨gc
, *
¨gv
[])

65 
svr_sk
, 
˛t_sk
[
MAX_CLIENTS
];

66 
sockaddr_°‹age_t
 
svr_lo›
, 
˛t_lo›
[
MAX_CLIENTS
];

67 
s˘p_assoc_t
 
svr_associd
[
MAX_CLIENTS
];

68 
iovec
 
iov
;

69 
msghdr
 
ömesßge
;

70 
msghdr
 
outmesßge
;

71 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

72 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

73 
cmsghdr
 *
cmsg
;

74 
s˘p_¢drcvöfo
 *
söfo
;

75 
iovec
 
out_iov
;

76 
îr‹
;

77 
uöt32_t
 
µid
;

78 
uöt32_t
 
°ªam
;

79 
s˘p_assoc_ch™ge
 *
ßc
;

80 *
big_buf„r
;

81 
i
;

82 *
mesßge
 = "hello, world!\n";

83 
s˘p_°©us
 
°©us
;

84 
sockÀn_t
 
°©us_Àn
;

89 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

92 
svr_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

93 
svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

94 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

95 
svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

96 
	`ã°_böd
(
svr_sk
, &
svr_lo›
.
ß
, (svr_loop));

99 
	`ã°_íabÀ_assoc_ch™ge
(
svr_sk
);

102 
	`ã°_li°í
(
svr_sk
, 1);

105 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

106 
˛t_sk
[
i
] = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

108 
˛t_lo›
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

109 
˛t_lo›
[
i
].
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

110 
˛t_lo›
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + i);

111 
	`ã°_böd
(
˛t_sk
[
i
], &
˛t_lo›
[i].
ß
, (clt_loop[i]));

113 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk
[
i
]);

117 
outmesßge
.
msg_«me
 = &
svr_lo›
;

118 
outmesßge
.
msg_«mñí
 = (
svr_lo›
);

119 
outmesßge
.
msg_iov
 = &
out_iov
;

120 
outmesßge
.
msg_iovÀn
 = 1;

121 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

122 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

123 
outmesßge
.
msg_Êags
 = 0;

124 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

125 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

126 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

127 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

128 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

129 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

130 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

131 
µid
 = 
	`ønd
();

132 
°ªam
 = 1;

133 
söfo
->
söfo_µid
 = 
µid
;

134 
söfo
->
söfo_°ªam
 = 
°ªam
;

135 
out_iov
.
iov_ba£
 = 
mesßge
;

136 
out_iov
.
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

141 
i
 = 0; i < 
MAX_CLIENTS
; i++)

142 
	`ã°_£ndmsg
(
˛t_sk
[
i
], &
outmesßge
, 0, 
	`°æí
(
mesßge
) + 1);

145 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

146 
	`mem£t
(&
ömesßge
, 0, (inmessage));

147 
iov
.
iov_ba£
 = 
big_buf„r
;

148 
iov
.
iov_Àn
 = 
REALLY_BIG
;

149 
ömesßge
.
msg_iov
 = &
iov
;

150 
ömesßge
.
msg_iovÀn
 = 1;

151 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

154 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

155 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

156 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

157 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

158 (
s˘p_assoc_ch™ge
),

159 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

165 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

166 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

167 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

168 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

169 (
s˘p_assoc_ch™ge
),

170 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

172 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

173 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

174 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

175 
MSG_EOR
, 
°ªam
, 
µid
);

176 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

177 
svr_associd
[
i
] = 
ßc
->
ßc_assoc_id
;

180 
outmesßge
.
msg_«me
 = 
NULL
;

181 
outmesßge
.
msg_«mñí
 = 0;

182 
outmesßge
.
msg_iov
 = 
NULL
;

183 
outmesßge
.
msg_iovÀn
 = 0;

184 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

185 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

186 
outmesßge
.
msg_Êags
 = 0;

187 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

188 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

189 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

190 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

191 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

192 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

193 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

194 
söfo
->
söfo_Êags
 |
SCTP_ABORT
;

197 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

198 
söfo
->
söfo_assoc_id
 = 
svr_associd
[
i
];

201 
	`mem£t
(&
°©us
, 0, (
s˘p_°©us
));

202 
°©us
.
s°©_assoc_id
 = 
söfo
->
söfo_assoc_id
;

203 
°©us_Àn
 = (
s˘p_°©us
);

204 
îr‹
 = 
	`gësock›t
(
svr_sk
, 
SOL_SCTP
, 
SCTP_STATUS
,

205 &
°©us
, &
°©us_Àn
);

206 i‡(
îr‹
)

207 
	`t°_brkm
(
TBROK
, 
t°_exô
,

209 
	`°ªº‹
(
î∫o
));

212 
	`ã°_£ndmsg
(
svr_sk
, &
outmesßge
, 0, 0);

215 
	`mem£t
(&
°©us
, 0, (
s˘p_°©us
));

216 
°©us
.
s°©_assoc_id
 = 
söfo
->
söfo_assoc_id
;

217 
°©us_Àn
 = (
s˘p_°©us
);

218 
îr‹
 = 
	`gësock›t
(
svr_sk
, 
SOL_SCTP
, 
SCTP_STATUS
,

219 &
°©us
, &
°©us_Àn
);

220 i‡((
îr‹
 !-1Ë&& (
î∫o
 !
EINVAL
))

221 
	`t°_brkm
(
TBROK
, 
t°_exô
,

223 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

226 
	`˛o£
(
svr_sk
);

229 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

230 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

231 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

232 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

233 (
s˘p_assoc_ch™ge
)+4,

234 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_LOST
);

236 
	`˛o£
(
˛t_sk
[
i
]);

239 
	`t°_ªsm
(
TPASS
, "ABORTánássociation using SCTP_ABORT");

243 
	}
}

	@sctp-tools/src/func_tests/test_assoc_shutdown.c

43 
	~<°dio.h
>

44 
	~<uni°d.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/uio.h
>

50 
	~<√töë/ö.h
>

51 
	~<î∫o.h
>

52 
	~<√töë/s˘p.h
>

53 
	~<s˘putû.h
>

55 *
	gTCID
 = 
__FILE__
;

56 
	gTST_TOTAL
 = 1;

57 
	gTST_CNT
 = 0;

59 
	#MAX_CLIENTS
 10

	)

62 
	$maö
(
¨gc
, *
¨gv
[])

64 
svr_sk
, 
˛t_sk
[
MAX_CLIENTS
];

65 
s˘p_assoc_t
 
svr_associd
[
MAX_CLIENTS
];

66 
sockaddr_°‹age_t
 
svr_lo›
, 
˛t_lo›
[
MAX_CLIENTS
];

67 
iovec
 
iov
;

68 
msghdr
 
ömesßge
;

69 
msghdr
 
outmesßge
;

70 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

71 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

72 
cmsghdr
 *
cmsg
;

73 
s˘p_¢drcvöfo
 *
söfo
;

74 
iovec
 
out_iov
;

75 
îr‹
;

76 
uöt32_t
 
µid
;

77 
uöt32_t
 
°ªam
;

78 
s˘p_assoc_ch™ge
 *
ßc
;

79 *
big_buf„r
;

80 
i
;

81 *
mesßge
 = "hello, world!\n";

82 
s˘p_°©us
 
°©us
;

83 
sockÀn_t
 
°©us_Àn
;

88 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

91 
svr_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

93 
svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

94 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

95 
svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

96 
	`ã°_böd
(
svr_sk
, &
svr_lo›
.
ß
, (svr_loop));

99 
	`ã°_íabÀ_assoc_ch™ge
(
svr_sk
);

102 
	`ã°_li°í
(
svr_sk
, 1);

105 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

106 
˛t_sk
[
i
] = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

108 
˛t_lo›
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

109 
˛t_lo›
[
i
].
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

110 
˛t_lo›
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + i);

111 
	`ã°_böd
(
˛t_sk
[
i
], &
˛t_lo›
[i].
ß
, (clt_loop[i]));

113 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk
[
i
]);

117 
outmesßge
.
msg_«me
 = &
svr_lo›
;

118 
outmesßge
.
msg_«mñí
 = (
svr_lo›
);

119 
outmesßge
.
msg_iov
 = &
out_iov
;

120 
outmesßge
.
msg_iovÀn
 = 1;

121 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

122 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

123 
outmesßge
.
msg_Êags
 = 0;

124 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

125 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

126 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

127 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

128 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

129 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

130 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

131 
µid
 = 
	`ønd
();

132 
°ªam
 = 1;

133 
söfo
->
söfo_µid
 = 
µid
;

134 
söfo
->
söfo_°ªam
 = 
°ªam
;

135 
out_iov
.
iov_ba£
 = 
mesßge
;

136 
out_iov
.
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

141 
i
 = 0; i < 
MAX_CLIENTS
; i++)

142 
	`ã°_£ndmsg
(
˛t_sk
[
i
], &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

145 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

146 
	`mem£t
(&
ömesßge
, 0, (inmessage));

147 
iov
.
iov_ba£
 = 
big_buf„r
;

148 
iov
.
iov_Àn
 = 
REALLY_BIG
;

149 
ömesßge
.
msg_iov
 = &
iov
;

150 
ömesßge
.
msg_iovÀn
 = 1;

151 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

154 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

155 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

156 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

157 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

158 (
s˘p_assoc_ch™ge
),

159 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

165 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

166 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

167 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

168 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

169 (
s˘p_assoc_ch™ge
),

170 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

172 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

173 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

174 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
)+1,

175 
MSG_EOR
, 
°ªam
, 
µid
);

176 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

177 
svr_associd
[
i
] = 
ßc
->
ßc_assoc_id
;

181 
outmesßge
.
msg_«me
 = 
NULL
;

182 
outmesßge
.
msg_«mñí
 = 0;

183 
outmesßge
.
msg_iov
 = 
NULL
;

184 
outmesßge
.
msg_iovÀn
 = 0;

185 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

186 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

187 
outmesßge
.
msg_Êags
 = 0;

188 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

189 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

190 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

191 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

192 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

193 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

194 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

195 
söfo
->
söfo_Êags
 |
SCTP_EOF
;

198 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

199 
söfo
->
söfo_assoc_id
 = 
svr_associd
[
i
];

202 
	`mem£t
(&
°©us
, 0, (
s˘p_°©us
));

203 
°©us
.
s°©_assoc_id
 = 
söfo
->
söfo_assoc_id
;

204 
°©us_Àn
 = (
s˘p_°©us
);

205 
îr‹
 = 
	`gësock›t
(
svr_sk
, 
SOL_SCTP
, 
SCTP_STATUS
,

206 &
°©us
, &
°©us_Àn
);

207 i‡(
îr‹
)

208 
	`t°_brkm
(
TBROK
, 
t°_exô
,

210 
	`°ªº‹
(
î∫o
));

213 
	`ã°_£ndmsg
(
svr_sk
, &
outmesßge
, 0, 0);

216 
	`mem£t
(&
°©us
, 0, (
s˘p_°©us
));

217 
°©us
.
s°©_assoc_id
 = 
söfo
->
söfo_assoc_id
;

218 
°©us_Àn
 = (
s˘p_°©us
);

219 
îr‹
 = 
	`gësock›t
(
svr_sk
, 
SOL_SCTP
, 
SCTP_STATUS
,

220 &
°©us
, &
°©us_Àn
);

221 i‡((
îr‹
 !-1Ë&& (
î∫o
 !
EINVAL
))

222 
	`t°_brkm
(
TBROK
, 
t°_exô
,

224 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

227 
	`˛o£
(
svr_sk
);

230 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

231 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

232 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

233 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

234 (
s˘p_assoc_ch™ge
),

235 
SCTP_ASSOC_CHANGE
,

236 
SCTP_SHUTDOWN_COMP
);

238 
	`˛o£
(
˛t_sk
[
i
]);

241 
	`t°_ªsm
(
TPASS
, "Graceful shutdown ofássociations using SCTP_EOF");

245 
	}
}

	@sctp-tools/src/func_tests/test_autoclose.c

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/sockë.h
>

50 
	~<sys/uio.h
>

51 
	~<√töë/ö.h
>

52 
	~<î∫o.h
>

53 
	~<√töë/s˘p.h
>

54 
	~<s˘putû.h
>

56 *
	gTCID
 = 
__FILE__
;

57 
	gTST_TOTAL
 = 1;

58 
	gTST_CNT
 = 0;

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
sk1
, 
sk2
;

64 
sockaddr_°‹age_t
 
lo›1
, 
lo›2
;

65 
msghdr
 
ömesßge
, 
outmesßge
;

66 
iovec
 
iov
, 
out_iov
;

67 
îr‹
;

68 *
big_buf„r
;

69 *
mesßge
 = "hello, world!\n";

70 
uöt32_t
 
auto˛o£
;

75 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

77 
lo›1
.
v4
.
sö_Ámûy
 = 
AF_INET
;

78 
lo›1
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

79 
lo›1
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

81 
lo›2
.
v4
.
sö_Ámûy
 = 
AF_INET
;

82 
lo›2
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

83 
lo›2
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

86 
sk1
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

87 
sk2
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

90 
	`ã°_íabÀ_assoc_ch™ge
(
sk1
);

91 
	`ã°_íabÀ_assoc_ch™ge
(
sk2
);

94 
	`ã°_böd
(
sk1
, &
lo›1
.
ß
, (loop1));

95 
	`ã°_böd
(
sk2
, &
lo›2
.
ß
, (loop2));

98 
	`ã°_li°í
(
sk2
, 1);

103 
auto˛o£
 = 5;

104 
	`ã°_£tsock›t
(
sk1
, 
SCTP_AUTOCLOSE
, &
auto˛o£
, (autoclose));

105 
	`ã°_£tsock›t
(
sk2
, 
SCTP_AUTOCLOSE
, &
auto˛o£
, (autoclose));

108 
	`mem£t
(&
outmesßge
, 0, (outmessage));

109 
outmesßge
.
msg_«me
 = &
lo›2
;

110 
outmesßge
.
msg_«mñí
 = (
lo›2
);

111 
outmesßge
.
msg_iov
 = &
out_iov
;

112 
outmesßge
.
msg_iovÀn
 = 1;

113 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

114 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

116 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

119 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

120 
	`mem£t
(&
ömesßge
, 0, (inmessage));

121 
iov
.
iov_ba£
 = 
big_buf„r
;

122 
iov
.
iov_Àn
 = 
REALLY_BIG
;

123 
ömesßge
.
msg_iov
 = &
iov
;

124 
ömesßge
.
msg_iovÀn
 = 1;

125 
ömesßge
.
msg_c⁄åﬁ
 = 
NULL
;

128 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

129 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

130 (
s˘p_assoc_ch™ge
),

131 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

134 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

135 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

136 (
s˘p_assoc_ch™ge
),

137 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

140 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

141 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

142 
MSG_EOR
|
MSG_CTRUNC
, 0, 0);

144 
	`t°_ªsm
(
TINFO
, "Waiting forÅheássociationsÅo closeáutomatically "

148 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

149 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

150 (
s˘p_assoc_ch™ge
),

151 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

154 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

155 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

156 (
s˘p_assoc_ch™ge
),

157 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

159 
	`t°_ªsm
(
TPASS
, "Autoclose ofássociations");

162 
	`˛o£
(
sk1
);

163 
	`˛o£
(
sk2
);

167 
	}
}

	@sctp-tools/src/func_tests/test_basic.c

47 
	~<°dio.h
>

48 
	~<uni°d.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<sys/sockë.h
>

53 
	~<sys/uio.h
>

54 
	~<√töë/ö.h
>

55 
	~<î∫o.h
>

56 
	~<√töë/s˘p.h
>

57 
	~<s˘putû.h
>

59 *
	gTCID
 = 
__FILE__
;

60 
	gTST_TOTAL
 = 15;

61 
	gTST_CNT
 = 0;

63 
	$maö
()

65 
sk1
, 
sk2
;

66 
sockaddr_°‹age_t
 
lo›1
;

67 
sockaddr_°‹age_t
 
lo›2
;

68 
sockaddr_°‹age_t
 
msg«me
;

69 
iovec
 
iov
;

70 
msghdr
 
ömesßge
;

71 
msghdr
 
outmesßge
;

72 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

73 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

74 
cmsghdr
 *
cmsg
;

75 
s˘p_¢drcvöfo
 *
söfo
;

76 
iovec
 
out_iov
;

77 *
mesßge
 = "hello, world!\n";

78 *
ãÀph⁄e
 = "Watson, come here! IÇeed you!\n";

79 *
ãÀph⁄e_ª•
 = "Iálready brought your coffee...\n";

80 
îr‹
, 
byãs_£¡
;

81 
pf_˛ass
;

82 
uöt32_t
 
µid
;

83 
uöt32_t
 
°ªam
;

84 
s˘p_assoc_t
 
associd1
, 
associd2
;

85 
s˘p_assoc_ch™ge
 *
ßc
;

86 *
big_buf„r
;

87 
sockaddr
 *
œddrs
, *
∑ddrs
;

88 
n_œddrs
, 
n_∑ddrs
, 
i
;

89 
sockaddr
 *
ß_addr
;

90 
sockaddr_ö
 *
ö_addr
;

91 
sockaddr_ö6
 *
ö6_addr
;

92 *
addr_buf
;

97 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

100 #i‡
TEST_V6


101 
pf_˛ass
 = 
PF_INET6
;

103 
lo›1
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

104 
lo›1
.
v6
.
sö6_addr
 = (
ö6_addr
)
SCTP_IN6ADDR_ANY_INIT
;

105 
lo›1
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

107 
lo›2
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

108 
lo›2
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

109 
lo›2
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

111 
pf_˛ass
 = 
PF_INET
;

113 
lo›1
.
v4
.
sö_Ámûy
 = 
AF_INET
;

114 
lo›1
.
v4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

115 
lo›1
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

117 
lo›2
.
v4
.
sö_Ámûy
 = 
AF_INET
;

118 
lo›2
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

119 
lo›2
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

123 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

124 
sk2
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

126 
	`t°_ªsm
(
TPASS
, "socket");

129 
	`ã°_böd
(
sk1
, &
lo›1
.
ß
, (loop1));

130 
	`ã°_böd
(
sk2
, &
lo›2
.
ß
, (loop2));

132 
	`t°_ªsm
(
TPASS
, "bind");

135 
	`ã°_íabÀ_assoc_ch™ge
(
sk1
);

136 
	`ã°_íabÀ_assoc_ch™ge
(
sk2
);

139 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

140 
	`mem£t
(&
ömesßge
, 0, (inmessage));

141 
iov
.
iov_ba£
 = 
big_buf„r
;

142 
iov
.
iov_Àn
 = 
REALLY_BIG
;

143 
ömesßge
.
msg_iov
 = &
iov
;

144 
ömesßge
.
msg_iovÀn
 = 1;

145 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

146 
ömesßge
.
msg_«me
 = &
msg«me
;

151 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

152 
îr‹
 = 
	`ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

153 i‡(
îr‹
 > 0)

154 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recvmsg oná socketÇeither"

155 "li°íögÇ‹É°ablishedÉº‹: %d", 
îr‹
);

157 
	`t°_ªsm
(
TPASS
, "recvmsg oná socketÇeitherÜisteningÇor "

161 
îr‹
 = 
	`ã°_li°í
(
sk2
, 1);

163 
	`t°_ªsm
(
TPASS
, "listen");

166 
outmesßge
.
msg_«me
 = &
lo›2
;

167 
outmesßge
.
msg_«mñí
 = (
lo›2
);

168 
outmesßge
.
msg_iov
 = &
out_iov
;

169 
outmesßge
.
msg_iovÀn
 = 1;

170 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

171 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

172 
outmesßge
.
msg_Êags
 = 0;

173 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

174 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

175 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

176 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

177 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

178 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

179 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

180 
µid
 = 
	`ønd
();

181 
°ªam
 = 1;

182 
söfo
->
söfo_µid
 = 
µid
;

183 
söfo
->
söfo_°ªam
 = 
°ªam
;

184 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

185 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

186 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

188 
	`t°_ªsm
(
TPASS
, "sendmsg withá valid msg_name");

191 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

192 
ömesßge
.
msg_«mñí
 = (
msg«me
);

193 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

194 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

195 (
s˘p_assoc_ch™ge
),

196 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

197 #i‡
TEST_V6


199 i‡(
ömesßge
.
msg_«mñí
 !(
sockaddr_ö6
)) {

200 
DUMP_CORE
;

202 i‡(
msg«me
.
v6
.
sö6_p‹t
 !
	`ht⁄s
(
SCTP_TESTPORT_1
)) {

203 
DUMP_CORE
;

206 i‡(
msg«me
.
v6
.
sö6_Ámûy
 !
AF_INET6
) {

207 
DUMP_CORE
;

210 i‡(
	`memcmp
(&
msg«me
.
v6
.
sö6_addr
, &
ö6addr_lo›back
,

211 (
msg«me
.
v6
.
sö6_addr
))) {

212 
DUMP_CORE
;

215 i‡(
ömesßge
.
msg_«mñí
 !(
sockaddr_ö
)) {

216 
DUMP_CORE
;

218 i‡(
msg«me
.
v4
.
sö_p‹t
 !
	`ht⁄s
(
SCTP_TESTPORT_1
)) {

219 
DUMP_CORE
;

222 i‡(
msg«me
.
v4
.
sö_Ámûy
 !
AF_INET
) {

223 
DUMP_CORE
;

225 i‡(
msg«me
.
v4
.
sö_addr
.
s_addr
 !
SCTP_IP_LOOPBACK
) {

226 
DUMP_CORE
;

229 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

230 
associd2
 = 
ßc
->
ßc_assoc_id
;

233 
iov
.
iov_ba£
 = 
big_buf„r
;

234 
iov
.
iov_Àn
 = 
REALLY_BIG
;

235 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

236 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

237 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

238 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

239 (
s˘p_assoc_ch™ge
),

240 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

241 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

242 
associd1
 = 
ßc
->
ßc_assoc_id
;

244 
	`t°_ªsm
(
TPASS
, "recvmsg COMM_UPÇotifications");

247 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

248 
ömesßge
.
msg_«mñí
 = (
msg«me
);

249 
	`mem£t
(&
msg«me
, 0, (msgname));

250 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

251 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

252 
MSG_EOR
, 
°ªam
, 
µid
);

253 #i‡
TEST_V6


255 i‡(
ömesßge
.
msg_«mñí
 !(
sockaddr_ö6
)) {

256 
DUMP_CORE
;

258 i‡(
msg«me
.
v6
.
sö6_p‹t
 !
	`ht⁄s
(
SCTP_TESTPORT_1
)) {

259 
DUMP_CORE
;

262 i‡(
msg«me
.
v6
.
sö6_Ámûy
 !
AF_INET6
) {

263 
DUMP_CORE
;

266 i‡(
	`memcmp
(&
msg«me
.
v6
.
sö6_addr
, &
ö6addr_lo›back
,

267 (
msg«me
.
v6
.
sö6_addr
))) {

268 
DUMP_CORE
;

271 i‡(
ömesßge
.
msg_«mñí
 !(
sockaddr_ö
)) {

272 
DUMP_CORE
;

274 i‡(
msg«me
.
v4
.
sö_p‹t
 !
	`ht⁄s
(
SCTP_TESTPORT_1
)) {

275 
DUMP_CORE
;

277 i‡(
msg«me
.
v4
.
sö_Ámûy
 !
AF_INET
) {

278 
DUMP_CORE
;

280 i‡(
msg«me
.
v4
.
sö_addr
.
s_addr
 !
SCTP_IP_LOOPBACK
) {

281 
DUMP_CORE
;

286 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

287 
outmesßge
.
msg_Êags
 = 0;

288 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

289 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

290 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

291 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

292 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

293 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

294 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

295 
µid
++;

296 
°ªam
++;

297 
söfo
->
söfo_µid
 = 
µid
;

298 
söfo
->
söfo_°ªam
 = 
°ªam
;

299 
outmesßge
.
msg_iov
->
iov_ba£
 = 
ãÀph⁄e
;

300 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
ãÀph⁄e
) + 1;

301 
outmesßge
.
msg_«me
 = 
NULL
;

302 
outmesßge
.
msg_«mñí
 = 0;

303 
byãs_£¡
 = 
	`£ndmsg
(
sk1
, &
outmesßge
, 
MSG_NOSIGNAL
);

304 i‡((
byãs_£¡
 > 0Ë|| (
EPIPE
 !
î∫o
))

305 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with NULLássocidánd "

306 "NULL msg_«mêîr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

308 
	`t°_ªsm
(
TPASS
, "sendmsg with NULLássocidánd NULL msg_name");

311 
söfo
->
söfo_assoc_id
 = 
associd2
;

312 
byãs_£¡
 = 
	`£ndmsg
(
sk1
, &
outmesßge
, 
MSG_NOSIGNAL
);

313 i‡((
byãs_£¡
 > 0Ë|| (
EPIPE
 !
î∫o
))

314 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with incorrectássocid "

315 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

317 
	`t°_ªsm
(
TPASS
, "sendmsg with incorrectássocid");

320 
söfo
->
söfo_assoc_id
 = 
associd1
;

322 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
ãÀph⁄e
)+1);

324 
outmesßge
.
msg_«me
 = &
lo›2
;

325 
outmesßge
.
msg_«mñí
 = (
lo›2
);

326 
outmesßge
.
msg_iov
->
iov_ba£
 = 
ãÀph⁄e_ª•
;

327 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
ãÀph⁄e_ª•
) + 1;

328 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
ãÀph⁄e_ª•
)+1);

330 
	`t°_ªsm
(
TPASS
, "sendmsg with validássocid");

333 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

334 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

335 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
ãÀph⁄e
) + 1,

336 
MSG_EOR
, 
°ªam
, 
µid
);

338 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

339 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

340 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
ãÀph⁄e_ª•
) + 1,

341 
MSG_EOR
, 
°ªam
, 
µid
);

343 
	`t°_ªsm
(
TPASS
, "recvmsg");

345 
n_œddrs
 = 
	`s˘p_gëœddrs
(
sk1
, 
associd1
, &
œddrs
);

346 i‡(
n_œddrs
 <= 0)

347 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getladdrs: %s",

348 
	`°ªº‹
(
î∫o
));

350 
	`t°_ªsm
(
TPASS
, "sctp_getladdrs");

352 
addr_buf
 = (*)
œddrs
;

353 
i
 = 0; i < 
n_œddrs
; i++) {

354 
ß_addr
 = (
sockaddr
 *)
addr_buf
;

355 i‡(
AF_INET
 =
ß_addr
->
ß_Ámûy
) {

356 
ö_addr
 = (
sockaddr_ö
 *)
ß_addr
;

357 
	`t°_ªsm
(
TINFO
, "LOCAL ADDR %d.%d.%d.%d PORT %d",

358 
	`NIPQUAD
(
ö_addr
->
sö_addr
),

359 
	`¡ohs
(
ö_addr
->
sö_p‹t
));

360 
addr_buf
 +(
sockaddr_ö
);

362 
ö6_addr
 = (
sockaddr_ö6
 *)
ß_addr
;

363 
	`t°_ªsm
(
TINFO
,

365 
	`NIP6
(
ö6_addr
->
sö6_addr
),

366 
	`¡ohs
(
ö6_addr
->
sö6_p‹t
));

367 
addr_buf
 +(
sockaddr_ö6
);

371 
	`s˘p_‰ìœddrs
(
œddrs
);

373 
	`t°_ªsm
(
TPASS
, "sctp_freeladdrs");

375 
n_∑ddrs
 = 
	`s˘p_gë∑ddrs
(
sk1
, 
associd1
, &
∑ddrs
);

376 i‡(
n_∑ddrs
 <= 0)

377 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_getpaddrs: %s",

378 
	`°ªº‹
(
î∫o
));

380 
	`t°_ªsm
(
TPASS
, "sctp_getpaddrs");

382 
addr_buf
 = (*)
∑ddrs
;

383 
i
 = 0; i < 
n_∑ddrs
; i++) {

384 
ß_addr
 = (
sockaddr
 *)
addr_buf
;

385 i‡(
AF_INET
 =
ß_addr
->
ß_Ámûy
) {

386 
ö_addr
 = (
sockaddr_ö
 *)
ß_addr
;

387 
	`t°_ªsm
(
TINFO
, "PEER ADDR %d.%d.%d.%d PORT %d",

388 
	`NIPQUAD
(
ö_addr
->
sö_addr
),

389 
	`¡ohs
(
ö_addr
->
sö_p‹t
));

390 
addr_buf
 +(
sockaddr_ö
);

392 
ö6_addr
 = (
sockaddr_ö6
 *)
ß_addr
;

393 
	`t°_ªsm
(
TINFO
,

395 
	`NIP6
(
ö6_addr
->
sö6_addr
),

396 
	`¡ohs
(
ö6_addr
->
sö6_p‹t
));

397 
addr_buf
 +(
sockaddr_ö6
);

401 
	`s˘p_‰ì∑ddrs
(
∑ddrs
);

403 
	`t°_ªsm
(
TPASS
, "sctp_freepaddrs");

406 
	`˛o£
(
sk1
);

409 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

410 
ömesßge
.
msg_«mñí
 = (
msg«me
);

411 
	`mem£t
(&
msg«me
, 0, (msgname));

412 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

413 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

414 (
s˘p_assoc_ch™ge
),

415 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

416 #i‡
TEST_V6


418 i‡(
ömesßge
.
msg_«mñí
 !(
sockaddr_ö6
)) {

419 
DUMP_CORE
;

421 i‡(
msg«me
.
v6
.
sö6_p‹t
 !
	`ht⁄s
(
SCTP_TESTPORT_1
)) {

422 
DUMP_CORE
;

425 i‡(
msg«me
.
v6
.
sö6_Ámûy
 !
AF_INET6
) {

426 
DUMP_CORE
;

429 i‡(
	`memcmp
(&
msg«me
.
v6
.
sö6_addr
, &
ö6addr_lo›back
,

430 (
msg«me
.
v6
.
sö6_addr
))) {

431 
DUMP_CORE
;

434 i‡(
ömesßge
.
msg_«mñí
 !(
sockaddr_ö
)) {

435 
DUMP_CORE
;

437 i‡(
msg«me
.
v4
.
sö_p‹t
 !
	`ht⁄s
(
SCTP_TESTPORT_1
)) {

438 
DUMP_CORE
;

441 i‡(
msg«me
.
v4
.
sö_Ámûy
 !
AF_INET
) {

442 
DUMP_CORE
;

444 i‡(
msg«me
.
v4
.
sö_addr
.
s_addr
 !
SCTP_IP_LOOPBACK
) {

445 
DUMP_CORE
;

449 
	`t°_ªsm
(
TPASS
, "recvmsg SHUTDOWN_COMPÇotification");

451 
	`˛o£
(
sk2
);

455 
	}
}

	@sctp-tools/src/func_tests/test_connect.c

40 
	~<°dio.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<f˙é.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/uio.h
>

48 
	~<√töë/ö.h
>

49 
	~<î∫o.h
>

50 
	~<√töë/s˘p.h
>

51 
	~<s˘putû.h
>

53 *
	gTCID
 = 
__FILE__
;

54 
	gTST_TOTAL
 = 5;

55 
	gTST_CNT
 = 0;

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
svr_sk
, 
˛t_sk1
, 
˛t_sk2
, 
≥ñoff_sk
;

61 
s˘p_assoc_t
 
svr_associd1
;

62 
sockaddr_°‹age_t
 
svr_lo›
, 
˛t_lo›1
, 
˛t_lo›2
, 
˛t_lo›3
;

63 
s˘p_assoc_ch™ge
 *
ßc
;

64 
iovec
 
iov
;

65 
msghdr
 
ömesßge
;

66 
îr‹
;

67 *
big_buf„r
;

68 
Êags
;

73 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

76 
svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

77 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

78 
svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

79 
˛t_lo›1
.
v4
.
sö_Ámûy
 = 
AF_INET
;

80 
˛t_lo›1
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

81 
˛t_lo›1
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

82 
˛t_lo›2
.
v4
.
sö_Ámûy
 = 
AF_INET
;

83 
˛t_lo›2
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

84 
˛t_lo›2
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
+1);

85 
˛t_lo›3
.
v4
.
sö_Ámûy
 = 
AF_INET
;

86 
˛t_lo›3
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

87 
˛t_lo›3
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
+2);

90 
svr_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

91 
	`ã°_böd
(
svr_sk
, &
svr_lo›
.
ß
, (svr_loop));

94 
	`ã°_li°í
(
svr_sk
, 1);

97 
˛t_sk1
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

98 
	`ã°_böd
(
˛t_sk1
, &
˛t_lo›1
.
ß
, (clt_loop1));

99 
˛t_sk2
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

100 
	`ã°_böd
(
˛t_sk2
, &
˛t_lo›2
.
ß
, (clt_loop2));

103 
	`ã°_íabÀ_assoc_ch™ge
(
svr_sk
);

104 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk1
);

105 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk2
);

108 
Êags
 = 
	`f˙é
(
˛t_sk1
, 
F_GETFL
, 0);

109 i‡(
Êags
 < 0)

110 
	`t°_brkm
(
TBROK
, 
t°_exô
, "f˙é F_GETFL: %s", 
	`°ªº‹
(
î∫o
));

111 i‡(
	`f˙é
(
˛t_sk1
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0)

112 
	`t°_brkm
(
TBROK
, 
t°_exô
, "f˙é F_SETFL: %s", 
	`°ªº‹
(
î∫o
));

115 
îr‹
 = 
	`c⁄√˘
(
˛t_sk1
, &
svr_lo›
.
ß
, (svr_loop));

117 i‡((
îr‹
 !-1Ë|| (
EINPROGRESS
 !
î∫o
))

118 
	`t°_brkm
(
TBROK
, 
t°_exô
, "non-blocking connectÉrror: %d"

119 "î∫o:%d", 
îr‹
, 
î∫o
);

121 
	`t°_ªsm
(
TPASS
, "non-blocking connect");

126 
îr‹
 = 
	`c⁄√˘
(
˛t_sk1
, &
svr_lo›
.
ß
, (svr_loop));

127 i‡((
îr‹
 !-1Ë|| (
EISCONN
 !
î∫o
))

128 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect oná socketÅo createán "

130 
îr‹
, 
î∫o
);

132 
	`t°_ªsm
(
TPASS
, "connect oná socketÅo createánássocÅhat is "

136 
	`mem£t
(&
ömesßge
, 0, (inmessage));

137 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

138 
iov
.
iov_ba£
 = 
big_buf„r
;

139 
iov
.
iov_Àn
 = 
REALLY_BIG
;

140 
ömesßge
.
msg_iov
 = &
iov
;

141 
ömesßge
.
msg_iovÀn
 = 1;

142 
ömesßge
.
msg_c⁄åﬁ
 = 
NULL
;

145 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk1
, &
ömesßge
, 
MSG_WAITALL
);

146 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

147 (
s˘p_assoc_ch™ge
),

148 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

150 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

151 
˛t_associd1
 = 
ßc
->
ßc_assoc_id
;

155 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

156 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

157 (
s˘p_assoc_ch™ge
),

158 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

159 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

160 
svr_associd1
 = 
ßc
->
ßc_assoc_id
;

166 
	`ã°_c⁄√˘
(
˛t_sk2
, &
svr_lo›
.
ß
, (svr_loop));

169 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk2
, &
ömesßge
, 
MSG_WAITALL
);

170 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

171 (
s˘p_assoc_ch™ge
),

172 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

174 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

175 
˛t_associd2
 = 
ßc
->
ßc_assoc_id
;

179 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

180 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

181 (
s˘p_assoc_ch™ge
),

182 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

184 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

185 
svr_associd2
 = 
ßc
->
ßc_assoc_id
;

188 
	`t°_ªsm
(
TPASS
, "blocking connect");

190 
≥ñoff_sk
 = 
	`ã°_s˘p_≥ñoff
(
svr_sk
, 
svr_associd1
);

193 
îr‹
 = 
	`c⁄√˘
(
≥ñoff_sk
, &
˛t_lo›3
.
ß
, (clt_loop3));

194 i‡((
îr‹
 !-1Ë|| (
EISCONN
 !
î∫o
))

195 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect onáÖeeled off socket "

196 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

198 
	`t°_ªsm
(
TPASS
, "connect onáÖeeled off socket");

203 
îr‹
 = 
	`c⁄√˘
(
svr_sk
, &
˛t_lo›1
.
ß
, (clt_loop1));

204 i‡((
îr‹
 !-1Ë|| (
EADDRNOTAVAIL
 !
î∫o
))

205 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connectÅo createánássocÅhat "

207 
îr‹
, 
î∫o
);

209 
	`t°_ªsm
(
TPASS
, "connectÅo createánássocÅhat matchesáÖeeled off "

212 
	`˛o£
(
svr_sk
);

213 
	`˛o£
(
˛t_sk1
);

214 
	`˛o£
(
˛t_sk2
);

215 
	`˛o£
(
≥ñoff_sk
);

219 
	}
}

	@sctp-tools/src/func_tests/test_connectx.c

40 
	~<°dio.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<f˙é.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/uio.h
>

48 
	~<√töë/ö.h
>

49 
	~<î∫o.h
>

50 
	~<√töë/s˘p.h
>

51 
	~<s˘putû.h
>

53 *
	gTCID
 = 
__FILE__
;

54 
	gTST_TOTAL
 = 9;

55 
	gTST_CNT
 = 0;

57 
	#NUMADDR
 6

	)

58 
	#SCTP_IP_LOOPBACK_I
(
I
Ë
	`ht⁄l
(0x7f000001 + I)

	)

60 
	#NIPQUAD
(
addr
) \

61 ((*)&
addr
)[0], \

62 ((*)&
addr
)[1], \

63 ((*)&
addr
)[2], \

64 ((*)&
addr
)[3]

	)

67 
	$maö
(
¨gc
, *
¨gv
[])

69 
svr_sk
, 
˛t_sk1
, 
˛t_sk2
, 
≥ñoff_sk
;

70 
s˘p_assoc_t
 
associd
, 
svr_associd1
, 
svr_associd2
, 
˛t_associd1
, 
˛t_associd2
;

71 
iovec
 
iov
;

72 
msghdr
 
ömesßge
;

73 
îr‹
, 
i
;

74 
s˘p_assoc_ch™ge
 *
ßc
;

75 *
big_buf„r
;

76 
Êags
;

77 
sockaddr_ö
 
svr_lo›
[
NUMADDR
];

78 
sockaddr_ö
 
svr_åy
[
NUMADDR
];

79 
sockaddr_ö
 
˛t_lo›1
[
NUMADDR
];

80 
sockaddr_ö
 
˛t_lo›2
[
NUMADDR
];

81 
sockaddr_ö
 
˛t_lo›3
[
NUMADDR
];

82 
sockaddr_°‹age_t
 
svr_ã°
[
NUMADDR
], 
˛t_ã°1
[NUMADDR], 
˛t_ã°2
[NUMADDR];

87 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

89 
i
 = 0; i < 
NUMADDR
; i++) {

91 
svr_lo›
[
i
].
sö_Ámûy
 = 
AF_INET
;

92 
svr_lo›
[
i
].
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i);

93 
svr_lo›
[
i
].
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

94 
svr_ã°
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

95 
svr_ã°
[
i
].
v4
.
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i);

96 
svr_ã°
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

97 
svr_åy
[
i
].
sö_Ámûy
 = 
AF_INET
;

98 i‡(
i
 < (
NUMADDR
-1)) {

99 
svr_åy
[
i
].
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i);

102 
svr_åy
[
i
].
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i + 0x400);

104 
svr_åy
[
i
].
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

105 
˛t_lo›1
[
i
].
sö_Ámûy
 = 
AF_INET
;

106 
˛t_lo›1
[
i
].
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i + 0x100);

107 
˛t_lo›1
[
i
].
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

108 
˛t_ã°1
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

109 
˛t_ã°1
[
i
].
v4
.
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i + 0x100);

110 
˛t_ã°1
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

111 
˛t_lo›2
[
i
].
sö_Ámûy
 = 
AF_INET
;

112 
˛t_lo›2
[
i
].
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i + 0x200);

113 
˛t_lo›2
[
i
].
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
+1);

114 
˛t_ã°2
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

115 
˛t_ã°2
[
i
].
v4
.
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i + 0x200);

116 
˛t_ã°2
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
+1);

117 
˛t_lo›3
[
i
].
sö_Ámûy
 = 
AF_INET
;

118 
˛t_lo›3
[
i
].
sö_addr
.
s_addr
 = 
	`SCTP_IP_LOOPBACK_I
(i + 0x300);

119 
˛t_lo›3
[
i
].
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
+2);

123 
svr_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

124 
	`ã°_böd
(
svr_sk
, (
sockaddr
 *)&
svr_lo›
[0], (svr_loop[0]));

125 
	`ã°_bödx_add
(
svr_sk
, (
sockaddr
 *)&
svr_lo›
[1], 
NUMADDR
-1);

128 
	`ã°_li°í
(
svr_sk
, 1);

131 
˛t_sk1
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

132 
	`ã°_böd
(
˛t_sk1
, (
sockaddr
 *)&
˛t_lo›1
[0], (clt_loop1));

133 
	`ã°_bödx_add
(
˛t_sk1
, (
sockaddr
 *)&
˛t_lo›1
[1], 
NUMADDR
-1);

134 
˛t_sk2
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

135 
	`ã°_böd
(
˛t_sk2
, (
sockaddr
 *)&
˛t_lo›2
[0], (clt_loop2));

136 
	`ã°_bödx_add
(
˛t_sk2
, (
sockaddr
 *)&
˛t_lo›2
[1], 
NUMADDR
-1);

139 
	`ã°_íabÀ_assoc_ch™ge
(
svr_sk
);

140 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk1
);

141 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk2
);

144 
Êags
 = 
	`f˙é
(
˛t_sk1
, 
F_GETFL
, 0);

145 i‡(
Êags
 < 0)

146 
	`t°_brkm
(
TBROK
, 
t°_exô
, "f˙é F_GETFL: %s", 
	`°ªº‹
(
î∫o
));

147 i‡(
	`f˙é
(
˛t_sk1
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0)

148 
	`t°_brkm
(
TBROK
, 
t°_exô
, "f˙é F_SETFL: %s", 
	`°ªº‹
(
î∫o
));

151 
îr‹
 = 
	`s˘p_c⁄√˘x
(
˛t_sk1
, (
sockaddr
 *)
svr_åy
, 
NUMADDR
,

152 &
associd
);

154 i‡((
îr‹
 !-1Ë|| (
EINPROGRESS
 !
î∫o
))

155 
	`t°_brkm
(
TBROK
, 
t°_exô
, "non-blocking connectxÉrror: %d"

156 "î∫o:%d", 
îr‹
, 
î∫o
);

158 
	`t°_ªsm
(
TPASS
, "non-blocking connectx");

163 
îr‹
 = 
	`s˘p_c⁄√˘x
(
˛t_sk1
, (
sockaddr
 *)
svr_åy
, 
NUMADDR
,

164 
NULL
);

165 i‡((
îr‹
 !-1Ë|| (
EISCONN
 !
î∫o
))

166 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connectx oná socketÅo createán "

168 
îr‹
, 
î∫o
);

170 
	`t°_ªsm
(
TPASS
, "connectx oná socketÅo createánássocÅhat is "

174 
	`mem£t
(&
ömesßge
, 0, (inmessage));

175 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

176 
iov
.
iov_ba£
 = 
big_buf„r
;

177 
iov
.
iov_Àn
 = 
REALLY_BIG
;

178 
ömesßge
.
msg_iov
 = &
iov
;

179 
ömesßge
.
msg_iovÀn
 = 1;

180 
ömesßge
.
msg_c⁄åﬁ
 = 
NULL
;

183 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk1
, &
ömesßge
, 
MSG_WAITALL
);

184 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

185 (
s˘p_assoc_ch™ge
),

186 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

187 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

188 
˛t_associd1
 = 
ßc
->
ßc_assoc_id
;

190 i‡(
associd
) {

191 i‡(
associd
 !
˛t_associd1
)

192 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Association id mismatch: "

194 
associd
, 
˛t_associd1
);

195 
	`t°_ªsm
(
TPASS
, "Association id match between sctp_connectx()"

200 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

201 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

202 (
s˘p_assoc_ch™ge
),

203 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

204 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

205 
svr_associd1
 = 
ßc
->
ßc_assoc_id
;

211 
	`ã°_c⁄√˘x
(
˛t_sk2
, (
sockaddr
 *)
svr_åy
, 
NUMADDR
);

214 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk2
, &
ömesßge
, 
MSG_WAITALL
);

215 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

216 (
s˘p_assoc_ch™ge
),

217 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

218 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

219 
˛t_associd2
 = 
ßc
->
ßc_assoc_id
;

222 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

223 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

224 (
s˘p_assoc_ch™ge
),

225 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

226 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

227 
svr_associd2
 = 
ßc
->
ßc_assoc_id
;

229 
	`t°_ªsm
(
TPASS
, "blocking connectx");

231 
≥ñoff_sk
 = 
	`ã°_s˘p_≥ñoff
(
svr_sk
, 
svr_associd1
);

234 
îr‹
 = 
	`s˘p_c⁄√˘x
(
≥ñoff_sk
, (
sockaddr
 *)
˛t_lo›3
, 
NUMADDR
,

235 
NULL
);

236 i‡((
îr‹
 !-1Ë|| (
EISCONN
 !
î∫o
))

237 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connectx onáÖeeled off socket "

238 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

240 
	`t°_ªsm
(
TPASS
, "connectx onáÖeeled off socket");

245 
îr‹
 = 
	`s˘p_c⁄√˘x
(
svr_sk
, (
sockaddr
 *)
˛t_lo›1
, 
NUMADDR
,

246 
NULL
);

247 i‡((
îr‹
 !-1Ë|| (
EADDRNOTAVAIL
 !
î∫o
))

248 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connectxÅo createánássocÅhat "

250 
îr‹
, 
î∫o
);

252 
	`t°_ªsm
(
TPASS
, "connectxÅo createánássocÅhat matchesáÖeeled off "

255 
	`ã°_≥î_addr
(
≥ñoff_sk
, 
svr_associd1
, 
˛t_ã°1
, 
NUMADDR
);

256 
	`t°_ªsm
(
TPASS
, "serverássociation 1Öeers ok");

257 
	`ã°_≥î_addr
(
svr_sk
, 
svr_associd2
, 
˛t_ã°2
, 
NUMADDR
);

258 
	`t°_ªsm
(
TPASS
, "serverássociation 2Öeers ok");

259 
	`ã°_≥î_addr
(
˛t_sk1
, 
˛t_associd1
, 
svr_ã°
, 
NUMADDR
);

260 
	`t°_ªsm
(
TPASS
, "clientássociation 1Öeers ok");

261 
	`ã°_≥î_addr
(
˛t_sk2
, 
˛t_associd2
, 
svr_ã°
, 
NUMADDR
);

262 
	`t°_ªsm
(
TPASS
, "clientássociation 2Öeers ok");

263 
	`˛o£
(
svr_sk
);

264 
	`˛o£
(
˛t_sk1
);

265 
	`˛o£
(
˛t_sk2
);

266 
	`˛o£
(
≥ñoff_sk
);

270 
	}
}

	@sctp-tools/src/func_tests/test_fragments.c

55 
	~<°dio.h
>

56 
	~<uni°d.h
>

57 
	~<°dlib.h
>

58 
	~<°rög.h
>

59 
	~<sys/ty≥s.h
>

60 
	~<sys/sockë.h
>

61 
	~<sys/uio.h
>

62 
	~<√töë/ö.h
>

63 
	~<î∫o.h
>

64 
	~<√töë/s˘p.h
>

65 
	~<s˘putû.h
>

67 *
	gTCID
 = 
__FILE__
;

68 
	gTST_TOTAL
 = 4;

69 
	gTST_CNT
 = 0;

71 
	gmsg_sizes
[] = {1353, 2000, 5000, 10000, 20000, 32768};

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
sk1
, 
sk2
;

77 
sockaddr_°‹age_t
 
lo›1
;

78 
sockaddr_°‹age_t
 
lo›2
;

79 
iovec
 
iov
;

80 
msghdr
 
ömesßge
;

81 
msghdr
 
outmesßge
;

82 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

83 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

84 
cmsghdr
 *
cmsg
;

85 
s˘p_¢drcvöfo
 *
söfo
;

86 
iovec
 
out_iov
;

87 
îr‹
, 
byãs_£¡
;

88 
pf_˛ass
;

89 
uöt32_t
 
µid
;

90 
uöt32_t
 
°ªam
;

91 *
big_buf„r
;

92 
msg_Àn
, 
msg_˙t
, 
i
;

93 *
msg_buf
;

94 
dißbÀ_‰ag
;

95 
sockÀn_t
 
›éí
;

100 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

103 #i‡
TEST_V6


104 
pf_˛ass
 = 
PF_INET6
;

106 
lo›1
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

107 
lo›1
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

108 
lo›1
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

110 
lo›2
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

111 
lo›2
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

112 
lo›2
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

114 
pf_˛ass
 = 
PF_INET
;

116 
lo›1
.
v4
.
sö_Ámûy
 = 
AF_INET
;

117 
lo›1
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

118 
lo›1
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

120 
lo›2
.
v4
.
sö_Ámûy
 = 
AF_INET
;

121 
lo›2
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

122 
lo›2
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

126 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

127 
sk2
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

130 
	`ã°_íabÀ_assoc_ch™ge
(
sk1
);

131 
	`ã°_íabÀ_assoc_ch™ge
(
sk2
);

134 
	`ã°_böd
(
sk1
, &
lo›1
.
ß
, (loop1));

135 
	`ã°_böd
(
sk2
, &
lo›2
.
ß
, (loop2));

138 
	`ã°_li°í
(
sk2
, 1);

141 
outmesßge
.
msg_«me
 = &
lo›2
;

142 
outmesßge
.
msg_«mñí
 = (
lo›2
);

143 
outmesßge
.
msg_iov
 = &
out_iov
;

144 
outmesßge
.
msg_iovÀn
 = 1;

145 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

146 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

147 
outmesßge
.
msg_Êags
 = 0;

148 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

149 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

150 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

151 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

152 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

153 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

154 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

155 
µid
 = 
	`ønd
();

156 
°ªam
 = 1;

157 
söfo
->
söfo_µid
 = 
µid
;

158 
söfo
->
söfo_°ªam
 = 
°ªam
;

159 
msg_Àn
 = 10;

160 
msg_buf
 = 
	`ã°_buûd_msg
(10);

161 
outmesßge
.
msg_iov
->
iov_ba£
 = 
msg_buf
;

162 
outmesßge
.
msg_iov
->
iov_Àn
 = 
msg_Àn
;

163 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
msg_Àn
);

167 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

168 
	`mem£t
(&
ömesßge
, 0, (inmessage));

169 
iov
.
iov_ba£
 = 
big_buf„r
;

170 
iov
.
iov_Àn
 = 
REALLY_BIG
;

171 
ömesßge
.
msg_iov
 = &
iov
;

172 
ömesßge
.
msg_iovÀn
 = 1;

173 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

176 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

177 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

178 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

179 (
s˘p_assoc_ch™ge
),

180 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

182 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

183 
associd2
 = 
ßc
->
ßc_assoc_id
;

186 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

187 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

188 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

189 (
s˘p_assoc_ch™ge
),

190 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

192 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

193 
associd1
 = 
ßc
->
ßc_assoc_id
;

196 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

197 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

198 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
msg_Àn
, 
MSG_EOR
, 
°ªam
, 
µid
);

200 
	`‰ì
(
msg_buf
);

203 
dißbÀ_‰ag
 = 1;

204 
	`ã°_£tsock›t
(
sk1
, 
SCTP_DISABLE_FRAGMENTS
, &
dißbÀ_‰ag
,

205 (
dißbÀ_‰ag
));

207 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DISABLE_FRAGMENTS)");

210 
dißbÀ_‰ag
 = 0;

211 
›éí
 = (
dißbÀ_‰ag
);

212 
îr‹
 = 
	`ã°_gësock›t
(
sk1
, 
SCTP_DISABLE_FRAGMENTS
, &
dißbÀ_‰ag
,

213 &
›éí
);

214 i‡((
îr‹
 !0Ë&& (
dißbÀ_‰ag
 != 1))

215 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DISABLE_FRAGMENTS) "

217 
îr‹
, 
î∫o
, 
dißbÀ_‰ag
);

219 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DISABLE_FRAGMENTS)");

224 
msg_Àn
 = 100000;

225 
msg_buf
 = 
	`ã°_buûd_msg
(
msg_Àn
);

226 
outmesßge
.
msg_iov
->
iov_ba£
 = 
msg_buf
;

227 
outmesßge
.
msg_iov
->
iov_Àn
 = 
msg_Àn
;

228 
îr‹
 = 
	`£ndmsg
(
sk1
, &
outmesßge
, 0);

229 i‡((
îr‹
 !-1Ë|| (
î∫o
 !
EMSGSIZE
))

230 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Sendá messageÅhatÉxceeds "

231 "asso¯‰agÖoöàîr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

233 
	`t°_ªsm
(
TPASS
, "Sendá messageÅhatÉxceedsássoc fragÖoint");

236 
dißbÀ_‰ag
 = 0;

237 
	`ã°_£tsock›t
(
sk1
, 
SCTP_DISABLE_FRAGMENTS
, &
dißbÀ_‰ag
,

238 (
dißbÀ_‰ag
));

240 
msg_˙t
 = (
msg_sizes
) / ();

245 
i
 = 0; i < 
msg_˙t
; i++) {

247 
msg_Àn
 = 
msg_sizes
[
i
];

248 
msg_buf
 = 
	`ã°_buûd_msg
(
msg_Àn
);

249 
outmesßge
.
msg_iov
->
iov_ba£
 = 
msg_buf
;

250 
outmesßge
.
msg_iov
->
iov_Àn
 = 
msg_Àn
;

251 
byãs_£¡
 = 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
msg_Àn
);

253 
	`t°_ªsm
(
TINFO
, "Síà%d byã mesßge", 
byãs_£¡
);

255 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

256 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

258 i‡(
ömesßge
.
msg_Êags
 & 
MSG_EOR
) {

259 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
byãs_£¡
,

260 
MSG_EOR
, 
°ªam
, 
µid
);

261 
	`t°_ªsm
(
TINFO
, "Re˚ived %d byã mesßge", 
îr‹
);

263 
ªmaö
;

265 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
,Érror, 0,

266 
°ªam
, 
µid
);

267 
	`t°_ªsm
(
TINFO
, "Re˚ived %d byã mesßge", 
îr‹
);

270 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

271 
ªmaö
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

272 
	`ã°_check_msg_d©a
(&
ömesßge
, 
ªmaö
,

273 
byãs_£¡
 - 
îr‹
,

274 
MSG_EOR
, 
°ªam
, 
µid
);

275 
	`t°_ªsm
(
TINFO
, "Re˚ived %d byã mesßge", 
îr‹
);

278 
	`‰ì
(
msg_buf
);

281 
	`t°_ªsm
(
TPASS
, "Send/Receive fragmented messages");

284 
	`˛o£
(
sk1
);

287 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

288 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

289 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

290 (
s˘p_assoc_ch™ge
),

291 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

293 
	`˛o£
(
sk2
);

297 
	}
}

	@sctp-tools/src/func_tests/test_getname.c

40 
	~<°dio.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<f˙é.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/uio.h
>

48 
	~<√töë/ö.h
>

49 
	~<î∫o.h
>

50 
	~<√töë/s˘p.h
>

51 
	~<s˘putû.h
>

53 *
	gTCID
 = 
__FILE__
;

54 
	gTST_TOTAL
 = 13;

55 
	gTST_CNT
 = 0;

57 
	#MAX_CLIENTS
 10

	)

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
˛t_sk
, 
svr_sk
, 
ac˚±_sk
;

63 
sockaddr_°‹age_t
 
svr_lo›
, 
ac˚±_lo›
;

64 
sockaddr_°‹age_t
 
svr_loˇl_addr
, 
svr_≥î_addr
;

65 
sockaddr_°‹age_t
 
˛t_loˇl_addr
, 
˛t_≥î_addr
;

66 
sockÀn_t
 
Àn
;

67 
îr‹
;

68 
pf_˛ass
;

69 
fd
, 
îr_no
 = 0;

70 
fûíame
[21];

75 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

78 #i‡
TEST_V6


79 
pf_˛ass
 = 
PF_INET6
;

80 
svr_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

81 
svr_lo›
.
v6
.
sö6_addr
 = (
ö6_addr
)
SCTP_IN6ADDR_ANY_INIT
;

82 
svr_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

84 
pf_˛ass
 = 
PF_INET
;

85 
svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

86 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

87 
svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

91 
svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

92 
	`ã°_böd
(
svr_sk
, &
svr_lo›
.
ß
, (svr_loop));

94 
	`mem£t
(&
svr_loˇl_addr
, 0x00, (svr_local_addr));

95 
Àn
 = (
svr_loˇl_addr
);

97 
îr‹
 = 
	`gësock«me
(
svr_sk
, (
sockaddr
 *)&
svr_loˇl_addr
, &
Àn
);

98 i‡(0 !
îr‹
)

99 
	`t°_brkm
(
TBROK
, 
t°_exô
, "gësock«me: %s", 
	`°ªº‹
(
î∫o
));

101 
	`t°_ªsm
(
TPASS
, "getsockname onán unconnected socket");

103 
	`mem£t
(&
svr_≥î_addr
, 0x00, (svr_peer_addr));

104 
Àn
 = (
svr_≥î_addr
);

106 
îr‹
 = 
	`gë≥î«me
(
svr_sk
, (
sockaddr
 *)&
svr_≥î_addr
, &
Àn
);

107 i‡((-1 !
îr‹
Ë|| (
ENOTCONN
 !
î∫o
))

108 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getpeername onán unconnected "

109 "sockëÉº‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

111 
	`t°_ªsm
(
TPASS
, "getpeername onán unconnected socket");

114 
	`ã°_li°í
(
svr_sk
, 5);

117 
˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

120 #i‡
TEST_V6


121 
svr_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

123 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

125 
	`ã°_c⁄√˘
(
˛t_sk
, &
svr_lo›
.
ß
, (svr_loop));

127 
	`mem£t
(&
˛t_loˇl_addr
, 0x00, (clt_local_addr));

128 
Àn
 = (
˛t_loˇl_addr
);

130 
îr‹
 = 
	`gësock«me
(
˛t_sk
, (
sockaddr
 *)&
˛t_loˇl_addr
, &
Àn
);

131 i‡(0 !
îr‹
)

132 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockname oná connected client "

133 "sockë: %s", 
	`°ªº‹
(
î∫o
));

135 
	`t°_ªsm
(
TPASS
, "getsockname oná connected client socket");

137 
	`mem£t
(&
˛t_≥î_addr
, 0x00, (clt_peer_addr));

138 
Àn
 = (
˛t_≥î_addr
);

140 
îr‹
 = 
	`gë≥î«me
(
˛t_sk
, (
sockaddr
 *)&
˛t_≥î_addr
, &
Àn
);

141 i‡(0 !
îr‹
)

142 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getpeername oná connected client "

143 "sockë: %s", 
	`°ªº‹
(
î∫o
));

145 
	`t°_ªsm
(
TPASS
, "getpeername oná connected client socket");

148 
Àn
 = (
ac˚±_lo›
);

149 
ac˚±_sk
 = 
	`ã°_ac˚±
(
svr_sk
, &
ac˚±_lo›
.
ß
, &
Àn
);

151 
	`mem£t
(&
svr_loˇl_addr
, 0x00, (svr_local_addr));

152 
Àn
 = (
svr_loˇl_addr
);

154 
îr‹
 = 
	`gësock«me
(
ac˚±_sk
, (
sockaddr
 *)&
svr_loˇl_addr
,

155 &
Àn
);

156 i‡(0 !
îr‹
)

157 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockname oná connected server "

158 "sockë: %s", 
	`°ªº‹
(
î∫o
));

160 
	`t°_ªsm
(
TPASS
, "getsockname oná connected server socket");

162 
	`mem£t
(&
svr_≥î_addr
, 0x00, (svr_peer_addr));

163 
Àn
 = (
svr_≥î_addr
);

165 
îr‹
 = 
	`gë≥î«me
(
ac˚±_sk
, (
sockaddr
 *)&
svr_≥î_addr
,

166 &
Àn
);

167 i‡(0 !
îr‹
)

168 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getpeername oná connected server "

169 "sockë: %s", 
	`°ªº‹
(
î∫o
));

171 
	`t°_ªsm
(
TPASS
, "getpeername oná connected server socket");

173 i‡(
svr_loˇl_addr
.
v4
.
sö_p‹t
 !
˛t_≥î_addr
.v4.sin_port)

174 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Server'sÜocalÖort(%d) doesn't "

176 
svr_loˇl_addr
.
v4
.
sö_p‹t
, 
˛t_≥î_addr
.v4.sin_port);

178 i‡(
svr_≥î_addr
.
v4
.
sö_p‹t
 !
˛t_loˇl_addr
.v4.sin_port)

179 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Server'sÖeerÖort(%d) doesn't "

181 
svr_≥î_addr
.
v4
.
sö_p‹t
, 
˛t_loˇl_addr
.v4.sin_port);

182 #i‡
TEST_V6


183 i‡(
	`memcmp
(&
svr_loˇl_addr
, &
˛t_≥î_addr
, 
Àn
) != 0)

184 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Server'sÜocaláddressánd client's "

187 i‡(
	`memcmp
(&
svr_≥î_addr
, &
˛t_loˇl_addr
, 
Àn
) != 0)

188 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Server'sÖeeráddressánd client's "

191 i‡(
svr_loˇl_addr
.
v4
.
sö_addr
.
s_addr
 !=

192 
˛t_≥î_addr
.
v4
.
sö_addr
.
s_addr
)

193 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Server'sÜocaláddressánd client's "

195 i‡(
svr_≥î_addr
.
v4
.
sö_addr
.
s_addr
 !=

196 
˛t_loˇl_addr
.
v4
.
sö_addr
.
s_addr
)

197 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Server'sÖeeráddressánd client's "

200 
	`t°_ªsm
(
TPASS
, "getsockname/getpeername server/client match");

202 
	`mem£t
(&
˛t_loˇl_addr
, 0x00, (clt_local_addr));

203 
Àn
 = (
˛t_loˇl_addr
);

205 
îr‹
 = 
	`gësock«me
(-1, (
sockaddr
 *)&
˛t_loˇl_addr
, &
Àn
);

206 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

207 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockname oná bad socket "

208 "des¸ùt‹.Éº‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

210 
	`t°_ªsm
(
TPASS
, "getsockname oná bad socket descriptor - EBADF");

213 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

214 
fd
 = 
	`mk°emp
(
fûíame
);

215 i‡(
fd
 == -1)

216 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

217 
fûíame
, 
	`°ªº‹
(
î∫o
));

218 
îr‹
 = 
	`gësock«me
(
fd
, (
sockaddr
 *)&
˛t_loˇl_addr
, &
Àn
);

219 i‡(
îr‹
 == -1)

220 
îr_no
 = 
î∫o
;

221 
	`˛o£
(
fd
);

222 
	`u∆ök
(
fûíame
);

223 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

224 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockname onán invalid socket "

225 "îr‹:%dÉºno:%d", 
îr‹
, 
îr_no
);

227 
	`t°_ªsm
(
TPASS
, "getsockname onán invalid socket - ENOTSOCK");

230 
îr‹
 = 
	`gësock«me
(
˛t_sk
, (
sockaddr
 *)-1, &
Àn
);

231 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

232 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockname with invalid buffer "

233 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

235 
	`t°_ªsm
(
TPASS
, "getsockname with invalid buffer - EFAULT");

237 
	`mem£t
(&
˛t_≥î_addr
, 0x00, (clt_peer_addr));

238 
Àn
 = (
˛t_≥î_addr
);

240 
îr‹
 = 
	`gë≥î«me
(-1, (
sockaddr
 *)&
˛t_loˇl_addr
, &
Àn
);

241 i‡(
îr‹
 !-1 || 
î∫o
 !
EBADF
)

242 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getpeername oná bad socket "

243 "des¸ùt‹.Éº‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

245 
	`t°_ªsm
(
TPASS
, "getpeername oná bad socket descriptor - EBADF");

248 
	`°r˝y
(
fûíame
, "/tmp/sctptest.XXXXXX");

249 
fd
 = 
	`mk°emp
(
fûíame
);

250 i‡(
fd
 == -1)

251 
	`t°_brkm
(
TBROK
, 
t°_exô
, "FailedÅo mkstemp %s: %s",

252 
fûíame
, 
	`°ªº‹
(
î∫o
));

253 
îr‹
 = 
	`gë≥î«me
(
fd
, (
sockaddr
 *)&
˛t_loˇl_addr
, &
Àn
);

254 i‡(
îr‹
 == -1)

255 
îr_no
 = 
î∫o
;

256 
	`˛o£
(
fd
);

257 
	`u∆ök
(
fûíame
);

258 i‡(
îr‹
 !-1 || 
îr_no
 !
ENOTSOCK
)

259 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getpeername onán invalid socket "

260 "îr‹:%dÉºno:%d", 
îr‹
, 
îr_no
);

262 
	`t°_ªsm
(
TPASS
, "getpeername onán invalid socket - ENOTSOCK");

265 
îr‹
 = 
	`gë≥î«me
(
˛t_sk
, (
sockaddr
 *)-1, &
Àn
);

266 i‡(
îr‹
 !-1 || 
î∫o
 !
EFAULT
)

267 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getpeername with invalid buffer "

268 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

270 
	`t°_ªsm
(
TPASS
, "getpeername with invalid buffer - EFAULT");

272 
	`˛o£
(
˛t_sk
);

273 
	`˛o£
(
svr_sk
);

274 
	`˛o£
(
ac˚±_sk
);

278 
	}
}

	@sctp-tools/src/func_tests/test_inaddr_any.c

48 
	~<°dio.h
>

49 
	~<uni°d.h
>

50 
	~<°rög.h
>

51 
	~<°dlib.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 
	~<sys/uio.h
>

55 
	~<√töë/ö.h
>

56 
	~<î∫o.h
>

57 
	~<√töë/s˘p.h
>

58 
	~<s˘putû.h
>

60 *
	gTCID
 = 
__FILE__
;

61 
	gTST_TOTAL
 = 2;

62 
	gTST_CNT
 = 0;

65 
	$maö
()

67 
sk1
, 
sk2
;

68 
sockaddr_°‹age_t
 
lo›
;

69 
sockaddr_°‹age_t
 
™yaddr
;

70 
msghdr
 
outmesßge
;

71 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

72 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

73 
cmsghdr
 *
cmsg
;

74 
s˘p_¢drcvöfo
 *
söfo
;

75 
iovec
 
out_iov
;

76 
iovec
 
iov
;

77 
msghdr
 
ömesßge
;

78 *
mesßge
 = "hello, world!\n";

79 *
ãÀph⁄e
 = "Watson, come here! IÇeed you!\n";

80 *
ãÀph⁄e_ª•
 = "Iálready brought your coffee...\n";

81 
îr‹
;

82 
pf_˛ass
;

83 
uöt32_t
 
µid
;

84 
uöt32_t
 
°ªam
;

85 
sockÀn_t
 
«mñí
;

90 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

93 #i‡
TEST_V6


94 
pf_˛ass
 = 
PF_INET6
;

96 
lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

97 
lo›
.
v6
.
sö6_addr
 = (
ö6_addr
)
SCTP_IN6ADDR_LOOPBACK_INIT
;

98 
lo›
.
v6
.
sö6_p‹t
 = 0;

100 
™yaddr
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

101 
™yaddr
.
v6
.
sö6_addr
 = (
ö6_addr
)
SCTP_IN6ADDR_ANY_INIT
;

102 
™yaddr
.
v6
.
sö6_p‹t
 = 0;

104 
pf_˛ass
 = 
PF_INET
;

106 
lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

107 
lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

108 
lo›
.
v4
.
sö_p‹t
 = 0;

110 
™yaddr
.
v4
.
sö_Ámûy
 = 
AF_INET
;

111 
™yaddr
.
v4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

112 
™yaddr
.
v4
.
sö_p‹t
 = 0;

116 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

117 
sk2
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

120 
	`ã°_íabÀ_assoc_ch™ge
(
sk1
);

121 
	`ã°_íabÀ_assoc_ch™ge
(
sk2
);

124 
	`ã°_böd
(
sk1
, &
lo›
.
ß
, (loop));

125 
	`ã°_böd
(
sk2
, &
™yaddr
.
ß
, (anyaddr));

127 
	`t°_ªsm
(
TPASS
, "bind INADDR_ANYáddress");

130 
	`ã°_li°í
(
sk2
, 1);

133 
«mñí
 = (
lo›
);

134 
îr‹
 = 
	`gësock«me
(
sk1
, &
lo›
.
ß
, &
«mñí
);

135 i‡(
îr‹
 != 0)

136 
	`t°_brkm
(
TBROK
, 
t°_exô
, "gësock«me: %s", 
	`°ªº‹
(
î∫o
));

138 
«mñí
 = (
™yaddr
);

139 
îr‹
 = 
	`gësock«me
(
sk2
, &
™yaddr
.
ß
, &
«mñí
);

140 i‡(
îr‹
 != 0)

141 
	`t°_brkm
(
TBROK
, 
t°_exô
, "gësock«me: %s", 
	`°ªº‹
(
î∫o
));

143 #i‡
TEST_V6


144 
lo›
.
v6
.
sö6_p‹t
 = 
™yaddr
.v6.sin6_port;

146 
lo›
.
v4
.
sö_p‹t
 = 
™yaddr
.v4.sin_port;

150 
outmesßge
.
msg_«me
 = &
lo›
;

151 
outmesßge
.
msg_«mñí
 = (
lo›
);

152 
outmesßge
.
msg_iov
 = &
out_iov
;

153 
outmesßge
.
msg_iovÀn
 = 1;

154 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

155 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

156 
outmesßge
.
msg_Êags
 = 0;

157 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

158 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

159 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

160 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

161 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

162 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

163 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

164 
µid
 = 
	`ønd
();

165 
°ªam
 = 1;

166 
söfo
->
söfo_µid
 = 
µid
;

167 
söfo
->
söfo_°ªam
 = 
°ªam
;

168 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

169 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

170 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

173 
	`mem£t
(&
ömesßge
, 0, (inmessage));

174 
iov
.
iov_ba£
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

175 
iov
.
iov_Àn
 = 
REALLY_BIG
;

176 
ömesßge
.
msg_iov
 = &
iov
;

177 
ömesßge
.
msg_iovÀn
 = 1;

178 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

181 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

182 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

183 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

184 (
s˘p_assoc_ch™ge
),

185 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

188 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

189 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

190 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

191 (
s˘p_assoc_ch™ge
),

192 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

195 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

196 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

197 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

198 
MSG_EOR
, 
°ªam
, 
µid
);

201 
outmesßge
.
msg_«me
 = &
lo›
;

202 
outmesßge
.
msg_«mñí
 = (
lo›
);

203 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

204 
outmesßge
.
msg_Êags
 = 0;

205 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

206 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

207 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

208 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

209 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

210 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

211 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

212 
µid
++;

213 
°ªam
++;

214 
söfo
->
söfo_µid
 = 
µid
;

215 
söfo
->
söfo_°ªam
 = 
°ªam
;

216 
outmesßge
.
msg_iov
->
iov_ba£
 = 
ãÀph⁄e
;

217 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
ãÀph⁄e
) + 1;

218 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
ãÀph⁄e
)+1);

220 
outmesßge
.
msg_iov
->
iov_ba£
 = 
ãÀph⁄e_ª•
;

221 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
ãÀph⁄e_ª•
) + 1;

222 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
ãÀph⁄e_ª•
)+1);

225 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

226 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

227 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
ãÀph⁄e
) + 1,

228 
MSG_EOR
, 
°ªam
, 
µid
);

230 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

231 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

232 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
ãÀph⁄e_ª•
) + 1,

233 
MSG_EOR
, 
°ªam
, 
µid
);

236 
	`˛o£
(
sk1
);

239 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

240 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

241 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

242 (
s˘p_assoc_ch™ge
),

243 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

245 
	`˛o£
(
sk2
);

247 
	`t°_ªsm
(
TPASS
, "send msgs fromá socket with INADDR_ANY bindáddress");

251 
	}
}

	@sctp-tools/src/func_tests/test_peeloff.c

43 
	~<°dio.h
>

44 
	~<uni°d.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/uio.h
>

50 
	~<√töë/ö.h
>

51 
	~<î∫o.h
>

52 
	~<√töë/s˘p.h
>

53 
	~<s˘putû.h
>

55 *
	gTCID
 = 
__FILE__
;

56 
	gTST_TOTAL
 = 6;

57 
	gTST_CNT
 = 0;

59 
	#MAX_CLIENTS
 10

	)

62 
	$maö
(
¨gc
, *
¨gv
[])

64 
svr_sk
, 
˛t_sk
[
MAX_CLIENTS
], 
≥ñoff_sk
[MAX_CLIENTS];

65 
s˘p_assoc_t
 
svr_associd
[
MAX_CLIENTS
];

66 
sockaddr_°‹age_t
 
svr_lo›
, 
˛t_lo›
[
MAX_CLIENTS
];

67 
iovec
 
iov
;

68 
msghdr
 
ömesßge
;

69 
msghdr
 
outmesßge
;

70 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

71 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

72 
cmsghdr
 *
cmsg
;

73 
s˘p_¢drcvöfo
 *
söfo
;

74 
iovec
 
out_iov
;

75 
îr‹
;

76 
uöt32_t
 
µid
;

77 
uöt32_t
 
°ªam
;

78 
s˘p_assoc_ch™ge
 *
ßc
;

79 *
big_buf„r
;

80 
i
;

81 *
mesßge
 = "hello, world!\n";

82 
pf_˛ass
;

87 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

89 #i‡
TEST_V6


90 
pf_˛ass
 = 
PF_INET6
;

91 
svr_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

92 
svr_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

93 
svr_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

95 
pf_˛ass
 = 
PF_INET
;

96 
svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

97 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

98 
svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

102 
svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

103 
	`ã°_böd
(
svr_sk
, &
svr_lo›
.
ß
, (svr_loop));

106 
	`ã°_íabÀ_assoc_ch™ge
(
svr_sk
);

109 
	`ã°_li°í
(
svr_sk
, 1);

112 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

113 
˛t_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

114 #i‡
TEST_V6


115 
˛t_lo›
[
i
].
v6
.
sö6_Ámûy
 = 
AF_INET6
;

116 
˛t_lo›
[
i
].
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

117 
˛t_lo›
[
i
].
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + i);

119 
˛t_lo›
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

120 
˛t_lo›
[
i
].
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

121 
˛t_lo›
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + i);

123 
	`ã°_böd
(
˛t_sk
[
i
], &
˛t_lo›
[i].
ß
, (clt_loop[i]));

125 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk
[
i
]);

131 
outmesßge
.
msg_«me
 = &
svr_lo›
;

132 
outmesßge
.
msg_«mñí
 = (
svr_lo›
);

133 
outmesßge
.
msg_iov
 = &
out_iov
;

134 
outmesßge
.
msg_iovÀn
 = 1;

135 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

136 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

137 
outmesßge
.
msg_Êags
 = 0;

138 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

139 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

140 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

141 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

142 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

143 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

144 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

145 
µid
 = 
	`ønd
();

146 
°ªam
 = 1;

147 
söfo
->
söfo_µid
 = 
µid
;

148 
söfo
->
söfo_°ªam
 = 
°ªam
;

149 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

150 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

151 
i
 = 0; i < 
MAX_CLIENTS
; i++)

152 
	`ã°_£ndmsg
(
˛t_sk
[
i
], &
outmesßge
, 0,

153 
	`°æí
(
mesßge
)+1);

156 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

157 
	`mem£t
(&
ömesßge
, 0, (inmessage));

158 
iov
.
iov_ba£
 = 
big_buf„r
;

159 
iov
.
iov_Àn
 = 
REALLY_BIG
;

160 
ömesßge
.
msg_iov
 = &
iov
;

161 
ömesßge
.
msg_iovÀn
 = 1;

162 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

165 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

166 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

167 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

168 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

169 (
s˘p_assoc_ch™ge
),

170 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

172 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

173 
˛t_associd
[
i
] = 
ßc
->
ßc_assoc_id
;

180 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

181 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

182 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

183 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

184 (
s˘p_assoc_ch™ge
),

185 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

186 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

187 
svr_associd
[
i
] = 
ßc
->
ßc_assoc_id
;

189 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

190 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

191 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

192 
MSG_EOR
, 
°ªam
, 
µid
);

198 
i
 = 0; i < 
MAX_CLIENTS
; i++)

199 
≥ñoff_sk
[
i
] = 
	`ã°_s˘p_≥ñoff
(
svr_sk
, 
svr_associd
[i]);

201 
	`t°_ªsm
(
TPASS
, "sctp_peeloff");

203 
î∫o
 = 0;

205 
îr‹
 = 
	`li°í
(
≥ñoff_sk
[0], 1);

206 i‡(
îr‹
 != -1)

207 
	`t°_brkm
(
TBROK
, 
t°_exô
, "listen onáÖeeled off socket "

208 "îr‹: %d,Éºno: %d", 
îr‹
, 
î∫o
);

210 
	`t°_ªsm
(
TPASS
, "listen onáÖeeled off socket");

212 
î∫o
 = 0;

216 i‡((-1 !
	`s˘p_≥ñoff
(
≥ñoff_sk
[0], 
svr_associd
[0])) ||

217 (
EINVAL
 !
î∫o
))

218 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_peeloff onáÖeeled off "

220 
îr‹
, 
î∫o
);

222 
	`t°_ªsm
(
TPASS
, "sctp_peeloff onáÖeeled off socket");

225 
i
 = 0; i < 
MAX_CLIENTS
; i++)

226 
	`ã°_£ndmsg
(
˛t_sk
[
i
], &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

229 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

230 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

231 
îr‹
 = 
	`ã°_ªcvmsg
(
≥ñoff_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

232 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

233 
MSG_EOR
, 
°ªam
, 
µid
);

236 
	`t°_ªsm
(
TPASS
, "Receive msgs onÖeeled off sockets");

241 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

242 
outmesßge
.
msg_«me
 = &
˛t_lo›
[
i
];

243 
outmesßge
.
msg_«mñí
 = (
˛t_lo›
[
i
]);

244 
	`ã°_£ndmsg
(
≥ñoff_sk
[
i
], &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

250 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

251 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

252 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

253 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

254 
MSG_EOR
, 
°ªam
, 
µid
);

257 
	`t°_ªsm
(
TPASS
, "Send msgs onÖeeled off sockets");

259 
î∫o
 = 0;

266 
outmesßge
.
msg_«me
 = &
˛t_lo›
[1];

267 
outmesßge
.
msg_«mñí
 = (
˛t_lo›
[1]);

268 
	`ã°_£ndmsg
(
≥ñoff_sk
[0], &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

270 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

271 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[0], &
ömesßge
, 
MSG_WAITALL
);

272 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

273 
MSG_EOR
, 
°ªam
, 
µid
);

275 
	`t°_ªsm
(
TPASS
, "peeled off socket cannot initializeáÇewássoc");

277 
	`˛o£
(
svr_sk
);

280 
i
 = 0; i < 
MAX_CLIENTS
; i++)

281 
	`˛o£
(
≥ñoff_sk
[
i
]);

286 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

287 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

288 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[
i
], &
ömesßge
, 
MSG_WAITALL
);

289 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

290 (
s˘p_assoc_ch™ge
),

291 
SCTP_ASSOC_CHANGE
,

292 
SCTP_SHUTDOWN_COMP
);

294 
	`˛o£
(
˛t_sk
[
i
]);

299 
	}
}

	@sctp-tools/src/func_tests/test_recvmsg.c

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~<f˙é.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<sys/uio.h
>

52 
	~<√töë/ö.h
>

53 
	~<î∫o.h
>

54 
	~<√töë/s˘p.h
>

55 
	~<s˘putû.h
>

57 *
	gTCID
 = 
__FILE__
;

58 
	gTST_TOTAL
 = 2;

59 
	gTST_CNT
 = 0;

62 
	$maö
(
¨gc
, *
¨gv
[])

64 
svr_sk
, 
˛t_sk
;

65 
sockaddr_ö
 
svr_lo›
, 
˛t_lo›
;

66 
iovec
 
iov
, 
out_iov
;

67 
msghdr
 
ömesßge
, 
outmesßge
;

68 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

69 
îr‹
, 
msgÀn
, 
i
;

70 *
big_buf„r
;

71 *
msg_buf
;

76 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

79 
svr_lo›
.
sö_Ámûy
 = 
AF_INET
;

80 
svr_lo›
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

81 
svr_lo›
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

82 
˛t_lo›
.
sö_Ámûy
 = 
AF_INET
;

83 
˛t_lo›
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

84 
˛t_lo›
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

87 
svr_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

88 
	`ã°_böd
(
svr_sk
, (
sockaddr
 *)&
svr_lo›
, (svr_loop));

91 
	`ã°_li°í
(
svr_sk
, 1);

94 
˛t_sk
 = 
	`ã°_sockë
(
AF_INET
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

95 
	`ã°_böd
(
˛t_sk
, (
sockaddr
 *)&
˛t_lo›
, (clt_loop));

98 
	`ã°_íabÀ_assoc_ch™ge
(
svr_sk
);

99 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk
);

102 
	`mem£t
(&
outmesßge
, 0, (outmessage));

103 
outmesßge
.
msg_«me
 = &
svr_lo›
;

104 
outmesßge
.
msg_«mñí
 = (
svr_lo›
);

105 
outmesßge
.
msg_iov
 = &
out_iov
;

106 
outmesßge
.
msg_iovÀn
 = 1;

107 
msg_buf
 = 
	`ã°_buûd_msg
(30000);

108 
outmesßge
.
msg_iov
->
iov_ba£
 = 
msg_buf
;

109 
outmesßge
.
msg_iov
->
iov_Àn
 = 30000;

110 
	`ã°_£ndmsg
(
˛t_sk
, &
outmesßge
, 0, 30000);

113 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

114 
	`mem£t
(&
ömesßge
, 0, (inmessage));

115 
iov
.
iov_ba£
 = 
big_buf„r
;

116 
iov
.
iov_Àn
 = 2000;

117 
ömesßge
.
msg_iov
 = &
iov
;

118 
ömesßge
.
msg_iovÀn
 = 1;

119 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

122 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

123 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
, &
ömesßge
, 0);

124 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

125 (
s˘p_assoc_ch™ge
),

126 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

129 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

130 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

131 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

132 (
s˘p_assoc_ch™ge
),

133 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

138 
i
 = 0, 
msgÀn
 = 30000; i < 15; i++, msglen-=2000) {

139 
iov
.
iov_Àn
 = 
REALLY_BIG
;

140 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

141 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_PEEK
);

142 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
msgÀn
,

143 
MSG_EOR
, 0, 0);

145 
iov
.
iov_Àn
 = 2000;

146 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

147 
îr‹
 = 
	`ã°_ªcvmsg
(
svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

148 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 2000,

149 ((
i
==14)?
MSG_EOR
:0), 0, 0);

152 
	`t°_ªsm
(
TPASS
, "recvmsg with MSG_PEEK flag");

153 
	`t°_ªsm
(
TPASS
, "MSG_EOR in msg_flags set correctly");

155 
	`˛o£
(
svr_sk
);

156 
	`˛o£
(
˛t_sk
);

160 
	}
}

	@sctp-tools/src/func_tests/test_sctp_sendrecvmsg.c

45 
	~<°dio.h
>

46 
	~<uni°d.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<sys/uio.h
>

52 
	~<√töë/ö.h
>

53 
	~<î∫o.h
>

54 
	~<√töë/s˘p.h
>

55 
	~<s˘putû.h
>

57 *
	gTCID
 = 
__FILE__
;

58 
	gTST_TOTAL
 = 10;

59 
	gTST_CNT
 = 0;

62 
	#SMALL_RCVBUF
 3000

	)

63 
	#SMALL_MAXSEG
 100

	)

65 
	#RWND_SLOP
 100

	)

66 *
	gfûlmsg
 = 
NULL
;

67 *
	gâlmsg
 = "This shouldÅime out!\n";

68 *
	gnŸémsg
 = "This should NOTÅime out!\n";

69 
	gâl‰ag
[
SMALL_MAXSEG
*3] = {0};

70 *
	gmesßge
 = "Hello world\n";

72 
	$maö
(
¨gc
, *
¨gv
[])

74 
sk1
, 
sk2
;

75 
sockaddr_°‹age_t
 
lo›1
;

76 
sockaddr_°‹age_t
 
lo›2
;

77 
sockaddr_°‹age_t
 
msg«me
;

78 
îr‹
;

79 
pf_˛ass
;

80 
uöt32_t
 
µid
;

81 
uöt32_t
 
°ªam
;

82 
s˘p_evít_subs¸ibe
 
subs¸ibe
;

83 *
big_buf„r
;

84 
off£t
, 
msg_Êags
;

85 
sockÀn_t
 
msg«me_Àn
;

86 
size_t
 
buÊí
;

87 
s˘p_£nd_Áûed
 *
ssf
;

88 
s˘p_¢drcvöfo
 
söfo
;

89 
s˘p_¢drcvöfo
 
¢d_söfo
;

90 
s˘p_assoc_t
 
associd1
;

91 
sockÀn_t
 
Àn
, 
ﬁdÀn
;

92 
s˘p_°©us
 
g°©us
;

97 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

100 #i‡
TEST_V6


101 
pf_˛ass
 = 
PF_INET6
;

103 
lo›1
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

104 
lo›1
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

105 
lo›1
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

107 
lo›2
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

108 
lo›2
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

109 
lo›2
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

111 
pf_˛ass
 = 
PF_INET
;

113 
lo›1
.
v4
.
sö_Ámûy
 = 
AF_INET
;

114 
lo›1
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

115 
lo›1
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

117 
lo›2
.
v4
.
sö_Ámûy
 = 
AF_INET
;

118 
lo›2
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

119 
lo›2
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

123 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

124 
sk2
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

128 
vÆ
 = 
SMALL_MAXSEG
;

129 
	`ã°_£tsock›t
(
sk1
, 
SCTP_MAXSEG
, &
vÆ
, (val));

132 
	`mem£t
(&
subs¸ibe
, 0, (subscribe));

133 
subs¸ibe
.
s˘p_d©a_io_evít
 = 1;

134 
subs¸ibe
.
s˘p_assocüti⁄_evít
 = 1;

135 
subs¸ibe
.
s˘p_£nd_Áûuª_evít
 = 1;

136 
	`ã°_£tsock›t
(
sk1
, 
SCTP_EVENTS
, &
subs¸ibe
, (subscribe));

137 
	`ã°_£tsock›t
(
sk2
, 
SCTP_EVENTS
, &
subs¸ibe
, (subscribe));

140 
	`ã°_böd
(
sk1
, &
lo›1
.
ß
, (loop1));

141 
	`ã°_böd
(
sk2
, &
lo›2
.
ß
, (loop2));

146 
Àn
 = ();

147 
îr‹
 = 
	`gësock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
ﬁdÀn
, &
Àn
);

149 i‡(
îr‹
)

150 
	`t°_brkm
(
TBROK
, 
t°_exô
, "can't getÑcvbuf size: %s",

151 
	`°ªº‹
(
î∫o
));

153 
Àn
 = 
SMALL_RCVBUF
;

155 
îr‹
 = 
	`£tsock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
Àn
, (len));

156 i‡(
îr‹
)

157 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SO_RCVBUF): %s",

158 
	`°ªº‹
(
î∫o
));

161 
	`ã°_li°í
(
sk2
, 1);

164 
µid
 = 
	`ønd
();

165 
°ªam
 = 1;

166 
	`ã°_s˘p_£ndmsg
(
sk1
, 
mesßge
, 
	`°æí
(message) + 1,

167 (
sockaddr
 *)&
lo›2
, (loop2),

168 
µid
, 0, 
°ªam
, 0, 0);

170 
	`t°_ªsm
(
TPASS
, "sctp_sendmsg");

173 
buÊí
 = 
REALLY_BIG
;

174 
big_buf„r
 = 
	`ã°_mÆloc
(
buÊí
);

175 
msg«me_Àn
 = (
msg«me
);

176 
msg_Êags
 = 0;

177 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk2
, 
big_buf„r
, 
buÊí
,

178 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

179 &
söfo
, &
msg_Êags
);

181 
associd2
 = ((
s˘p_assoc_ch™ge
 *)
big_buf„r
)->
ßc_assoc_id
;

183 
	`ã°_check_buf_nŸifiˇti⁄
(
big_buf„r
, 
îr‹
, 
msg_Êags
,

184 (
s˘p_assoc_ch™ge
),

185 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

189 
buÊí
 = 
REALLY_BIG
;

190 
msg«me_Àn
 = (
msg«me
);

191 
msg_Êags
 = 0;

192 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk1
, 
big_buf„r
, 
buÊí
,

193 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

194 &
söfo
, &
msg_Êags
);

195 
associd1
 = ((
s˘p_assoc_ch™ge
 *)
big_buf„r
)->
ßc_assoc_id
;

196 
	`ã°_check_buf_nŸifiˇti⁄
(
big_buf„r
, 
îr‹
, 
msg_Êags
,

197 (
s˘p_assoc_ch™ge
),

198 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

200 
	`t°_ªsm
(
TPASS
, "sctp_recvmsg SCTP_COMM_UPÇotification");

203 
buÊí
 = 
REALLY_BIG
;

204 
msg«me_Àn
 = (
msg«me
);

205 
msg_Êags
 = 0;

206 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk2
, 
big_buf„r
, 
buÊí
,

207 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

208 &
söfo
, &
msg_Êags
);

209 
	`ã°_check_buf_d©a
(
big_buf„r
, 
îr‹
, 
msg_Êags
, &
söfo
,

210 
	`°æí
(
mesßge
Ë+ 1, 
MSG_EOR
, 
°ªam
, 
µid
);

212 
	`t°_ªsm
(
TPASS
, "sctp_recvmsg data");

215 
Àn
 = (
s˘p_°©us
);

216 
	`mem£t
(&
g°©us
,0,(
s˘p_°©us
));

217 
g°©us
.
s°©_assoc_id
 = 
associd1
;

218 
îr‹
 = 
	`gësock›t
(
sk1
, 
IPPROTO_SCTP
, 
SCTP_STATUS
, &
g°©us
, &
Àn
);

220 i‡(
îr‹
)

221 
	`t°_brkm
(
TBROK
, 
t°_exô
, "can't getÑwnd size: %s",

222 
	`°ªº‹
(
î∫o
));

223 
	`t°_ªsm
(
TINFO
, "creatingá fillmsg of size %d",

224 
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

225 
fûlmsg
 = 
	`mÆloc
(
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

228 
	`mem£t
(
fûlmsg
, 'X', 
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

229 
fûlmsg
[
g°©us
.
s°©_rwnd
+
RWND_SLOP
-1] = '\0';

230 
µid
++;

231 
°ªam
++;

232 
	`ã°_s˘p_£ndmsg
(
sk1
, 
fûlmsg
, 
g°©us
.
s°©_rwnd
+
RWND_SLOP
,

233 (
sockaddr
 *)&
lo›2
, (loop2),

234 
µid
, 0, 
°ªam
, 0, 0);

237 
	`ã°_s˘p_£ndmsg
(
sk1
, 
âlmsg
, 
	`°æí
(ttlmsg) + 1,

238 (
sockaddr
 *)&
lo›2
, (loop2),

239 
µid
, 0, 
°ªam
, 2000, 0);

241 
	`t°_ªsm
(
TPASS
, "sctp_sendmsg withÅtl");

244 
	`ã°_s˘p_£ndmsg
(
sk1
, 
nŸémsg
, 
	`°æí
(nottlmsg) + 1,

245 (
sockaddr
 *)&
lo›2
, (loop2),

246 
µid
, 0, 
°ªam
, 0, 0);

248 
	`t°_ªsm
(
TPASS
, "sctp_sendmsg with zeroÅtl");

251 
	`mem£t
(
âl‰ag
, '0', (ttlfrag));

252 
âl‰ag
[(ttlfrag)-1] = '\0';

253 
	`ã°_s˘p_£ndmsg
(
sk1
, 
âl‰ag
, (ttlfrag),

254 (
sockaddr
 *)&
lo›2
, (loop2),

255 
µid
, 0, 
°ªam
, 2000, 0);

257 
	`t°_ªsm
(
TPASS
, "sctp_sendmsg fragmented msg withÅtl");

260 
	`t°_ªsm
(
TINFO
, "** SLEEPING for 3 seconds **");

261 
	`¶ìp
(3);

265 
buÊí
 = 
REALLY_BIG
;

266 
msg«me_Àn
 = (
msg«me
);

267 
msg_Êags
 = 0;

268 
	`ã°_s˘p_ªcvmsg
(
sk2
, 
big_buf„r
, 
buÊí
,

269 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

270 &
söfo
, &
msg_Êags
);

271 } !(
msg_Êags
 & 
MSG_EOR
));

274 
buÊí
 = 
REALLY_BIG
;

275 
msg«me_Àn
 = (
msg«me
);

276 
msg_Êags
 = 0;

277 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk2
, 
big_buf„r
, 
buÊí
,

278 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

279 &
söfo
, &
msg_Êags
);

280 
	`ã°_check_buf_d©a
(
big_buf„r
, 
îr‹
, 
msg_Êags
, &
söfo
,

281 
	`°æí
(
nŸémsg
Ë+ 1, 
MSG_EOR
, 
°ªam
, 
µid
);

282 i‡(0 !
	`°∫cmp
(
big_buf„r
, 
nŸémsg
, 
	`°æí
(nottlmsg)))

283 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_recvmsg: Wrong Message !!!");

285 
	`t°_ªsm
(
TPASS
, "sctp_recvmsg msg with zeroÅtl");

290 
buÊí
 = 
REALLY_BIG
;

291 
msg«me_Àn
 = (
msg«me
);

292 
msg_Êags
 = 0;

293 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk1
, 
big_buf„r
, 
buÊí
,

294 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

295 &
söfo
, &
msg_Êags
);

296 
	`ã°_check_buf_nŸifiˇti⁄
(
big_buf„r
, 
îr‹
, 
msg_Êags
,

297 (
s˘p_£nd_Áûed
) +

298 
	`°æí
(
âlmsg
) + 1,

299 
SCTP_SEND_FAILED
, 0);

300 
ssf
 = (
s˘p_£nd_Áûed
 *)
big_buf„r
;

301 i‡(0 !
	`°∫cmp
(
âlmsg
, (*)
ssf
->
ssf_d©a
, 
	`°æí
(ttlmsg) + 1))

302 
	`t°_brkm
(
TBROK
, 
t°_exô
, "SEND_FAILED data mismatch");

304 
	`t°_ªsm
(
TPASS
, "sctp_recvmsg SEND_FAILED for message withÅtl");

306 
off£t
 = 0;

312 
buÊí
 = 
REALLY_BIG
;

313 
msg«me_Àn
 = (
msg«me
);

314 
msg_Êags
 = 0;

315 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk1
, 
big_buf„r
, 
buÊí
,

316 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

317 &
söfo
, &
msg_Êags
);

318 
	`ã°_check_buf_nŸifiˇti⁄
(
big_buf„r
, 
îr‹
, 
msg_Êags
,

319 (
s˘p_£nd_Áûed
) +

320 
SMALL_MAXSEG
,

321 
SCTP_SEND_FAILED
, 0);

322 
ssf
 = (
s˘p_£nd_Áûed
 *)
big_buf„r
;

323 i‡(0 !
	`°∫cmp
(&
âl‰ag
[
off£t
], (*)
ssf
->
ssf_d©a
,

324 
SMALL_MAXSEG
))

325 
	`t°_brkm
(
TBROK
, 
t°_exô
, "SEND_FAILED data mismatch");

326 
off£t
 +
SMALL_MAXSEG
;

327 } !(
ssf
->
ssf_öfo
.
söfo_Êags
 & 0x01));

329 
	`t°_ªsm
(
TPASS
, "sctp_recvmsg SEND_FAILED for fragmented message with "

332 
¢d_söfo
.
söfo_µid
 = 
	`ønd
();

333 
¢d_söfo
.
söfo_Êags
 = 0;

334 
¢d_söfo
.
söfo_°ªam
 = 2;

335 
¢d_söfo
.
söfo_timëﬁive
 = 0;

336 
¢d_söfo
.
söfo_assoc_id
 = 
associd1
;

337 
	`ã°_s˘p_£nd
(
sk1
, 
mesßge
, 
	`°æí
(mesßgeË+ 1, &
¢d_söfo
,

338 
MSG_NOSIGNAL
);

340 
buÊí
 = 
REALLY_BIG
;

341 
msg«me_Àn
 = (
msg«me
);

342 
msg_Êags
 = 0;

343 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk2
, 
big_buf„r
, 
buÊí
,

344 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

345 &
söfo
, &
msg_Êags
);

346 
	`ã°_check_buf_d©a
(
big_buf„r
, 
îr‹
, 
msg_Êags
, &
söfo
,

347 
	`°æí
(
mesßge
Ë+ 1, 
MSG_EOR
, 
¢d_söfo
.
söfo_°ªam
,

348 
¢d_söfo
.
söfo_µid
);

350 
	`t°_ªsm
(
TPASS
, "sctp_send");

353 
	`˛o£
(
sk1
);

356 
buÊí
 = 
REALLY_BIG
;

357 
msg«me_Àn
 = (
msg«me
);

358 
msg_Êags
 = 0;

359 
îr‹
 = 
	`ã°_s˘p_ªcvmsg
(
sk2
, 
big_buf„r
, 
buÊí
,

360 (
sockaddr
 *)&
msg«me
, &
msg«me_Àn
,

361 &
söfo
, &
msg_Êags
);

362 
	`ã°_check_buf_nŸifiˇti⁄
(
big_buf„r
, 
îr‹
, 
msg_Êags
,

363 (
s˘p_assoc_ch™ge
),

364 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

366 
	`˛o£
(
sk2
);

370 
	}
}

	@sctp-tools/src/func_tests/test_sockopt.c

48 
	~<°dio.h
>

49 
	~<uni°d.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 
	~<sys/uio.h
>

55 
	~<î∫o.h
>

56 
	~<√töë/ö.h
>

57 
	~<√töë/s˘p.h
>

58 
	~<s˘putû.h
>

60 *
	gTCID
 = 
__FILE__
;

61 
	gTST_TOTAL
 = 29;

62 
	gTST_CNT
 = 0;

65 
	$maö
()

67 
udp_svr_sk
, 
udp_˛t_sk
, 
t˝_svr_sk
, 
t˝_˛t_sk
;

68 
ac˚±_sk
, 
≥ñoff_sk
;

69 
sockaddr_°‹age_t
 
udp_svr_lo›
, 
udp_˛t_lo›
;

70 
sockaddr_°‹age_t
 
t˝_svr_lo›
, 
t˝_˛t_lo›
;

71 
iovec
 
iov
;

72 
msghdr
 
ömesßge
;

73 
msghdr
 
outmesßge
;

74 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

75 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

76 
cmsghdr
 *
cmsg
;

77 
s˘p_¢drcvöfo
 *
söfo
;

78 
iovec
 
out_iov
;

79 *
mesßge
 = "hello, world!\n";

80 
îr‹
;

81 
pf_˛ass
;

82 
uöt32_t
 
µid
;

83 
uöt32_t
 
°ªam
;

84 
s˘p_assoc_t
 
udp_svr_associd
, 
udp_˛t_associd
;

85 
s˘p_assoc_ch™ge
 *
ßc
;

86 *
big_buf„r
;

87 
s˘p_evít_subs¸ibe
 
subs¸ibe
;

88 
s˘p_öômsg
 
öômsg
;

89 
s˘p_∑ddΩ¨ams
 
∑ddΩ¨ams
;

90 
s˘p_¢drcvöfo
 
£t_udp_sk_dÊt_∑øm
, 
gë_udp_sk_dÊt_∑øm
;

91 
s˘p_¢drcvöfo
 
£t_t˝_sk_dÊt_∑øm
, 
gë_t˝_sk_dÊt_∑øm
;

92 
s˘p_¢drcvöfo
 
£t_udp_assoc_dÊt_∑øm
;

93 
s˘p_¢drcvöfo
 
gë_udp_assoc_dÊt_∑øm
;

94 
s˘p_¢drcvöfo
 
£t_t˝_assoc_dÊt_∑øm
;

95 
s˘p_¢drcvöfo
 
gë_t˝_assoc_dÊt_∑øm
;

96 
s˘p_¢drcvöfo
 
gë_≥ñoff_assoc_dÊt_∑øm
;

97 
s˘p_¢drcvöfo
 
gë_ac˚±_assoc_dÊt_∑øm
;

98 
s˘p_∑ddröfo
 
pöfo
;

99 
dÊt_∑thmaxrxt
;

100 
sockÀn_t
 
›éí
, 
addæí
;

101 
s˘p_°©us
 
°©us
;

102 
s˘p_assoc_vÆue
 
vÆue
;

107 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

110 #i‡
TEST_V6


111 
pf_˛ass
 = 
PF_INET6
;

113 
udp_svr_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

114 
udp_svr_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

115 
udp_svr_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

117 
udp_˛t_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

118 
udp_˛t_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

119 
udp_˛t_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
+1);

121 
t˝_svr_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

122 
t˝_svr_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

123 
t˝_svr_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
+2);

125 
t˝_˛t_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

126 
t˝_˛t_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

127 
t˝_˛t_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
+3);

129 
pf_˛ass
 = 
PF_INET
;

131 
udp_svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

132 
udp_svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

133 
udp_svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

135 
udp_˛t_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

136 
udp_˛t_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

137 
udp_˛t_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
+1);

139 
t˝_svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

140 
t˝_svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

141 
t˝_svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
+2);

143 
t˝_˛t_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

144 
t˝_˛t_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

145 
t˝_˛t_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
+3);

149 
udp_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

150 
udp_˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

153 
	`ã°_íabÀ_assoc_ch™ge
(
udp_svr_sk
);

154 
	`ã°_íabÀ_assoc_ch™ge
(
udp_˛t_sk
);

157 
	`ã°_böd
(
udp_svr_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

158 
	`ã°_böd
(
udp_˛t_sk
, &
udp_˛t_lo›
.
ß
, (udp_clt_loop));

161 
	`ã°_li°í
(
udp_svr_sk
, 1);

167 
›éí
 = (
s˘p_°©us
);

168 
	`mem£t
(&
°©us
, 0, 
›éí
);

169 
îr‹
 = 
	`gësock›t
(
udp_svr_sk
, 
SOL_SCTP
, 
SCTP_STATUS
, &
°©us
,

170 &
›éí
);

171 i‡((
îr‹
 !-1Ë&& (
î∫o
 !
EINVAL
))

172 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_STATUS) oná "

174 
îr‹
, 
î∫o
);

176 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_STATUS) oná socket withÇoássoc");

179 
outmesßge
.
msg_«me
 = &
udp_svr_lo›
;

180 
outmesßge
.
msg_«mñí
 = (
udp_svr_lo›
);

181 
outmesßge
.
msg_iov
 = &
out_iov
;

182 
outmesßge
.
msg_iovÀn
 = 1;

183 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

184 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

185 
outmesßge
.
msg_Êags
 = 0;

186 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

187 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

188 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

189 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

190 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

191 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

192 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

193 
µid
 = 
	`ønd
();

194 
°ªam
 = 1;

195 
söfo
->
söfo_µid
 = 
µid
;

196 
söfo
->
söfo_°ªam
 = 
°ªam
;

197 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

198 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

199 
	`ã°_£ndmsg
(
udp_˛t_sk
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

202 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

203 
	`mem£t
(&
ömesßge
, 0, (inmessage));

204 
iov
.
iov_ba£
 = 
big_buf„r
;

205 
iov
.
iov_Àn
 = 
REALLY_BIG
;

206 
ömesßge
.
msg_iov
 = &
iov
;

207 
ömesßge
.
msg_iovÀn
 = 1;

208 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

211 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

212 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

213 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

214 (
s˘p_assoc_ch™ge
),

215 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

216 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

217 
udp_svr_associd
 = 
ßc
->
ßc_assoc_id
;

220 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

221 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_˛t_sk
, &
ömesßge
, 
MSG_WAITALL
);

222 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

223 (
s˘p_assoc_ch™ge
),

224 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

225 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

226 
udp_˛t_associd
 = 
ßc
->
ßc_assoc_id
;

229 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

230 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

231 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

232 
MSG_EOR
, 
°ªam
, 
µid
);

235 
›éí
 = (
s˘p_°©us
);

236 
	`mem£t
(&
°©us
, 0, 
›éí
);

237 
°©us
.
s°©_assoc_id
 = 
udp_˛t_associd
;

238 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_STATUS
, &
°©us
, &
›éí
);

240 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_STATUS)");

243 
›éí
 = (
s˘p_°©us
);

244 
	`mem£t
(&
°©us
, 0, 
›éí
);

245 
°©us
.
s°©_assoc_id
 = 
udp_svr_associd
;

246 
îr‹
 = 
	`gësock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_STATUS
, &
°©us
,

247 &
›éí
);

248 i‡((
îr‹
 !-1Ë&& (
î∫o
 !
EINVAL
))

249 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_STATUS) with "

250 "associdÉº‹: %dÉºno:%d", 
îr‹
, 
î∫o
);

252 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_STATUS) with invalidássocid");

255 
›éí
 = (
s˘p_°©us
);

256 
	`mem£t
(&
°©us
, 0, 
›éí
);

257 
°©us
.
s°©_assoc_id
 = 0;

258 
îr‹
 = 
	`gësock›t
(
udp_svr_sk
, 
SOL_SCTP
, 
SCTP_STATUS
, &
°©us
,

259 &
›éí
);

260 i‡((
îr‹
 !-1Ë&& (
î∫o
 !
EINVAL
))

261 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_STATUS) with "

262 "NULLássocidÉº‹: %dÉºno:%d", 
îr‹
, 
î∫o
);

264 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_STATUS) with NULLássocid");

267 
	`˛o£
(
udp_˛t_sk
);

270 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

271 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

272 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

273 (
s˘p_assoc_ch™ge
),

274 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

276 
îr‹
 = 0;

277 
	`˛o£
(
udp_svr_sk
);

283 
udp_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

284 
udp_˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

287 
	`ã°_íabÀ_assoc_ch™ge
(
udp_svr_sk
);

288 
	`ã°_íabÀ_assoc_ch™ge
(
udp_˛t_sk
);

291 
	`ã°_böd
(
udp_svr_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

292 
	`ã°_böd
(
udp_˛t_sk
, &
udp_˛t_lo›
.
ß
, (udp_clt_loop));

295 
	`ã°_li°í
(
udp_svr_sk
, 1);

298 
›éí
 = (
subs¸ibe
);

299 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_EVENTS
, &
subs¸ibe
, &
›éí
);

302 
›éí
 = (
subs¸ibe
);

303 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_EVENTS
, &
subs¸ibe
, &
›éí
);

305 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_EVENTS)");

308 
	`mem£t
(&
subs¸ibe
, 0, (
s˘p_evít_subs¸ibe
));

309 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_EVENTS
, &
subs¸ibe
,

310 (
subs¸ibe
));

311 
	`ã°_£tsock›t
(
udp_˛t_sk
, 
SCTP_EVENTS
, &
subs¸ibe
,

312 (
subs¸ibe
));

314 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_EVENTS)");

319 
›éí
 = (
subs¸ibe
);

320 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_EVENTS
, &
subs¸ibe
, &
›éí
);

321 
›éí
 = (
subs¸ibe
);

322 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_EVENTS
, &
subs¸ibe
, &
›éí
);

325 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

326 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

327 
	`ã°_£ndmsg
(
udp_˛t_sk
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

330 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

331 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

332 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

333 
MSG_EOR
, 0, 0);

335 i‡(
ömesßge
.
msg_c⁄åﬁÀn
 != 0)

336 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Receive unexpectedáncillary"

340 
	`mem£t
(&
subs¸ibe
, 0, (
s˘p_evít_subs¸ibe
));

341 
subs¸ibe
.
s˘p_shutdown_evít
 = 1;

342 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_EVENTS
, &
subs¸ibe
,

343 (
subs¸ibe
));

345 
îr‹
 = 0;

347 
	`˛o£
(
udp_˛t_sk
);

350 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

351 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

352 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

353 (
s˘p_shutdown_evít
),

354 
SCTP_SHUTDOWN_EVENT
, 0);

356 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_EVENTS) - SCTP_SHUTDOWN_EVENT");

358 
	`˛o£
(
udp_svr_sk
);

362 
udp_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

363 
udp_˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

366 
	`ã°_íabÀ_assoc_ch™ge
(
udp_svr_sk
);

367 
	`ã°_íabÀ_assoc_ch™ge
(
udp_˛t_sk
);

370 
	`ã°_böd
(
udp_svr_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

371 
	`ã°_böd
(
udp_˛t_sk
, &
udp_˛t_lo›
.
ß
, (udp_clt_loop));

374 
	`ã°_li°í
(
udp_svr_sk
, 1);

377 
outmesßge
.
msg_«me
 = &
udp_svr_lo›
;

378 
outmesßge
.
msg_«mñí
 = (
udp_svr_lo›
);

379 
outmesßge
.
msg_iov
 = &
out_iov
;

380 
outmesßge
.
msg_iovÀn
 = 1;

381 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

382 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

383 
outmesßge
.
msg_Êags
 = 0;

384 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

385 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

386 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

387 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

388 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

389 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

390 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

391 
µid
 = 
	`ønd
();

392 
°ªam
 = 1;

393 
söfo
->
söfo_µid
 = 
µid
;

394 
söfo
->
söfo_°ªam
 = 
°ªam
;

395 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

396 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

397 
	`ã°_£ndmsg
(
udp_˛t_sk
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

400 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

401 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_˛t_sk
, &
ömesßge
, 
MSG_WAITALL
);

402 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

403 (
s˘p_assoc_ch™ge
),

404 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

405 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

406 
udp_˛t_associd
 = 
ßc
->
ßc_assoc_id
;

412 
s˘p_°©us
 
°©us1
, 
°©us2
;

414 
	`mem£t
(&
°©us1
, 0, (status1));

415 
	`mem£t
(&
°©us2
, 0, (status2));

416 
›éí
 = (
s˘p_°©us
);

419 
îr‹
 = 
	`s˘p_›t_öfo
(
udp_˛t_sk
,
udp_˛t_associd
,
SCTP_STATUS
,

420 (*)&
°©us1
, &
›éí
);

421 i‡(
îr‹
 != 0)

422 
	`t°_brkm
(
TBROK
, 
t°_exô
,

424 
	`°ªº‹
(
î∫o
));

426 
°©us2
.
s°©_assoc_id
 = 
udp_˛t_associd
;

427 
îr‹
 = 
	`gësock›t
(
udp_˛t_sk
, 
IPPROTO_SCTP
, 
SCTP_STATUS
,

428 (*)&
°©us2
, &
›éí
);

429 i‡(
îr‹
 != 0)

430 
	`t°_brkm
(
TBROK
, 
t°_exô
,

432 
	`°ªº‹
(
î∫o
));

433 i‡(
	`°∫cmp
((*)&
°©us1
, (*)&
°©us2
, 
›éí
))

434 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_opt_info(SCTP_STAUS)"

437 
	`t°_ªsm
(
TPASS
, "sctp_opt_info(SCTP_STATUS)");

439 
îr‹
 = 0;

441 
	`˛o£
(
udp_svr_sk
);

442 
	`˛o£
(
udp_˛t_sk
);

446 
udp_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

449 
	`ã°_böd
(
udp_svr_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

452 
	`ã°_íabÀ_assoc_ch™ge
(
udp_svr_sk
);

455 
›éí
 = (
öômsg
);

456 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_INITMSG
, &
öômsg
, &
›éí
);

458 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_INITMSG)");

461 
öômsg
.
söô_num_o°ªams
 = 5;

462 
öômsg
.
söô_max_ö°ªams
 = 5;

463 
öômsg
.
söô_max_©ãm±s
 = 3;

464 
öômsg
.
söô_max_öô_timeo
 = 30;

465 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_INITMSG
, &
öômsg
, (initmsg));

467 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_INITMSG)");

470 
›éí
 = (
öômsg
);

471 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_INITMSG
, &
öômsg
, &
›éí
);

473 
	`˛o£
(
udp_svr_sk
);

477 
udp_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

480 
›éí
 = (
∑ddΩ¨ams
);

481 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

482 
∑ddΩ¨ams
.
•p_addªss
.
ss_Ámûy
 = 
AF_INET
;

483 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_PEER_ADDR_PARAMS
, &
∑ddΩ¨ams
,

484 &
›éí
);

486 
dÊt_∑thmaxrxt
 = 
∑ddΩ¨ams
.
•p_∑thmaxrxt
;

487 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_PEER_ADDR_PARAMS)");

490 
∑ddΩ¨ams
.
•p_hböãrvÆ
 = 1000;

491 
∑ddΩ¨ams
.
•p_∑thmaxrxt
 = 
dÊt_∑thmaxrxt
+1;

492 
∑ddΩ¨ams
.
•p_ßckdñay
 = 100;

493 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_PEER_ADDR_PARAMS
, &
∑ddΩ¨ams
,

494 (
∑ddΩ¨ams
));

496 
∑ddΩ¨ams
.
•p_∑thmaxrxt
 = 0;

499 
›éí
 = (
∑ddΩ¨ams
);

500 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_PEER_ADDR_PARAMS
, &
∑ddΩ¨ams
,

501 &
›éí
);

502 i‡(
∑ddΩ¨ams
.
•p_∑thmaxrxt
 !
dÊt_∑thmaxrxt
+1)

503 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

506 
vÆue
.
assoc_id
 = 0;

507 
›éí
 = (
vÆue
);

508 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_DELAYED_ACK_TIME
, &
vÆue
,

509 &
›éí
);

510 i‡(
vÆue
.
assoc_vÆue
 != 100)

511 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DELAYED_ACK_TIME) "

514 
vÆue
.
assoc_id
 = 0;

515 
vÆue
.
assoc_vÆue
 = 250;

516 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_DELAYED_ACK_TIME
, &
vÆue
,

517 (
vÆue
));

518 
›éí
 = (
∑ddΩ¨ams
);

519 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_PEER_ADDR_PARAMS
, &
∑ddΩ¨ams
,

520 &
›éí
);

521 i‡(
∑ddΩ¨ams
.
•p_ßckdñay
 != 250)

522 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_DELAYED_ACK_TIME) "

525 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DELAYED_ACK_TIME)");

529 
udp_˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

530 
›éí
 = (
∑ddΩ¨ams
);

531 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

532 
∑ddΩ¨ams
.
•p_addªss
.
ss_Ámûy
 = 
AF_INET
;

533 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_PEER_ADDR_PARAMS
, &
∑ddΩ¨ams
,

534 &
›éí
);

535 i‡(
∑ddΩ¨ams
.
•p_∑thmaxrxt
 !
dÊt_∑thmaxrxt
)

536 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_PEER_ADDR_PARAMS) "

540 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS)");

543 
∑ddΩ¨ams
.
•p_assoc_id
 = 1234;

544 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

545 &
∑ddΩ¨ams
,

546 (
∑ddΩ¨ams
));

547 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

548 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

550 
îr‹
, 
î∫o
);

552 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

555 
	`ã°_böd
(
udp_svr_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

556 
	`ã°_böd
(
udp_˛t_sk
, &
udp_˛t_lo›
.
ß
, (udp_clt_loop));

558 
	`ã°_li°í
(
udp_svr_sk
, 5);

560 
	`ã°_íabÀ_assoc_ch™ge
(
udp_svr_sk
);

561 
	`ã°_íabÀ_assoc_ch™ge
(
udp_˛t_sk
);

564 
	`ã°_c⁄√˘
(
udp_˛t_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

567 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

568 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

569 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

570 (
s˘p_assoc_ch™ge
),

571 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

572 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

574 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

575 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

576 
∑ddΩ¨ams
.
•p_hböãrvÆ
 = 1000;

577 
∑ddΩ¨ams
.
•p_∑thmaxrxt
 = 
dÊt_∑thmaxrxt
+1;

578 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_PEER_ADDR_PARAMS
, &
∑ddΩ¨ams
,

579 (
∑ddΩ¨ams
));

580 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) - "

583 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

584 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_svr_lo›
, (udp_svr_loop));

585 
∑ddΩ¨ams
.
•p_hböãrvÆ
 = 1000;

586 
∑ddΩ¨ams
.
•p_∑thmaxrxt
 = 
dÊt_∑thmaxrxt
+1;

588 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

589 &
∑ddΩ¨ams
,

590 (
∑ddΩ¨ams
));

591 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

592 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

594 
îr‹
, 
î∫o
);

596 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

599 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

600 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

601 
∑ddΩ¨ams
.
•p_hböãrvÆ
 = 1000;

602 
∑ddΩ¨ams
.
•p_∑thmaxrxt
 = 
dÊt_∑thmaxrxt
+1;

604 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

605 &
∑ddΩ¨ams
,

606 (
∑ddΩ¨ams
) - 1);

607 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

608 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

610 
îr‹
, 
î∫o
);

612 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

615 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_DELAYED_ACK_TIME
,

616 &
vÆue
,

617 (
vÆue
) - 1);

618 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

619 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_DELAYED_ACK_TIME) "

621 
îr‹
, 
î∫o
);

623 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DELAYED_ACK_TIME) "

626 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

627 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

628 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

629 
∑ddΩ¨ams
.
•p_ßckdñay
 = 501;

631 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

632 &
∑ddΩ¨ams
,

633 (
∑ddΩ¨ams
));

634 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

635 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

637 
îr‹
, 
î∫o
);

639 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

642 
vÆue
.
assoc_id
 = 
ßc
->
ßc_assoc_id
;

643 
vÆue
.
assoc_vÆue
 = 501;

645 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_DELAYED_ACK_TIME
,

646 &
vÆue
,

647 (
vÆue
));

648 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

649 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_DELAYED_ACK_TIME) "

651 
îr‹
, 
î∫o
);

653 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DELAYED_ACK_TIME) "

656 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

657 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

658 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

659 
∑ddΩ¨ams
.
•p_∑thmtu
 = 511;

661 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

662 &
∑ddΩ¨ams
,

663 (
∑ddΩ¨ams
));

664 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

665 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

667 
îr‹
, 
î∫o
);

669 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

672 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

673 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

674 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

675 
∑ddΩ¨ams
.
•p_Êags
 = 
SPP_HB_ENABLE
 | 
SPP_HB_DISABLE
;

677 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

678 &
∑ddΩ¨ams
,

679 (
∑ddΩ¨ams
));

680 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

681 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

683 
îr‹
, 
î∫o
);

685 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

688 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

689 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

690 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

691 
∑ddΩ¨ams
.
•p_Êags
 = 
SPP_PMTUD_ENABLE
 | 
SPP_PMTUD_DISABLE
;

693 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

694 &
∑ddΩ¨ams
,

695 (
∑ddΩ¨ams
));

696 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

697 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

699 
îr‹
, 
î∫o
);

701 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

704 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

705 
∑ddΩ¨ams
.
•p_assoc_id
 = 
ßc
->
ßc_assoc_id
;

706 
	`mem˝y
(&
∑ddΩ¨ams
.
•p_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

707 
∑ddΩ¨ams
.
•p_Êags
 = 
SPP_SACKDELAY_ENABLE
 | 
SPP_SACKDELAY_DISABLE
;

709 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

710 &
∑ddΩ¨ams
,

711 (
∑ddΩ¨ams
));

712 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

713 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

715 
îr‹
, 
î∫o
);

717 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

720 
	`mem£t
(&
∑ddΩ¨ams
, 0, (paddrparams));

721 
∑ddΩ¨ams
.
•p_Êags
 = 
SPP_HB_DEMAND
;

723 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_PEER_ADDR_PARAMS
,

724 &
∑ddΩ¨ams
,

725 (
∑ddΩ¨ams
));

726 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

727 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

729 
îr‹
, 
î∫o
);

731 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_PEER_ADDR_PARAMS) "

734 
	`˛o£
(
udp_svr_sk
);

735 
	`˛o£
(
udp_˛t_sk
);

742 
udp_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

743 
udp_˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

744 
t˝_svr_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

745 
t˝_˛t_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

748 
	`ã°_íabÀ_assoc_ch™ge
(
udp_svr_sk
);

749 
	`ã°_íabÀ_assoc_ch™ge
(
udp_˛t_sk
);

750 
	`ã°_íabÀ_assoc_ch™ge
(
t˝_svr_sk
);

751 
	`ã°_íabÀ_assoc_ch™ge
(
t˝_˛t_sk
);

753 
	`ã°_böd
(
udp_svr_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

754 
	`ã°_böd
(
udp_˛t_sk
, &
udp_˛t_lo›
.
ß
, (udp_clt_loop));

755 
	`ã°_böd
(
t˝_svr_sk
, &
t˝_svr_lo›
.
ß
, (tcp_svr_loop));

756 
	`ã°_böd
(
t˝_˛t_sk
, &
t˝_˛t_lo›
.
ß
, (tcp_clt_loop));

761 
	`ã°_li°í
(
udp_svr_sk
, 5);

762 
	`ã°_li°í
(
t˝_svr_sk
, 5);

765 
	`mem£t
(&
£t_udp_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

766 
£t_udp_sk_dÊt_∑øm
.
söfo_µid
 = 1000;

767 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

768 &
£t_udp_sk_dÊt_∑øm
, (set_udp_sk_dflt_param));

769 
	`mem£t
(&
£t_udp_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

770 
£t_udp_sk_dÊt_∑øm
.
söfo_µid
 = 1000;

771 
	`ã°_£tsock›t
(
udp_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

772 &
£t_udp_sk_dÊt_∑øm
, (set_udp_sk_dflt_param));

774 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) - "

778 
	`mem£t
(&
gë_udp_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

779 
›éí
 = (
gë_udp_sk_dÊt_∑øm
);

780 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

781 &
gë_udp_sk_dÊt_∑øm
, &
›éí
);

784 i‡(
£t_udp_sk_dÊt_∑øm
.
söfo_µid
 !=

785 
gë_udp_sk_dÊt_∑øm
.
söfo_µid
)

786 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

790 
	`mem£t
(&
gë_udp_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

791 
›éí
 = (
gë_udp_sk_dÊt_∑øm
);

792 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

793 &
gë_udp_sk_dÊt_∑øm
, &
›éí
);

796 i‡(
£t_udp_sk_dÊt_∑øm
.
söfo_µid
 !=

797 
gë_udp_sk_dÊt_∑øm
.
söfo_µid
)

798 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

801 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

807 
	`mem£t
(&
£t_udp_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

808 
£t_udp_sk_dÊt_∑øm
.
söfo_µid
 = 1000;

810 
£t_udp_sk_dÊt_∑øm
.
söfo_assoc_id
 = 1234;

811 
îr‹
 = 
	`£tsock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_DEFAULT_SEND_PARAM
,

812 &
£t_udp_sk_dÊt_∑øm
,

813 (
£t_udp_sk_dÊt_∑øm
));

814 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

815 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) "

817 
îr‹
, 
î∫o
);

819 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) "

823 
	`ã°_c⁄√˘
(
udp_˛t_sk
, &
udp_svr_lo›
.
ß
, (udp_svr_loop));

826 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

827 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_svr_sk
, &
ömesßge
, 
MSG_WAITALL
);

828 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

829 (
s˘p_assoc_ch™ge
),

830 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

831 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

832 
udp_svr_associd
 = 
ßc
->
ßc_assoc_id
;

834 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

835 
îr‹
 = 
	`ã°_ªcvmsg
(
udp_˛t_sk
, &
ömesßge
, 
MSG_WAITALL
);

836 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

837 (
s˘p_assoc_ch™ge
),

838 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

839 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

840 
udp_˛t_associd
 = 
ßc
->
ßc_assoc_id
;

845 
	`mem£t
(&
£t_udp_assoc_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

846 
£t_udp_assoc_dÊt_∑øm
.
söfo_µid
 = 3000;

847 
£t_udp_assoc_dÊt_∑øm
.
söfo_assoc_id
 = 
udp_˛t_associd
;

848 
îr‹
 = 
	`£tsock›t
(
udp_svr_sk
, 
SOL_SCTP
, 
SCTP_DEFAULT_SEND_PARAM
,

849 &
£t_udp_assoc_dÊt_∑øm
,

850 (
£t_udp_assoc_dÊt_∑øm
));

851 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

852 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) "

854 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

856 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) - "

862 
	`mem£t
(&
£t_udp_assoc_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

863 
£t_udp_assoc_dÊt_∑øm
.
söfo_µid
 = 3000;

864 
£t_udp_assoc_dÊt_∑øm
.
söfo_assoc_id
 = 
udp_svr_associd
;

865 
	`ã°_£tsock›t
(
udp_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

866 &
£t_udp_assoc_dÊt_∑øm
,

867 (
£t_udp_assoc_dÊt_∑øm
));

869 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) - "

875 
	`mem£t
(&
gë_udp_assoc_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

876 
gë_udp_assoc_dÊt_∑øm
.
söfo_assoc_id
 = 
udp_svr_associd
 ;

877 
›éí
 = (
gë_udp_assoc_dÊt_∑øm
);

878 
	`ã°_gësock›t
(
udp_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

879 &
gë_udp_assoc_dÊt_∑øm
, &
›éí
);

882 i‡(
gë_udp_assoc_dÊt_∑øm
.
söfo_µid
 !=

883 
£t_udp_assoc_dÊt_∑øm
.
söfo_µid
)

884 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

887 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

894 
	`mem£t
(&
gë_udp_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

895 
gë_udp_sk_dÊt_∑øm
.
söfo_assoc_id
 = 0 ;

896 
›éí
 = (
gë_udp_sk_dÊt_∑øm
);

897 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

898 &
gë_udp_sk_dÊt_∑øm
, &
›éí
);

901 i‡(
gë_udp_sk_dÊt_∑øm
.
söfo_µid
 !=

902 
£t_udp_sk_dÊt_∑øm
.
söfo_µid
)

903 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

906 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

909 
≥ñoff_sk
 = 
	`ã°_s˘p_≥ñoff
(
udp_svr_sk
, 
udp_svr_associd
);

915 
	`mem£t
(&
gë_≥ñoff_assoc_dÊt_∑øm
, 0,

916 (
s˘p_¢drcvöfo
));

917 
gë_≥ñoff_assoc_dÊt_∑øm
.
söfo_assoc_id
 = 0 ;

918 
›éí
 = (
gë_≥ñoff_assoc_dÊt_∑øm
);

919 
	`ã°_gësock›t
(
≥ñoff_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

920 &
gë_≥ñoff_assoc_dÊt_∑øm
, &
›éí
);

923 i‡(
gë_≥ñoff_assoc_dÊt_∑øm
.
söfo_µid
 !=

924 
£t_udp_assoc_dÊt_∑øm
.
söfo_µid
)

925 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

928 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

932 
	`mem£t
(&
£t_t˝_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

933 
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
 = 2000;

935 
£t_t˝_sk_dÊt_∑øm
.
söfo_assoc_id
 = 1234;

936 
	`ã°_£tsock›t
(
t˝_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

937 &
£t_t˝_sk_dÊt_∑øm
,

938 (
£t_t˝_sk_dÊt_∑øm
));

941 
	`mem£t
(&
£t_t˝_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

942 
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
 = 2000;

944 
£t_t˝_sk_dÊt_∑øm
.
söfo_assoc_id
 = 1234;

945 
	`ã°_£tsock›t
(
t˝_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

946 &
£t_t˝_sk_dÊt_∑øm
,

947 (
£t_t˝_sk_dÊt_∑øm
));

949 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) - "

953 
	`mem£t
(&
gë_t˝_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

954 
›éí
 = (
gë_t˝_sk_dÊt_∑øm
);

955 
	`ã°_gësock›t
(
t˝_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

956 &
gë_t˝_sk_dÊt_∑øm
, &
›éí
);

959 i‡(
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
 !=

960 
gë_t˝_sk_dÊt_∑øm
.
söfo_µid
)

961 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

965 
	`mem£t
(&
gë_t˝_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

966 
›éí
 = (
gë_t˝_sk_dÊt_∑øm
);

967 
	`ã°_gësock›t
(
t˝_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

968 &
gë_t˝_sk_dÊt_∑øm
, &
›éí
);

971 i‡(
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
 !=

972 
gë_t˝_sk_dÊt_∑øm
.
söfo_µid
)

973 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

976 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

980 
	`ã°_c⁄√˘
(
t˝_˛t_sk
, &
t˝_svr_lo›
.
ß
, (tcp_svr_loop));

985 
	`mem£t
(&
£t_t˝_assoc_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

986 
£t_t˝_assoc_dÊt_∑øm
.
söfo_µid
 = 4000;

987 
£t_t˝_assoc_dÊt_∑øm
.
söfo_assoc_id
 = 0;

988 
	`ã°_£tsock›t
(
t˝_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

989 &
£t_t˝_assoc_dÊt_∑øm
,

990 (
£t_t˝_assoc_dÊt_∑øm
));

992 
	`t°_ªsm
(
TPASS
, "setsockopt(SCTP_DEFAULT_SEND_PARAM) - "

998 
	`mem£t
(&
gë_t˝_assoc_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

999 
›éí
 = (
gë_t˝_assoc_dÊt_∑øm
);

1000 
	`ã°_gësock›t
(
t˝_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

1001 &
gë_t˝_assoc_dÊt_∑øm
, &
›éí
);

1003 i‡(
£t_t˝_assoc_dÊt_∑øm
.
söfo_µid
 !=

1004 
gë_t˝_assoc_dÊt_∑øm
.
söfo_µid
)

1005 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

1009 
	`mem£t
(&
gë_t˝_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

1010 
›éí
 = (
gë_t˝_sk_dÊt_∑øm
);

1011 
	`ã°_gësock›t
(
t˝_˛t_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

1012 &
gë_t˝_sk_dÊt_∑øm
, &
›éí
);

1017 i‡((
gë_t˝_sk_dÊt_∑øm
.
söfo_µid
 ==

1018 
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
) ||

1019 (
gë_t˝_sk_dÊt_∑øm
.
söfo_µid
 !=

1020 
£t_t˝_assoc_dÊt_∑øm
.
söfo_µid
))

1021 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

1025 
	`mem£t
(&
gë_t˝_sk_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

1026 
›éí
 = (
gë_t˝_sk_dÊt_∑øm
);

1027 
	`ã°_gësock›t
(
t˝_svr_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

1028 &
gë_t˝_sk_dÊt_∑øm
, &
›éí
);

1033 i‡(
gë_t˝_sk_dÊt_∑øm
.
söfo_µid
 !=

1034 
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
)

1035 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

1038 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

1041 
ac˚±_sk
 = 
	`ã°_ac˚±
(
t˝_svr_sk
, 
NULL
, &
addæí
);

1046 
	`mem£t
(&
gë_ac˚±_assoc_dÊt_∑øm
, 0, (
s˘p_¢drcvöfo
));

1047 
›éí
 = (
gë_ac˚±_assoc_dÊt_∑øm
);

1048 
	`ã°_gësock›t
(
ac˚±_sk
, 
SCTP_DEFAULT_SEND_PARAM
,

1049 &
gë_ac˚±_assoc_dÊt_∑øm
, &
›éí
);

1051 
îr‹
 = 0;

1056 i‡(
gë_t˝_sk_dÊt_∑øm
.
söfo_µid
 !=

1057 
£t_t˝_sk_dÊt_∑øm
.
söfo_µid
)

1058 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) "

1061 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_DEFAULT_SEND_PARAM) - "

1066 
	`mem£t
(&
pöfo
, 0, (pinfo));

1067 
›éí
 = (
pöfo
);

1068 
îr‹
 = 
	`gësock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_GET_PEER_ADDR_INFO
,

1069 &
pöfo
, &
›éí
);

1070 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

1071 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) "

1073 
îr‹
, 
î∫o
);

1075 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) - "

1079 
	`mem£t
(&
pöfo
, 0, (pinfo));

1080 
›éí
 = (
pöfo
);

1081 
pöfo
.
•öfo_assoc_id
 = 
udp_˛t_associd
;

1082 
îr‹
 = 
	`gësock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_GET_PEER_ADDR_INFO
,

1083 &
pöfo
, &
›éí
);

1084 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

1085 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) "

1087 
îr‹
, 
î∫o
);

1089 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) - "

1093 
	`mem£t
(&
pöfo
, 0, (pinfo));

1094 
›éí
 = (
pöfo
);

1095 
pöfo
.
•öfo_assoc_id
 = 
udp_˛t_associd
;

1096 
	`mem˝y
(&
pöfo
.
•öfo_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

1097 
îr‹
 = 
	`gësock›t
(
udp_˛t_sk
, 
SOL_SCTP
, 
SCTP_GET_PEER_ADDR_INFO
,

1098 &
pöfo
, &
›éí
);

1099 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

1100 
	`t°_brkm
(
TBROK
, 
t°_exô
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) "

1102 
îr‹
, 
î∫o
);

1104 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) - "

1108 
	`mem£t
(&
pöfo
, 0, (pinfo));

1109 
›éí
 = (
pöfo
);

1110 
pöfo
.
•öfo_assoc_id
 = 
udp_˛t_associd
;

1111 
	`mem˝y
(&
pöfo
.
•öfo_addªss
, &
udp_svr_lo›
, (udp_svr_loop));

1112 
	`ã°_gësock›t
(
udp_˛t_sk
, 
SCTP_GET_PEER_ADDR_INFO
, &
pöfo
, &
›éí
);

1114 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) - "

1118 
	`mem£t
(&
pöfo
, 0, (pinfo));

1119 
›éí
 = (
pöfo
);

1120 
pöfo
.
•öfo_assoc_id
 = 0;

1121 
	`mem˝y
(&
pöfo
.
•öfo_addªss
, &
udp_˛t_lo›
, (udp_clt_loop));

1122 
	`ã°_gësock›t
(
≥ñoff_sk
, 
SCTP_GET_PEER_ADDR_INFO
, &
pöfo
, &
›éí
);

1124 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) - "

1128 
	`mem£t
(&
pöfo
, 0, (pinfo));

1129 
›éí
 = (
pöfo
);

1130 
pöfo
.
•öfo_assoc_id
 = 0;

1131 
	`mem˝y
(&
pöfo
.
•öfo_addªss
, &
t˝_˛t_lo›
, (tcp_clt_loop));

1132 
îr‹
 = 
	`ã°_gësock›t
(
ac˚±_sk
, 
SCTP_GET_PEER_ADDR_INFO
, &
pöfo
,

1133 &
›éí
);

1135 
	`t°_ªsm
(
TPASS
, "getsockopt(SCTP_GET_PEER_ADDR_INFO) - "

1138 
	`˛o£
(
udp_svr_sk
);

1139 
	`˛o£
(
udp_˛t_sk
);

1140 
	`˛o£
(
t˝_svr_sk
);

1141 
	`˛o£
(
t˝_˛t_sk
);

1142 
	`˛o£
(
ac˚±_sk
);

1143 
	`˛o£
(
≥ñoff_sk
);

1147 
	}
}

	@sctp-tools/src/func_tests/test_tcp_style.c

40 
	~<°dio.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<f˙é.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/uio.h
>

48 
	~<sys/pﬁl.h
>

49 
	~<√töë/ö.h
>

50 
	~<î∫o.h
>

51 
	~<√töë/s˘p.h
>

52 
	~<s˘putû.h
>

54 *
	gTCID
 = 
__FILE__
;

55 
	gTST_TOTAL
 = 22;

56 
	gTST_CNT
 = 0;

58 
	#MAX_CLIENTS
 10

	)

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
˛t_sk
[
MAX_CLIENTS
], 
ac˚±_sk
[MAX_CLIENTS];

64 
li°í_sk
, 
˛t2_sk
, 
ac˚±2_sk
;

65 
sockaddr_°‹age_t
 
˛t_lo›
[
MAX_CLIENTS
];

66 
sockaddr_°‹age_t
 
svr_lo›
, 
ac˚±_lo›
, 
˛t2_lo›
;

67 
sockÀn_t
 
addæí
;

68 
îr‹
, 
i
;

69 *
mesßge
 = "hello, world!\n";

70 
msgbuf
[100];

71 
pf_˛ass
;

72 
pﬁlfd
 
pﬁl_fd
;

73 
fd_£t
 
£t
;

74 
msghdr
 
outmesßge
;

75 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

76 
iovec
 
out_iov
;

77 
cmsghdr
 *
cmsg
;

78 
s˘p_¢drcvöfo
 *
söfo
;

79 
msghdr
 
ömesßge
;

80 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

81 *
big_buf„r
;

82 
iovec
 
iov
;

87 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

90 #i‡
TEST_V6


91 
pf_˛ass
 = 
PF_INET6
;

92 
svr_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

93 
svr_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

94 
svr_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

95 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

96 
˛t_lo›
[
i
].
v6
.
sö6_Ámûy
 = 
AF_INET6
;

97 
˛t_lo›
[
i
].
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

98 
˛t_lo›
[
i
].
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + i);

100 
˛t2_lo›
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

101 
˛t2_lo›
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

102 
˛t2_lo›
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + 
i
);

104 
pf_˛ass
 = 
PF_INET
;

105 
svr_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

106 
svr_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

107 
svr_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

108 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

109 
˛t_lo›
[
i
].
v4
.
sö_Ámûy
 = 
AF_INET
;

110 
˛t_lo›
[
i
].
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

111 
˛t_lo›
[
i
].
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + i);

113 
˛t2_lo›
.
v4
.
sö_Ámûy
 = 
AF_INET
;

114 
˛t2_lo›
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

115 
˛t2_lo›
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
 + 
i
);

119 
li°í_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

120 
	`ã°_böd
(
li°í_sk
, &
svr_lo›
.
ß
, (svr_loop));

123 
	`ã°_li°í
(
li°í_sk
, 
MAX_CLIENTS
-1);

126 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

127 
˛t_sk
[
i
] = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

128 
	`ã°_böd
(
˛t_sk
[
i
], &
˛t_lo›
[i].
ß
, (clt_loop[i]));

130 
˛t2_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

131 
	`ã°_böd
(
˛t2_sk
, &
˛t2_lo›
.
ß
, (clt2_loop));

133 
addæí
 = (
ac˚±_lo›
);

135 
îr‹
 = 
	`ac˚±
(
˛t_sk
[0], &
ac˚±_lo›
.
ß
, &
addæí
);

136 i‡((-1 !
îr‹
Ë&& (
EINVAL
 !
î∫o
))

137 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept onÇon-listening socket "

138 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

140 
	`t°_ªsm
(
TPASS
, "accept onÇon-listening socket");

143 
îr‹
 = 
	`c⁄√˘
(
li°í_sk
, (
sockaddr
 *)&
˛t_lo›
[0],

144 (
˛t_lo›
[0]));

145 i‡((-1 !
îr‹
Ë&& (
EISCONN
 !
î∫o
))

146 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connectÅoÇon-listening socket "

147 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

149 
	`t°_ªsm
(
TPASS
, "connectÅoÇon-listening socket");

152 
i
 = 0; i < 
MAX_CLIENTS
; i++)

153 
	`ã°_c⁄√˘
(
˛t_sk
[
i
], &
svr_lo›
.
ß
, (svr_loop));

155 
	`t°_ªsm
(
TPASS
, "connectÅoÜistening socket");

160 
îr‹
 = 
	`c⁄√˘
(
˛t2_sk
, &
svr_lo›
.
ß
, (svr_loop));

161 i‡((-1 !
îr‹
Ë&& (
ECONNREFUSED
 !
î∫o
))

162 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connectáfter max backlog "

163 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

165 
	`t°_ªsm
(
TPASS
, "connectáfter max backlog");

168 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

169 
pﬁl_fd
.
fd
 = 
li°í_sk
;

170 
pﬁl_fd
.
evíts
 = 
POLLIN
;

171 
pﬁl_fd
.
ªvíts
 = 0;

172 
îr‹
 = 
	`pﬁl
(&
pﬁl_fd
, 1, -1);

173 i‡((1 !
îr‹
Ë&& (1 !
pﬁl_fd
.
ªvíts
))

174 
	`t°_brkm
(
TBROK
, 
t°_exô
, "UnexpectedÑeturn value "

176 
îr‹
, 
î∫o
, 
pﬁl_fd
.
ªvíts
);

178 
addæí
 = (
ac˚±_lo›
);

179 
ac˚±_sk
[
i
] = 
	`ã°_ac˚±
(
li°í_sk
, &
ac˚±_lo›
.
ß
,

180 &
addæí
);

183 
	`t°_ªsm
(
TPASS
, "accept fromÜistening socket");

186 
îr‹
 = 
	`c⁄√˘
(
ac˚±_sk
[0], &
˛t_lo›
[0].
ß
, (clt_loop[0]));

187 i‡((-1 !
îr‹
Ë|| (
EISCONN
 !
î∫o
))

188 
	`t°_brkm
(
TBROK
, 
t°_exô
, "connect onánÉstablished socket "

189 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

191 
	`t°_ªsm
(
TPASS
, "connect onánÉstablished socket");

194 
îr‹
 = 
	`ac˚±
(
ac˚±_sk
[0], &
ac˚±_lo›
.
ß
, &
addæí
);

195 i‡((-1 !
îr‹
Ë&& (
EINVAL
 !
î∫o
))

196 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept onánÉstablished socket "

197 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

199 
îr‹
 = 
	`ac˚±
(
˛t_sk
[0], &
ac˚±_lo›
.
ß
, &
addæí
);

200 i‡((-1 !
îr‹
Ë&& (
EINVAL
 !
î∫o
))

201 
	`t°_brkm
(
TBROK
, 
t°_exô
, "accept onánÉstablished socket "

202 "Áûuª:Éº‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

204 
	`t°_ªsm
(
TPASS
, "accept onánÉstablished socket");

209 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

210 
	`ã°_£nd
(
˛t_sk
[
i
], 
mesßge
, 
	`°æí
(message), 0);

211 
	`ã°_ªcv
(
ac˚±_sk
[
i
], 
msgbuf
, 100, 0);

214 
	`t°_ªsm
(
TPASS
, "client sockets ->áccepted sockets");

219 
i
 = 0; i < 
MAX_CLIENTS
; i++) {

220 
	`ã°_£nd
(
ac˚±_sk
[
i
], 
mesßge
, 
	`°æí
(message), 0);

221 
	`ã°_ªcv
(
˛t_sk
[
i
], 
msgbuf
, 100, 0);

224 
	`t°_ªsm
(
TPASS
, "accepted sockets -> client sockets");

227 
îr‹
 = 
	`£nd
(
li°í_sk
, 
mesßge
, 
	`°æí
(mesßge), 
MSG_NOSIGNAL
);

228 i‡((-1 !
îr‹
Ë|| (
EPIPE
 !
î∫o
))

229 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send onáÜistening socket "

230 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

232 
	`t°_ªsm
(
TPASS
, "send onáÜistening socket");

235 
îr‹
 = 
	`ªcv
(
li°í_sk
, 
msgbuf
, 100, 0);

236 i‡((-1 !
îr‹
Ë|| (
ENOTCONN
 !
î∫o
))

237 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv onáÜistening socket "

238 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

240 
	`t°_ªsm
(
TPASS
, "recv onáÜistening socket");

243 
î∫o
 = 0;

244 
	`ã°_£nd
(
ac˚±_sk
[0], 
mesßge
, 
	`°æí
(message), 0);

247 
	`ã°_íabÀ_assoc_ch™ge
(
˛t_sk
[0]);

250 
	`ã°_shutdown
(
˛t_sk
[0], 
SHUT_WR
);

255 
îr‹
 = 
	`ªcv
(
ac˚±_sk
[0], 
msgbuf
, 100, 0);

256 i‡((0 !
îr‹
Ë|| (0 !
î∫o
))

257 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUTDOWNÑeceived socket "

258 "îr‹:%dÉºno:%d", 
îr‹
, 
î∫o
);

260 
	`t°_ªsm
(
TPASS
, "recv oná SHUTDOWNÑeceived socket");

265 
	`ã°_ªcv
(
˛t_sk
[0], 
msgbuf
, 100, 0);

268 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

269 
	`mem£t
(&
ömesßge
, 0, (inmessage));

270 
iov
.
iov_ba£
 = 
big_buf„r
;

271 
iov
.
iov_Àn
 = 
REALLY_BIG
;

272 
ömesßge
.
msg_iov
 = &
iov
;

273 
ömesßge
.
msg_iovÀn
 = 1;

274 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

275 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

278 
îr‹
 = 
	`ã°_ªcvmsg
(
˛t_sk
[0], &
ömesßge
, 
MSG_WAITALL
);

279 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

280 (
s˘p_assoc_ch™ge
),

281 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

283 
	`t°_ªsm
(
TPASS
, "recv SHUTDOWN_COMPÇotification oná SHUT_WR socket");

286 
îr‹
 = 
	`ªcv
(
˛t_sk
[0], 
msgbuf
, 100, 0);

287 i‡((-1 !
îr‹
Ë|| (
ENOTCONN
 !
î∫o
))

288 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUTDOWN sent socket "

289 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

291 
	`t°_ªsm
(
TPASS
, "recv oná SHUTDOWN sent socket");

293 
î∫o
 = 0;

296 
	`ã°_shutdown
(
˛t_sk
[1], 
SHUT_RD
);

298 
îr‹
 = 
	`ªcv
(
˛t_sk
[1], 
msgbuf
, 100, 0);

299 i‡((0 !
îr‹
Ë|| (0 !
î∫o
))

300 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RD socket "

301 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

304 
	`ã°_£nd
(
˛t_sk
[1], 
mesßge
, 
	`°æí
(message), 0);

307 
	`ã°_ªcv
(
ac˚±_sk
[1], 
msgbuf
, 100, 0);

310 
	`ã°_£nd
(
ac˚±_sk
[1], 
mesßge
, 
	`°æí
(message), 0);

313 
îr‹
 = 
	`ªcv
(
˛t_sk
[1], 
msgbuf
, 100, 0);

314 i‡((0 !
îr‹
Ë|| (0 !
î∫o
))

315 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RD socket "

316 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

318 
	`t°_ªsm
(
TPASS
, "recv oná SHUT_RD socket");

321 
	`ã°_shutdown
(
˛t_sk
[2], 
SHUT_RDWR
);

323 
îr‹
 = 
	`ªcv
(
ac˚±_sk
[2], 
msgbuf
, 100, 0);

324 i‡((0 !
îr‹
Ë|| (0 !
î∫o
))

325 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RDWR socket "

326 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

328 
îr‹
 = 
	`ªcv
(
˛t_sk
[2], 
msgbuf
, 100, 0);

329 i‡((0 !
îr‹
Ë|| (0 !
î∫o
))

330 
	`t°_brkm
(
TBROK
, 
t°_exô
, "recv oná SHUT_RDWR socket "

331 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

333 
	`t°_ªsm
(
TPASS
, "recv oná SHUT_RDWR socket");

335 
îr‹
 = 0;

337 
i
 = 0; i < 
MAX_CLIENTS
; i++)

338 
	`˛o£
(
˛t_sk
[
i
]);

339 
i
 = 0; i < 
MAX_CLIENTS
; i++)

340 
	`˛o£
(
ac˚±_sk
[
i
]);

346 
	`ã°_c⁄√˘
(
˛t2_sk
, &
svr_lo›
.
ß
, (svr_loop));

348 
	`ã°_£nd
(
˛t2_sk
, 
mesßge
, 
	`°æí
(message), 0);

350 
	`˛o£
(
˛t2_sk
);

352 
	`FD_ZERO
(&
£t
);

353 
	`FD_SET
(
li°í_sk
, &
£t
);

355 
îr‹
 = 
	`£À˘
(
li°í_sk
 + 1, &
£t
, 
NULL
, NULL, NULL);

356 i‡(1 !
îr‹
)

357 
	`t°_brkm
(
TBROK
, 
t°_exô
, "selectÉrror:%d, "

358 "î∫o: %d", 
îr‹
, 
î∫o
);

363 
ac˚±2_sk
 = 
	`ã°_ac˚±
(
li°í_sk
, &
ac˚±_lo›
.
ß
, &
addæí
);

366 
	`ã°_ªcv
(
ac˚±2_sk
, 
msgbuf
, 100, 0);

371 
îr‹
 = 
	`ªcv
(
ac˚±2_sk
, 
msgbuf
, 100, 0);

372 i‡((0 !
îr‹
Ë|| (0 !
î∫o
))

373 
	`t°_brkm
(
TBROK
, 
t°_exô
, "UnexpectedÉrrorÑeturn on "

374 "ªcv”º‹:%d,Éºno:%d)", 
îr‹
, 
î∫o
);

376 
	`t°_ªsm
(
TPASS
, "accept ofá CLOSEDássociation");

381 
îr‹
 = 
	`£nd
(
ac˚±2_sk
, 
mesßge
, 
	`°æí
(mesßge), 
MSG_NOSIGNAL
);

382 i‡((-1 !
îr‹
Ë|| (
EPIPE
 !
î∫o
))

383 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendÅoá CLOSEDássociation "

384 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

386 
	`t°_ªsm
(
TPASS
, "sendÅoá CLOSEDássociation");

388 
îr‹
 = 0;

389 
	`˛o£
(
ac˚±2_sk
);

394 
˛t2_sk
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_STREAM
, 
IPPROTO_SCTP
);

395 
	`ã°_böd
(
˛t2_sk
, &
˛t2_lo›
.
ß
, (clt2_loop));

398 
	`ã°_£ndto
(
˛t2_sk
, 
mesßge
, 
	`°æí
(mesßge), 0, &
svr_lo›
.
ß
,

399 (
svr_lo›
));

401 
ac˚±2_sk
 = 
	`ã°_ac˚±
(
li°í_sk
, &
ac˚±_lo›
.
ß
, &
addæí
);

403 
	`ã°_ªcv
(
ac˚±2_sk
, 
msgbuf
, 100, 0);

405 
	`t°_ªsm
(
TPASS
, "auto-connect using sendto");

407 
outmesßge
.
msg_«me
 = &
svr_lo›
;

408 
outmesßge
.
msg_«mñí
 = (
svr_lo›
);

409 
outmesßge
.
msg_iov
 = 
NULL
;

410 
outmesßge
.
msg_iovÀn
 = 0;

411 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

412 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

413 
outmesßge
.
msg_Êags
 = 0;

415 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

416 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

417 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

418 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

419 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

420 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

421 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

426 
söfo
->
söfo_Êags
 |
SCTP_EOF
;

427 
îr‹
 = 
	`£ndmsg
(
˛t2_sk
, &
outmesßge
, 0);

428 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

429 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with SCTP_EOF flag "

430 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

432 
	`t°_ªsm
(
TPASS
, "sendmsg with SCTP_EOF flag");

437 
söfo
->
söfo_Êags
 |
SCTP_ABORT
;

438 
îr‹
 = 
	`£ndmsg
(
˛t2_sk
, &
outmesßge
, 0);

439 i‡((-1 !
îr‹
Ë|| (
EINVAL
 !
î∫o
))

440 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg with SCTP_ABORT flag "

441 "îr‹:%d,Éºno:%d", 
îr‹
, 
î∫o
);

443 
	`t°_ªsm
(
TPASS
, "sendmsg with SCTP_ABORT flag");

446 
outmesßge
.
msg_iov
 = &
out_iov
;

447 
outmesßge
.
msg_iovÀn
 = 1;

448 
out_iov
.
iov_ba£
 = 
mesßge
;

449 
out_iov
.
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

450 
söfo
->
söfo_Êags
 = 0;

451 
	`ã°_£ndmsg
(
˛t2_sk
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

453 
	`ã°_ªcv
(
ac˚±2_sk
, 
msgbuf
, 100, 0);

455 
	`t°_ªsm
(
TPASS
, "sendmsg withÇo flags");

457 
	`˛o£
(
˛t2_sk
);

458 
	`˛o£
(
ac˚±2_sk
);

459 
	`˛o£
(
li°í_sk
);

463 
	}
}

	@sctp-tools/src/func_tests/test_timetolive.c

59 
	~<°dio.h
>

60 
	~<uni°d.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~<sys/ty≥s.h
>

64 
	~<sys/sockë.h
>

65 
	~<sys/uio.h
>

66 
	~<√töë/ö.h
>

67 
	~<î∫o.h
>

68 
	~<√töë/s˘p.h
>

69 
	~<s˘putû.h
>

71 *
	gTCID
 = 
__FILE__
;

72 
	gTST_TOTAL
 = 6;

73 
	gTST_CNT
 = 0;

76 
	#SMALL_RCVBUF
 3000

	)

79 
	#SMALL_MAXSEG
 100

	)

82 
	#RWND_SLOP
 100

	)

83 *
	gfûlmsg
 = 
NULL
;

84 *
	gâlmsg
 = "This shouldÅime out!\n";

85 *
	gnŸémsg
 = "This should NOTÅime out!\n";

86 
	gâl‰ag
[
SMALL_MAXSEG
*3] = {0};

87 *
	gmesßge
 = "Hello world\n";

89 
	$maö
(
¨gc
, *
¨gv
[])

91 
sk1
, 
sk2
;

92 
sockaddr_°‹age_t
 
lo›1
;

93 
sockaddr_°‹age_t
 
lo›2
;

94 
iovec
 
iov
;

95 
msghdr
 
ömesßge
;

96 
msghdr
 
outmesßge
;

97 
öcmsg
[
	`CMSG_SPACE
((
s˘p_cmsg_d©a_t
))];

98 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

99 
cmsghdr
 *
cmsg
;

100 
s˘p_¢drcvöfo
 *
söfo
;

101 
iovec
 
out_iov
;

102 
îr‹
;

103 
pf_˛ass
;

104 
uöt32_t
 
µid
;

105 
uöt32_t
 
°ªam
;

106 
s˘p_assoc_t
 
associd1
;

107 
s˘p_assoc_ch™ge
 *
ßc
;

108 
s˘p_evít_subs¸ibe
 
subs¸ibe
;

109 *
big_buf„r
;

110 
off£t
;

111 
s˘p_£nd_Áûed
 *
ssf
;

112 
sockÀn_t
 
Àn
;

113 
‹ig_Àn
;

114 
s˘p_°©us
 
g°©us
;

119 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

122 #i‡
TEST_V6


123 
pf_˛ass
 = 
PF_INET6
;

125 
lo›1
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

126 
lo›1
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

127 
lo›1
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

129 
lo›2
.
v6
.
sö6_Ámûy
 = 
AF_INET6
;

130 
lo›2
.
v6
.
sö6_addr
 = 
ö6addr_lo›back
;

131 
lo›2
.
v6
.
sö6_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

133 
pf_˛ass
 = 
PF_INET
;

135 
lo›1
.
v4
.
sö_Ámûy
 = 
AF_INET
;

136 
lo›1
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

137 
lo›1
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_1
);

139 
lo›2
.
v4
.
sö_Ámûy
 = 
AF_INET
;

140 
lo›2
.
v4
.
sö_addr
.
s_addr
 = 
SCTP_IP_LOOPBACK
;

141 
lo›2
.
v4
.
sö_p‹t
 = 
	`ht⁄s
(
SCTP_TESTPORT_2
);

145 
sk1
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

146 
sk2
 = 
	`ã°_sockë
(
pf_˛ass
, 
SOCK_SEQPACKET
, 
IPPROTO_SCTP
);

148 
Àn
 = ();

149 
îr‹
 = 
	`gësock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
‹ig_Àn
,

150 &
Àn
);

151 i‡(
îr‹
)

152 
	`t°_brkm
(
TBROK
, 
t°_exô
, "can't getÑcvbuf size: %s",

153 
	`°ªº‹
(
î∫o
));

156 
vÆ
 = 
SMALL_MAXSEG
;

157 
	`ã°_£tsock›t
(
sk1
, 
SCTP_MAXSEG
, &
vÆ
, (val));

160 
	`mem£t
(&
subs¸ibe
, 0, (subscribe));

161 
subs¸ibe
.
s˘p_d©a_io_evít
 = 1;

162 
subs¸ibe
.
s˘p_assocüti⁄_evít
 = 1;

163 
subs¸ibe
.
s˘p_£nd_Áûuª_evít
 = 1;

164 
	`ã°_£tsock›t
(
sk1
, 
SCTP_EVENTS
, &
subs¸ibe
, (subscribe));

165 
	`ã°_£tsock›t
(
sk2
, 
SCTP_EVENTS
, &
subs¸ibe
, (subscribe));

168 
	`ã°_böd
(
sk1
, &
lo›1
.
ß
, (loop1));

169 
	`ã°_böd
(
sk2
, &
lo›2
.
ß
, (loop2));

178 
Àn
 = 
SMALL_RCVBUF
;

179 
îr‹
 = 
	`£tsock›t
(
sk2
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
Àn
,

180 (
Àn
));

181 i‡(
îr‹
)

182 
	`t°_brkm
(
TBROK
, 
t°_exô
, "setsockopt(SO_RCVBUF): %s",

183 
	`°ªº‹
(
î∫o
));

186 
	`ã°_li°í
(
sk2
, 1);

189 
outmesßge
.
msg_«me
 = &
lo›2
;

190 
outmesßge
.
msg_«mñí
 = (
lo›2
);

191 
outmesßge
.
msg_iov
 = &
out_iov
;

192 
outmesßge
.
msg_iovÀn
 = 1;

193 
outmesßge
.
msg_c⁄åﬁ
 = 
outcmsg
;

194 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

195 
outmesßge
.
msg_Êags
 = 0;

196 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

197 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

198 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

199 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

200 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

201 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

202 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

203 
µid
 = 
	`ønd
();

204 
°ªam
 = 1;

205 
söfo
->
söfo_µid
 = 
µid
;

206 
söfo
->
söfo_°ªam
 = 
°ªam
;

207 
outmesßge
.
msg_iov
->
iov_ba£
 = 
mesßge
;

208 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
mesßge
) + 1;

209 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 0, 
	`°æí
(
mesßge
)+1);

212 
big_buf„r
 = 
	`ã°_mÆloc
(
REALLY_BIG
);

213 
	`mem£t
(&
ömesßge
, 0, (inmessage));

214 
iov
.
iov_ba£
 = 
big_buf„r
;

215 
iov
.
iov_Àn
 = 
REALLY_BIG
;

216 
ömesßge
.
msg_iov
 = &
iov
;

217 
ömesßge
.
msg_iovÀn
 = 1;

218 
ömesßge
.
msg_c⁄åﬁ
 = 
öcmsg
;

221 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

222 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

223 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

224 (
s˘p_assoc_ch™ge
),

225 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

227 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

228 
associd2
 = 
ßc
->
ßc_assoc_id
;

232 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

233 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

234 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

235 (
s˘p_assoc_ch™ge
),

236 
SCTP_ASSOC_CHANGE
, 
SCTP_COMM_UP
);

237 
ßc
 = (
s˘p_assoc_ch™ge
 *)
iov
.
iov_ba£
;

238 
associd1
 = 
ßc
->
ßc_assoc_id
;

241 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

242 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

243 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
mesßge
) + 1,

244 
MSG_EOR
, 
°ªam
, 
µid
);

247 
Àn
 = (
s˘p_°©us
);

248 
	`mem£t
(&
g°©us
,0,(
s˘p_°©us
));

249 
g°©us
.
s°©_assoc_id
 = 
associd1
;

250 
îr‹
 = 
	`gësock›t
(
sk1
, 
IPPROTO_SCTP
, 
SCTP_STATUS
, &
g°©us
, &
Àn
);

252 i‡(
îr‹
)

253 
	`t°_brkm
(
TBROK
, 
t°_exô
, "can't getÑwnd size: %s",

254 
	`°ªº‹
(
î∫o
));

255 
	`t°_ªsm
(
TINFO
, "Creating fillmsg of size %d",

256 
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

257 
fûlmsg
 = 
	`mÆloc
(
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

260 
outmesßge
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

261 
outmesßge
.
msg_Êags
 = 0;

262 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmesßge
);

263 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

264 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

265 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

266 
outmesßge
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

267 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

268 
	`mem£t
(
söfo
, 0x00, (
s˘p_¢drcvöfo
));

269 
µid
++;

270 
°ªam
++;

271 
söfo
->
söfo_µid
 = 
µid
;

272 
söfo
->
söfo_°ªam
 = 
°ªam
;

273 
	`mem£t
(
fûlmsg
, 'X', 
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

274 
fûlmsg
[
g°©us
.
s°©_rwnd
+
RWND_SLOP
-1] = '\0';

275 
outmesßge
.
msg_iov
->
iov_ba£
 = 
fûlmsg
;

276 
outmesßge
.
msg_iov
->
iov_Àn
 = 
g°©us
.
s°©_rwnd
+
RWND_SLOP
;

277 
outmesßge
.
msg_«me
 = 
NULL
;

278 
outmesßge
.
msg_«mñí
 = 0;

279 
söfo
->
söfo_assoc_id
 = 
associd1
;

280 
söfo
->
söfo_timëﬁive
 = 0;

281 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 
MSG_NOSIGNAL
,

282 
g°©us
.
s°©_rwnd
+
RWND_SLOP
);

285 
söfo
->
söfo_µid
 = 
µid
;

286 
söfo
->
söfo_°ªam
 = 
°ªam
;

287 
outmesßge
.
msg_iov
->
iov_ba£
 = 
âlmsg
;

288 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
âlmsg
) + 1;

289 
outmesßge
.
msg_«me
 = 
NULL
;

290 
outmesßge
.
msg_«mñí
 = 0;

291 
söfo
->
söfo_assoc_id
 = 
associd1
;

292 
söfo
->
söfo_timëﬁive
 = 2000;

293 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 
MSG_NOSIGNAL
, 
	`°æí
(
âlmsg
) + 1);

295 
	`t°_ªsm
(
TPASS
, "Sendá message withÅimeout");

298 
söfo
->
söfo_µid
 = 
µid
;

299 
söfo
->
söfo_°ªam
 = 
°ªam
;

300 
outmesßge
.
msg_iov
->
iov_ba£
 = 
nŸémsg
;

301 
outmesßge
.
msg_iov
->
iov_Àn
 = 
	`°æí
(
nŸémsg
) + 1;

302 
outmesßge
.
msg_«me
 = 
NULL
;

303 
outmesßge
.
msg_«mñí
 = 0;

304 
söfo
->
söfo_assoc_id
 = 
associd1
;

305 
söfo
->
söfo_timëﬁive
 = 0;

306 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 
MSG_NOSIGNAL
, 
	`°æí
(
nŸémsg
)+1);

308 
	`t°_ªsm
(
TPASS
, "Sendá message withÇoÅimeout");

311 
söfo
->
söfo_µid
 = 
µid
;

312 
söfo
->
söfo_°ªam
 = 
°ªam
;

313 
	`mem£t
(
âl‰ag
, '0', (ttlfrag));

314 
âl‰ag
[(ttlfrag)-1] = '\0';

315 
outmesßge
.
msg_iov
->
iov_ba£
 = 
âl‰ag
;

316 
outmesßge
.
msg_iov
->
iov_Àn
 = (
âl‰ag
);

317 
outmesßge
.
msg_«me
 = 
NULL
;

318 
outmesßge
.
msg_«mñí
 = 0;

319 
söfo
->
söfo_assoc_id
 = 
associd1
;

320 
söfo
->
söfo_timëﬁive
 = 2000;

321 
	`ã°_£ndmsg
(
sk1
, &
outmesßge
, 
MSG_NOSIGNAL
, (
âl‰ag
));

323 
	`t°_ªsm
(
TPASS
, "Sendá fragmented message withÅimeout");

326 
	`t°_ªsm
(
TINFO
, " ** SLEEPING for 3 seconds **");

327 
	`¶ìp
(3);

331 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

332 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

333 } !(
ömesßge
.
msg_Êags
 & 
MSG_EOR
));

336 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

337 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

338 
	`ã°_check_msg_d©a
(&
ömesßge
, 
îr‹
, 
	`°æí
(
nŸémsg
) + 1,

339 
MSG_EOR
, 
°ªam
, 
µid
);

340 i‡(0 !
	`°∫cmp
(
iov
.
iov_ba£
, 
nŸémsg
, 
	`°æí
(nottlmsg)+1))

341 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Received Wrong Message !!!");

343 
	`t°_ªsm
(
TPASS
, "Receive message withÇoÅimeout");

348 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

349 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

350 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

351 (
s˘p_£nd_Áûed
) +

352 
	`°æí
(
âlmsg
) + 1,

353 
SCTP_SEND_FAILED
, 0);

354 
ssf
 = (
s˘p_£nd_Áûed
 *)
iov
.
iov_ba£
;

355 i‡(0 !
	`°∫cmp
(
âlmsg
, (*)
ssf
->
ssf_d©a
, 
	`°æí
(ttlmsg) + 1))

356 
	`t°_brkm
(
TBROK
, 
t°_exô
, "SEND_FAILED data mismatch");

358 
	`t°_ªsm
(
TPASS
, "Receive SEND_FAILED for message withÅimeout");

363 
off£t
 = 0;

365 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

366 
îr‹
 = 
	`ã°_ªcvmsg
(
sk1
, &
ömesßge
, 
MSG_WAITALL
);

367 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

368 (
s˘p_£nd_Áûed
) +

369 
SMALL_MAXSEG
,

370 
SCTP_SEND_FAILED
, 0);

371 
ssf
 = (
s˘p_£nd_Áûed
 *)
iov
.
iov_ba£
;

372 i‡(0 !
	`°∫cmp
(&
âl‰ag
[
off£t
], (*)
ssf
->
ssf_d©a
,

373 
SMALL_MAXSEG
))

374 
	`t°_brkm
(
TBROK
, 
t°_exô
, "SEND_FAILED data mismatch");

375 
off£t
 +
SMALL_MAXSEG
;

376 } !(
ssf
->
ssf_öfo
.
söfo_Êags
 & 0x01));

378 
	`t°_ªsm
(
TPASS
, "Receive SEND_FAILED for fragmented message with "

382 
	`˛o£
(
sk1
);

385 
ömesßge
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

386 
îr‹
 = 
	`ã°_ªcvmsg
(
sk2
, &
ömesßge
, 
MSG_WAITALL
);

387 
	`ã°_check_msg_nŸifiˇti⁄
(&
ömesßge
, 
îr‹
,

388 (
s˘p_assoc_ch™ge
),

389 
SCTP_ASSOC_CHANGE
, 
SCTP_SHUTDOWN_COMP
);

391 
	`˛o£
(
sk2
);

395 
	}
}

	@sctp-tools/src/include/netinet/sctp.h

33 #i‚de‡
__löux_s˘p_h__


34 
	#__löux_s˘p_h__


	)

36 
	~<°döt.h
>

37 
	~<löux/ty≥s.h
>

38 
	~<sys/sockë.h
>

40 
__BEGIN_DECLS


42 
__s32
 
	ts˘p_assoc_t
;

45 #i‚de‡
SOL_SCTP


46 
	#SOL_SCTP
 132

	)

49 #i‚de‡
IPPROTO_SCTP


50 
	#IPPROTO_SCTP
 132

	)

54 
	#HAVE_SCTP


	)

55 
	#HAVE_KERNEL_SCTP


	)

56 
	#HAVE_SCTP_MULTIBUF


	)

57 
	#HAVE_SCTP_NOCONNECT


	)

58 
	#HAVE_SCTP_PRSCTP


	)

59 
	#HAVE_SCTP_ADDIP


	)

60 
	#HAVE_SCTP_CANSET_PRIMARY


	)

65 
	#SCTP_RTOINFO
 0

	)

66 
	#SCTP_ASSOCINFO
 1

	)

67 
	#SCTP_INITMSG
 2

	)

68 
	#SCTP_NODELAY
 3

	)

69 
	#SCTP_AUTOCLOSE
 4

	)

70 
	#SCTP_SET_PEER_PRIMARY_ADDR
 5

	)

71 
	#SCTP_PRIMARY_ADDR
 6

	)

72 
	#SCTP_ADAPTATION_LAYER
 7

	)

73 
	#SCTP_DISABLE_FRAGMENTS
 8

	)

74 
	#SCTP_PEER_ADDR_PARAMS
 9

	)

75 
	#SCTP_DEFAULT_SEND_PARAM
 10

	)

76 
	#SCTP_EVENTS
 11

	)

77 
	#SCTP_I_WANT_MAPPED_V4_ADDR
 12

	)

78 
	#SCTP_MAXSEG
 13

	)

79 
	#SCTP_STATUS
 14

	)

80 
	#SCTP_GET_PEER_ADDR_INFO
 15

	)

81 
	#SCTP_DELAYED_ACK_TIME
 16

	)

82 
	#SCTP_DELAYED_ACK
 
SCTP_DELAYED_ACK_TIME


	)

83 
	#SCTP_DELAYED_SACK
 
SCTP_DELAYED_ACK_TIME


	)

84 
	#SCTP_CONTEXT
 17

	)

85 
	#SCTP_FRAGMENT_INTERLEAVE
 18

	)

86 
	#SCTP_PARTIAL_DELIVERY_POINT
 19

	)

87 
	#SCTP_MAX_BURST
 20

	)

88 
	#SCTP_AUTH_CHUNK
 21

	)

89 
	#SCTP_HMAC_IDENT
 22

	)

90 
	#SCTP_AUTH_KEY
 23

	)

91 
	#SCTP_AUTH_ACTIVE_KEY
 24

	)

92 
	#SCTP_AUTH_DELETE_KEY
 25

	)

93 
	#SCTP_PEER_AUTH_CHUNKS
 26

	)

94 
	#SCTP_LOCAL_AUTH_CHUNKS
 27

	)

95 
	#SCTP_GET_ASSOC_NUMBER
 28

	)

100 
	#SCTP_SOCKOPT_BINDX_ADD
 100

	)

101 
	#SCTP_SOCKOPT_BINDX_REM
 101

	)

102 
	#SCTP_SOCKOPT_PEELOFF
 102

	)

104 
	#SCTP_SOCKOPT_CONNECTX_OLD
 107

	)

105 
	#SCTP_GET_PEER_ADDRS
 108

	)

106 
	#SCTP_GET_LOCAL_ADDRS
 109

	)

107 
	#SCTP_SOCKOPT_CONNECTX
 110

	)

108 
	#SCTP_SOCKOPT_CONNECTX3
 111

	)

111 
	#SCTP_GET_ASSOC_STATS
 112

	)

126 
	ss˘p_öômsg
 {

127 
__u16
 
	msöô_num_o°ªams
;

128 
__u16
 
	msöô_max_ö°ªams
;

129 
__u16
 
	msöô_max_©ãm±s
;

130 
__u16
 
	msöô_max_öô_timeo
;

145 
	ss˘p_¢drcvöfo
 {

146 
__u16
 
	msöfo_°ªam
;

147 
__u16
 
	msöfo_s¢
;

148 
__u16
 
	msöfo_Êags
;

149 
__u32
 
	msöfo_µid
;

150 
__u32
 
	msöfo_c⁄ãxt
;

151 
__u32
 
	msöfo_timëﬁive
;

152 
__u32
 
	msöfo_t¢
;

153 
__u32
 
	msöfo_cumt¢
;

154 
s˘p_assoc_t
 
	msöfo_assoc_id
;

164 
	es˘p_söfo_Êags
 {

165 
	mSCTP_UNORDERED
 = 1,

166 
	mSCTP_ADDR_OVER
 = 2,

167 
	mSCTP_ABORT
=4,

168 
	mSCTP_SACK_IMMEDIATELY
 = 8,

169 
	mSCTP_EOF
=
MSG_FIN
,

174 
__u8
 
	møw
;

175 
s˘p_öômsg
 
	möô
;

176 
s˘p_¢drcvöfo
 
	m¢drcv
;

177 } 
	ts˘p_cmsg_d©a_t
;

180 
	es˘p_cmsg_ty≥
 {

181 
	mSCTP_INIT
,

182 
	#SCTP_INIT
 
SCTP_INIT


	)

183 
	mSCTP_SNDRCV
,

184 
	#SCTP_SNDRCV
 
SCTP_SNDRCV


	)

185 } 
	ts˘p_cmsg_t
;

197 
	ss˘p_assoc_ch™ge
 {

198 
__u16
 
	mßc_ty≥
;

199 
__u16
 
	mßc_Êags
;

200 
__u32
 
	mßc_Àngth
;

201 
__u16
 
	mßc_°©e
;

202 
__u16
 
	mßc_îr‹
;

203 
__u16
 
	mßc_outbound_°ªams
;

204 
__u16
 
	mßc_öbound_°ªams
;

205 
s˘p_assoc_t
 
	mßc_assoc_id
;

206 
__u8
 
	mßc_öfo
[0];

218 
	es˘p_ßc_°©e
 {

219 
	mSCTP_COMM_UP
,

220 
	mSCTP_COMM_LOST
,

221 
	mSCTP_RESTART
,

222 
	mSCTP_SHUTDOWN_COMP
,

223 
	mSCTP_CANT_STR_ASSOC
,

233 
	ss˘p_∑ddr_ch™ge
 {

234 
__u16
 
	m•c_ty≥
;

235 
__u16
 
	m•c_Êags
;

236 
__u32
 
	m•c_Àngth
;

237 
sockaddr_°‹age
 
	m•c_Øddr
;

238 
	m•c_°©e
;

239 
	m•c_îr‹
;

240 
s˘p_assoc_t
 
	m•c_assoc_id
;

241 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

249 
	es˘p_•c_°©e
 {

250 
	mSCTP_ADDR_AVAILABLE
,

251 
	mSCTP_ADDR_UNREACHABLE
,

252 
	mSCTP_ADDR_REMOVED
,

253 
	mSCTP_ADDR_ADDED
,

254 
	mSCTP_ADDR_MADE_PRIM
,

255 
	mSCTP_ADDR_CONFIRMED
,

269 
	ss˘p_ªmŸe_îr‹
 {

270 
__u16
 
	m§e_ty≥
;

271 
__u16
 
	m§e_Êags
;

272 
__u32
 
	m§e_Àngth
;

273 
__u16
 
	m§e_îr‹
;

274 
s˘p_assoc_t
 
	m§e_assoc_id
;

275 
__u8
 
	m§e_d©a
[0];

285 
	ss˘p_£nd_Áûed
 {

286 
__u16
 
	mssf_ty≥
;

287 
__u16
 
	mssf_Êags
;

288 
__u32
 
	mssf_Àngth
;

289 
__u32
 
	mssf_îr‹
;

290 
s˘p_¢drcvöfo
 
	mssf_öfo
;

291 
s˘p_assoc_t
 
	mssf_assoc_id
;

292 
__u8
 
	mssf_d©a
[0];

307 
	es˘p_ssf_Êags
 {

308 
	mSCTP_DATA_UNSENT
,

309 
	mSCTP_DATA_SENT
,

318 
	ss˘p_shutdown_evít
 {

319 
__u16
 
	ms£_ty≥
;

320 
__u16
 
	ms£_Êags
;

321 
__u32
 
	ms£_Àngth
;

322 
s˘p_assoc_t
 
	ms£_assoc_id
;

332 
	ss˘p_ad≠èti⁄_evít
 {

333 
__u16
 
	mßi_ty≥
;

334 
__u16
 
	mßi_Êags
;

335 
__u32
 
	mßi_Àngth
;

336 
__u32
 
	mßi_ad≠èti⁄_öd
;

337 
s˘p_assoc_t
 
	mßi_assoc_id
;

347 
	ss˘p_pd≠i_evít
 {

348 
__u16
 
	mpd≠i_ty≥
;

349 
__u16
 
	mpd≠i_Êags
;

350 
__u32
 
	mpd≠i_Àngth
;

351 
__u32
 
	mpd≠i_ödiˇti⁄
;

352 
s˘p_assoc_t
 
	mpd≠i_assoc_id
;

355 íum { 
	mSCTP_PARTIAL_DELIVERY_ABORTED
=0, };

364 
	ss˘p_authkey_evít
 {

365 
__u16
 
	mauth_ty≥
;

366 
__u16
 
	mauth_Êags
;

367 
__u32
 
	mauth_Àngth
;

368 
__u16
 
	mauth_keynumbî
;

369 
__u16
 
	mauth_Ætkeynumbî
;

370 
__u32
 
	mauth_ödiˇti⁄
;

371 
s˘p_assoc_t
 
	mauth_assoc_id
;

374 íum { 
	mSCTP_AUTH_NEWKEY
 = 0, };

376 
	ss˘p_£ndî_dry_evít
 {

377 
__u16
 
	m£ndî_dry_ty≥
;

378 
__u16
 
	m£ndî_dry_Êags
;

379 
__u32
 
	m£ndî_dry_Àngth
;

380 
s˘p_assoc_t
 
	m£ndî_dry_assoc_id
;

387 
	ss˘p_evít_subs¸ibe
 {

388 
__u8
 
	ms˘p_d©a_io_evít
;

389 
__u8
 
	ms˘p_assocüti⁄_evít
;

390 
__u8
 
	ms˘p_addªss_evít
;

391 
__u8
 
	ms˘p_£nd_Áûuª_evít
;

392 
__u8
 
	ms˘p_≥î_îr‹_evít
;

393 
__u8
 
	ms˘p_shutdown_evít
;

394 
__u8
 
	ms˘p_∑πül_dñivîy_evít
;

395 
__u8
 
	ms˘p_ad≠èti⁄_œyî_evít
;

396 
__u8
 
	ms˘p_authítiˇti⁄_evít
;

397 
__u8
 
	ms˘p_£ndî_dry_evít
;

407 
	us˘p_nŸifiˇti⁄
 {

409 
__u16
 
	m¢_ty≥
;

410 
__u16
 
	m¢_Êags
;

411 
__u32
 
	m¢_Àngth
;

412 } 
	m¢_hódî
;

413 
s˘p_assoc_ch™ge
 
	m¢_assoc_ch™ge
;

414 
s˘p_∑ddr_ch™ge
 
	m¢_∑ddr_ch™ge
;

415 
s˘p_ªmŸe_îr‹
 
	m¢_ªmŸe_îr‹
;

416 
s˘p_£nd_Áûed
 
	m¢_£nd_Áûed
;

417 
s˘p_shutdown_evít
 
	m¢_shutdown_evít
;

418 
s˘p_ad≠èti⁄_evít
 
	m¢_ad≠èti⁄_evít
;

419 
s˘p_pd≠i_evít
 
	m¢_pd≠i_evít
;

420 
s˘p_authkey_evít
 
	m¢_authkey_evít
;

421 
s˘p_£ndî_dry_evít
 
	m¢_£ndî_dry_evít
;

429 
	es˘p_¢_ty≥
 {

430 
	mSCTP_SN_TYPE_BASE
 = (1<<15),

431 
	mSCTP_ASSOC_CHANGE
,

432 
	#SCTP_ASSOC_CHANGE
 
SCTP_ASSOC_CHANGE


	)

433 
	mSCTP_PEER_ADDR_CHANGE
,

434 
	#SCTP_PEER_ADDR_CHANGE
 
SCTP_PEER_ADDR_CHANGE


	)

435 
	mSCTP_SEND_FAILED
,

436 
	#SCTP_SEND_FAILED
 
SCTP_SEND_FAILED


	)

437 
	mSCTP_REMOTE_ERROR
,

438 
	#SCTP_REMOTE_ERROR
 
SCTP_REMOTE_ERROR


	)

439 
	mSCTP_SHUTDOWN_EVENT
,

440 
	#SCTP_SHUTDOWN_EVENT
 
SCTP_SHUTDOWN_EVENT


	)

441 
	mSCTP_PARTIAL_DELIVERY_EVENT
,

442 
	#SCTP_PARTIAL_DELIVERY_EVENT
 
SCTP_PARTIAL_DELIVERY_EVENT


	)

443 
	mSCTP_ADAPTATION_INDICATION
,

444 
	#SCTP_ADAPTATION_INDICATION
 
SCTP_ADAPTATION_INDICATION


	)

445 
	mSCTP_AUTHENTICATION_INDICATION
,

446 
	#SCTP_AUTHENTICATION_INDICATION
 
SCTP_AUTHENTICATION_INDICATION


	)

447 
	mSCTP_SENDER_DRY_EVENT
,

448 
	#SCTP_SENDER_DRY_EVENT
 
SCTP_SENDER_DRY_EVENT


	)

458 
	es˘p_¢_îr‹
 {

459 
	mSCTP_FAILED_THRESHOLD
,

460 
	mSCTP_RECEIVED_SACK
,

461 
	mSCTP_HEARTBEAT_SUCCESS
,

462 
	mSCTP_RESPONSE_TO_USER_REQ
,

463 
	mSCTP_INTERNAL_ERROR
,

464 
	mSCTP_SHUTDOWN_GUARD_EXPIRES
,

465 
	mSCTP_PEER_FAULTY
,

466 } 
	ts˘p_¢_îr‹_t
;

475 
	ss˘p_πoöfo
 {

476 
s˘p_assoc_t
 
	m§to_assoc_id
;

477 
__u32
 
	m§to_öôül
;

478 
__u32
 
	m§to_max
;

479 
__u32
 
	m§to_mö
;

488 
	ss˘p_asso˝¨ams
 {

489 
s˘p_assoc_t
 
	mßsoc_assoc_id
;

490 
__u16
 
	mßsoc_asocmaxrxt
;

491 
__u16
 
	mßsoc_numbî_≥î_de°ö©i⁄s
;

492 
__u32
 
	mßsoc_≥î_rwnd
;

493 
__u32
 
	mßsoc_loˇl_rwnd
;

494 
__u32
 
	mßsoc_cookõ_li„
;

505 
	ss˘p_£çìΩrim
 {

506 
s˘p_assoc_t
 
	ms•p_assoc_id
;

507 
sockaddr_°‹age
 
	ms•p_addr
;

508 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

518 
	ss˘p_£çrim
 {

519 
s˘p_assoc_t
 
	ms•_assoc_id
;

520 
sockaddr_°‹age
 
	ms•_addr
;

521 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

524 
	#s˘p_¥im
 
s˘p_£çrim


	)

532 
	ss˘p_£èd≠èti⁄
 {

533 
__u32
 
	mssb_ad≠èti⁄_öd
;

546 
	es˘p_•p_Êags
 {

547 
	mSPP_HB_ENABLE
 = 1<<0,

548 
	mSPP_HB_DISABLE
 = 1<<1,

549 
	mSPP_HB
 = 
SPP_HB_ENABLE
 | 
SPP_HB_DISABLE
,

550 
	mSPP_HB_DEMAND
 = 1<<2,

551 
	mSPP_PMTUD_ENABLE
 = 1<<3,

552 
	mSPP_PMTUD_DISABLE
 = 1<<4,

553 
	mSPP_PMTUD
 = 
SPP_PMTUD_ENABLE
 | 
SPP_PMTUD_DISABLE
,

554 
	mSPP_SACKDELAY_ENABLE
 = 1<<5,

555 
	mSPP_SACKDELAY_DISABLE
 = 1<<6,

556 
	mSPP_SACKDELAY
 = 
SPP_SACKDELAY_ENABLE
 | 
SPP_SACKDELAY_DISABLE
,

557 
	mSPP_HB_TIME_IS_ZERO
 = 1<<7,

560 
	ss˘p_∑ddΩ¨ams
 {

561 
s˘p_assoc_t
 
	m•p_assoc_id
;

562 
sockaddr_°‹age
 
	m•p_addªss
;

563 
__u32
 
	m•p_hböãrvÆ
;

564 
__u16
 
	m•p_∑thmaxrxt
;

565 
__u32
 
	m•p_∑thmtu
;

566 
__u32
 
	m•p_ßckdñay
;

567 
__u32
 
	m•p_Êags
;

568 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

577 
	ss˘p_authchunk
 {

578 
__u8
 
	mßuth_chunk
;

589 
	mSCTP_AUTH_HMAC_ID_SHA1
 = 1,

590 
	mSCTP_AUTH_HMAC_ID_SHA256
 = 3,

593 
	ss˘p_hmaˇlgo
 {

594 
__u32
 
	mshmac_numbî_of_idíts
;

595 
__u16
 
	mshmac_idíts
[];

604 
	ss˘p_authkey
 {

605 
s˘p_assoc_t
 
	msˇ_assoc_id
;

606 
__u16
 
	msˇ_keynumbî
;

607 
__u16
 
	msˇ_keyÀngth
;

608 
__u8
 
	msˇ_key
[];

618 
	ss˘p_authkeyid
 {

619 
s˘p_assoc_t
 
	msˇ˘_assoc_id
;

620 
__u16
 
	msˇ˘_keynumbî
;

638 
	ss˘p_ßck_öfo
 {

639 
s˘p_assoc_t
 
	mßck_assoc_id
;

640 
uöt32_t
 
	mßck_dñay
;

641 
uöt32_t
 
	mßck_‰eq
;

644 
	ss˘p_assoc_vÆue
 {

645 
s˘p_assoc_t
 
	massoc_id
;

646 
uöt32_t
 
	massoc_vÆue
;

658 
	ss˘p_∑ddröfo
 {

659 
s˘p_assoc_t
 
	m•öfo_assoc_id
;

660 
sockaddr_°‹age
 
	m•öfo_addªss
;

661 
__s32
 
	m•öfo_°©e
;

662 
__u32
 
	m•öfo_cwnd
;

663 
__u32
 
	m•öfo_§â
;

664 
__u32
 
	m•öfo_πo
;

665 
__u32
 
	m•öfo_mtu
;

666 } 
__©åibuã__
((
∑cked
, 
Æig√d
(4)));

677 
	es˘p_•öfo_°©e
 {

678 
	mSCTP_INACTIVE
,

679 
	mSCTP_PF
,

680 
	mSCTP_ACTIVE
,

681 
	mSCTP_UNCONFIRMED
,

682 
	mSCTP_UNKNOWN
 = 0xffff

694 
	ss˘p_°©us
 {

695 
s˘p_assoc_t
 
	ms°©_assoc_id
;

696 
__s32
 
	ms°©_°©e
;

697 
__u32
 
	ms°©_rwnd
;

698 
__u16
 
	ms°©_u«ckd©a
;

699 
__u16
 
	ms°©_≥ndd©a
;

700 
__u16
 
	ms°©_ö°rms
;

701 
__u16
 
	ms°©_out°rms
;

702 
__u32
 
	ms°©_‰agmíèti⁄_poöt
;

703 
s˘p_∑ddröfo
 
	ms°©_¥im¨y
;

713 
	ss˘p_authchunks
 {

714 
s˘p_assoc_t
 
	mgauth_assoc_id
;

715 
__u32
 
	mgauth_numbî_of_chunks
;

716 
uöt8_t
 
	mgauth_chunks
[];

721 
	#guth_numbî_of_chunks
 
gauth_numbî_of_chunks


	)

724 
	es˘p_s°©_°©e
 {

725 
	mSCTP_EMPTY
 = 0,

726 
	mSCTP_CLOSED
 = 1,

727 
	mSCTP_COOKIE_WAIT
 = 2,

728 
	mSCTP_COOKIE_ECHOED
 = 3,

729 
	mSCTP_ESTABLISHED
 = 4,

730 
	mSCTP_SHUTDOWN_PENDING
 = 5,

731 
	mSCTP_SHUTDOWN_SENT
 = 6,

732 
	mSCTP_SHUTDOWN_RECEIVED
 = 7,

733 
	mSCTP_SHUTDOWN_ACK_SENT
 = 8,

742 
	ss˘p_gëaddrs_ﬁd
 {

743 
s˘p_assoc_t
 
	massoc_id
;

744 
	maddr_num
;

745 
sockaddr
 *
	maddrs
;

747 
	ss˘p_gëaddrs
 {

748 
s˘p_assoc_t
 
	massoc_id
;

749 
__u32
 
	maddr_num
;

750 
__u8
 
	maddrs
[0];

758 
	ss˘p_assoc_°©s
 {

759 
s˘p_assoc_t
 
	mßs_assoc_id
;

761 
sockaddr_°‹age
 
	mßs_obs_πo_ùaddr
;

762 
__u64
 
	mßs_maxπo
;

763 
__u64
 
	mßs_ißcks
;

764 
__u64
 
	mßs_oßcks
;

765 
__u64
 
	mßs_›ackës
;

766 
__u64
 
	mßs_ùackës
;

767 
__u64
 
	mßs_πxchunks
;

768 
__u64
 
	mßs_outof£qt¢s
;

769 
__u64
 
	mßs_idupchunks
;

770 
__u64
 
	mßs_g≠˙t
;

771 
__u64
 
	mßs_ouodchunks
;

772 
__u64
 
	mßs_iuodchunks
;

773 
__u64
 
	mßs_oodchunks
;

774 
__u64
 
	mßs_iodchunks
;

775 
__u64
 
	mßs_o˘æchunks
;

776 
__u64
 
	mßs_i˘æchunks
;

781 
	es˘p_msg_Êags
 {

782 
	mMSG_NOTIFICATION
 = 0x8000,

783 
	#MSG_NOTIFICATION
 
MSG_NOTIFICATION


	)

792 
	#SCTP_BINDX_ADD_ADDR
 0x01

	)

793 
	#SCTP_BINDX_REM_ADDR
 0x02

	)

799 
s˘p_assoc_t
 
	massocid
;

800 
	msd
;

801 } 
	ts˘p_≥ñoff_¨g_t
;

804 
s˘p_bödx
(
sd
, 
sockaddr
 *
addrs
, 
addr˙t
, 
Êags
);

806 
s˘p_c⁄√˘x
(
sd
, 
sockaddr
 *
addrs
, 
addr˙t
,

807 
s˘p_assoc_t
 *
id
);

809 
s˘p_≥ñoff
(
sd
, 
s˘p_assoc_t
 
assoc_id
);

814 
s˘p_›t_öfo
(
sd
, 
s˘p_assoc_t
 
id
, 
›t
, *
¨g
, 
sockÀn_t
 *
size
);

820 
s˘p_gë∑ddrs
(
sd
, 
s˘p_assoc_t
 
id
, 
sockaddr
 **
addrs
);

825 
s˘p_‰ì∑ddrs
(
sockaddr
 *
addrs
);

831 
s˘p_gëœddrs
(
sd
, 
s˘p_assoc_t
 
id
, 
sockaddr
 **
addrs
);

836 
s˘p_‰ìœddrs
(
sockaddr
 *
addrs
);

843 
s˘p_£ndmsg
(
s
, c⁄° *
msg
, 
size_t
 
Àn
, 
sockaddr
 *
to
,

844 
sockÀn_t
 
tﬁí
, 
uöt32_t
 
µid
, uöt32_à
Êags
,

845 
uöt16_t
 
°ªam_no
, 
uöt32_t
 
timëﬁive
, uöt32_à
c⁄ãxt
);

850 
s˘p_£nd
(
s
, c⁄° *
msg
, 
size_t
 
Àn
,

851 c⁄° 
s˘p_¢drcvöfo
 *
söfo
, 
Êags
);

858 
s˘p_ªcvmsg
(
s
, *
msg
, 
size_t
 
Àn
, 
sockaddr
 *
‰om
,

859 
sockÀn_t
 *
‰omÀn
, 
s˘p_¢drcvöfo
 *
söfo
,

860 *
msg_Êags
);

863 
s˘p_gëaddæí
(
ß_Ámûy_t
 
Ámûy
);

865 
	g__END_DECLS


	@sctp-tools/src/lib/addrs.c

25 
	~<mÆloc.h
>

26 
	~<√töë/ö.h
>

27 
	~<√töë/s˘p.h
>

28 
	~<°rög.h
>

29 
	~<î∫o.h
>

37 
	$s˘p_gëaddrs
(
sd
, 
s˘p_assoc_t
 
id
, 
›äame_√w
,

38 
sockaddr
 **
addrs
)

40 
˙t
, 
îr
;

41 
sockÀn_t
 
Àn
;

42 
size_t
 
bufsize
 = 4096;

44 
s˘p_gëaddrs
 *
gëaddrs
 = (s˘p_gëaddrs*)
	`mÆloc
(
bufsize
);

45 if(!
gëaddrs
)

49 *
√w_buf
;

51 
Àn
 = 
bufsize
;

52 
gëaddrs
->
assoc_id
 = 
id
;

53 
îr
 = 
	`gësock›t
(
sd
, 
SOL_SCTP
, 
›äame_√w
, 
gëaddrs
, &
Àn
);

54 i‡(
îr
 == 0) {

58 i‡(
î∫o
 !
ENOMEM
 ) {

60 
	`‰ì
(
gëaddrs
);

64 i‡(
bufsize
 > 128*1024) {

66 
	`‰ì
(
gëaddrs
);

67 
î∫o
 = 
ENOBUFS
;

70 
√w_buf
 = 
	`ªÆloc
(
gëaddrs
, 
bufsize
+4096);

71 i‡(!
√w_buf
) {

72 
	`‰ì
(
gëaddrs
);

75 
bufsize
 += 4096;

76 
gëaddrs
 = (
s˘p_gëaddrs
*)
√w_buf
;

81 
˙t
 = 
gëaddrs
->
addr_num
;

82 
	`memmove
(
gëaddrs
, gëaddr†+ 1, 
Àn
);

83 *
addrs
 = (
sockaddr
*)
gëaddrs
;

85  
˙t
;

86 
	}
}

93 
	$s˘p_gë∑ddrs
(
sd
, 
s˘p_assoc_t
 
id
, 
sockaddr
 **
addrs
)

95  
	`s˘p_gëaddrs
(
sd
, 
id
,

96 
SCTP_GET_PEER_ADDRS
,

97 
addrs
);

98 
	}
}

104 
	$s˘p_‰ì∑ddrs
(
sockaddr
 *
addrs
)

106 
	`‰ì
(
addrs
);

109 
	}
}

116 
	$s˘p_gëœddrs
(
sd
, 
s˘p_assoc_t
 
id
, 
sockaddr
 **
addrs
)

118  
	`s˘p_gëaddrs
(
sd
, 
id
,

119 
SCTP_GET_LOCAL_ADDRS
,

120 
addrs
);

121 
	}
}

127 
	$s˘p_‰ìœddrs
(
sockaddr
 *
addrs
)

129 
	`‰ì
(
addrs
);

132 
	}
}

135 
	$s˘p_gëaddæí
(
ß_Ámûy_t
 
Ámûy
)

141 
Ámûy
) {

142 
AF_INET
:

143  (
sockaddr_ö
);

144 
AF_INET6
:

145  (
sockaddr_ö6
);

155 
	}
}

	@sctp-tools/src/lib/bindx.c

26 
	~<sys/sockë.h
>

27 
	~<√töë/ö.h
>

28 
	~<√töë/s˘p.h
>

29 
	~<î∫o.h
>

39 
	$s˘p_bödx
(
fd
, 
sockaddr
 *
addrs
, 
addr˙t
, 
Êags
)

41 
£tsock_›ti⁄
 = 0;

42 *
addrbuf
;

43 
sockaddr
 *
ß_addr
;

44 
sockÀn_t
 
addrs_size
 = 0;

45 
i
;

47 
Êags
) {

48 
SCTP_BINDX_ADD_ADDR
:

49 
£tsock_›ti⁄
 = 
SCTP_SOCKOPT_BINDX_ADD
;

51 
SCTP_BINDX_REM_ADDR
:

52 
£tsock_›ti⁄
 = 
SCTP_SOCKOPT_BINDX_REM
;

55 
î∫o
 = 
EINVAL
;

59 
addrbuf
 = 
addrs
;

60 
i
 = 0; i < 
addr˙t
; i++) {

61 
ß_addr
 = (
sockaddr
 *)
addrbuf
;

62 
ß_addr
->
ß_Ámûy
) {

63 
AF_INET
:

64 
addrs_size
 +(
sockaddr_ö
);

65 
addrbuf
 +(
sockaddr_ö
);

67 
AF_INET6
:

68 
addrs_size
 +(
sockaddr_ö6
);

69 
addrbuf
 +(
sockaddr_ö6
);

72 
î∫o
 = 
EINVAL
;

77  
	`£tsock›t
(
fd
, 
SOL_SCTP
, 
£tsock_›ti⁄
, 
addrs
, 
addrs_size
);

78 
	}
}

	@sctp-tools/src/lib/connectx.c

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<√töë/s˘p.h
>

25 
	~<î∫o.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<f˙é.h
>

37 
	$__c⁄√˘x_addrsize
(c⁄° 
sockaddr
 *
addrs
,

38 c⁄° 
addr˙t
)

40 c⁄° *
addrbuf
;

41 c⁄° 
sockaddr
 *
ß_addr
;

42 
addrs_size
 = 0;

43 
i
;

45 
addrbuf
 = 
addrs
;

46 
i
 = 0; i < 
addr˙t
; i++) {

47 
ß_addr
 = (c⁄° 
sockaddr
 *)
addrbuf
;

48 
ß_addr
->
ß_Ámûy
) {

49 
AF_INET
:

50 
addrs_size
 +(
sockaddr_ö
);

51 
addrbuf
 +(
sockaddr_ö
);

53 
AF_INET6
:

54 
addrs_size
 +(
sockaddr_ö6
);

55 
addrbuf
 +(
sockaddr_ö6
);

58 
î∫o
 = 
EINVAL
;

63  
addrs_size
;

64 
	}
}

67 
	$__s˘p_c⁄√˘x
(
fd
, 
sockaddr
 *
addrs
, 
addr˙t
)

69 
sockÀn_t
 
addrs_size
 = 
	`__c⁄√˘x_addrsize
(
addrs
, 
addr˙t
);

71 i‡(
addrs_size
 < 0)

72  
addrs_size
;

74  
	`£tsock›t
(
fd
, 
SOL_SCTP
, 
SCTP_SOCKOPT_CONNECTX_OLD
, 
addrs
,

75 
addrs_size
);

76 
	}
}

78 
	$s˘p_c⁄√˘x_‹ig
 ()

79 
	`__©åibuã
 ((
	`Æüs
 ("__sctp_connectx")));

82 
	$__c⁄√˘x
(
fd
, 
sockaddr
 *
addrs
, 
sockÀn_t
 
addrs_size
,

83 
s˘p_assoc_t
 *
id
)

85 
°©us
;

87 i‡(
id
)

88 *
id
 = 0;

90 
°©us
 = 
	`£tsock›t
(
fd
, 
SOL_SCTP
, 
SCTP_SOCKOPT_CONNECTX
, 
addrs
,

91 
addrs_size
);

94 i‡(
°©us
 > 0) {

95 i‡(
id
)

96 *
id
 = 
°©us
;

101 i‡(
°©us
 < 0 && 
î∫o
 !
ENOPROTOOPT
)

102  
°©us
;

107 i‡(
id
) {

108 
î∫o
 = 
ENOPROTOOPT
;

113  
	`£tsock›t
(
fd
, 
SOL_SCTP
, 
SCTP_SOCKOPT_CONNECTX_OLD
,

114 
addrs
, 
addrs_size
);

115 
	}
}

117 
	$s˘p_c⁄√˘x2
(
fd
, 
sockaddr
 *
addrs
, 
addr˙t
,

118 
s˘p_assoc_t
 *
id
)

120 
sockÀn_t
 
addrs_size
 = 
	`__c⁄√˘x_addrsize
(
addrs
, 
addr˙t
);

122 i‡(
addrs_size
 < 0)

123  
addrs_size
;

125  
	`__c⁄√˘x
(
fd
, 
addrs
, 
addrs_size
, 
id
);

126 
	}
}

128 
	$s˘p_c⁄√˘x3
(
fd
, 
sockaddr
 *
addrs
, 
addr˙t
,

129 
s˘p_assoc_t
 *
id
)

131 
sockÀn_t
 
addrs_size
 = 
	`__c⁄√˘x_addrsize
(
addrs
, 
addr˙t
);

132 
°©us
;

133 
s˘p_gëaddrs_ﬁd
 
∑øm
;

134 
sockÀn_t
 
›t_Àn
 = (
∑øm
);

136 i‡(
addrs_size
 < 0)

137  
addrs_size
;

143 
∑øm
.
assoc_id
 = 0;

144 
∑øm
.
addr_num
 = 
addrs_size
;

145 
∑øm
.
addrs
 =áddrs;

146 
°©us
 = 
	`gësock›t
(
fd
, 
SOL_SCTP
, 
SCTP_SOCKOPT_CONNECTX3
,

147 &
∑øm
, &
›t_Àn
);

148 i‡(
°©us
 =0 || 
î∫o
 =
EINPROGRESS
) {

152 i‡(
id
)

153 *
id
 = 
∑øm
.
assoc_id
;

156 i‡(
î∫o
 !
ENOPROTOOPT
) {

158  
°©us
;

165 i‡(
id
) {

168 
°©us
 = 
	`f˙é
(
fd
, 
F_GETFL
);

169 i‡(
°©us
 < 0)

170  
°©us
;

172 i‡(
°©us
 & 
O_NONBLOCK
) {

174 
î∫o
 = 
ENOPROTOOPT
;

179  
	`__c⁄√˘x
(
fd
, 
addrs
, 
addrs_size
, 
id
);

180 
	}
}

182 
	#__SYMPFX
(
pfx
, 
sym
Ë#pfx 
	)
sym

183 
	#_SYMPFX
(
pfx
, 
sym
Ë
	`__SYMPFX
’fx, sym)

	)

184 
	#SYMPFX
(
sym
Ë
	`_SYMPFX
(
__USER_LABEL_PREFIX__
, #sym)

	)

185 
	#SYMVER
(
«me
, 
«me2
Ë
	`__asm__
(".symvî " 
	`SYMPFX
“ameË"," SYMPFX“ame2))

	)

187 
SYMVER
(
__s˘p_c⁄√˘x
, 
s˘p_c⁄√˘x
@);

188 
SYMVER
(
s˘p_c⁄√˘x_‹ig
, 
s˘p_c⁄√˘x
@
VERS_1
);

189 
SYMVER
(
s˘p_c⁄√˘x2
, 
s˘p_c⁄√˘x
@
VERS_2
);

190 
SYMVER
(
s˘p_c⁄√˘x3
, 
s˘p_c⁄√˘x
@@
VERS_3
);

	@sctp-tools/src/lib/opt_info.c

23 
	~<sys/sockë.h
>

24 
	~<√töë/s˘p.h
>

25 
	~<î∫o.h
>

36 
	$s˘p_›t_öfo
(
sd
, 
s˘p_assoc_t
 
id
, 
›t
, *
¨g
, 
sockÀn_t
 *
size
)

38 
›t
) {

39 
SCTP_RTOINFO
:

40 
SCTP_ASSOCINFO
:

41 
SCTP_INITMSG
:

42 
SCTP_NODELAY
:

43 
SCTP_AUTOCLOSE
:

44 
SCTP_PRIMARY_ADDR
:

45 
SCTP_DISABLE_FRAGMENTS
:

46 
SCTP_PEER_ADDR_PARAMS
:

47 
SCTP_DEFAULT_SEND_PARAM
:

48 
SCTP_EVENTS
:

49 
SCTP_I_WANT_MAPPED_V4_ADDR
:

50 
SCTP_MAXSEG
:

51 
SCTP_STATUS
:

52 
SCTP_GET_PEER_ADDR_INFO
:

53 
SCTP_AUTH_ACTIVE_KEY
:

54 
SCTP_PEER_AUTH_CHUNKS
:

55 
SCTP_LOCAL_AUTH_CHUNKS
:

56 *(
s˘p_assoc_t
 *)
¨g
 = 
id
;

57  
	`gësock›t
(
sd
, 
IPPROTO_SCTP
, 
›t
, 
¨g
, 
size
);

59  
ENOTSUP
;

62 
	}
}

	@sctp-tools/src/lib/peeloff.c

22 
	~<sys/sockë.h
>

23 
	~<√töë/s˘p.h
>

24 
	~<î∫o.h
>

31 
	$s˘p_≥ñoff
(
fd
, 
s˘p_assoc_t
 
associd
)

33 
s˘p_≥ñoff_¨g_t
 
≥ñoff
;

34 
sockÀn_t
 
≥ñoff_size
 = (
≥ñoff
);

35 
îr
;

37 
≥ñoff
.
associd
 =ássocid;

38 
≥ñoff
.
sd
 = 0;

39 
îr
 = 
	`gësock›t
(
fd
, 
SOL_SCTP
, 
SCTP_SOCKOPT_PEELOFF
, &
≥ñoff
,

40 &
≥ñoff_size
);

41 i‡(
îr
 < 0) {

42  
îr
;

45  
≥ñoff
.
sd
;

47 
	}
}

	@sctp-tools/src/lib/recvmsg.c

50 
	~<°rög.h
>

51 
	~<î∫o.h
>

52 
	~<sys/sockë.h
>

53 
	~<√töë/s˘p.h
>

55 
	$s˘p_ªcvmsg
(
s
, *
msg
, 
size_t
 
Àn
, 
sockaddr
 *
‰om
,

56 
sockÀn_t
 *
‰omÀn
, 
s˘p_¢drcvöfo
 *
söfo
,

57 *
msg_Êags
)

59 
îr‹
;

60 
iovec
 
iov
;

61 
msghdr
 
ömsg
;

62 
öcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

63 
cmsghdr
 *
cmsg
 = 
NULL
;

65 
	`mem£t
(&
ömsg
, 0,  (inmsg));

67 
iov
.
iov_ba£
 = 
msg
;

68 
iov
.
iov_Àn
 = 
Àn
;

70 
ömsg
.
msg_«me
 = 
‰om
;

71 
ömsg
.
msg_«mñí
 = 
‰omÀn
 ? *fromlen : 0;

72 
ömsg
.
msg_iov
 = &
iov
;

73 
ömsg
.
msg_iovÀn
 = 1;

74 
ömsg
.
msg_c⁄åﬁ
 = 
öcmsg
;

75 
ömsg
.
msg_c⁄åﬁÀn
 = (
öcmsg
);

77 
îr‹
 = 
	`ªcvmsg
(
s
, &
ömsg
, 
msg_Êags
 ? *msg_flags : 0);

78 i‡(
îr‹
 < 0)

79  
îr‹
;

81 i‡(
‰omÀn
)

82 *
‰omÀn
 = 
ömsg
.
msg_«mñí
;

83 i‡(
msg_Êags
)

84 *
msg_Êags
 = 
ömsg
.msg_flags;

86 i‡(!
söfo
)

87  
îr‹
;

89 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
ömsg
); cmsg !
NULL
;

90 
cmsg
 = 
	`CMSG_NXTHDR
(&
ömsg
, cmsg)){

91 i‡((
IPPROTO_SCTP
 =
cmsg
->
cmsg_Àvñ
) &&

92 (
SCTP_SNDRCV
 =
cmsg
->
cmsg_ty≥
))

97 i‡(
cmsg
)

98 
	`mem˝y
(
söfo
, 
	`CMSG_DATA
(
cmsg
), (
s˘p_¢drcvöfo
));

100  (
îr‹
);

101 
	}
}

	@sctp-tools/src/lib/sendmsg.c

22 
	~<°rög.h
>

23 
	~<sys/sockë.h
>

24 
	~<√töë/s˘p.h
>

32 
	$s˘p_£ndmsg
(
s
, c⁄° *
msg
, 
size_t
 
Àn
, 
sockaddr
 *
to
,

33 
sockÀn_t
 
tﬁí
, 
uöt32_t
 
µid
, uöt32_à
Êags
,

34 
uöt16_t
 
°ªam_no
, 
uöt32_t
 
timëﬁive
, uöt32_à
c⁄ãxt
)

36 
msghdr
 
outmsg
;

37 
iovec
 
iov
;

38 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

39 
cmsghdr
 *
cmsg
;

40 
s˘p_¢drcvöfo
 *
söfo
;

42 
outmsg
.
msg_«me
 = 
to
;

43 
outmsg
.
msg_«mñí
 = 
tﬁí
;

44 
outmsg
.
msg_iov
 = &
iov
;

45 
iov
.
iov_ba£
 = (*)
msg
;

46 
iov
.
iov_Àn
 = 
Àn
;

47 
outmsg
.
msg_iovÀn
 = 1;

49 
outmsg
.
msg_c⁄åﬁ
 = 
outcmsg
;

50 
outmsg
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

51 
outmsg
.
msg_Êags
 = 0;

53 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmsg
);

54 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

55 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

56 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

58 
outmsg
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

59 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

60 
	`mem£t
(
söfo
, 0, (
s˘p_¢drcvöfo
));

61 
söfo
->
söfo_µid
 = 
µid
;

62 
söfo
->
söfo_Êags
 = 
Êags
;

63 
söfo
->
söfo_°ªam
 = 
°ªam_no
;

64 
söfo
->
söfo_timëﬁive
 = 
timëﬁive
;

65 
söfo
->
söfo_c⁄ãxt
 = 
c⁄ãxt
;

67  
	`£ndmsg
(
s
, &
outmsg
, 0);

68 
	}
}

74 
	$s˘p_£nd
(
s
, c⁄° *
msg
, 
size_t
 
Àn
,

75 c⁄° 
s˘p_¢drcvöfo
 *
söfo
, 
Êags
)

77 
msghdr
 
outmsg
;

78 
iovec
 
iov
;

79 
outcmsg
[
	`CMSG_SPACE
((
s˘p_¢drcvöfo
))];

81 
outmsg
.
msg_«me
 = 
NULL
;

82 
outmsg
.
msg_«mñí
 = 0;

83 
outmsg
.
msg_iov
 = &
iov
;

84 
iov
.
iov_ba£
 = (*)
msg
;

85 
iov
.
iov_Àn
 = 
Àn
;

86 
outmsg
.
msg_iovÀn
 = 1;

87 
outmsg
.
msg_c⁄åﬁÀn
 = 0;

89 i‡(
söfo
) {

90 
cmsghdr
 *
cmsg
;

92 
outmsg
.
msg_c⁄åﬁ
 = 
outcmsg
;

93 
outmsg
.
msg_c⁄åﬁÀn
 = (
outcmsg
);

94 
outmsg
.
msg_Êags
 = 0;

96 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
outmsg
);

97 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_SCTP
;

98 
cmsg
->
cmsg_ty≥
 = 
SCTP_SNDRCV
;

99 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
s˘p_¢drcvöfo
));

101 
outmsg
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

102 
	`mem˝y
(
	`CMSG_DATA
(
cmsg
), 
söfo
, (
s˘p_¢drcvöfo
));

105  
	`£ndmsg
(
s
, &
outmsg
, 
Êags
);

106 
	}
}

	@sctp-tools/src/testlib/sctputil.c

44 
	~<°dio.h
>

45 
	~<˘y≥.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/uio.h
>

50 
	~<√töë/ö.h
>

51 
	~<î∫o.h
>

52 
	~<mÆloc.h
>

53 
	~<√töë/s˘p.h
>

54 
	~<s˘putû.h
>

58 
	$ã°_¥öt_cmsg
(
s˘p_cmsg_t
 
ty≥
, 
s˘p_cmsg_d©a_t
 *
d©a
)

60 
ty≥
) {

61 
SCTP_INIT
:

62 
	`¥ötf
("INIT\n");

63 
	`¥ötf
(" sinit_num_ostreams %d\n",

64 
d©a
->
öô
.
söô_num_o°ªams
);

65 
	`¥ötf
(" sinit_max_instreams %d\n",

66 
d©a
->
öô
.
söô_max_ö°ªams
);

67 
	`¥ötf
(" sinit_max_attempts %d\n",

68 
d©a
->
öô
.
söô_max_©ãm±s
);

69 
	`¥ötf
(" sinit_max_init_timeo %d\n",

70 
d©a
->
öô
.
söô_max_öô_timeo
);

73 
SCTP_SNDRCV
:

74 
	`¥ötf
("SNDRCV\n");

75 
	`¥ötf
(" söfo_°ªam %u\n", 
d©a
->
¢drcv
.
söfo_°ªam
);

76 
	`¥ötf
(" söfo_s¢ %u\n", 
d©a
->
¢drcv
.
söfo_s¢
);

77 
	`¥ötf
(" söfo_Êag†0x%x\n", 
d©a
->
¢drcv
.
söfo_Êags
);

78 
	`¥ötf
(" söfo_µid %u\n", 
d©a
->
¢drcv
.
söfo_µid
);

79 
	`¥ötf
(" söfo_c⁄ãxà%x\n", 
d©a
->
¢drcv
.
söfo_c⁄ãxt
);

80 
	`¥ötf
(" söfo_t¢ %u\n", 
d©a
->
¢drcv
.
söfo_t¢
);

81 
	`¥ötf
(" söfo_cumt¢ %u\n", 
d©a
->
¢drcv
.
söfo_cumt¢
);

82 
	`¥ötf
(" söfo_assoc_id %u\n", 
d©a
->
¢drcv
.
söfo_assoc_id
);

87 
	`¥ötf
("UNKNOWN CMSG: %d\n", 
ty≥
);

90 
	}
}

94 
	$ã°_¥öt_mesßge
(
sk
, 
msghdr
 *
msg
, 
size_t
 
msg_Àn
)

96 
s˘p_cmsg_d©a_t
 *
d©a
;

97 
cmsghdr
 *
cmsg
;

98 
i
;

99 
d⁄e
 = 0;

100 
ßve
;

101 
s˘p_nŸifiˇti⁄
 *
¢
;

103 
cmsg
 = 
	`CMSG_FIRSTHDR
(
msg
);

104 
cmsg
 !
NULL
;

105 
cmsg
 = 
	`CMSG_NXTHDR
(
msg
, cmsg)) {

106 
d©a
 = (
s˘p_cmsg_d©a_t
 *)
	`CMSG_DATA
(
cmsg
);

107 
	`ã°_¥öt_cmsg
(
cmsg
->
cmsg_ty≥
, 
d©a
);

110 i‡(!(
MSG_NOTIFICATION
 & 
msg
->
msg_Êags
)) {

111 
ödex
 = 0;

115 
	`¥ötf
("DATA(%lu): ", 
msg_Àn
);

116  
msg_Àn
 > 0 ) {

117 *
ãxt
;

118 
Àn
;

120 
ãxt
 = 
msg
->
msg_iov
[
ödex
].
iov_ba£
;

121 
Àn
 = 
msg
->
msg_iov
[
ödex
].
iov_Àn
;

123 
ßve
 = 
ãxt
[
msg_Àn
-1];

124 i‡–
Àn
 > 
msg_Àn
 ) {

125 
ãxt
[(
Àn
 = 
msg_Àn
) - 1] = '\0';

128 i‡–(
msg_Àn
 -
Àn
Ë> 0 ) { 
ödex
++; }

130 
i
 = 0; i < 
Àn
 - 1; ++i) {

131 i‡(!
	`i•röt
(
ãxt
[
i
]))Åext[i] = '.';

134 
	`¥ötf
("%s", 
ãxt
);

135 
ãxt
[
msg_Àn
-1] = 
ßve
;

137 i‡–(
d⁄e
 = !
	`°rcmp
(
ãxt
, "exit")) ) { ; }

140 
	`¥ötf
("NOTIFICATION: ");

141 
¢
 = (
s˘p_nŸifiˇti⁄
 *)
msg
->
msg_iov
[0].
iov_ba£
;

142 
¢
->
¢_hódî
.
¢_ty≥
) {

143 
SCTP_ASSOC_CHANGE
:

144 
¢
->
¢_assoc_ch™ge
.
ßc_°©e
) {

145 
SCTP_COMM_UP
:

146 
	`¥ötf
("ASSOC_CHANGE - COMM_UP");

148 
SCTP_COMM_LOST
:

149 
	`¥ötf
("ASSOC_CHANGE - COMM_LOST");

151 
SCTP_RESTART
:

152 
	`¥ötf
("ASSOC_CHANGE - RESTART");

154 
SCTP_SHUTDOWN_COMP
:

155 
	`¥ötf
("ASSOC_CHANGE - SHUTDOWN_COMP");

157 
SCTP_CANT_STR_ASSOC
:

158 
	`¥ötf
("ASSOC_CHANGE - CANT_STR_ASSOC");

161 
	`¥ötf
("ASSOC_CHANGE - UNEXPECTED(%d)",

162 
¢
->
¢_assoc_ch™ge
.
ßc_°©e
);

167 
	`¥ötf
("%d", 
¢
->
¢_hódî
.
¢_ty≥
);

172 
	`¥ötf
("\n");

173 
	}
}

179 
	$ã°_check_buf_nŸifiˇti⁄
(*
buf
, 
d©Æí
, 
msg_Êags
,

180 
ex≥˘ed_d©Æí
, 
uöt16_t
 
ex≥˘ed_¢_ty≥
,

181 
uöt32_t
 
ex≥˘ed_addôi⁄Æ
)

183 
s˘p_nŸifiˇti⁄
 *
¢
;

185 i‡(!(
msg_Êags
 & 
MSG_NOTIFICATION
))

186 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Gotá datamsg,Éxpecting "

189 i‡(
ex≥˘ed_d©Æí
 <= 0)

192 i‡(
d©Æí
 !
ex≥˘ed_d©Æí
)

193 
	`t°_brkm
(
TBROK
, 
t°_exô
, "GotáÇotification of unexpected "

194 "Àngth:%d,Éx≥˘edÜígth:%d", 
d©Æí
,

195 
ex≥˘ed_d©Æí
);

197 
¢
 = (
s˘p_nŸifiˇti⁄
 *)
buf
;

198 i‡(
¢
->
¢_hódî
.
¢_ty≥
 !
ex≥˘ed_¢_ty≥
)

199 
	`t°_brkm
(
TBROK
, 
t°_exô
, "UnexpectedÇotification:%d"

200 "ex≥˘ed:%d", 
¢
->
¢_hódî
.
¢_ty≥
,

201 
ex≥˘ed_¢_ty≥
);

203 
¢
->
¢_hódî
.
¢_ty≥
){

204 
SCTP_ASSOC_CHANGE
:

205 i‡(
¢
->
¢_assoc_ch™ge
.
ßc_°©e
 !
ex≥˘ed_addôi⁄Æ
)

206 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Unexpected sac_state:%d "

207 "ex≥˘ed:%d", 
¢
->
¢_assoc_ch™ge
.
ßc_°©e
,

208 
ex≥˘ed_addôi⁄Æ
);

213 
	}
}

219 
	$ã°_check_msg_nŸifiˇti⁄
(
msghdr
 *
msg
, 
d©Æí
,

220 
ex≥˘ed_d©Æí
, 
uöt16_t
 
ex≥˘ed_¢_ty≥
,

221 
uöt32_t
 
ex≥˘ed_addôi⁄Æ
)

223 
	`ã°_check_buf_nŸifiˇti⁄
(
msg
->
msg_iov
[0].
iov_ba£
, 
d©Æí
,

224 
msg
->
msg_Êags
, 
ex≥˘ed_d©Æí
,

225 
ex≥˘ed_¢_ty≥
, 
ex≥˘ed_addôi⁄Æ
);

226 
	}
}

232 
	$ã°_check_buf_d©a
(*
buf
, 
d©Æí
, 
msg_Êags
,

233 
s˘p_¢drcvöfo
 *
söfo
, 
ex≥˘ed_d©Æí
,

234 
ex≥˘ed_msg_Êags
, 
uöt16_t
 
ex≥˘ed_°ªam
,

235 
uöt32_t
 
ex≥˘ed_µid
)

237 i‡(
msg_Êags
 & 
MSG_NOTIFICATION
)

238 
	`t°_brkm
(
TBROK
, 
t°_exô
, "GotáÇotification,Éxpectingá"

241 i‡(
ex≥˘ed_d©Æí
 <= 0)

244 i‡(
d©Æí
 !
ex≥˘ed_d©Æí
)

245 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Gotá datamsg of unexpected "

246 "Àngth:%d,Éx≥˘edÜígth:%d", 
d©Æí
,

247 
ex≥˘ed_d©Æí
);

249 i‡((
msg_Êags
 & ~0x80000000Ë!
ex≥˘ed_msg_Êags
)

250 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Unexpected msg_flags:0x%x "

251 "ex≥˘ög:0x%x", 
msg_Êags
, 
ex≥˘ed_msg_Êags
);

253 i‡((0 =
ex≥˘ed_°ªam
Ë&& (0 =
ex≥˘ed_µid
))

256 i‡(!
söfo
)

257 
	`t°_brkm
(
TBROK
, 
t°_exô
, "Null sinfo, butÉxpected "

258 "°ªam:%dÉx≥˘edÖpid:%d", 
ex≥˘ed_°ªam
,

259 
ex≥˘ed_µid
);

261 i‡(
söfo
->
söfo_°ªam
 !
ex≥˘ed_°ªam
)

262 
	`t°_brkm
(
TBROK
, 
t°_exô
, "stream mismatch:Éxpected:%x "

263 "gŸ:%x", 
ex≥˘ed_°ªam
, 
söfo
->
söfo_°ªam
);

264 i‡(
söfo
->
söfo_µid
 !
ex≥˘ed_µid
)

265 
	`t°_brkm
(
TBROK
, 
t°_exô
, "ppid mismatch:Éxpected:%x "

266 "gŸ:%x\n", 
ex≥˘ed_µid
, 
söfo
->
söfo_µid
);

267 
	}
}

273 
	$ã°_check_msg_d©a
(
msghdr
 *
msg
, 
d©Æí
, 
ex≥˘ed_d©Æí
,

274 
ex≥˘ed_msg_Êags
, 
uöt16_t
 
ex≥˘ed_°ªam
,

275 
uöt32_t
 
ex≥˘ed_µid
)

277 
cmsghdr
 *
cmsg
 = 
NULL
;

278 
s˘p_¢drcvöfo
 *
söfo
 = 
NULL
;

281 
cmsg
 = 
	`CMSG_FIRSTHDR
(
msg
); cmsg !
NULL
;

282 
cmsg
 = 
	`CMSG_NXTHDR
(
msg
, cmsg)){

283 i‡(
IPPROTO_SCTP
 =
cmsg
->
cmsg_Àvñ
 &&

284 
SCTP_SNDRCV
 =
cmsg
->
cmsg_ty≥
)

288 i‡((!
cmsg
) ||

289 (
cmsg
->
cmsg_Àn
 < 
	`CMSG_LEN
((
s˘p_¢drcvöfo
))))

290 
söfo
 = 
NULL
;

292 
söfo
 = (
s˘p_¢drcvöfo
 *)
	`CMSG_DATA
(
cmsg
);

294 
	`ã°_check_buf_d©a
(
msg
->
msg_iov
[0].
iov_ba£
, 
d©Æí
, msg->
msg_Êags
,

295 
söfo
, 
ex≥˘ed_d©Æí
, 
ex≥˘ed_msg_Êags
,

296 
ex≥˘ed_°ªam
, 
ex≥˘ed_µid
);

298 
	}
}

303 
	$ã°_buûd_msg
(
Àn
)

305 
i
 = 
Àn
 - 1;

306 
n
;

307 
msg
[] =

309 *
msg_buf
, *
p
;

311 
msg_buf
 = (*)
	`mÆloc
(
Àn
);

312 i‡(!
msg_buf
)

313 
	`t°_brkm
(
TBROK
, 
t°_exô
, "malloc failed");

315 
p
 = 
msg_buf
;

318 
n
 = ((
i
 > 50)?50:i);

319 
	`mem˝y
(
p
, 
msg
, ((
i
 > 50)?50:i));

320 
p
 +
n
;

321 
i
 -
n
;

322 } 
i
 > 0);

324 
msg_buf
[
Àn
-1] = '\0';

326 (
msg_buf
);

327 
	}
}

330 
	$ã°_íabÀ_assoc_ch™ge
(
fd
)

332 
s˘p_evít_subs¸ibe
 
subs¸ibe
;

334 
	`mem£t
(&
subs¸ibe
, 0, (subscribe));

335 
subs¸ibe
.
s˘p_d©a_io_evít
 = 1;

336 
subs¸ibe
.
s˘p_assocüti⁄_evít
 = 1;

337 
	`ã°_£tsock›t
(
fd
, 
SCTP_EVENTS
, (*)&
subs¸ibe
,

338 (
subs¸ibe
));

339 
	}
}

341 
	$cmp_addr
(
sockaddr_°‹age_t
 *
addr1
, sockaddr_°‹age_à*
addr2
)

343 i‡(
addr1
->
ß
.
ß_Ámûy
 !
addr2
->sa.sa_family)

345 
addr1
->
ß
.
ß_Ámûy
) {

346 
AF_INET6
:

347 i‡(
addr1
->
v6
.
sö6_p‹t
 !
addr2
->v6.sin6_port)

349  
	`memcmp
(&
addr1
->
v6
.
sö6_addr
, &
addr2
->v6.sin6_addr,

350 (
addr1
->
v6
.
sö6_addr
));

351 
AF_INET
:

352 i‡(
addr1
->
v4
.
sö_p‹t
 !
addr2
->v4.sin_port)

354  
	`memcmp
(&
addr1
->
v4
.
sö_addr
, &
addr2
->v4.sin_addr,

355 (
addr1
->
v4
.
sö_addr
));

357 
	`t°_brkm
(
TBROK
, 
t°_exô
, "invalidáddressÅype %d",

358 
addr1
->
ß
.
ß_Ámûy
);

361 
	}
}

364 
	$ã°_≥î_addr
(
sk
, 
s˘p_assoc_t
 
asoc
, 
sockaddr_°‹age_t
 *
≥îs
, 
cou¡
)

366 
sockaddr
 *
addrs
;

367 
îr‹
, 
i
, 
j
;

368 
sockaddr
 *
ß_addr
;

369 
sockÀn_t
 
addrs_size
 = 0;

370 *
addrbuf
;

371 *
found
 = (*Ë
	`mÆloc
(
cou¡
);

372 
	`mem£t
(
found
, 0, 
cou¡
);

374 
îr‹
 = 
	`s˘p_gë∑ddrs
(
sk
, 
asoc
, &
addrs
);

375 i‡(-1 =
îr‹
) {

376 
	`t°_brkm
(
TBROK
, 
t°_exô
, "s˘p_gë∑ddrs: %s", 
	`°ªº‹
(
î∫o
));

377  
îr‹
;

379 i‡(
îr‹
 !
cou¡
) {

380 
	`s˘p_‰ì∑ddrs
(
addrs
);

381 
	`t°_brkm
(
TBROK
, 
t°_exô
, "peer count %d mismatch,Éxpected %d",

382 
îr‹
, 
cou¡
);

384 
addrbuf
 = 
addrs
;

385 
i
 = 0; i < 
cou¡
; i++) {

386 
ß_addr
 = (
sockaddr
 *)
addrbuf
;

387 
ß_addr
->
ß_Ámûy
) {

388 
AF_INET
:

389 
addrs_size
 +(
sockaddr_ö
);

390 
addrbuf
 +(
sockaddr_ö
);

392 
AF_INET6
:

393 
addrs_size
 +(
sockaddr_ö6
);

394 
addrbuf
 +(
sockaddr_ö6
);

397 
î∫o
 = 
EINVAL
;

398 
	`s˘p_‰ì∑ddrs
(
addrs
);

399 
	`t°_brkm
(
TBROK
, 
t°_exô
, "s˘p_gë∑ddrs: %s", 
	`°ªº‹
(
î∫o
));

402 
j
 = 0; j < 
cou¡
; j++) {

403 i‡(
	`cmp_addr
((
sockaddr_°‹age_t
 *)
ß_addr
,

404 &
≥îs
[
j
]) == 0) {

405 
found
[
j
] = 1;

409 
j
 = 0; j < 
cou¡
; j++) {

410 i‡(
found
[
j
] == 0) {

411 
	`t°_brkm
(
TBROK
, 
t°_exô
, "≥îáddªs†%dÇŸ found", 
j
);

414 
	`s˘p_‰ì∑ddrs
(
addrs
);

416 
	}
}

	@sctp-tools/src/testlib/sctputil.h

48 #i‚de‡
__s˘putû_h__


49 
	#__s˘putû_h__


	)

51 #ifde‡
LTP


52 
	~<ã°.h
>

53 
	~<us˘e°.h
>

56 
	~<°rög.h
>

59 
sockaddr_ö
 
	mv4
;

60 
sockaddr_ö6
 
	mv6
;

61 
sockaddr
 
	mß
;

62 } 
	tsockaddr_°‹age_t
;

65 
	#REALLY_BIG
 65536

	)

68 #ifde‡
PROT_SOCK


69 
	#SCTP_TESTPORT_1
 
PROT_SOCK


	)

71 
	#SCTP_TESTPORT_1
 1024

	)

73 
	#SCTP_TESTPORT_2
 (
SCTP_TESTPORT_1
+1)

	)

75 
	#SCTP_IP_BCAST
 
	`ht⁄l
(0xffffffff)

	)

76 
	#SCTP_IP_LOOPBACK
 
	`ht⁄l
(0x7f000001)

	)

79 
	#SCTP_IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

80 
	#SCTP_IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

83 
	#NIPQUAD
(
addr
) \

84 ((*)&
addr
)[0], \

85 ((*)&
addr
)[1], \

86 ((*)&
addr
)[2], \

87 ((*)&
addr
)[3]

	)

90 
	#NIP6
(
addr
) \

91 
	`¡ohs
((
addr
).
s6_addr16
[0]), \

92 
	`¡ohs
((
addr
).
s6_addr16
[1]), \

93 
	`¡ohs
((
addr
).
s6_addr16
[2]), \

94 
	`¡ohs
((
addr
).
s6_addr16
[3]), \

95 
	`¡ohs
((
addr
).
s6_addr16
[4]), \

96 
	`¡ohs
((
addr
).
s6_addr16
[5]), \

97 
	`¡ohs
((
addr
).
s6_addr16
[6]), \

98 
	`¡ohs
((
addr
).
s6_addr16
[7])

	)

100 
	#DUMP_CORE
 { \

101 *
dõdõdõ
 = 0; \

102 
	`¥ötf
("DUMP_CORE %s: %d\n", 
__FILE__
, 
__LINE__
);\

103 *
dõdõdõ
 = 0; \

104 }

	)

106 #i‚de‡
LTP


108 
	mTPASS
,

109 
	mTINFO
,

112 *
TCID
;

113 
TST_TOTAL
;

114 
TST_CNT
;

116 
	#t°_brkm
(
a1
, 
a2
, 
wh©evî
...) \

118 
	`¥ötf
("%†%2d BROK : ", 
TCID
, ++
TST_CNT
); \

119 
	`¥ötf
(
wh©evî
); \

120 
	`¥ötf
("\n"); \

121 
DUMP_CORE
 \

122 }

	)

123 
	#t°_ªsm
(
a1
, 
wh©evî
...) \

125 
	`¥ötf
("%†%2d %†: ", 
TCID
, \

126 (
a1
 =
TPASS
)?++
TST_CNT
:0, \

127 (
a1
 =
TPASS
)?"PASS":"INFO"); \

128 
	`¥ötf
(
wh©evî
); \

129 
	`¥ötf
("\n"); \

130 }

	)

133 
ölöe
 
	$ã°_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

135 
sk
 = 
	`sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

136 i‡(-1 =
sk
)

137 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sockë: %s", 
	`°ªº‹
(
î∫o
));

138  
sk
;

139 
	}
}

141 
ölöe
 
	$ã°_böd
(
sk
, 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

143 
îr‹
 = 
	`böd
(
sk
, 
addr
, 
addæí
);

144 i‡(-1 =
îr‹
)

145 
	`t°_brkm
(
TBROK
, 
t°_exô
, "böd: %s", 
	`°ªº‹
(
î∫o
));

146  
îr‹
;

147 
	}
}

149 
ölöe
 
	$ã°_bödx_add
(
sk
, 
sockaddr
 *
addr
, 
cou¡
)

151 
îr‹
 = 
	`s˘p_bödx
(
sk
, 
addr
, 
cou¡
, 
SCTP_BINDX_ADD_ADDR
);

152 i‡(-1 =
îr‹
)

153 
	`t°_brkm
(
TBROK
, 
t°_exô
, "bödx (add): %s", 
	`°ªº‹
(
î∫o
));

154  
îr‹
;

155 
	}
}

157 
ölöe
 
	$ã°_li°í
(
sk
, 
backlog
)

159 
îr‹
 = 
	`li°í
(
sk
, 
backlog
);

160 i‡(-1 =
îr‹
)

161 
	`t°_brkm
(
TBROK
, 
t°_exô
, "li°í: %s", 
	`°ªº‹
(
î∫o
));

162  
îr‹
;

163 
	}
}

165 
ölöe
 
	$ã°_c⁄√˘
(
sk
, 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

167 
îr‹
 = 
	`c⁄√˘
(
sk
, 
addr
, 
addæí
);

168 i‡(-1 =
îr‹
)

169 
	`t°_brkm
(
TBROK
, 
t°_exô
, "c⁄√˘: %s", 
	`°ªº‹
(
î∫o
));

170  
îr‹
;

171 
	}
}

173 
ölöe
 
	$ã°_c⁄√˘x
(
sk
, 
sockaddr
 *
addr
, 
cou¡
)

175 
îr‹
 = 
	`s˘p_c⁄√˘x
(
sk
, 
addr
, 
cou¡
, 
NULL
);

176 i‡(-1 =
îr‹
)

177 
	`t°_brkm
(
TBROK
, 
t°_exô
, "c⁄√˘x: %s", 
	`°ªº‹
(
î∫o
));

178  
îr‹
;

179 
	}
}

181 
ölöe
 
	$ã°_ac˚±
(
sk
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

183 
îr‹
 = 
	`ac˚±
(
sk
, 
addr
, 
addæí
);

184 i‡(-1 =
îr‹
)

185 
	`t°_brkm
(
TBROK
, 
t°_exô
, "ac˚±: %s", 
	`°ªº‹
(
î∫o
));

186  
îr‹
;

187 
	}
}

189 
ölöe
 
	$ã°_£nd
(
sk
, c⁄° *
msg
, 
size_t
 
Àn
, 
Êags
)

191 
îr‹
 = 
	`£nd
(
sk
, 
msg
, 
Àn
, 
Êags
);

192 i‡(
Àn
 !
îr‹
)

193 
	`t°_brkm
(
TBROK
, 
t°_exô
, "send:Érror:%dÉrrno:%d",

194 
îr‹
, 
î∫o
);

195  
îr‹
;

196 
	}
}

198 
ölöe
 
	$ã°_£ndto
(
sk
, c⁄° *
msg
, 
size_t
 
Àn
, 
Êags
,

199 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

201 
îr‹
 = 
	`£ndto
(
sk
, 
msg
, 
Àn
, 
Êags
, 
to
, 
tﬁí
);

202 i‡(
Àn
 !
îr‹
)

203 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendto:Érror:%dÉrrno:%d",

204 
îr‹
, 
î∫o
);

205  
îr‹
;

206 
	}
}

208 
ölöe
 
	$ã°_£ndmsg
(
sk
, c⁄° 
msghdr
 *
msg
, 
Êags
,

209 
msgÀn
)

211 
îr‹
 = 
	`£ndmsg
(
sk
, 
msg
, 
Êags
);

212 i‡(
msgÀn
 !
îr‹
)

213 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sendmsg:Érror:%dÉrrno:%d",

214 
îr‹
, 
î∫o
);

215  
îr‹
;

216 
	}
}

218 
ölöe
 
	$ã°_ªcv
(
sk
, *
buf
, 
size_t
 
Àn
, 
Êags
)

220 
îr‹
 = 
	`ªcv
(
sk
, 
buf
, 
Àn
, 
Êags
);

221 i‡(-1 =
îr‹
)

222 
	`t°_brkm
(
TBROK
, 
t°_exô
, "ªcv: %s", 
	`°ªº‹
(
î∫o
));

223  
îr‹
;

224 
	}
}

226 
ölöe
 
	$ã°_ªcvmsg
(
sk
, 
msghdr
 *
msg
, 
Êags
)

228 
îr‹
 = 
	`ªcvmsg
(
sk
, 
msg
, 
Êags
);

229 i‡(-1 =
îr‹
)

230 
	`t°_brkm
(
TBROK
, 
t°_exô
, "ªcvmsg: %s", 
	`°ªº‹
(
î∫o
));

231  
îr‹
;

232 
	}
}

234 
ölöe
 
	$ã°_shutdown
(
sk
, 
how
)

236 
îr‹
 = 
	`shutdown
(
sk
, 
how
);

237 i‡(-1 =
îr‹
)

238 
	`t°_brkm
(
TBROK
, 
t°_exô
, "shutdown: %s", 
	`°ªº‹
(
î∫o
));

239  
îr‹
;

240 
	}
}

242 
ölöe
 
	$ã°_gësock›t
(
sk
, 
›äame
, *
›tvÆ
,

243 
sockÀn_t
 *
›éí
)

245 
îr‹
 = 
	`gësock›t
(
sk
, 
SOL_SCTP
, 
›äame
, 
›tvÆ
, 
›éí
);

246 i‡(
îr‹
)

247 
	`t°_brkm
(
TBROK
, 
t°_exô
, "gësock›t(%d): %s", 
›äame
,

248 
	`°ªº‹
(
î∫o
));

249  
îr‹
;

250 
	}
}

252 
ölöe
 
	$ã°_£tsock›t
(
sk
, 
›äame
, c⁄° *
›tvÆ
,

253 
sockÀn_t
 
›éí
)

255 
îr‹
 = 
	`£tsock›t
(
sk
, 
SOL_SCTP
, 
›äame
, 
›tvÆ
, 
›éí
);

256 i‡(
îr‹
)

257 
	`t°_brkm
(
TBROK
, 
t°_exô
, "£tsock›t(%d): %s", 
›äame
,

258 
	`°ªº‹
(
î∫o
));

259  
îr‹
;

260 
	}
}

262 
ölöe
 
	$ã°_s˘p_≥ñoff
(
sk
, 
s˘p_assoc_t
 
assoc_id
)

264 
îr‹
 = 
	`s˘p_≥ñoff
(
sk
, 
assoc_id
);

265 i‡(-1 =
îr‹
)

266 
	`t°_brkm
(
TBROK
, 
t°_exô
, "s˘p_≥ñoff: %s", 
	`°ªº‹
(
î∫o
));

267  
îr‹
;

268 
	}
}

270 
ölöe
 
	$ã°_s˘p_£ndmsg
(
s
, c⁄° *
msg
, 
size_t
 
Àn
,

271 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
,

272 
uöt32_t
 
µid
, uöt32_à
Êags
,

273 
uöt16_t
 
°ªam_no
, 
uöt32_t
 
timëﬁive
,

274 
uöt32_t
 
c⁄ãxt
)

276 
îr‹
 = 
	`s˘p_£ndmsg
(
s
, 
msg
, 
Àn
, 
to
, 
tﬁí
, 
µid
, 
Êags
, 
°ªam_no
,

277 
timëﬁive
, 
c⁄ãxt
);

278 i‡(
Àn
 !
îr‹
)

279 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_sendmsg:Érror:%dÉrrno:%d",

280 
îr‹
, 
î∫o
);

281  
îr‹
;

282 
	}
}

284 
ölöe
 
	$ã°_s˘p_£nd
(
s
, c⁄° *
msg
, 
size_t
 
Àn
,

285 c⁄° 
s˘p_¢drcvöfo
 *
söfo
,

286 
Êags
)

288 
îr‹
 = 
	`s˘p_£nd
(
s
, 
msg
, 
Àn
, 
söfo
, 
Êags
);

289 i‡(
Àn
 !
îr‹
)

290 
	`t°_brkm
(
TBROK
, 
t°_exô
, "sctp_send:Érror:%dÉrrno:%d",

291 
îr‹
, 
î∫o
);

292  
îr‹
;

293 
	}
}

295 
ölöe
 
	$ã°_s˘p_ªcvmsg
(
sk
, *
msg
, 
size_t
 
Àn
,

296 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
,

297 
s˘p_¢drcvöfo
 *
söfo
,

298 *
msg_Êags
)

300 
îr‹
 = 
	`s˘p_ªcvmsg
(
sk
, 
msg
, 
Àn
, 
‰om
, 
‰omÀn
, 
söfo
, 
msg_Êags
);

301 i‡(-1 =
îr‹
)

302 
	`t°_brkm
(
TBROK
, 
t°_exô
, "s˘p_ªcvmsg: %s", 
	`°ªº‹
(
î∫o
));

303  
îr‹
;

304 
	}
}

306 
ölöe
 *
	$ã°_mÆloc
(
size_t
 
size
)

308 *
buf
 = 
	`mÆloc
(
size
);

309 i‡(
NULL
 =
buf
)

310 
	`t°_brkm
(
TBROK
, 
t°_exô
, "malloc failed");

311  
buf
;

312 
	}
}

314 
ã°_check_msg_nŸifiˇti⁄
(
msghdr
 *, , , 
uöt16_t
, 
uöt32_t
);

315 
ã°_check_buf_nŸifiˇti⁄
(*, , , , 
uöt16_t
, 
uöt32_t
);

316 
ã°_check_msg_d©a
(
msghdr
 *, , , , 
uöt16_t
, 
uöt32_t
);

317 
ã°_check_buf_d©a
(*, , , 
s˘p_¢drcvöfo
 *, , ,

318 
uöt16_t
, 
uöt32_t
);

319 *
ã°_buûd_msg
();

320 
ã°_íabÀ_assoc_ch™ge
();

321 
ã°_¥öt_mesßge
(
sk
, 
msghdr
 *
msg
, 
size_t
 
msg_Àn
);

322 
ã°_≥î_addr
(
sk
, 
s˘p_assoc_t
 
asoc
, 
sockaddr_°‹age_t
 *
≥îs
, 
cou¡
);

	@sctp-tools/src/withsctp/checksctp.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<sys/sockë.h
>

35 
	~<√töë/ö.h
>

41 
	#SHOULD_IPPROTO_SCTP
 132

	)

43 
	$maö
()

45 
fd
;

47 
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
SHOULD_IPPROTO_SCTP
);

49 i‡(
fd
 <= 0) {

50 
	`≥º‹
("checksctp");

51 
	`exô
(1);

53 
	`Ârötf
(
°dîr
, "SCTP supported\n");

56 
	`˛o£
(
fd
);

58 
	}
}

	@sctp-tools/src/withsctp/sctp_bind.c

38 
	~<°rög.h
>

39 
	~<°dio.h
>

40 
	~"s˘p_sockë.h
"

46 
	#SHOULD_IPPROTO_SCTP
 132

	)

49 
	$böd
(
sockfd
, c⁄° 
sockaddr
 *
my_addr
, 
sockÀn_t
 
addæí
)

51 
	`_s˘p_lﬂd_libs
();

57  (
ªÆ_böd
)(
sockfd
, 
my_addr
, 
addæí
);

58 
	}
}

	@sctp-tools/src/withsctp/sctp_load_libs.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~"s˘p_sockë.h
"

35 (*
ªÆ_böd
)(
sockfd
, c⁄° 
sockaddr
 *
my_addr
, 
sockÀn_t
 
addæí
);

36 (*
ªÆ_sockë
)(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

37 (*
ªÆ_£tsock›t
)(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
,

38 
sockÀn_t
 
›éí
);

39 *
lib_h™dÀ
 = 
NULL
;

42 
	$_s˘p_lﬂd_libs
()

44 i‡(
NULL
 !
lib_h™dÀ
) ;

46 i‡(!(
lib_h™dÀ
 = 
	`dl›í
("libc.so", 
RTLD_LAZY
))) {

47 i‡(!(
lib_h™dÀ
 = 
	`dl›í
("libc.so.6", 
RTLD_LAZY
))) {

48 
	`Ârötf
(
°dîr
, "errorÜoadingÜibc!\n");

49 
	`exô
 (1);

53 i‡(!(
ªÆ_sockë
 = 
	`dlsym
(
lib_h™dÀ
, "socket"))) {

54 
	`Ârötf
(
°dîr
, "socket()Çot found inÜibc!\n");

55 
	`exô
 (1);

58 i‡(!(
ªÆ_böd
 = 
	`dlsym
(
lib_h™dÀ
, "bind"))) {

59 
	`Ârötf
(
°dîr
, "bind()Çot found inÜibc!\n");

60 
	`exô
 (1);

63 i‡(!(
ªÆ_£tsock›t
 = 
	`dlsym
(
lib_h™dÀ
, "setsockopt"))) {

64 
	`Ârötf
(
°dîr
, "setsockopt()Çot found inÜibc!\n");

65 
	`exô
 (1);

67 
	}
}

	@sctp-tools/src/withsctp/sctp_socket.c

38 
	~<°rög.h
>

39 
	~<°dio.h
>

40 
	~"s˘p_sockë.h
"

46 
	#SHOULD_IPPROTO_SCTP
 132

	)

49 
	$sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

51 
	`_s˘p_lﬂd_libs
();

53 i‡(((
PF_INET
 =
domaö
Ë|| (
PF_INET6
 == domain))

54 && (
SOCK_STREAM
 =
ty≥
)) {

55 
¥Ÿocﬁ
 = 
SHOULD_IPPROTO_SCTP
;

58  (
ªÆ_sockë
)(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

59 
	}
}

	@sctp-tools/src/withsctp/sctp_socket.h

58 
	~<dlf˙.h
>

59 
	~<sys/ty≥s.h
>

60 
	~<sys/sockë.h
>

61 
	~<√töë/ö.h
>

62 
	~<√töë/s˘p.h
>

63 
	~<√töë/t˝.h
>

65 (*
ªÆ_böd
)(
sockfd
, c⁄° 
sockaddr
 *
my_addr
, 
sockÀn_t
 
addæí
);

66 (*
ªÆ_sockë
)(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

67 (*
ªÆ_£tsock›t
)(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
,

68 
sockÀn_t
 
›éí
);

69 
	`_s˘p_lﬂd_libs
();

	@sctp-tools/src/withsctp/sctp_sockopt.c

35 
	~<°rög.h
>

36 
	~<°dio.h
>

37 
	~"s˘p_sockë.h
"

43 
	#SHOULD_IPPROTO_SCTP
 132

	)

46 
	$£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

48 
	`_s˘p_lﬂd_libs
();

50 i‡((
IPPROTO_TCP
 =
Àvñ
Ë&& (
TCP_NODELAY
 =
›äame
)) {

51 
Àvñ
 = 
SHOULD_IPPROTO_SCTP
;

52 
›äame
 = 
SCTP_NODELAY
;

55  (
ªÆ_£tsock›t
)(
s
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

56 
	}
}

	@select_worker.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
hash
,
b
;

6 
hash
=0;hash<=()(-1);hash++)

8 
b
 = ((
hash
 >>8)*2)>>24;

9 i‡(
b
==1){
	`¥ötf
("%u:%d ",
hash
,b);;}

11 
	}
}

	@shm_test/shm_client.c

1 
	~<°dio.h
>

2 
	~<sys/shm.h
>

3 
	~<sys/°©.h
>

4 
	#KEY_ID
 0x1234

	)

5 
	$maö
 ()

7 
£gmít_id
;

8 * 
sh¨ed_mem‹y
;

9 
shmid_ds
 
shmbuf„r
;

10 
£gmít_size
;

11 c⁄° 
sh¨ed_£gmít_size
 = 0x6400;

14 
£gmít_id
 = 
	`shmgë
 (
KEY_ID
, 
sh¨ed_£gmít_size
,

15 
IPC_EXCL
 | 
S_IRUSR
 | 
S_IWUSR
);

17 
sh¨ed_mem‹y
 = (*Ë
	`shm©
 (
£gmít_id
, 0, 0);

18 
	`¥ötf
 ("sh¨ed mem‹yÑóâachedáàaddªs†%p\n", 
sh¨ed_mem‹y
);

20 
	`¥ötf
 ("%s\n", 
sh¨ed_mem‹y
);

22 
	`shmdt
 (
sh¨ed_mem‹y
);

25 
	`shm˘l
 (
£gmít_id
, 
IPC_RMID
, 0);

28 
	}
}

	@shm_test/shm_main.c

1 
	~<°dio.h
>

2 
	~<sys/shm.h
>

3 
	~<sys/°©.h
>

4 
	#KEY_ID
 0x1234

	)

5 
	$maö
 ()

7 
£gmít_id
;

8 * 
sh¨ed_mem‹y
;

9 
shmid_ds
 
shmbuf„r
;

10 
£gmít_size
;

11 c⁄° 
sh¨ed_£gmít_size
 = 0x6400;

14 
£gmít_id
 = 
	`shmgë
 (
KEY_ID
, 
sh¨ed_£gmít_size
,

15 
IPC_CREAT
 | 
IPC_EXCL
 | 
S_IRUSR
 | 
S_IWUSR
);

17 
sh¨ed_mem‹y
 = (*Ë
	`shm©
 (
£gmít_id
, 0, 0);

18 
	`¥ötf
 ("sh¨ed mem‹yáâachedáàaddªs†%p\n", 
sh¨ed_mem‹y
);

20 
	`shm˘l
 (
£gmít_id
, 
IPC_STAT
, &
shmbuf„r
);

21 
£gmít_size
 = 
shmbuf„r
.
shm_£gsz
;

22 
	`¥ötf
 ("£gmíàsize: %d\n", 
£gmít_size
);

24 
	`•rötf
 (
sh¨ed_mem‹y
, "Hello, world.");

40 
	}
}

	@sighandler/sighandler.c

1 
	~<°dio.h
>

2 
	~<sig«l.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

6 
	$C©chSigU§1
 (
sig
)

8 
	`¥ötf
("SIGUSR1 Caught\n");

9 
	}
}

12 
	$C©chSigU§2
 (
sig
)

14 
	`¥ötf
("SIGUSR2 Caught\n");

15 
	`exô
 (0);

16 
	}
}

19 
	$sigH™dÀr
 (
signum
)

21 i‡(
signum
 =
SIGUSR1
)

22 
	`C©chSigU§1
 (
signum
);

24 i‡(
signum
 =
SIGUSR2
)

25 
	`C©chSigU§2
 (
signum
);

26 
	}
}

29 
	$maö
 ()

31 
	`sig«l
 (
SIGUSR1
, 
sigH™dÀr
);

32 
	`sig«l
 (
SIGUSR2
, 
sigH™dÀr
);

35 
	`¶ìp
 (1);

37 
	}
}

	@socket/ioctl/ioctl_test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<√t/if.h
>

4 
	~<uni°d.h
>

5 
	~<sys/io˘l.h
>

6 
	~<¨∑/öë.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<√töë/ö.h
>

12 
	~<√t/rouã.h
>

13 
	~<°rög.h
>

14 
	~<√t/if_¨p.h
>

16 
	$maö
()

18 
sockaddr_ö
 *
sö
;

19 
i‰eq
 
i‰
;

20 
FILE
 *
dns
;

21 
FILE
 *
gw
;

22 *
ù
 = 
√w
 (16);

23 *
√tmask
 = 
√w
 (16);

24 *
brﬂdˇ°
 = 
√w
 (16);

26 *
mac
 = 
√w
 (32);

28 
mtu
;

29 
sockë_fd
;

30 if((
sockë_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0){

31 
	`≥º‹
("socket");

32 
	`exô
(1);

34 
	`mem£t
(&
i‰
, 0, (ifr));

35 
	`°r˝y
(
i‰
.
i‰_«me
, "wlp2s0");

36 
	`mem£t
(&
sö
, 0, (sin));

38 if(
	`io˘l
(
sockë_fd
, 
SIOCGIFADDR
, &
i‰
) != -1){

39 
sö
 = (
sockaddr_ö
 *)&
i‰
.
i‰_addr
;

40 
	`°r˝y
(
ù
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

41 
	`¥ötf
("IPáddªs†i†%s\n", 
ù
);

44 if(
	`io˘l
(
sockë_fd
, 
SIOCGIFBRDADDR
, &
i‰
) != -1){

45 
sö
 = (
sockaddr_ö
 *)&
i‰
.
i‰_brﬂdaddr
;

46 
	`°r˝y
(
brﬂdˇ°
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

47 
	`¥ötf
("Brﬂdˇ° i†%s\n", 
brﬂdˇ°
);

50 if(
	`io˘l
(
sockë_fd
, 
SIOCGIFNETMASK
, &
i‰
) != -1){

51 
sö
 = (
sockaddr_ö
 *)&
i‰
.
i‰_brﬂdaddr
;

52 
	`°r˝y
(
√tmask
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

53 
	`¥ötf
("Në-mask i†%s\n", 
√tmask
);

56 if(
	`io˘l
(
sockë_fd
, 
SIOCGIFHWADDR
, &
i‰
) != -1){

57 
sö
 = (
sockaddr_ö
 *)&
i‰
.
i‰_√tmask
;

58 
	`•rötf
(
mac
, "%02x:%02x:%02x:%02x:%02x:%02x",

59 ()
i‰
.
i‰_√tmask
.
ß_d©a
[0],

60 ()
i‰
.
i‰_√tmask
.
ß_d©a
[1],

61 ()
i‰
.
i‰_√tmask
.
ß_d©a
[2],

62 ()
i‰
.
i‰_√tmask
.
ß_d©a
[3],

63 ()
i‰
.
i‰_√tmask
.
ß_d©a
[4],

64 ()
i‰
.
i‰_√tmask
.
ß_d©a
[5]);

65 
	`¥ötf
("Ma¯addªs†i†%s\n", 
mac
);

68 if(
	`io˘l
(
sockë_fd
, 
SIOCGIFMTU
, &
i‰
) != -1){

69 
mtu
 = 
i‰
.
i‰_mtu
;

70 
	`¥ötf
("MTU i†%d\n", 
mtu
);

72 
	`˛o£
(
sockë_fd
);

74 
	}
}

	@socket/multicast/client-old.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/sockë.h
>

3 
	~<¨∑/öë.h
>

4 
	~<√töë/ö.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

10 
sockaddr_ö
 
	gloˇlSock
;

11 
ù_mªq
 
	ggroup
;

12 
	gsd
;

13 
	gd©Æí
;

14 
	gd©abuf
[1500];

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
sd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

20 if(
sd
 < 0){

21 
	`≥º‹
("Opening datagram socketÉrror");

22 
	`exô
(1);

24 
	`¥ötf
("Opening datagram socket....OK.\n");

27 
ªu£
 = 1;

28 if(
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
ªu£
, (reuse)) < 0){

29 
	`≥º‹
("Setting SO_REUSEADDRÉrror");

30 
	`˛o£
(
sd
);

31 
	`exô
(1);

33 
	`¥ötf
("Setting SO_REUSEADDR...OK.\n");

37 
	`mem£t
((*Ë&
loˇlSock
, 0, (localSock));

38 
loˇlSock
.
sö_Ámûy
 = 
AF_INET
;

39 
loˇlSock
.
sö_p‹t
 = 
	`ht⁄s
(4321);

40 
loˇlSock
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

41 if(
	`böd
(
sd
, (
sockaddr
*)&
loˇlSock
, (localSock))){

42 
	`≥º‹
("Binding datagram socketÉrror");

43 
	`˛o£
(
sd
);

44 
	`exô
(1);

46 
	`¥ötf
("Binding datagram socket...OK.\n");

48 
group
.
imr_mu…üddr
.
s_addr
 = 
	`öë_addr
("226.1.1.1");

49 
group
.
imr_öãrÁ˚
.
s_addr
 = 
	`öë_addr
("192.168.100.1");

50 if(
	`£tsock›t
(
sd
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
, (*)&
group
, (group)) < 0){

51 
	`≥º‹
("Adding multicast groupÉrror");

52 
	`˛o£
(
sd
);

53 
	`exô
(1);

55 
	`¥ötf
("Adding multicast group...OK.\n");

57 
d©Æí
 = (
d©abuf
);

58 if((
r
=
	`ªcv‰om
(
sd
, 
d©abuf
, 
d©Æí
, 0, (
sockaddr
*), &
˛i
, &datalen)) < 0){

59 
	`≥º‹
("Reading datagram messageÉrror");

60 
	`˛o£
(
sd
);

61 
	`exô
(1);

63 
	`¥ötf
("Reading datagram message...OK.\n");

64 
	`¥ötf
("Thêmesßgê‰om mu…iˇ° sîvî is: %d\n", 
d©Æí
);

69 
	}
}

	@socket/multicast/client.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/sockë.h
>

3 
	~<√töë/ö.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

6 
	~<¨∑/öë.h
>

7 
	#MAXBUF
 256

	)

8 
	#PUERTO
 4321

	)

9 
	#GROUP
 "226.1.1.1"

	)

11 
	$maö
() {

12 
s
, 
n
, 
r
;

13 
sockaddr_ö
 
§v
, 
˛i
;

14 
ù_mªq
 
mªq
;

15 
buf
[
MAXBUF
];

17 
	`bzîo
(&
§v
, (srv));

19 
§v
.
sö_Ámûy
 = 
AF_INET
;

20 
§v
.
sö_p‹t
 = 
	`ht⁄s
(
PUERTO
);

21 if(
	`öë_©⁄
("226.1.1.1", &
§v
.
sö_addr
) < 0) {

22 
	`≥º‹
("inet_aton");

26 if((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

27 
	`≥º‹
("socket");

30 if(
	`böd
(
s
, (
sockaddr
 *)&
§v
, (srv)) < 0) {

31 
	`≥º‹
("bind");

35 if(
	`öë_©⁄
("226.1.1.1", &
mªq
.
imr_mu…üddr
) < 0) {

36 
	`≥º‹
("inet_aton");

39 if(
	`öë_©⁄
("192.168.100.1", &
mªq
.
imr_öãrÁ˚
) < 0) {

40 
	`≥º‹
("inet_aton");

44 i‡(
	`£tsock›t
(
s
,
IPPROTO_IP
,
IP_ADD_MEMBERSHIP
,&
mªq
,(mreq))

46 
	`≥º‹
("setsockopt");

49 
n
 = (
˛i
);

51 i‡((
r
 = 
	`ªcv‰om
(
s
, 
buf
, 
MAXBUF
, 0, (
sockaddr
 *)

52 &
˛i
, &
n
)) < 0) {

53 
	`≥º‹
("recvfrom");

55 
buf
[
n
] = 0;

56 
	`Ârötf
(
°dout
, "Mensaje desde %s: %s",

57 
	`öë_¡ﬂ
(
˛i
.
sö_addr
), 
buf
);

60 
	}
}

	@socket/multicast/server.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/sockë.h
>

3 
	~<¨∑/öë.h
>

4 
	~<√töë/ö.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
ö_addr
 
	gloˇlI¡îÁ˚
;

10 
sockaddr_ö
 
	ggroupSock
;

11 
	gsd
;

12 
	gd©abuf
[1024] = "MulticastÅest messageÜol!";

13 
	gd©Æí
 = (
d©abuf
);

16 
	$maö
 (
¨gc
, *
¨gv
[ ])

18 
sd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

19 if(
sd
 < 0) {

20 
	`≥º‹
("Opening datagram socketÉrror");

21 
	`exô
(1);

23 
	`¥ötf
("OpeningÅhe datagram socket...OK.\n");

26 
	`mem£t
((*Ë&
groupSock
, 0, (groupSock));

27 
groupSock
.
sö_Ámûy
 = 
AF_INET
;

28 
groupSock
.
sö_addr
.
s_addr
 = 
	`öë_addr
("226.1.1.1");

29 
groupSock
.
sö_p‹t
 = 
	`ht⁄s
(4321);

32 
loˇlI¡îÁ˚
.
s_addr
 = 
	`öë_addr
("192.168.9.108");

33 if(
	`£tsock›t
(
sd
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (*)&
loˇlI¡îÁ˚
, (localInterface)) < 0) {

34 
	`≥º‹
("SettingÜocal interfaceÉrror");

35 
	`exô
(1);

37 
	`¥ötf
("SettingÅheÜocal interface...OK\n");

40 if(
	`£ndto
(
sd
, 
d©abuf
, 
d©Æí
, 0, (
sockaddr
*)&
groupSock
, (groupSock)) < 0) {

41 
	`≥º‹
("Sending datagram messageÉrror");}

43 
	`¥ötf
("Sending datagram message...OK\n");}

47 
	}
}

	@socket/tcp/client.c

1 
	~<î∫o.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/sockë.h
>

4 
	~<√töë/ö.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	#MAXLINE
 4096

	)

11 
	$maö
(
¨gc
, ** 
¨gv
)

13 
sockfd
, 
n
,
ªc_Àn
;

14 
ªcvlöe
[4096], 
£ndlöe
[4096];

15 
buf
[
MAXLINE
];

16 
sockaddr_ö
 
£rvaddr
;

19 if–
¨gc
 != 2){

20 
	`¥ötf
("usage: ./client <ipaddress>\n");

21 
	`exô
(0);

25 if–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0){

26 
	`¥ötf
("¸óã sockëÉº‹: %s”ºno: %d)\n", 
	`°ªº‹
(
î∫o
),errno);

27 
	`exô
(0);

31 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

32 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

33 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(8000);

34 if–
	`öë_±⁄
(
AF_INET
, 
¨gv
[1], &
£rvaddr
.
sö_addr
) <= 0){

35 
	`¥ötf
("öë_±⁄Éº‹ f‹ %s\n",
¨gv
[1]);

36 
	`exô
(0);

39 if–
	`c⁄√˘
(
sockfd
, (
sockaddr
*)&
£rvaddr
, (servaddr)) < 0){

40 
	`¥ötf
("c⁄√˘Éº‹: %s”ºno: %d)\n",
	`°ªº‹
(
î∫o
),errno);

41 
	`exô
(0);

45 
	`¥ötf
("send msgÅo server: \n");

46 
	`fgës
(
£ndlöe
, 4096, 
°dö
);

47 if–
	`£nd
(
sockfd
, 
£ndlöe
, 
	`°æí
(sendline), 0) < 0)

49 
	`¥ötf
("£nd msgÉº‹: %s”ºno: %d)\n", 
	`°ªº‹
(
î∫o
),Érrno);

50 
	`exô
(0);

52 if((
ªc_Àn
 = 
	`ªcv
(
sockfd
, 
buf
, 
MAXLINE
,0)) == -1) {

53 
	`≥º‹
("recvÉrror");

54 
	`exô
(1);

56 
buf
[
ªc_Àn
] = '\0';

57 
	`¥ötf
("Re˚ived : %†",
buf
);

58 
	`˛o£
(
sockfd
);

59 
	`exô
(0);

60 
	}
}

	@socket/tcp/server.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<î∫o.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<√töë/ö.h
>

9 
	#DEFAULT_PORT
 8000

	)

10 
	#MAXLINE
 4096

	)

11 
	$maö
(
¨gc
, ** 
¨gv
)

13 
sockë_fd
, 
c⁄√˘_fd
;

14 
sockaddr_ö
 
£rvaddr
;

15 
buff
[4096];

16 
n
;

19 if–(
sockë_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) == -1 ){

20 
	`¥ötf
("¸óã sockëÉº‹: %s”ºno: %d)\n",
	`°ªº‹
(
î∫o
),errno);

21 
	`exô
(0);

24 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

25 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

26 
£rvaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

27 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
DEFAULT_PORT
);

30 if–
	`böd
(
sockë_fd
, (
sockaddr
*)&
£rvaddr
, (servaddr)) == -1){

31 
	`¥ötf
("böd sockëÉº‹: %s”ºno: %d)\n",
	`°ªº‹
(
î∫o
),errno);

32 
	`exô
(0);

35 if–
	`li°í
(
sockë_fd
, 10) == -1){

36 
	`¥ötf
("li°í sockëÉº‹: %s”ºno: %d)\n",
	`°ªº‹
(
î∫o
),errno);

37 
	`exô
(0);

39 
	`¥ötf
("======waiting for client'sÑequest======\n");

42 if–(
c⁄√˘_fd
 = 
	`ac˚±
(
sockë_fd
, (
sockaddr
*)
NULL
, NULL)) == -1){

43 
	`¥ötf
("ac˚± sockëÉº‹: %s”ºno: %d)",
	`°ªº‹
(
î∫o
),errno);

47 
n
 = 
	`ªcv
(
c⁄√˘_fd
, 
buff
, 
MAXLINE
, 0);

49 if(!
	`f‹k
()){

50 if(
	`£nd
(
c⁄√˘_fd
, "Hello,youáre connected!\n", 26,0) == -1)

51 
	`≥º‹
("sendÉrror");

52 
	`˛o£
(
c⁄√˘_fd
);

53 
	`exô
(0);

55 
buff
[
n
] = '\0';

56 
	`¥ötf
("ªcv msg from clõ¡: %s\n", 
buff
);

57 
	`˛o£
(
c⁄√˘_fd
);

59 
	`˛o£
(
sockë_fd
);

60 
	}
}

	@socket/udp/client.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<°rög.h
>

5 
	~<√tdb.h
>

6 
	~<sys/sockë.h
>

7 
	~<√töë/ö.h
>

8 
	~<¨∑/öë.h
>

10 
	#BUFSIZE
 65500

	)

11 
	#DEFAULT_PORT
 5320

	)

13 íum{
	mCMD_NAME
,
	mDST_IP
,
	mDST_PORT
};

15 
	$maö
(
¨gc
,*
¨gv
[])

17 
sockaddr_ö
 
£rvî
;

18 
sockaddr_ö
 
˛õ¡
;

19 
d°_ù
;

20 
p‹t
 ;

21 
s
;

22 
n
;

23 
buf
[
BUFSIZE
];

24 
cmd
[
BUFSIZE
];

25 
zîo
;

27 if(
¨gc
!=2&&argc!=3)

29 
	`Ârötf
(
°dîr
,"Ußge:%†ho°«mê[p‹t]",
¨gv
[0]);

30 
	`exô
(
EXIT_FAILURE
);

32 if((
d°_ù
=
	`öë_addr
(
¨gv
[
DST_IP
]))==
INADDR_NONE
)

33 { 
ho°ít
 *
he
;

35 if((
he
=
	`gëho°by«me
(
¨gv
[
DST_IP
]))==
NULL
)

37 
	`Ârötf
(
°dîr
,"gethostbynameÉrror\n");

38 
	`exô
(
EXIT_FAILURE
);

40 
	`mem˝y
((*)&
d°_ù
,(*)
he
->
h_addr
,he->
h_Àngth
);

43 if(
¨gc
==3)

45 if((
p‹t
=
	`©oi
(
¨gv
[
DST_PORT
]))==0)

47 
£rvít
 *
£
;

48 if((
£
=
	`gë£rvby«me
(
¨gv
[
DST_PORT
],"udp"))!=
NULL
)

50 
p‹t
=()
	`¡ohs
((
u_sh‹t
)
£
->
s_p‹t
);

54 
	`Ârötf
(
°dîr
,"getservbynameÉrror");

55 
	`exô
(
EXIT_FAILURE
);

60 
p‹t
=
DEFAULT_PORT
;

61 if((
s
=
	`sockë
(
AF_INET
,
SOCK_DGRAM
,0))<0)

63 
	`≥º‹
("socket");

64 
	`exô
(
EXIT_FAILURE
);

66 
	`mem£t
((*)&
˛õ¡
 ,0,(client));

67 
˛õ¡
.
sö_Ámûy
=
AF_INET
;

68 
˛õ¡
.
sö_addr
.
s_addr
=
	`ht⁄l
(
INADDR_ANY
);

69 
˛õ¡
.
sö_p‹t
=
	`ht⁄s
(0);

70 if(
	`böd
(
s
,(
sockaddr
 *)&
˛õ¡
,(client))<0)

72 
	`≥º‹
("bind");

73 
	`exô
(
EXIT_FAILURE
);

75 
	`mem£t
((*)&
£rvî
,0,(server));

76 
£rvî
.
sö_Ámûy
=
AF_INET
;

77 
£rvî
.
sö_addr
.
s_addr
=
d°_ù
;

78 
	`öë_±⁄
(
AF_INET
, 
¨gv
[
DST_IP
], &
£rvî
.
sö_addr
);

79 
£rvî
.
sö_p‹t
=
	`ht⁄s
(
p‹t
);

80 
zîo
=0;

81 
	`¥ötf
("UDP>");

82 
	`fÊush
(
°dout
);

86 (
n
=
	`ªad
(0,
buf
,
BUFSIZE
))>0)

88 
buf
[
n
]='\0';

89 
	`ssˇnf
(
buf
,"%s",
cmd
);

91 if(
	`°rcmp
(
cmd
,"quit")==0)

95 if(
	`£ndto
(
s
,
buf
,
n
,0,(
sockaddr
*)&
£rvî
,(server))<0)

100 if((
n
=
	`ªcv‰om
(
s
,
buf
,
BUFSIZE
-1,0,(
sockaddr
*)0,&
zîo
))<0)

102 
buf
[
n
]='\0';

103 
	`¥ötf
("%s",
buf
);

104 
	`¥ötf
("UDP>");

105 
	`fÊush
(
°dout
);

107 
	`˛o£
(
s
);

108  
EXIT_SUCCESS
;

109 
	}
}

	@socket/udp/server.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<√tdb.h
>

6 
	~<sys/sockë.h
>

7 
	~<√töë/ö.h
>

8 
	~<¨∑/öë.h
>

10 
	#BUFSIZE
 65500

	)

11 
	#DEFAULT_PORT
 5320

	)

14 íum{
	mCMD_NAME
,
	mDST_PORT
};

15 
execuã
(*
comm™d
,*
buf
,
bufmax
);

17 
	$maö
(
¨gc
,*
¨gv
[])

19 
sockaddr_ö
 
£rvî
;

20 
sockaddr_ö
 
˛õ¡
;

21 
Àn
;

22 
p‹t
;

23 
s
;

24 
˙
;

25 
¢
;

26 
∫
;

27 
cmd1
[
BUFSIZE
];

28 
cmd2
[
BUFSIZE
];

29 
ªcv_buf
[
BUFSIZE
];

30 
£nd_buf
[
BUFSIZE
];

32 if(
¨gc
==2){

34 i‡((
p‹t
=
	`©oi
(
¨gv
[
DST_PORT
]))==0) {

35 
£rvít
 *
£
;

36 if((
£
=
	`gë£rvby«me
(
¨gv
[
DST_PORT
],"udp"Ë)!=
NULL
)

37 
p‹t
=()
	`¡ohs
((
u_sh‹t
)
£
->
s_p‹t
);

40 
	`Ârötf
(
°dîr
,"getservbynameÉrror\n");

41 
	`exô
(
EXIT_FAILURE
);

46 
p‹t
 =
DEFAULT_PORT
;

49 if((
s
=
	`sockë
(
AF_INET
,
SOCK_DGRAM
,0))<0)

51 
	`≥º‹
("socket");

52 
	`exô
(
EXIT_FAILURE
);

55 
	`mem£t
((*)&
£rvî
,0,(server));

56 
£rvî
.
sö_Ámûy
=
AF_INET
;

57 
£rvî
.
sö_addr
.
s_addr
=
	`ht⁄l
(
INADDR_ANY
);

59 
£rvî
.
sö_p‹t
=
	`ht⁄s
(
p‹t
);

60 
	`¥ötf
("p‹t%d:\n", 
p‹t
);

61 if(
	`böd
(
s
,(
sockaddr
 *)&
£rvî
,(server))<0)

63 
	`≥º‹
("bind");

64 
	`exô
(
EXIT_FAILURE
);

67 
Àn
=(
˛õ¡
);

68 
	`¥ötf
("wainting for connection...\n");

69 (
∫
=
	`ªcv‰om
(
s
,
ªcv_buf
,
BUFSIZE
-1,0,(
sockaddr
*)&
˛õ¡
,&
Àn
))>0)

71 
ªcv_buf
[
∫
]='\0';

72 
	`¥ötf
("ª˚ivê%s\n",
ªcv_buf
);

74 if((
˙
=
	`ssˇnf
(
ªcv_buf
,"%s%s",
cmd1
,
cmd2
))<=0)

76 
¢
=0;

78 if(
˙
==2&&
	`°rcmp
(
cmd1
,"show")==0)

80 if(
	`°rcmp
(
cmd2
,"route")==0)

81 #ifde‡
löux


82 
¢
=
	`execuã
("/bö/√t°© -∫",
£nd_buf
,
BUFSIZE
);

84 
¢
=
	`execuã
("/u§/bö/√t°© -∫",
£nd_buf
,
BUFSIZE
);

86 if(
	`°rcmp
(
cmd2
,"arp")==0)

87 #ifde‡
löux


88 
¢
=
	`execuã
("/sbö/¨∞-™",
£nd_buf
,
BUFSIZE
);

90 
¢
=
	`execuã
("/u§/bö/¨∞-™",
£nd_buf
,
BUFSIZE
);

92 if(
	`°rcmp
(
cmd2
,"tcp")==0)

93 #ifde‡
löux


94 
¢
=
	`execuã
("/bö/√t°© -ä",
£nd_buf
,
BUFSIZE
);

96 
¢
=
	`execuã
("/u§/bö/√t°© -ä",
£nd_buf
,
BUFSIZE
);

98 if(
	`°rcmp
(
cmd2
,"nic")==0)

99 
¢
=
	`execuã
("/sbö/ifc⁄fig -a",
£nd_buf
,
BUFSIZE
);

101 
¢
=
	`•rötf
(
£nd_buf
,"∑ømëîÉº‹ %s\n","show [rouã|¨p|t˝|nic]\n",
cmd2
);

102 
	`¥ötf
("%s",
£nd_buf
);

105 if(
˙
==1&&
	`°rcmp
(
cmd1
,"help")==0)

107 
¢
=
	`•rötf
(
£nd_buf
,"%s%s%s%s%s%s","Command:\n","showÑoute \n","showárp \n","showÅcp \n","showÇic \n","help\n");

108 
¢
=(
£nd_buf
);

111 
¢
=
	`•rötf
(
£nd_buf
,"Comm™dÉº‹%s",
cmd1
);

112 if(
	`£ndto
(
s
,
£nd_buf
,
¢
,0,(
sockaddr
 *)&
˛õ¡
,
Àn
)<0)

114 
	`¥ötf
("%s",
£nd_buf
);

116 
	`˛o£
(
s
);

117  
EXIT_SUCCESS
;

118 
	}
}

119 
	$execuã
(*
comm™d
,*
buf
,
bufmax
)

121 
FILE
 *
Â
;

122 
i
;

123 if((
Â
=
	`p›í
(
comm™d
,"r"))==
NULL
)

125 
	`≥º‹
(
comm™d
);

126 
	`exô
(
EXIT_FAILURE
);

128 
i
=0;

129 (
buf
[
i
++]=
	`fgëc
(
Â
))!=
EOF
&&i<
bufmax
);

130 
	`p˛o£
(
Â
);

131  
i
;

132 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


31 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

34 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

35 
__löío
, c⁄° *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

41 (*
îr‹_¥öt_¥og«me
) ();

44 
îr‹_mesßge_cou¡
;

48 
îr‹_⁄e_≥r_löe
;

51 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


52 
	~<bôs/îr‹.h
>

55 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

147 #ifde‡
__USE_ATFILE


148 
	#AT_FDCWD
 -100

	)

151 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

152 
	#AT_REMOVEDIR
 0x200

	)

154 
	#AT_SYMLINK_FOLLOW
 0x400

	)

155 #ifde‡
__USE_GNU


156 
	#AT_NO_AUTOMOUNT
 0x800

	)

158 
	#AT_EMPTY_PATH
 0x1000

	)

160 
	#AT_EACCESS
 0x200

	)

169 
f˙é
 (
__fd
, 
__cmd
, ...);

178 #i‚de‡
__USE_FILE_OFFSET64


179 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__REDIRECT


182 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

183 
	`__n⁄nuŒ
 ((1));

185 
	#›í
 
›í64


	)

188 #ifde‡
__USE_LARGEFILE64


189 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

192 #ifde‡
__USE_ATFILE


202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

208 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

210 
	#›í©
 
›í©64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

215 
	`__n⁄nuŒ
 ((2));

224 #i‚de‡
__USE_FILE_OFFSET64


225 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #ifde‡
__REDIRECT


228 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

229 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

231 
	#¸ót
 
¸ót64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

238 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

239 && !
deföed
 
__USE_POSIX
))

248 
	#F_ULOCK
 0

	)

249 
	#F_LOCK
 1

	)

250 
	#F_TLOCK
 2

	)

251 
	#F_TEST
 3

	)

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

256 #ifde‡
__REDIRECT


257 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

259 
	#lockf
 
lockf64


	)

262 #ifde‡
__USE_LARGEFILE64


263 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

267 #ifde‡
__USE_XOPEN2K


270 #i‚de‡
__USE_FILE_OFFSET64


271 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

272 
__advi£
Ë
__THROW
;

274 #ifde‡
__REDIRECT_NTH


275 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
, 
__advi£
),

277 
posix_Ádvi£64
);

279 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

284 
__advi£
Ë
__THROW
;

292 #i‚de‡
__USE_FILE_OFFSET64


293 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

295 #ifde‡
__REDIRECT


296 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

297 
__off64_t
 
__Àn
),

298 
posix_ÁŒoˇã64
);

300 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

303 #ifde‡
__USE_LARGEFILE64


304 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

310 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

311 && 
deföed
 
__va_¨g_∑ck_Àn


312 
	~<bôs/f˙é2.h
>

315 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

228 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

229 
	#_POSIX_SOURCE
 1

	)

230 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

231 
	#_POSIX_C_SOURCE
 2

	)

232 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

233 
	#_POSIX_C_SOURCE
 199506L

	)

234 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

235 
	#_POSIX_C_SOURCE
 200112L

	)

237 
	#_POSIX_C_SOURCE
 200809L

	)

239 
	#__USE_POSIX_IMPLICITLY
 1

	)

242 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


243 
	#__USE_POSIX
 1

	)

246 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


247 
	#__USE_POSIX2
 1

	)

250 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

251 
	#__USE_POSIX199309
 1

	)

254 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

255 
	#__USE_POSIX199506
 1

	)

258 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

259 
	#__USE_XOPEN2K
 1

	)

260 #unde‡
__USE_ISOC95


261 
	#__USE_ISOC95
 1

	)

262 #unde‡
__USE_ISOC99


263 
	#__USE_ISOC99
 1

	)

266 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

267 
	#__USE_XOPEN2K8
 1

	)

268 #unde‡
_ATFILE_SOURCE


269 
	#_ATFILE_SOURCE
 1

	)

272 #ifdef 
_XOPEN_SOURCE


273 
	#__USE_XOPEN
 1

	)

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

275 
	#__USE_XOPEN_EXTENDED
 1

	)

276 
	#__USE_UNIX98
 1

	)

277 #unde‡
_LARGEFILE_SOURCE


278 
	#_LARGEFILE_SOURCE
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

281 
	#__USE_XOPEN2K8
 1

	)

282 
	#__USE_XOPEN2K8XSI
 1

	)

284 
	#__USE_XOPEN2K
 1

	)

285 
	#__USE_XOPEN2KXSI
 1

	)

286 #unde‡
__USE_ISOC95


287 
	#__USE_ISOC95
 1

	)

288 #unde‡
__USE_ISOC99


289 
	#__USE_ISOC99
 1

	)

292 #ifde‡
_XOPEN_SOURCE_EXTENDED


293 
	#__USE_XOPEN_EXTENDED
 1

	)

298 #ifde‡
_LARGEFILE_SOURCE


299 
	#__USE_LARGEFILE
 1

	)

302 #ifde‡
_LARGEFILE64_SOURCE


303 
	#__USE_LARGEFILE64
 1

	)

306 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

307 
	#__USE_FILE_OFFSET64
 1

	)

310 #i‡
deföed
 
_DEFAULT_SOURCE


311 
	#__USE_MISC
 1

	)

314 #ifdef 
_ATFILE_SOURCE


315 
	#__USE_ATFILE
 1

	)

318 #ifdef 
_GNU_SOURCE


319 
	#__USE_GNU
 1

	)

322 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


323 
	#__USE_REENTRANT
 1

	)

326 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

327 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

328 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

329 #ñi‡!
__GNUC_PREREQ
 (4, 1)

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


331 #ñi‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 #i‚de‡
__USE_FORTIFY_LEVEL


338 
	#__USE_FORTIFY_LEVEL
 0

	)

343 
	~<°dc-¥edef.h
>

351 #unde‡
__GNU_LIBRARY__


352 
	#__GNU_LIBRARY__
 6

	)

356 
	#__GLIBC__
 2

	)

357 
	#__GLIBC_MINOR__
 22

	)

359 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

360 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

363 #i‚de‡
__ASSEMBLER__


364 #i‚de‡
_SYS_CDEFS_H


365 
	~<sys/cdefs.h
>

370 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


371 
	#__USE_LARGEFILE
 1

	)

372 
	#__USE_LARGEFILE64
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/ifaddrs.h

19 #i‚de‡
_IFADDRS_H


20 
	#_IFADDRS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/sockë.h
>

25 
__BEGIN_DECLS


29 
	siÁddrs


31 
iÁddrs
 *
	miÁ_√xt
;

33 *
	miÁ_«me
;

34 
	miÁ_Êags
;

36 
sockaddr
 *
	miÁ_addr
;

37 
sockaddr
 *
	miÁ_√tmask
;

44 
sockaddr
 *
	mifu_brﬂdaddr
;

45 
sockaddr
 *
	mifu_d°addr
;

46 } 
	miÁ_ifu
;

49 #i‚de‡
iÁ_brﬂdaddr


50 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

52 #i‚de‡
iÁ_d°addr


53 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

56 *
	miÁ_d©a
;

66 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

69 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/atalk.h

1 #i‚de‡
__LINUX_ATALK_H__


2 
	#__LINUX_ATALK_H__


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

6 
	~<löux/sockë.h
>

14 
	#ATPORT_FIRST
 1

	)

15 
	#ATPORT_RESERVED
 128

	)

16 
	#ATPORT_LAST
 254

	)

17 
	#ATADDR_ANYNET
 (
__u16
)0

	)

18 
	#ATADDR_ANYNODE
 (
__u8
)0

	)

19 
	#ATADDR_ANYPORT
 (
__u8
)0

	)

20 
	#ATADDR_BCAST
 (
__u8
)255

	)

21 
	#DDP_MAXSZ
 587

	)

22 
	#DDP_MAXHOPS
 15

	)

24 
	#SIOCATALKDIFADDR
 (
SIOCPROTOPRIVATE
 + 0)

	)

26 
	s©Æk_addr
 {

27 
__be16
 
	ms_√t
;

28 
__u8
 
	ms_node
;

31 
	ssockaddr_©
 {

32 
__kî√l_ß_Ámûy_t
 
	mßt_Ámûy
;

33 
__u8
 
	mßt_p‹t
;

34 
©Æk_addr
 
	mßt_addr
;

35 
	mßt_zîo
[8];

38 
	s©Æk_√å™ge
 {

39 
__u8
 
	mƒ_pha£
;

40 
__be16
 
	mƒ_fú°√t
;

41 
__be16
 
	mƒ_œ°√t
;

	@/usr/include/linux/ax25.h

6 #i‚def 
AX25_KERNEL_H


7 
	#AX25_KERNEL_H


	)

9 
	~<löux/sockë.h
>

11 
	#AX25_MTU
 256

	)

12 
	#AX25_MAX_DIGIS
 8

	)

14 
	#AX25_WINDOW
 1

	)

15 
	#AX25_T1
 2

	)

16 
	#AX25_N2
 3

	)

17 
	#AX25_T3
 4

	)

18 
	#AX25_T2
 5

	)

19 
	#AX25_BACKOFF
 6

	)

20 
	#AX25_EXTSEQ
 7

	)

21 
	#AX25_PIDINCL
 8

	)

22 
	#AX25_IDLE
 9

	)

23 
	#AX25_PACLEN
 10

	)

24 
	#AX25_IAMDIGI
 12

	)

26 
	#AX25_KILL
 99

	)

28 
	#SIOCAX25GETUID
 (
SIOCPROTOPRIVATE
+0)

	)

29 
	#SIOCAX25ADDUID
 (
SIOCPROTOPRIVATE
+1)

	)

30 
	#SIOCAX25DELUID
 (
SIOCPROTOPRIVATE
+2)

	)

31 
	#SIOCAX25NOUID
 (
SIOCPROTOPRIVATE
+3)

	)

32 
	#SIOCAX25OPTRT
 (
SIOCPROTOPRIVATE
+7)

	)

33 
	#SIOCAX25CTLCON
 (
SIOCPROTOPRIVATE
+8)

	)

34 
	#SIOCAX25GETINFOOLD
 (
SIOCPROTOPRIVATE
+9)

	)

35 
	#SIOCAX25ADDFWD
 (
SIOCPROTOPRIVATE
+10)

	)

36 
	#SIOCAX25DELFWD
 (
SIOCPROTOPRIVATE
+11)

	)

37 
	#SIOCAX25DEVCTL
 (
SIOCPROTOPRIVATE
+12)

	)

38 
	#SIOCAX25GETINFO
 (
SIOCPROTOPRIVATE
+13)

	)

40 
	#AX25_SET_RT_IPMODE
 2

	)

42 
	#AX25_NOUID_DEFAULT
 0

	)

43 
	#AX25_NOUID_BLOCK
 1

	)

46 
	max25_ˇŒ
[7];

47 } 
	tax25_addªss
;

49 
	ssockaddr_ax25
 {

50 
__kî√l_ß_Ámûy_t
 
	mßx25_Ámûy
;

51 
ax25_addªss
 
	mßx25_ˇŒ
;

52 
	mßx25_ndigis
;

56 
	#ßx25_uid
 
ßx25_ndigis


	)

58 
	sfuŒ_sockaddr_ax25
 {

59 
sockaddr_ax25
 
	mfß_ax25
;

60 
ax25_addªss
 
	mfß_digùóãr
[
AX25_MAX_DIGIS
];

63 
	sax25_rouãs_°ru˘
 {

64 
ax25_addªss
 
	mp‹t_addr
;

65 
ax25_addªss
 
	mde°_addr
;

66 
	mdigi_cou¡
;

67 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

70 
	sax25_rouã_›t_°ru˘
 {

71 
ax25_addªss
 
	mp‹t_addr
;

72 
ax25_addªss
 
	mde°_addr
;

73 
	mcmd
;

74 
	m¨g
;

77 
	sax25_˘l_°ru˘
 {

78 
ax25_addªss
 
	mp‹t_addr
;

79 
ax25_addªss
 
	msour˚_addr
;

80 
ax25_addªss
 
	mde°_addr
;

81 
	mcmd
;

82 
	m¨g
;

83 
	mdigi_cou¡
;

84 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

88 
	sax25_öfo_°ru˘_dïªˇãd
 {

89 
	mn2
, 
	mn2cou¡
;

90 
	mt1
, 
	mt1timî
;

91 
	mt2
, 
	mt2timî
;

92 
	mt3
, 
	mt3timî
;

93 
	midÀ
, 
	midÀtimî
;

94 
	m°©e
;

95 
	mrcv_q
, 
	m¢d_q
;

98 
	sax25_öfo_°ru˘
 {

99 
	mn2
, 
	mn2cou¡
;

100 
	mt1
, 
	mt1timî
;

101 
	mt2
, 
	mt2timî
;

102 
	mt3
, 
	mt3timî
;

103 
	midÀ
, 
	midÀtimî
;

104 
	m°©e
;

105 
	mrcv_q
, 
	m¢d_q
;

106 
	mvs
, 
	mvr
, 
	mva
, 
	mvs_max
;

107 
	m∑˛í
;

108 
	mwödow
;

111 
	sax25_fwd_°ru˘
 {

112 
ax25_addªss
 
	mp‹t_‰om
;

113 
ax25_addªss
 
	mp‹t_to
;

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/errqueue.h

1 #i‚de‡
_LINUX_ERRQUEUE_H


2 
	#_LINUX_ERRQUEUE_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssock_exãnded_îr
 {

7 
__u32
 
	mì_î∫o
;

8 
__u8
 
	mì_‹igö
;

9 
__u8
 
	mì_ty≥
;

10 
__u8
 
	mì_code
;

11 
__u8
 
	mì_∑d
;

12 
__u32
 
	mì_öfo
;

13 
__u32
 
	mì_d©a
;

16 
	#SO_EE_ORIGIN_NONE
 0

	)

17 
	#SO_EE_ORIGIN_LOCAL
 1

	)

18 
	#SO_EE_ORIGIN_ICMP
 2

	)

19 
	#SO_EE_ORIGIN_ICMP6
 3

	)

20 
	#SO_EE_ORIGIN_TXSTATUS
 4

	)

21 
	#SO_EE_ORIGIN_TIMESTAMPING
 
SO_EE_ORIGIN_TXSTATUS


	)

23 
	#SO_EE_OFFENDER
(
ì
Ë((
sockaddr
*)(”e)+1))

	)

32 
	sscm_time°ampög
 {

33 
time•ec
 
	mts
[3];

41 
	mSCM_TSTAMP_SND
,

42 
	mSCM_TSTAMP_SCHED
,

43 
	mSCM_TSTAMP_ACK
,

	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/bpf_comm⁄.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

36 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

37 
	#BPF_A
 0x10

	)

40 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

41 
	#BPF_TAX
 0x00

	)

42 
	#BPF_TXA
 0x80

	)

47 #i‚de‡
BPF_STMT


48 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

50 #i‚de‡
BPF_JUMP


51 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

57 
	#BPF_MEMWORDS
 16

	)

64 
	#SKF_AD_OFF
 (-0x1000)

	)

65 
	#SKF_AD_PROTOCOL
 0

	)

66 
	#SKF_AD_PKTTYPE
 4

	)

67 
	#SKF_AD_IFINDEX
 8

	)

68 
	#SKF_AD_NLATTR
 12

	)

69 
	#SKF_AD_NLATTR_NEST
 16

	)

70 
	#SKF_AD_MARK
 20

	)

71 
	#SKF_AD_QUEUE
 24

	)

72 
	#SKF_AD_HATYPE
 28

	)

73 
	#SKF_AD_RXHASH
 32

	)

74 
	#SKF_AD_CPU
 36

	)

75 
	#SKF_AD_ALU_XOR_X
 40

	)

76 
	#SKF_AD_VLAN_TAG
 44

	)

77 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

78 
	#SKF_AD_PAY_OFFSET
 52

	)

79 
	#SKF_AD_RANDOM
 56

	)

80 
	#SKF_AD_VLAN_TPID
 60

	)

81 
	#SKF_AD_MAX
 64

	)

83 
	#SKF_NET_OFF
 (-0x100000)

	)

84 
	#SKF_LL_OFF
 (-0x200000)

	)

86 
	#BPF_NET_OFF
 
SKF_NET_OFF


	)

87 
	#BPF_LL_OFF
 
SKF_LL_OFF


	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

12 
	~<löux/limôs.h
>

13 
	~<löux/io˘l.h
>

14 
	~<löux/ty≥s.h
>

27 #unde‡
NR_OPEN


28 
	#INR_OPEN_CUR
 1024

	)

29 
	#INR_OPEN_MAX
 4096

	)

31 
	#BLOCK_SIZE_BITS
 10

	)

32 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

34 
	#SEEK_SET
 0

	)

35 
	#SEEK_CUR
 1

	)

36 
	#SEEK_END
 2

	)

37 
	#SEEK_DATA
 3

	)

38 
	#SEEK_HOLE
 4

	)

39 
	#SEEK_MAX
 
SEEK_HOLE


	)

41 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

42 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

43 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

45 
	sfûe_˛⁄e_ønge
 {

46 
__s64
 
	m§c_fd
;

47 
__u64
 
	m§c_off£t
;

48 
__u64
 
	m§c_Àngth
;

49 
__u64
 
	mde°_off£t
;

52 
	sf°rim_ønge
 {

53 
__u64
 
	m°¨t
;

54 
__u64
 
	mÀn
;

55 
__u64
 
	mmöÀn
;

59 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

60 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

63 
	sfûe_dedu≥_ønge_öfo
 {

64 
__s64
 
	mde°_fd
;

65 
__u64
 
	mde°_off£t
;

66 
__u64
 
	mbyãs_dedu≥d
;

73 
__s32
 
	m°©us
;

74 
__u32
 
	mª£rved
;

78 
	sfûe_dedu≥_ønge
 {

79 
__u64
 
	m§c_off£t
;

80 
__u64
 
	m§c_Àngth
;

81 
__u16
 
	mde°_cou¡
;

82 
__u16
 
	mª£rved1
;

83 
__u32
 
	mª£rved2
;

84 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

88 
	sfûes_°©_°ru˘
 {

89 
	mƒ_fûes
;

90 
	mƒ_‰ì_fûes
;

91 
	mmax_fûes
;

94 
	söodes_°©_t
 {

95 
	mƒ_öodes
;

96 
	mƒ_unu£d
;

97 
	mdummy
[5];

101 
	#NR_FILE
 8192

	)

107 
	#MS_RDONLY
 1

	)

108 
	#MS_NOSUID
 2

	)

109 
	#MS_NODEV
 4

	)

110 
	#MS_NOEXEC
 8

	)

111 
	#MS_SYNCHRONOUS
 16

	)

112 
	#MS_REMOUNT
 32

	)

113 
	#MS_MANDLOCK
 64

	)

114 
	#MS_DIRSYNC
 128

	)

115 
	#MS_NOATIME
 1024

	)

116 
	#MS_NODIRATIME
 2048

	)

117 
	#MS_BIND
 4096

	)

118 
	#MS_MOVE
 8192

	)

119 
	#MS_REC
 16384

	)

120 
	#MS_VERBOSE
 32768

	)

122 
	#MS_SILENT
 32768

	)

123 
	#MS_POSIXACL
 (1<<16Ë

	)

124 
	#MS_UNBINDABLE
 (1<<17Ë

	)

125 
	#MS_PRIVATE
 (1<<18Ë

	)

126 
	#MS_SLAVE
 (1<<19Ë

	)

127 
	#MS_SHARED
 (1<<20Ë

	)

128 
	#MS_RELATIME
 (1<<21Ë

	)

129 
	#MS_KERNMOUNT
 (1<<22Ë

	)

130 
	#MS_I_VERSION
 (1<<23Ë

	)

131 
	#MS_STRICTATIME
 (1<<24Ë

	)

132 
	#MS_LAZYTIME
 (1<<25Ë

	)

135 
	#MS_NOSEC
 (1<<28)

	)

136 
	#MS_BORN
 (1<<29)

	)

137 
	#MS_ACTIVE
 (1<<30)

	)

138 
	#MS_NOUSER
 (1<<31)

	)

143 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

144 
MS_LAZYTIME
)

	)

149 
	#MS_MGC_VAL
 0xC0ED0000

	)

150 
	#MS_MGC_MSK
 0xffff0000

	)

155 
	sfsx©å
 {

156 
__u32
 
	mfsx_xÊags
;

157 
__u32
 
	mfsx_extsize
;

158 
__u32
 
	mfsx_√xã¡s
;

159 
__u32
 
	mfsx_¥ojid
;

160 
	mfsx_∑d
[12];

166 
	#FS_XFLAG_REALTIME
 0x00000001

	)

167 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

168 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

169 
	#FS_XFLAG_APPEND
 0x00000010

	)

170 
	#FS_XFLAG_SYNC
 0x00000020

	)

171 
	#FS_XFLAG_NOATIME
 0x00000040

	)

172 
	#FS_XFLAG_NODUMP
 0x00000080

	)

173 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

174 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

175 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

176 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

177 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

178 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

179 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

180 
	#FS_XFLAG_DAX
 0x00008000

	)

181 
	#FS_XFLAG_HASATTR
 0x80000000

	)

186 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

187 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

188 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

189 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

190 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

191 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

192 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

193 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

194 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

195 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

196 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

197 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

199 
	#BLKPG
 
	`_IO
(0x12,105)

	)

203 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

204 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

209 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

210 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

211 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

212 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

213 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

214 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

215 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

216 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

217 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

218 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

219 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

220 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

221 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

222 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

223 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

224 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

225 
	#BLKDAXGET
 
	`_IO
(0x12,129)

	)

227 
	#BMAP_IOCTL
 1

	)

228 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

229 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

230 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

231 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

232 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

233 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

234 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

235 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

237 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

238 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

239 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

240 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

241 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

242 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

243 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

244 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

245 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

246 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

247 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

253 
	#FS_KEY_DESCRIPTOR_SIZE
 8

	)

255 
	sfs¸y±_pﬁicy
 {

256 
__u8
 
	mvîsi⁄
;

257 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

258 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

259 
__u8
 
	mÊags
;

260 
__u8
 
	mma°î_key_des¸ùt‹
[
FS_KEY_DESCRIPTOR_SIZE
];

261 } 
__©åibuã__
((
∑cked
));

263 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

264 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

265 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

287 
	#FS_SECRM_FL
 0x00000001

	)

288 
	#FS_UNRM_FL
 0x00000002

	)

289 
	#FS_COMPR_FL
 0x00000004

	)

290 
	#FS_SYNC_FL
 0x00000008

	)

291 
	#FS_IMMUTABLE_FL
 0x00000010

	)

292 
	#FS_APPEND_FL
 0x00000020

	)

293 
	#FS_NODUMP_FL
 0x00000040

	)

294 
	#FS_NOATIME_FL
 0x00000080

	)

296 
	#FS_DIRTY_FL
 0x00000100

	)

297 
	#FS_COMPRBLK_FL
 0x00000200

	)

298 
	#FS_NOCOMP_FL
 0x00000400

	)

300 
	#FS_ENCRYPT_FL
 0x00000800

	)

301 
	#FS_BTREE_FL
 0x00001000

	)

302 
	#FS_INDEX_FL
 0x00001000

	)

303 
	#FS_IMAGIC_FL
 0x00002000

	)

304 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

305 
	#FS_NOTAIL_FL
 0x00008000

	)

306 
	#FS_DIRSYNC_FL
 0x00010000

	)

307 
	#FS_TOPDIR_FL
 0x00020000

	)

308 
	#FS_HUGE_FILE_FL
 0x00040000

	)

309 
	#FS_EXTENT_FL
 0x00080000

	)

310 
	#FS_EA_INODE_FL
 0x00200000

	)

311 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

312 
	#FS_NOCOW_FL
 0x00800000

	)

313 
	#FS_INLINE_DATA_FL
 0x10000000

	)

314 
	#FS_PROJINHERIT_FL
 0x20000000

	)

315 
	#FS_RESERVED_FL
 0x80000000

	)

317 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

318 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

321 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

322 
	#SYNC_FILE_RANGE_WRITE
 2

	)

323 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

326 
	#RWF_HIPRI
 0x00000001

	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/sockë.h
>

27 #i‡
__UAPI_DEF_IF_IFNAMSIZ


28 
	#IFNAMSIZ
 16

	)

30 
	#IFALIASZ
 256

	)

31 
	~<löux/hdlc/io˘l.h
>

34 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 != 0 && \

35 
	g__UAPI_DEF_IF_NET_DEVICE_FLAGS
 != 0

76 
	e√t_devi˚_Êags
 {

78 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


79 
IFF_UP
 = 1<<0,

80 
	mIFF_BROADCAST
 = 1<<1,

81 
	mIFF_DEBUG
 = 1<<2,

82 
	mIFF_LOOPBACK
 = 1<<3,

83 
	mIFF_POINTOPOINT
 = 1<<4,

84 
	mIFF_NOTRAILERS
 = 1<<5,

85 
	mIFF_RUNNING
 = 1<<6,

86 
	mIFF_NOARP
 = 1<<7,

87 
	mIFF_PROMISC
 = 1<<8,

88 
	mIFF_ALLMULTI
 = 1<<9,

89 
	mIFF_MASTER
 = 1<<10,

90 
	mIFF_SLAVE
 = 1<<11,

91 
	mIFF_MULTICAST
 = 1<<12,

92 
	mIFF_PORTSEL
 = 1<<13,

93 
	mIFF_AUTOMEDIA
 = 1<<14,

94 
	mIFF_DYNAMIC
 = 1<<15,

96 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


97 
	mIFF_LOWER_UP
 = 1<<16,

98 
	mIFF_DORMANT
 = 1<<17,

99 
	mIFF_ECHO
 = 1<<18,

105 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


106 
	#IFF_UP
 
IFF_UP


	)

107 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

108 
	#IFF_DEBUG
 
IFF_DEBUG


	)

109 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

110 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

111 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

112 
	#IFF_RUNNING
 
IFF_RUNNING


	)

113 
	#IFF_NOARP
 
IFF_NOARP


	)

114 
	#IFF_PROMISC
 
IFF_PROMISC


	)

115 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

116 
	#IFF_MASTER
 
IFF_MASTER


	)

117 
	#IFF_SLAVE
 
IFF_SLAVE


	)

118 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

119 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

120 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

121 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

124 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


125 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

126 
	#IFF_DORMANT
 
IFF_DORMANT


	)

127 
	#IFF_ECHO
 
IFF_ECHO


	)

130 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

131 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

133 
	#IF_GET_IFACE
 0x0001

	)

134 
	#IF_GET_PROTO
 0x0002

	)

137 
	#IF_IFACE_V35
 0x1000

	)

138 
	#IF_IFACE_V24
 0x1001

	)

139 
	#IF_IFACE_X21
 0x1002

	)

140 
	#IF_IFACE_T1
 0x1003

	)

141 
	#IF_IFACE_E1
 0x1004

	)

142 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

143 
	#IF_IFACE_X21D
 0x1006

	)

146 
	#IF_PROTO_HDLC
 0x2000

	)

147 
	#IF_PROTO_PPP
 0x2001

	)

148 
	#IF_PROTO_CISCO
 0x2002

	)

149 
	#IF_PROTO_FR
 0x2003

	)

150 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

151 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

152 
	#IF_PROTO_X25
 0x2006

	)

153 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

154 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

155 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

156 
	#IF_PROTO_FR_PVC
 0x200A

	)

157 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

158 
	#IF_PROTO_RAW
 0x200C

	)

162 
	mIF_OPER_UNKNOWN
,

163 
	mIF_OPER_NOTPRESENT
,

164 
	mIF_OPER_DOWN
,

165 
	mIF_OPER_LOWERLAYERDOWN
,

166 
	mIF_OPER_TESTING
,

167 
	mIF_OPER_DORMANT
,

168 
	mIF_OPER_UP
,

173 
	mIF_LINK_MODE_DEFAULT
,

174 
	mIF_LINK_MODE_DORMANT
,

188 #i‡
__UAPI_DEF_IF_IFMAP


189 
	sifm≠
 {

190 
	mmem_°¨t
;

191 
	mmem_íd
;

192 
	mba£_addr
;

193 
	múq
;

194 
	mdma
;

195 
	mp‹t
;

200 
	sif_£âögs
 {

201 
	mty≥
;

202 
	msize
;

205 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

206 
cisco_¥Ÿo
 *
	mcisco
;

207 
‰_¥Ÿo
 *
	m‰
;

208 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

209 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

212 
sync_£rül_£âögs
 *
	msync
;

213 
ã1_£âögs
 *
	mã1
;

214 } 
	mifs_ifsu
;

225 #i‡
__UAPI_DEF_IF_IFREQ


226 
	si‰eq
 {

227 
	#IFHWADDRLEN
 6

	)

230 
	mi‰n_«me
[
IFNAMSIZ
];

231 } 
	mi‰_i‰n
;

234 
sockaddr
 
	mi‰u_addr
;

235 
sockaddr
 
	mi‰u_d°addr
;

236 
sockaddr
 
	mi‰u_brﬂdaddr
;

237 
sockaddr
 
	mi‰u_√tmask
;

238 
sockaddr
 
	mi‰u_hwaddr
;

239 
	mi‰u_Êags
;

240 
	mi‰u_ivÆue
;

241 
	mi‰u_mtu
;

242 
ifm≠
 
	mi‰u_m≠
;

243 
	mi‰u_¶ave
[
IFNAMSIZ
];

244 
	mi‰u_√w«me
[
IFNAMSIZ
];

245 * 
	mi‰u_d©a
;

246 
if_£âögs
 
	mi‰u_£âögs
;

247 } 
	mi‰_i‰u
;

251 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

252 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

253 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

254 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

255 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

256 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

257 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

258 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

259 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

260 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

261 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

262 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

263 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

264 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

265 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

266 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

267 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

277 #i‡
__UAPI_DEF_IF_IFCONF


278 
	sifc⁄f
 {

279 
	mifc_Àn
;

281 *
	mifcu_buf
;

282 
i‰eq
 *
	mifcu_ªq
;

283 } 
	mifc_ifcu
;

287 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

288 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

90 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

92 
	#ARPHRD_PHONET
 820

	)

93 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_IP6GRE
 823

	)

96 
	#ARPHRD_NETLINK
 824

	)

97 
	#ARPHRD_6LOWPAN
 825

	)

99 
	#ARPHRD_VOID
 0xFFFF

	)

100 
	#ARPHRD_NONE
 0xFFFE

	)

103 
	#ARPOP_REQUEST
 1

	)

104 
	#ARPOP_REPLY
 2

	)

105 
	#ARPOP_RREQUEST
 3

	)

106 
	#ARPOP_RREPLY
 4

	)

107 
	#ARPOP_InREQUEST
 8

	)

108 
	#ARPOP_InREPLY
 9

	)

109 
	#ARPOP_NAK
 10

	)

113 
	s¨¥eq
 {

114 
sockaddr
 
	m¨p_∑
;

115 
sockaddr
 
	m¨p_ha
;

116 
	m¨p_Êags
;

117 
sockaddr
 
	m¨p_√tmask
;

118 
	m¨p_dev
[16];

121 
	s¨¥eq_ﬁd
 {

122 
sockaddr
 
	m¨p_∑
;

123 
sockaddr
 
	m¨p_ha
;

124 
	m¨p_Êags
;

125 
sockaddr
 
	m¨p_√tmask
;

129 
	#ATF_COM
 0x02

	)

130 
	#ATF_PERM
 0x04

	)

131 
	#ATF_PUBL
 0x08

	)

132 
	#ATF_USETRAILERS
 0x10

	)

133 
	#ATF_NETMASK
 0x20

	)

135 
	#ATF_DONTPUB
 0x40

	)

141 
	s¨phdr
 {

142 
__be16
 
	m¨_hrd
;

143 
__be16
 
	m¨_¥o
;

144 
	m¨_h 
;

145 
	m¨_∂n
;

146 
__be16
 
	m¨_›
;

152 
	m¨_sha
[
ETH_ALEN
];

153 
	m¨_sù
[4];

154 
	m¨_tha
[
ETH_ALEN
];

155 
	m¨_tù
[4];

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_TSN
 0x22F0

	)

46 
	#ETH_P_IP
 0x0800

	)

47 
	#ETH_P_X25
 0x0805

	)

48 
	#ETH_P_ARP
 0x0806

	)

49 
	#ETH_P_BPQ
 0x08FF

	)

50 
	#ETH_P_IEEEPUP
 0x0a00

	)

51 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

52 
	#ETH_P_BATMAN
 0x4305

	)

53 
	#ETH_P_DEC
 0x6000

	)

54 
	#ETH_P_DNA_DL
 0x6001

	)

55 
	#ETH_P_DNA_RC
 0x6002

	)

56 
	#ETH_P_DNA_RT
 0x6003

	)

57 
	#ETH_P_LAT
 0x6004

	)

58 
	#ETH_P_DIAG
 0x6005

	)

59 
	#ETH_P_CUST
 0x6006

	)

60 
	#ETH_P_SCA
 0x6007

	)

61 
	#ETH_P_TEB
 0x6558

	)

62 
	#ETH_P_RARP
 0x8035

	)

63 
	#ETH_P_ATALK
 0x809B

	)

64 
	#ETH_P_AARP
 0x80F3

	)

65 
	#ETH_P_8021Q
 0x8100

	)

66 
	#ETH_P_IPX
 0x8137

	)

67 
	#ETH_P_IPV6
 0x86DD

	)

68 
	#ETH_P_PAUSE
 0x8808

	)

69 
	#ETH_P_SLOW
 0x8809

	)

70 
	#ETH_P_WCCP
 0x883E

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_PPP_DISC
 0x8863

	)

76 
	#ETH_P_PPP_SES
 0x8864

	)

77 
	#ETH_P_LINK_CTL
 0x886¯

	)

78 
	#ETH_P_ATMFATE
 0x8884

	)

81 
	#ETH_P_PAE
 0x888E

	)

82 
	#ETH_P_AOE
 0x88A2

	)

83 
	#ETH_P_8021AD
 0x88A8

	)

84 
	#ETH_P_802_EX1
 0x88B5

	)

85 
	#ETH_P_TIPC
 0x88CA

	)

86 
	#ETH_P_MACSEC
 0x88E5

	)

87 
	#ETH_P_8021AH
 0x88E7

	)

88 
	#ETH_P_MVRP
 0x88F5

	)

89 
	#ETH_P_1588
 0x88F7

	)

90 
	#ETH_P_PRP
 0x88FB

	)

91 
	#ETH_P_FCOE
 0x8906

	)

92 
	#ETH_P_TDLS
 0x890D

	)

93 
	#ETH_P_FIP
 0x8914

	)

94 
	#ETH_P_80221
 0x8917

	)

95 
	#ETH_P_LOOPBACK
 0x9000

	)

96 
	#ETH_P_QINQ1
 0x9100

	)

97 
	#ETH_P_QINQ2
 0x9200

	)

98 
	#ETH_P_QINQ3
 0x9300

	)

99 
	#ETH_P_EDSA
 0xDADA

	)

100 
	#ETH_P_AF_IUCV
 0xFBFB

	)

102 
	#ETH_P_802_3_MIN
 0x0600

	)

109 
	#ETH_P_802_3
 0x0001

	)

110 
	#ETH_P_AX25
 0x0002

	)

111 
	#ETH_P_ALL
 0x0003

	)

112 
	#ETH_P_802_2
 0x0004

	)

113 
	#ETH_P_SNAP
 0x0005

	)

114 
	#ETH_P_DDCMP
 0x0006

	)

115 
	#ETH_P_WAN_PPP
 0x0007

	)

116 
	#ETH_P_PPP_MP
 0x0008

	)

117 
	#ETH_P_LOCALTALK
 0x0009

	)

118 
	#ETH_P_CAN
 0x000C

	)

119 
	#ETH_P_CANFD
 0x000D

	)

120 
	#ETH_P_PPPTALK
 0x0010

	)

121 
	#ETH_P_TR_802_2
 0x0011

	)

122 
	#ETH_P_MOBITEX
 0x0015

	)

123 
	#ETH_P_CONTROL
 0x0016

	)

124 
	#ETH_P_IRDA
 0x0017

	)

125 
	#ETH_P_ECONET
 0x0018

	)

126 
	#ETH_P_HDLC
 0x0019

	)

127 
	#ETH_P_ARCNET
 0x001A

	)

128 
	#ETH_P_DSA
 0x001B

	)

129 
	#ETH_P_TRAILER
 0x001C

	)

130 
	#ETH_P_PHONET
 0x00F5

	)

131 
	#ETH_P_IEEE802154
 0x00F6

	)

132 
	#ETH_P_CAIF
 0x00F7

	)

133 
	#ETH_P_XDSA
 0x00F8

	)

139 
	sëhhdr
 {

140 
	mh_de°
[
ETH_ALEN
];

141 
	mh_sour˚
[
ETH_ALEN
];

142 
__be16
 
	mh_¥Ÿo
;

143 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_fddi.h

24 #i‚de‡
_LINUX_IF_FDDI_H


25 
	#_LINUX_IF_FDDI_H


	)

27 
	~<löux/ty≥s.h
>

33 
	#FDDI_K_ALEN
 6

	)

34 
	#FDDI_K_8022_HLEN
 16

	)

35 
	#FDDI_K_SNAP_HLEN
 21

	)

36 
	#FDDI_K_8022_ZLEN
 16

	)

38 
	#FDDI_K_SNAP_ZLEN
 21

	)

40 
	#FDDI_K_8022_DLEN
 4475

	)

41 
	#FDDI_K_SNAP_DLEN
 4470

	)

42 
	#FDDI_K_LLC_ZLEN
 13

	)

43 
	#FDDI_K_LLC_LEN
 4491

	)

44 
	#FDDI_K_OUI_LEN
 3

	)

48 
	#FDDI_FC_K_VOID
 0x00

	)

49 
	#FDDI_FC_K_NON_RESTRICTED_TOKEN
 0x80

	)

50 
	#FDDI_FC_K_RESTRICTED_TOKEN
 0xC0

	)

51 
	#FDDI_FC_K_SMT_MIN
 0x41

	)

52 
	#FDDI_FC_K_SMT_MAX
 0x4F

	)

53 
	#FDDI_FC_K_MAC_MIN
 0xC1

	)

54 
	#FDDI_FC_K_MAC_MAX
 0xCF

	)

55 
	#FDDI_FC_K_ASYNC_LLC_MIN
 0x50

	)

56 
	#FDDI_FC_K_ASYNC_LLC_DEF
 0x54

	)

57 
	#FDDI_FC_K_ASYNC_LLC_MAX
 0x5F

	)

58 
	#FDDI_FC_K_SYNC_LLC_MIN
 0xD0

	)

59 
	#FDDI_FC_K_SYNC_LLC_MAX
 0xD7

	)

60 
	#FDDI_FC_K_IMPLEMENTOR_MIN
 0x60

	)

61 
	#FDDI_FC_K_IMPLEMENTOR_MAX
 0x6F

	)

62 
	#FDDI_FC_K_RESERVED_MIN
 0x70

	)

63 
	#FDDI_FC_K_RESERVED_MAX
 0x7F

	)

66 
	#FDDI_EXTENDED_SAP
 0xAA

	)

67 
	#FDDI_UI_CMD
 0x03

	)

70 
	sfddi_8022_1_hdr
 {

71 
__u8
 
	mdßp
;

72 
__u8
 
	msßp
;

73 
__u8
 
	m˘æ
;

74 } 
__©åibuã__
((
∑cked
));

77 
	sfddi_8022_2_hdr
 {

78 
__u8
 
	mdßp
;

79 
__u8
 
	msßp
;

80 
__u8
 
	m˘æ_1
;

81 
__u8
 
	m˘æ_2
;

82 } 
__©åibuã__
((
∑cked
));

85 
	sfddi_¢≠_hdr
 {

86 
__u8
 
	mdßp
;

87 
__u8
 
	msßp
;

88 
__u8
 
	m˘æ
;

89 
__u8
 
	moui
[
FDDI_K_OUI_LEN
];

90 
__be16
 
	mëhîty≥
;

91 } 
__©åibuã__
((
∑cked
));

94 
	sfddihdr
 {

95 
__u8
 
	mfc
;

96 
__u8
 
	mdaddr
[
FDDI_K_ALEN
];

97 
__u8
 
	mßddr
[
FDDI_K_ALEN
];

99 
fddi_8022_1_hdr
 
	mŒc_8022_1
;

100 
fddi_8022_2_hdr
 
	mŒc_8022_2
;

101 
fddi_¢≠_hdr
 
	mŒc_¢≠
;

102 } 
	mhdr
;

103 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

29 
	#PACKET_LOOPBACK
 5

	)

30 
	#PACKET_USER
 6

	)

31 
	#PACKET_KERNEL
 7

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_VNET_HDR
 15

	)

52 
	#PACKET_TX_TIMESTAMP
 16

	)

53 
	#PACKET_TIMESTAMP
 17

	)

54 
	#PACKET_FANOUT
 18

	)

55 
	#PACKET_TX_HAS_OFF
 19

	)

56 
	#PACKET_QDISC_BYPASS
 20

	)

57 
	#PACKET_ROLLOVER_STATS
 21

	)

58 
	#PACKET_FANOUT_DATA
 22

	)

60 
	#PACKET_FANOUT_HASH
 0

	)

61 
	#PACKET_FANOUT_LB
 1

	)

62 
	#PACKET_FANOUT_CPU
 2

	)

63 
	#PACKET_FANOUT_ROLLOVER
 3

	)

64 
	#PACKET_FANOUT_RND
 4

	)

65 
	#PACKET_FANOUT_QM
 5

	)

66 
	#PACKET_FANOUT_CBPF
 6

	)

67 
	#PACKET_FANOUT_EBPF
 7

	)

68 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

69 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

71 
	sçackë_°©s
 {

72 
	mç_∑ckës
;

73 
	mç_dr›s
;

76 
	sçackë_°©s_v3
 {

77 
	mç_∑ckës
;

78 
	mç_dr›s
;

79 
	mç_‰ìze_q_˙t
;

82 
	sçackë_rﬁlovî_°©s
 {

83 
__Æig√d_u64
 
	mç_Æl
;

84 
__Æig√d_u64
 
	mç_huge
;

85 
__Æig√d_u64
 
	mç_Áûed
;

88 
	uçackë_°©s_u
 {

89 
çackë_°©s
 
	m°©s1
;

90 
çackë_°©s_v3
 
	m°©s3
;

93 
	sçackë_auxd©a
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u16
 
	mç_vœn_tci
;

100 
__u16
 
	mç_vœn_çid
;

104 
	#TP_STATUS_KERNEL
 0

	)

105 
	#TP_STATUS_USER
 (1 << 0)

	)

106 
	#TP_STATUS_COPY
 (1 << 1)

	)

107 
	#TP_STATUS_LOSING
 (1 << 2)

	)

108 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

109 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

110 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

111 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

112 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

115 
	#TP_STATUS_AVAILABLE
 0

	)

116 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

117 
	#TP_STATUS_SENDING
 (1 << 1)

	)

118 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

121 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

122 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

123 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

126 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

128 
	sçackë_hdr
 {

129 
	mç_°©us
;

130 
	mç_Àn
;

131 
	mç_¢≠Àn
;

132 
	mç_mac
;

133 
	mç_√t
;

134 
	mç_£c
;

135 
	mç_u£c
;

138 
	#TPACKET_ALIGNMENT
 16

	)

139 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

140 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

142 
	sçackë2_hdr
 {

143 
__u32
 
	mç_°©us
;

144 
__u32
 
	mç_Àn
;

145 
__u32
 
	mç_¢≠Àn
;

146 
__u16
 
	mç_mac
;

147 
__u16
 
	mç_√t
;

148 
__u32
 
	mç_£c
;

149 
__u32
 
	mç_n£c
;

150 
__u16
 
	mç_vœn_tci
;

151 
__u16
 
	mç_vœn_çid
;

152 
__u8
 
	mç_∑ddög
[4];

155 
	sçackë_hdr_v¨ü¡1
 {

156 
__u32
 
	mç_rxhash
;

157 
__u32
 
	mç_vœn_tci
;

158 
__u16
 
	mç_vœn_çid
;

159 
__u16
 
	mç_∑ddög
;

162 
	sçackë3_hdr
 {

163 
__u32
 
	mç_√xt_off£t
;

164 
__u32
 
	mç_£c
;

165 
__u32
 
	mç_n£c
;

166 
__u32
 
	mç_¢≠Àn
;

167 
__u32
 
	mç_Àn
;

168 
__u32
 
	mç_°©us
;

169 
__u16
 
	mç_mac
;

170 
__u16
 
	mç_√t
;

173 
çackë_hdr_v¨ü¡1
 
	mhv1
;

175 
__u8
 
	mç_∑ddög
[8];

178 
	sçackë_bd_ts
 {

179 
	mts_£c
;

181 
	mts_u£c
;

182 
	mts_n£c
;

186 
	sçackë_hdr_v1
 {

187 
__u32
 
	mblock_°©us
;

188 
__u32
 
	mnum_pkts
;

189 
__u32
 
	moff£t_to_fú°_pkt
;

194 
__u32
 
	mblk_Àn
;

205 
__Æig√d_u64
 
	m£q_num
;

232 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

235 
	uçackë_bd_hódî_u
 {

236 
çackë_hdr_v1
 
	mbh1
;

239 
	sçackë_block_desc
 {

240 
__u32
 
	mvîsi⁄
;

241 
__u32
 
	moff£t_to_¥iv
;

242 
çackë_bd_hódî_u
 
	mhdr
;

245 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

246 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

248 
	eçackë_vîsi⁄s
 {

249 
	mTPACKET_V1
,

250 
	mTPACKET_V2
,

251 
	mTPACKET_V3


267 
	sçackë_ªq
 {

268 
	mç_block_size
;

269 
	mç_block_ƒ
;

270 
	mç_‰ame_size
;

271 
	mç_‰ame_ƒ
;

274 
	sçackë_ªq3
 {

275 
	mç_block_size
;

276 
	mç_block_ƒ
;

277 
	mç_‰ame_size
;

278 
	mç_‰ame_ƒ
;

279 
	mç_ªtúe_blk_tov
;

280 
	mç_sizeof_¥iv
;

281 
	mç_„©uª_ªq_w‹d
;

284 
	uçackë_ªq_u
 {

285 
çackë_ªq
 
	mªq
;

286 
çackë_ªq3
 
	mªq3
;

289 
	s∑ckë_mªq
 {

290 
	mmr_ifödex
;

291 
	mmr_ty≥
;

292 
	mmr_Æí
;

293 
	mmr_addªss
[8];

296 
	#PACKET_MR_MULTICAST
 0

	)

297 
	#PACKET_MR_PROMISC
 1

	)

298 
	#PACKET_MR_ALLMULTI
 2

	)

299 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_plip.h

11 #i‚de‡
_LINUX_IF_PLIP_H


12 
	#_LINUX_IF_PLIP_H


	)

14 
	~<löux/sockios.h
>

16 
	#SIOCDEVPLIP
 
SIOCDEVPRIVATE


	)

18 
	s∂ùc⁄f
 {

19 
	mpcmd
;

20 
	mnibbÀ
;

21 
	måiggî
;

24 
	#PLIP_GET_TIMEOUT
 0x1

	)

25 
	#PLIP_SET_TIMEOUT
 0x2

	)

	@/usr/include/linux/if_slip.h

8 #i‚de‡
__LINUX_SLIP_H


9 
	#__LINUX_SLIP_H


	)

11 
	#SL_MODE_SLIP
 0

	)

12 
	#SL_MODE_CSLIP
 1

	)

13 
	#SL_MODE_KISS
 4

	)

15 
	#SL_OPT_SIXBIT
 2

	)

16 
	#SL_OPT_ADAPTIVE
 8

	)

22 
	#SIOCSKEEPALIVE
 (
SIOCDEVPRIVATE
Ë

	)

23 
	#SIOCGKEEPALIVE
 (
SIOCDEVPRIVATE
+1Ë

	)

24 
	#SIOCSOUTFILL
 (
SIOCDEVPRIVATE
+2Ë

	)

25 
	#SIOCGOUTFILL
 (
SIOCDEVPRIVATE
+3Ë

	)

26 
	#SIOCSLEASE
 (
SIOCDEVPRIVATE
+4Ë

	)

27 
	#SIOCGLEASE
 (
SIOCDEVPRIVATE
+5Ë

	)

	@/usr/include/linux/if_tunnel.h

1 #i‚de‡
_IF_TUNNEL_H_


2 
	#_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

8 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

9 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

10 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

11 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

12 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

13 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

14 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

15 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

16 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

17 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

18 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

19 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

21 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

22 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

23 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

24 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

25 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

26 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

27 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

28 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

30 
	sù_tu¬ñ_∑rm
 {

31 
	m«me
[
IFNAMSIZ
];

32 
	mlök
;

33 
__be16
 
	mi_Êags
;

34 
__be16
 
	mo_Êags
;

35 
__be32
 
	mi_key
;

36 
__be32
 
	mo_key
;

37 
ùhdr
 
	mùh
;

41 
	mIFLA_IPTUN_UNSPEC
,

42 
	mIFLA_IPTUN_LINK
,

43 
	mIFLA_IPTUN_LOCAL
,

44 
	mIFLA_IPTUN_REMOTE
,

45 
	mIFLA_IPTUN_TTL
,

46 
	mIFLA_IPTUN_TOS
,

47 
	mIFLA_IPTUN_ENCAP_LIMIT
,

48 
	mIFLA_IPTUN_FLOWINFO
,

49 
	mIFLA_IPTUN_FLAGS
,

50 
	mIFLA_IPTUN_PROTO
,

51 
	mIFLA_IPTUN_PMTUDISC
,

52 
	mIFLA_IPTUN_6RD_PREFIX
,

53 
	mIFLA_IPTUN_6RD_RELAY_PREFIX
,

54 
	mIFLA_IPTUN_6RD_PREFIXLEN
,

55 
	mIFLA_IPTUN_6RD_RELAY_PREFIXLEN
,

56 
	mIFLA_IPTUN_ENCAP_TYPE
,

57 
	mIFLA_IPTUN_ENCAP_FLAGS
,

58 
	mIFLA_IPTUN_ENCAP_SPORT
,

59 
	mIFLA_IPTUN_ENCAP_DPORT
,

60 
	m__IFLA_IPTUN_MAX
,

62 
	#IFLA_IPTUN_MAX
 (
__IFLA_IPTUN_MAX
 - 1)

	)

64 
	etu¬ñ_íˇp_ty≥s
 {

65 
	mTUNNEL_ENCAP_NONE
,

66 
	mTUNNEL_ENCAP_FOU
,

67 
	mTUNNEL_ENCAP_GUE
,

70 
	#TUNNEL_ENCAP_FLAG_CSUM
 (1<<0)

	)

71 
	#TUNNEL_ENCAP_FLAG_CSUM6
 (1<<1)

	)

72 
	#TUNNEL_ENCAP_FLAG_REMCSUM
 (1<<2)

	)

75 
	#SIT_ISATAP
 0x0001

	)

77 
	sù_tu¬ñ_¥l
 {

78 
__be32
 
	maddr
;

79 
__u16
 
	mÊags
;

80 
__u16
 
	m__ª£rved
;

81 
__u32
 
	md©Æí
;

82 
__u32
 
	m__ª£rved2
;

87 
	#PRL_DEFAULT
 0x0001

	)

89 
	sù_tu¬ñ_6rd
 {

90 
ö6_addr
 
	m¥efix
;

91 
__be32
 
	mªœy_¥efix
;

92 
__u16
 
	m¥efixÀn
;

93 
__u16
 
	mªœy_¥efixÀn
;

97 
	mIFLA_GRE_UNSPEC
,

98 
	mIFLA_GRE_LINK
,

99 
	mIFLA_GRE_IFLAGS
,

100 
	mIFLA_GRE_OFLAGS
,

101 
	mIFLA_GRE_IKEY
,

102 
	mIFLA_GRE_OKEY
,

103 
	mIFLA_GRE_LOCAL
,

104 
	mIFLA_GRE_REMOTE
,

105 
	mIFLA_GRE_TTL
,

106 
	mIFLA_GRE_TOS
,

107 
	mIFLA_GRE_PMTUDISC
,

108 
	mIFLA_GRE_ENCAP_LIMIT
,

109 
	mIFLA_GRE_FLOWINFO
,

110 
	mIFLA_GRE_FLAGS
,

111 
	mIFLA_GRE_ENCAP_TYPE
,

112 
	mIFLA_GRE_ENCAP_FLAGS
,

113 
	mIFLA_GRE_ENCAP_SPORT
,

114 
	mIFLA_GRE_ENCAP_DPORT
,

115 
	mIFLA_GRE_COLLECT_METADATA
,

116 
	m__IFLA_GRE_MAX
,

119 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

122 
	#VTI_ISVTI
 ((
__be16
)0x0001)

	)

125 
	mIFLA_VTI_UNSPEC
,

126 
	mIFLA_VTI_LINK
,

127 
	mIFLA_VTI_IKEY
,

128 
	mIFLA_VTI_OKEY
,

129 
	mIFLA_VTI_LOCAL
,

130 
	mIFLA_VTI_REMOTE
,

131 
	m__IFLA_VTI_MAX
,

134 
	#IFLA_VTI_MAX
 (
__IFLA_VTI_MAX
 - 1)

	)

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/sockë.h
>

25 #i‡
__UAPI_DEF_IN_IPPROTO


28 
	mIPPROTO_IP
 = 0,

29 
	#IPPROTO_IP
 
IPPROTO_IP


	)

30 
	mIPPROTO_ICMP
 = 1,

31 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

32 
	mIPPROTO_IGMP
 = 2,

33 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

34 
	mIPPROTO_IPIP
 = 4,

35 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

36 
	mIPPROTO_TCP
 = 6,

37 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

38 
	mIPPROTO_EGP
 = 8,

39 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

40 
	mIPPROTO_PUP
 = 12,

41 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

42 
	mIPPROTO_UDP
 = 17,

43 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

44 
	mIPPROTO_IDP
 = 22,

45 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

46 
	mIPPROTO_TP
 = 29,

47 
	#IPPROTO_TP
 
IPPROTO_TP


	)

48 
	mIPPROTO_DCCP
 = 33,

49 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

50 
	mIPPROTO_IPV6
 = 41,

51 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

52 
	mIPPROTO_RSVP
 = 46,

53 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

54 
	mIPPROTO_GRE
 = 47,

55 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

56 
	mIPPROTO_ESP
 = 50,

57 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

58 
	mIPPROTO_AH
 = 51,

59 
	#IPPROTO_AH
 
IPPROTO_AH


	)

60 
	mIPPROTO_MTP
 = 92,

61 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

62 
	mIPPROTO_BEETPH
 = 94,

63 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

64 
	mIPPROTO_ENCAP
 = 98,

65 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

66 
	mIPPROTO_PIM
 = 103,

67 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

68 
	mIPPROTO_COMP
 = 108,

69 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

70 
	mIPPROTO_SCTP
 = 132,

71 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

72 
	mIPPROTO_UDPLITE
 = 136,

73 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

74 
	mIPPROTO_MPLS
 = 137,

75 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

76 
	mIPPROTO_RAW
 = 255,

77 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

78 
	mIPPROTO_MAX


82 #i‡
__UAPI_DEF_IN_ADDR


84 
	sö_addr
 {

85 
__be32
 
	ms_addr
;

89 
	#IP_TOS
 1

	)

90 
	#IP_TTL
 2

	)

91 
	#IP_HDRINCL
 3

	)

92 
	#IP_OPTIONS
 4

	)

93 
	#IP_ROUTER_ALERT
 5

	)

94 
	#IP_RECVOPTS
 6

	)

95 
	#IP_RETOPTS
 7

	)

96 
	#IP_PKTINFO
 8

	)

97 
	#IP_PKTOPTIONS
 9

	)

98 
	#IP_MTU_DISCOVER
 10

	)

99 
	#IP_RECVERR
 11

	)

100 
	#IP_RECVTTL
 12

	)

101 
	#IP_RECVTOS
 13

	)

102 
	#IP_MTU
 14

	)

103 
	#IP_FREEBIND
 15

	)

104 
	#IP_IPSEC_POLICY
 16

	)

105 
	#IP_XFRM_POLICY
 17

	)

106 
	#IP_PASSSEC
 18

	)

107 
	#IP_TRANSPARENT
 19

	)

110 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

113 
	#IP_ORIGDSTADDR
 20

	)

114 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

116 
	#IP_MINTTL
 21

	)

117 
	#IP_NODEFRAG
 22

	)

118 
	#IP_CHECKSUM
 23

	)

119 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

122 
	#IP_PMTUDISC_DONT
 0

	)

123 
	#IP_PMTUDISC_WANT
 1

	)

124 
	#IP_PMTUDISC_DO
 2

	)

125 
	#IP_PMTUDISC_PROBE
 3

	)

130 
	#IP_PMTUDISC_INTERFACE
 4

	)

134 
	#IP_PMTUDISC_OMIT
 5

	)

136 
	#IP_MULTICAST_IF
 32

	)

137 
	#IP_MULTICAST_TTL
 33

	)

138 
	#IP_MULTICAST_LOOP
 34

	)

139 
	#IP_ADD_MEMBERSHIP
 35

	)

140 
	#IP_DROP_MEMBERSHIP
 36

	)

141 
	#IP_UNBLOCK_SOURCE
 37

	)

142 
	#IP_BLOCK_SOURCE
 38

	)

143 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

144 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

145 
	#IP_MSFILTER
 41

	)

146 
	#MCAST_JOIN_GROUP
 42

	)

147 
	#MCAST_BLOCK_SOURCE
 43

	)

148 
	#MCAST_UNBLOCK_SOURCE
 44

	)

149 
	#MCAST_LEAVE_GROUP
 45

	)

150 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

151 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

152 
	#MCAST_MSFILTER
 48

	)

153 
	#IP_MULTICAST_ALL
 49

	)

154 
	#IP_UNICAST_IF
 50

	)

156 
	#MCAST_EXCLUDE
 0

	)

157 
	#MCAST_INCLUDE
 1

	)

160 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

161 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

165 #i‡
__UAPI_DEF_IP_MREQ


166 
	sù_mªq
 {

167 
ö_addr
 
	mimr_mu…üddr
;

168 
ö_addr
 
	mimr_öãrÁ˚
;

171 
	sù_mªqn
 {

172 
ö_addr
 
	mimr_mu…üddr
;

173 
ö_addr
 
	mimr_addªss
;

174 
	mimr_ifödex
;

177 
	sù_mªq_sour˚
 {

178 
__be32
 
	mimr_mu…üddr
;

179 
__be32
 
	mimr_öãrÁ˚
;

180 
__be32
 
	mimr_sour˚addr
;

183 
	sù_msfûãr
 {

184 
__be32
 
	mimsf_mu…üddr
;

185 
__be32
 
	mimsf_öãrÁ˚
;

186 
__u32
 
	mimsf_fmode
;

187 
__u32
 
	mimsf_num§c
;

188 
__be32
 
	mimsf_¶i°
[1];

191 
	#IP_MSFILTER_SIZE
(
num§c
) \

192 ((
ù_msfûãr
Ë- (
__u32
) \

193 + (
num§c
Ë* (
__u32
))

	)

195 
	sgroup_ªq
 {

196 
__u32
 
	mgr_öãrÁ˚
;

197 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

200 
	sgroup_sour˚_ªq
 {

201 
__u32
 
	mg§_öãrÁ˚
;

202 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

203 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

206 
	sgroup_fûãr
 {

207 
__u32
 
	mgf_öãrÁ˚
;

208 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

209 
__u32
 
	mgf_fmode
;

210 
__u32
 
	mgf_num§c
;

211 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

214 
	#GROUP_FILTER_SIZE
(
num§c
) \

215 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

216 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

219 #i‡
__UAPI_DEF_IN_PKTINFO


220 
	sö_pktöfo
 {

221 
	mùi_ifödex
;

222 
ö_addr
 
	mùi_•ec_d°
;

223 
ö_addr
 
	mùi_addr
;

228 #i‡ 
__UAPI_DEF_SOCKADDR_IN


229 
	#__SOCK_SIZE__
 16

	)

230 
	ssockaddr_ö
 {

231 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

232 
__be16
 
	msö_p‹t
;

233 
ö_addr
 
	msö_addr
;

236 
	m__∑d
[
__SOCK_SIZE__
 - () -

237 (Ë- (
ö_addr
)];

239 
	#sö_zîo
 
__∑d


	)

242 #i‡
__UAPI_DEF_IN_CLASS


248 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

249 
	#IN_CLASSA_NET
 0xff000000

	)

250 
	#IN_CLASSA_NSHIFT
 24

	)

251 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

252 
	#IN_CLASSA_MAX
 128

	)

254 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

255 
	#IN_CLASSB_NET
 0xffff0000

	)

256 
	#IN_CLASSB_NSHIFT
 16

	)

257 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

258 
	#IN_CLASSB_MAX
 65536

	)

260 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

261 
	#IN_CLASSC_NET
 0xffffff00

	)

262 
	#IN_CLASSC_NSHIFT
 8

	)

263 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

265 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

266 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

267 
	#IN_MULTICAST_NET
 0xF0000000

	)

269 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

270 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

273 
	#INADDR_ANY
 ((Ë0x00000000)

	)

276 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

279 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

282 
	#IN_LOOPBACKNET
 127

	)

285 
	#INADDR_LOOPBACK
 0x7f000001

	)

286 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

289 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

290 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

291 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

292 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

296 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

88 
	#IPV6_FL_F_REFLECT
 4

	)

89 
	#IPV6_FL_F_REMOTE
 8

	)

91 
	#IPV6_FL_S_NONE
 0

	)

92 
	#IPV6_FL_S_EXCL
 1

	)

93 
	#IPV6_FL_S_PROCESS
 2

	)

94 
	#IPV6_FL_S_USER
 3

	)

95 
	#IPV6_FL_S_ANY
 255

	)

106 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

107 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

110 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

111 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

112 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

113 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

114 
	#IPV6_PRIORITY_BULK
 0x0400

	)

115 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

116 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

117 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

118 
	#IPV6_PRIORITY_8
 0x0800

	)

119 
	#IPV6_PRIORITY_9
 0x0900

	)

120 
	#IPV6_PRIORITY_10
 0x0a00

	)

121 
	#IPV6_PRIORITY_11
 0x0b00

	)

122 
	#IPV6_PRIORITY_12
 0x0c00

	)

123 
	#IPV6_PRIORITY_13
 0x0d00

	)

124 
	#IPV6_PRIORITY_14
 0x0e00

	)

125 
	#IPV6_PRIORITY_15
 0x0f00

	)

130 #i‡
__UAPI_DEF_IPPROTO_V6


131 
	#IPPROTO_HOPOPTS
 0

	)

132 
	#IPPROTO_ROUTING
 43

	)

133 
	#IPPROTO_FRAGMENT
 44

	)

134 
	#IPPROTO_ICMPV6
 58

	)

135 
	#IPPROTO_NONE
 59

	)

136 
	#IPPROTO_DSTOPTS
 60

	)

137 
	#IPPROTO_MH
 135

	)

143 
	#IPV6_TLV_PAD1
 0

	)

144 
	#IPV6_TLV_PADN
 1

	)

145 
	#IPV6_TLV_ROUTERALERT
 5

	)

146 
	#IPV6_TLV_JUMBO
 194

	)

147 
	#IPV6_TLV_HAO
 201

	)

152 #i‡
__UAPI_DEF_IPV6_OPTIONS


153 
	#IPV6_ADDRFORM
 1

	)

154 
	#IPV6_2292PKTINFO
 2

	)

155 
	#IPV6_2292HOPOPTS
 3

	)

156 
	#IPV6_2292DSTOPTS
 4

	)

157 
	#IPV6_2292RTHDR
 5

	)

158 
	#IPV6_2292PKTOPTIONS
 6

	)

159 
	#IPV6_CHECKSUM
 7

	)

160 
	#IPV6_2292HOPLIMIT
 8

	)

161 
	#IPV6_NEXTHOP
 9

	)

162 
	#IPV6_AUTHHDR
 10

	)

163 
	#IPV6_FLOWINFO
 11

	)

165 
	#IPV6_UNICAST_HOPS
 16

	)

166 
	#IPV6_MULTICAST_IF
 17

	)

167 
	#IPV6_MULTICAST_HOPS
 18

	)

168 
	#IPV6_MULTICAST_LOOP
 19

	)

169 
	#IPV6_ADD_MEMBERSHIP
 20

	)

170 
	#IPV6_DROP_MEMBERSHIP
 21

	)

171 
	#IPV6_ROUTER_ALERT
 22

	)

172 
	#IPV6_MTU_DISCOVER
 23

	)

173 
	#IPV6_MTU
 24

	)

174 
	#IPV6_RECVERR
 25

	)

175 
	#IPV6_V6ONLY
 26

	)

176 
	#IPV6_JOIN_ANYCAST
 27

	)

177 
	#IPV6_LEAVE_ANYCAST
 28

	)

180 
	#IPV6_PMTUDISC_DONT
 0

	)

181 
	#IPV6_PMTUDISC_WANT
 1

	)

182 
	#IPV6_PMTUDISC_DO
 2

	)

183 
	#IPV6_PMTUDISC_PROBE
 3

	)

187 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

191 
	#IPV6_PMTUDISC_OMIT
 5

	)

194 
	#IPV6_FLOWLABEL_MGR
 32

	)

195 
	#IPV6_FLOWINFO_SEND
 33

	)

197 
	#IPV6_IPSEC_POLICY
 34

	)

198 
	#IPV6_XFRM_POLICY
 35

	)

199 
	#IPV6_HDRINCL
 36

	)

221 
	#IPV6_RECVPKTINFO
 49

	)

222 
	#IPV6_PKTINFO
 50

	)

223 
	#IPV6_RECVHOPLIMIT
 51

	)

224 
	#IPV6_HOPLIMIT
 52

	)

225 
	#IPV6_RECVHOPOPTS
 53

	)

226 
	#IPV6_HOPOPTS
 54

	)

227 
	#IPV6_RTHDRDSTOPTS
 55

	)

228 
	#IPV6_RECVRTHDR
 56

	)

229 
	#IPV6_RTHDR
 57

	)

230 
	#IPV6_RECVDSTOPTS
 58

	)

231 
	#IPV6_DSTOPTS
 59

	)

232 
	#IPV6_RECVPATHMTU
 60

	)

233 
	#IPV6_PATHMTU
 61

	)

234 
	#IPV6_DONTFRAG
 62

	)

236 
	#IPV6_USE_MIN_MTU
 63

	)

252 
	#IPV6_RECVTCLASS
 66

	)

253 
	#IPV6_TCLASS
 67

	)

266 
	#IPV6_AUTOFLOWLABEL
 70

	)

268 
	#IPV6_ADDR_PREFERENCES
 72

	)

270 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

271 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

272 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

273 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

274 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

275 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

276 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

279 
	#IPV6_MINHOPCOUNT
 73

	)

281 
	#IPV6_ORIGDSTADDR
 74

	)

282 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

283 
	#IPV6_TRANSPARENT
 75

	)

284 
	#IPV6_UNICAST_IF
 76

	)

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

139 
	mIPV4_DEVCONF_FORWARDING
=1,

140 
	mIPV4_DEVCONF_MC_FORWARDING
,

141 
	mIPV4_DEVCONF_PROXY_ARP
,

142 
	mIPV4_DEVCONF_ACCEPT_REDIRECTS
,

143 
	mIPV4_DEVCONF_SECURE_REDIRECTS
,

144 
	mIPV4_DEVCONF_SEND_REDIRECTS
,

145 
	mIPV4_DEVCONF_SHARED_MEDIA
,

146 
	mIPV4_DEVCONF_RP_FILTER
,

147 
	mIPV4_DEVCONF_ACCEPT_SOURCE_ROUTE
,

148 
	mIPV4_DEVCONF_BOOTP_RELAY
,

149 
	mIPV4_DEVCONF_LOG_MARTIANS
,

150 
	mIPV4_DEVCONF_TAG
,

151 
	mIPV4_DEVCONF_ARPFILTER
,

152 
	mIPV4_DEVCONF_MEDIUM_ID
,

153 
	mIPV4_DEVCONF_NOXFRM
,

154 
	mIPV4_DEVCONF_NOPOLICY
,

155 
	mIPV4_DEVCONF_FORCE_IGMP_VERSION
,

156 
	mIPV4_DEVCONF_ARP_ANNOUNCE
,

157 
	mIPV4_DEVCONF_ARP_IGNORE
,

158 
	mIPV4_DEVCONF_PROMOTE_SECONDARIES
,

159 
	mIPV4_DEVCONF_ARP_ACCEPT
,

160 
	mIPV4_DEVCONF_ARP_NOTIFY
,

161 
	mIPV4_DEVCONF_ACCEPT_LOCAL
,

162 
	mIPV4_DEVCONF_SRC_VMARK
,

163 
	mIPV4_DEVCONF_PROXY_ARP_PVLAN
,

164 
	mIPV4_DEVCONF_ROUTE_LOCALNET
,

165 
	mIPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL
,

166 
	mIPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL
,

167 
	mIPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN
,

168 
	mIPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST
,

169 
	mIPV4_DEVCONF_DROP_GRATUITOUS_ARP
,

170 
	m__IPV4_DEVCONF_MAX


173 
	#IPV4_DEVCONF_MAX
 (
__IPV4_DEVCONF_MAX
 - 1)

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

57 
	#NLM_F_DUMP_FILTERED
 32

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

66 
	#NLM_F_REPLACE
 0x100

	)

67 
	#NLM_F_EXCL
 0x200

	)

68 
	#NLM_F_CREATE
 0x400

	)

69 
	#NLM_F_APPEND
 0x800

	)

80 
	#NLMSG_ALIGNTO
 4U

	)

81 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

82 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

84 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

85 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

86 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

87 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

88 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

90 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

91 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

93 
	#NLMSG_NOOP
 0x1

	)

94 
	#NLMSG_ERROR
 0x2

	)

95 
	#NLMSG_DONE
 0x3

	)

96 
	#NLMSG_OVERRUN
 0x4

	)

98 
	#NLMSG_MIN_TYPE
 0x10

	)

100 
	s∆msgîr
 {

101 
	mîr‹
;

102 
∆msghdr
 
	mmsg
;

105 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

106 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

107 
	#NETLINK_PKTINFO
 3

	)

108 
	#NETLINK_BROADCAST_ERROR
 4

	)

109 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	#NETLINK_RX_RING
 6

	)

111 
	#NETLINK_TX_RING
 7

	)

112 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

114 
	#NETLINK_CAP_ACK
 10

	)

116 
	s∆_pktöfo
 {

117 
__u32
 
	mgroup
;

120 
	s∆_mm≠_ªq
 {

121 
	mnm_block_size
;

122 
	mnm_block_ƒ
;

123 
	mnm_‰ame_size
;

124 
	mnm_‰ame_ƒ
;

127 
	s∆_mm≠_hdr
 {

128 
	mnm_°©us
;

129 
	mnm_Àn
;

130 
__u32
 
	mnm_group
;

132 
__u32
 
	mnm_pid
;

133 
__u32
 
	mnm_uid
;

134 
__u32
 
	mnm_gid
;

137 
	e∆_mm≠_°©us
 {

138 
	mNL_MMAP_STATUS_UNUSED
,

139 
	mNL_MMAP_STATUS_RESERVED
,

140 
	mNL_MMAP_STATUS_VALID
,

141 
	mNL_MMAP_STATUS_COPY
,

142 
	mNL_MMAP_STATUS_SKIP
,

145 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

146 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

147 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

149 
	#NET_MAJOR
 36

	)

152 
	mNETLINK_UNCONNECTED
 = 0,

153 
	mNETLINK_CONNECTED
,

165 
	s∆©å
 {

166 
__u16
 
	m∆a_Àn
;

167 
__u16
 
	m∆a_ty≥
;

180 
	#NLA_F_NESTED
 (1 << 15)

	)

181 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

182 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

184 
	#NLA_ALIGNTO
 4

	)

185 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

186 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/ptrace.h

1 #i‚de‡
_LINUX_PTRACE_H


2 
	#_LINUX_PTRACE_H


	)

8 
	~<löux/ty≥s.h
>

10 
	#PTRACE_TRACEME
 0

	)

11 
	#PTRACE_PEEKTEXT
 1

	)

12 
	#PTRACE_PEEKDATA
 2

	)

13 
	#PTRACE_PEEKUSR
 3

	)

14 
	#PTRACE_POKETEXT
 4

	)

15 
	#PTRACE_POKEDATA
 5

	)

16 
	#PTRACE_POKEUSR
 6

	)

17 
	#PTRACE_CONT
 7

	)

18 
	#PTRACE_KILL
 8

	)

19 
	#PTRACE_SINGLESTEP
 9

	)

21 
	#PTRACE_ATTACH
 16

	)

22 
	#PTRACE_DETACH
 17

	)

24 
	#PTRACE_SYSCALL
 24

	)

27 
	#PTRACE_SETOPTIONS
 0x4200

	)

28 
	#PTRACE_GETEVENTMSG
 0x4201

	)

29 
	#PTRACE_GETSIGINFO
 0x4202

	)

30 
	#PTRACE_SETSIGINFO
 0x4203

	)

49 
	#PTRACE_GETREGSET
 0x4204

	)

50 
	#PTRACE_SETREGSET
 0x4205

	)

52 
	#PTRACE_SEIZE
 0x4206

	)

53 
	#PTRACE_INTERRUPT
 0x4207

	)

54 
	#PTRACE_LISTEN
 0x4208

	)

56 
	#PTRACE_PEEKSIGINFO
 0x4209

	)

58 
	s±ø˚_≥eksigöfo_¨gs
 {

59 
__u64
 
	moff
;

60 
__u32
 
	mÊags
;

61 
__s32
 
	mƒ
;

64 
	#PTRACE_GETSIGMASK
 0x420a

	)

65 
	#PTRACE_SETSIGMASK
 0x420b

	)

67 
	#PTRACE_SECCOMP_GET_FILTER
 0x420c

	)

70 
	#PTRACE_PEEKSIGINFO_SHARED
 (1 << 0)

	)

73 
	#PTRACE_EVENT_FORK
 1

	)

74 
	#PTRACE_EVENT_VFORK
 2

	)

75 
	#PTRACE_EVENT_CLONE
 3

	)

76 
	#PTRACE_EVENT_EXEC
 4

	)

77 
	#PTRACE_EVENT_VFORK_DONE
 5

	)

78 
	#PTRACE_EVENT_EXIT
 6

	)

79 
	#PTRACE_EVENT_SECCOMP
 7

	)

81 
	#PTRACE_EVENT_STOP
 128

	)

84 
	#PTRACE_O_TRACESYSGOOD
 1

	)

85 
	#PTRACE_O_TRACEFORK
 (1 << 
PTRACE_EVENT_FORK
)

	)

86 
	#PTRACE_O_TRACEVFORK
 (1 << 
PTRACE_EVENT_VFORK
)

	)

87 
	#PTRACE_O_TRACECLONE
 (1 << 
PTRACE_EVENT_CLONE
)

	)

88 
	#PTRACE_O_TRACEEXEC
 (1 << 
PTRACE_EVENT_EXEC
)

	)

89 
	#PTRACE_O_TRACEVFORKDONE
 (1 << 
PTRACE_EVENT_VFORK_DONE
)

	)

90 
	#PTRACE_O_TRACEEXIT
 (1 << 
PTRACE_EVENT_EXIT
)

	)

91 
	#PTRACE_O_TRACESECCOMP
 (1 << 
PTRACE_EVENT_SECCOMP
)

	)

94 
	#PTRACE_O_EXITKILL
 (1 << 20)

	)

95 
	#PTRACE_O_SUSPEND_SECCOMP
 (1 << 21)

	)

97 
	#PTRACE_O_MASK
 (\

98 0x000000f‡| 
PTRACE_O_EXITKILL
 | 
PTRACE_O_SUSPEND_SECCOMP
)

	)

100 
	~<asm/±ø˚.h
>

	@/usr/include/linux/rose.h

7 #i‚def 
ROSE_KERNEL_H


8 
	#ROSE_KERNEL_H


	)

10 
	~<löux/sockë.h
>

11 
	~<löux/ax25.h
>

13 
	#ROSE_MTU
 251

	)

15 
	#ROSE_MAX_DIGIS
 6

	)

17 
	#ROSE_DEFER
 1

	)

18 
	#ROSE_T1
 2

	)

19 
	#ROSE_T2
 3

	)

20 
	#ROSE_T3
 4

	)

21 
	#ROSE_IDLE
 5

	)

22 
	#ROSE_QBITINCL
 6

	)

23 
	#ROSE_HOLDBACK
 7

	)

25 
	#SIOCRSGCAUSE
 (
SIOCPROTOPRIVATE
+0)

	)

26 
	#SIOCRSSCAUSE
 (
SIOCPROTOPRIVATE
+1)

	)

27 
	#SIOCRSL2CALL
 (
SIOCPROTOPRIVATE
+2)

	)

28 
	#SIOCRSSL2CALL
 (
SIOCPROTOPRIVATE
+2)

	)

29 
	#SIOCRSACCEPT
 (
SIOCPROTOPRIVATE
+3)

	)

30 
	#SIOCRSCLRRT
 (
SIOCPROTOPRIVATE
+4)

	)

31 
	#SIOCRSGL2CALL
 (
SIOCPROTOPRIVATE
+5)

	)

32 
	#SIOCRSGFACILITIES
 (
SIOCPROTOPRIVATE
+6)

	)

34 
	#ROSE_DTE_ORIGINATED
 0x00

	)

35 
	#ROSE_NUMBER_BUSY
 0x01

	)

36 
	#ROSE_INVALID_FACILITY
 0x03

	)

37 
	#ROSE_NETWORK_CONGESTION
 0x05

	)

38 
	#ROSE_OUT_OF_ORDER
 0x09

	)

39 
	#ROSE_ACCESS_BARRED
 0x0B

	)

40 
	#ROSE_NOT_OBTAINABLE
 0x0D

	)

41 
	#ROSE_REMOTE_PROCEDURE
 0x11

	)

42 
	#ROSE_LOCAL_PROCEDURE
 0x13

	)

43 
	#ROSE_SHIP_ABSENT
 0x39

	)

46 
	mro£_addr
[5];

47 } 
	tro£_addªss
;

49 
	ssockaddr_ro£
 {

50 
__kî√l_ß_Ámûy_t
 
	m§o£_Ámûy
;

51 
ro£_addªss
 
	m§o£_addr
;

52 
ax25_addªss
 
	m§o£_ˇŒ
;

53 
	m§o£_ndigis
;

54 
ax25_addªss
 
	m§o£_digi
;

57 
	sfuŒ_sockaddr_ro£
 {

58 
__kî√l_ß_Ámûy_t
 
	m§o£_Ámûy
;

59 
ro£_addªss
 
	m§o£_addr
;

60 
ax25_addªss
 
	m§o£_ˇŒ
;

61 
	m§o£_ndigis
;

62 
ax25_addªss
 
	m§o£_digis
[
ROSE_MAX_DIGIS
];

65 
	sro£_rouã_°ru˘
 {

66 
ro£_addªss
 
	maddªss
;

67 
	mmask
;

68 
ax25_addªss
 
	m√ighbour
;

69 
	mdevi˚
[16];

70 
	mndigis
;

71 
ax25_addªss
 
	mdigùóãrs
[
AX25_MAX_DIGIS
];

74 
	sro£_ˇu£_°ru˘
 {

75 
	mˇu£
;

76 
	mdügno°ic
;

79 
	sro£_Ácûôõs_°ru˘
 {

80 
ro£_addªss
 
	msour˚_addr
, 
	mde°_addr
;

81 
ax25_addªss
 
	msour˚_ˇŒ
, 
	mde°_ˇŒ
;

82 
	msour˚_ndigis
, 
	mde°_ndigis
;

83 
ax25_addªss
 
	msour˚_digis
[
ROSE_MAX_DIGIS
];

84 
ax25_addªss
 
	mde°_digis
[
ROSE_MAX_DIGIS
];

85 
	mønd
;

86 
ro£_addªss
 
	mÁû_addr
;

87 
ax25_addªss
 
	mÁû_ˇŒ
;

	@/usr/include/linux/route.h

23 #i‚de‡
_LINUX_ROUTE_H


24 
	#_LINUX_ROUTE_H


	)

26 
	~<löux/if.h
>

30 
	sπíåy
 {

31 
	mπ_∑d1
;

32 
sockaddr
 
	mπ_d°
;

33 
sockaddr
 
	mπ_g©eway
;

34 
sockaddr
 
	mπ_gímask
;

35 
	mπ_Êags
;

36 
	mπ_∑d2
;

37 
	mπ_∑d3
;

38 *
	mπ_∑d4
;

39 
	mπ_mëric
;

40 *
	mπ_dev
;

41 
	mπ_mtu
;

42 
	#π_mss
 
π_mtu


	)

43 
	mπ_wödow
;

44 
	mπ_úâ
;

48 
	#RTF_UP
 0x0001

	)

49 
	#RTF_GATEWAY
 0x0002

	)

50 
	#RTF_HOST
 0x0004

	)

51 
	#RTF_REINSTATE
 0x0008

	)

52 
	#RTF_DYNAMIC
 0x0010

	)

53 
	#RTF_MODIFIED
 0x0020

	)

54 
	#RTF_MTU
 0x0040

	)

55 
	#RTF_MSS
 
RTF_MTU


	)

56 
	#RTF_WINDOW
 0x0080

	)

57 
	#RTF_IRTT
 0x0100

	)

58 
	#RTF_REJECT
 0x0200

	)

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	mRTM_NEWNSID
 = 88,

136 
	#RTM_NEWNSID
 
RTM_NEWNSID


	)

137 
	mRTM_DELNSID
 = 89,

138 
	#RTM_DELNSID
 
RTM_DELNSID


	)

139 
	mRTM_GETNSID
 = 90,

140 
	#RTM_GETNSID
 
RTM_GETNSID


	)

142 
	m__RTM_MAX
,

143 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

146 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

147 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

148 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

156 
	sπ©å
 {

157 
	mπa_Àn
;

158 
	mπa_ty≥
;

163 
	#RTA_ALIGNTO
 4U

	)

164 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

165 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

166 (
πa
)->
πa_Àn
 >(
π©å
) && \

167 (
πa
)->
πa_Àn
 <(
Àn
))

	)

168 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

169 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

170 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

171 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

172 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

173 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

182 
	sπmsg
 {

183 
	mπm_Ámûy
;

184 
	mπm_d°_Àn
;

185 
	mπm_§c_Àn
;

186 
	mπm_tos
;

188 
	mπm_èbÀ
;

189 
	mπm_¥Ÿocﬁ
;

190 
	mπm_sc›e
;

191 
	mπm_ty≥
;

193 
	mπm_Êags
;

199 
	mRTN_UNSPEC
,

200 
	mRTN_UNICAST
,

201 
	mRTN_LOCAL
,

202 
	mRTN_BROADCAST
,

204 
	mRTN_ANYCAST
,

206 
	mRTN_MULTICAST
,

207 
	mRTN_BLACKHOLE
,

208 
	mRTN_UNREACHABLE
,

209 
	mRTN_PROHIBIT
,

210 
	mRTN_THROW
,

211 
	mRTN_NAT
,

212 
	mRTN_XRESOLVE
,

213 
	m__RTN_MAX


216 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

221 
	#RTPROT_UNSPEC
 0

	)

222 
	#RTPROT_REDIRECT
 1

	)

224 
	#RTPROT_KERNEL
 2

	)

225 
	#RTPROT_BOOT
 3

	)

226 
	#RTPROT_STATIC
 4

	)

235 
	#RTPROT_GATED
 8

	)

236 
	#RTPROT_RA
 9

	)

237 
	#RTPROT_MRT
 10

	)

238 
	#RTPROT_ZEBRA
 11

	)

239 
	#RTPROT_BIRD
 12

	)

240 
	#RTPROT_DNROUTED
 13

	)

241 
	#RTPROT_XORP
 14

	)

242 
	#RTPROT_NTK
 15

	)

243 
	#RTPROT_DHCP
 16

	)

244 
	#RTPROT_MROUTED
 17

	)

245 
	#RTPROT_BABEL
 42

	)

258 
	eπ_sc›e_t
 {

259 
	mRT_SCOPE_UNIVERSE
=0,

261 
	mRT_SCOPE_SITE
=200,

262 
	mRT_SCOPE_LINK
=253,

263 
	mRT_SCOPE_HOST
=254,

264 
	mRT_SCOPE_NOWHERE
=255

269 
	#RTM_F_NOTIFY
 0x100

	)

270 
	#RTM_F_CLONED
 0x200

	)

271 
	#RTM_F_EQUALIZE
 0x400

	)

272 
	#RTM_F_PREFIX
 0x800

	)

273 
	#RTM_F_LOOKUP_TABLE
 0x1000

	)

277 
	eπ_˛ass_t
 {

278 
	mRT_TABLE_UNSPEC
=0,

280 
	mRT_TABLE_COMPAT
=252,

281 
	mRT_TABLE_DEFAULT
=253,

282 
	mRT_TABLE_MAIN
=254,

283 
	mRT_TABLE_LOCAL
=255,

284 
	mRT_TABLE_MAX
=0xFFFFFFFF

290 
	eπ©å_ty≥_t
 {

291 
	mRTA_UNSPEC
,

292 
	mRTA_DST
,

293 
	mRTA_SRC
,

294 
	mRTA_IIF
,

295 
	mRTA_OIF
,

296 
	mRTA_GATEWAY
,

297 
	mRTA_PRIORITY
,

298 
	mRTA_PREFSRC
,

299 
	mRTA_METRICS
,

300 
	mRTA_MULTIPATH
,

301 
	mRTA_PROTOINFO
,

302 
	mRTA_FLOW
,

303 
	mRTA_CACHEINFO
,

304 
	mRTA_SESSION
,

305 
	mRTA_MP_ALGO
,

306 
	mRTA_TABLE
,

307 
	mRTA_MARK
,

308 
	mRTA_MFC_STATS
,

309 
	mRTA_VIA
,

310 
	mRTA_NEWDST
,

311 
	mRTA_PREF
,

312 
	mRTA_ENCAP_TYPE
,

313 
	mRTA_ENCAP
,

314 
	mRTA_EXPIRES
,

315 
	m__RTA_MAX


318 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

320 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

321 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

332 
	sπ√xth›
 {

333 
	mπnh_Àn
;

334 
	mπnh_Êags
;

335 
	mπnh_h›s
;

336 
	mπnh_ifödex
;

341 
	#RTNH_F_DEAD
 1

	)

342 
	#RTNH_F_PERVASIVE
 2

	)

343 
	#RTNH_F_ONLINK
 4

	)

344 
	#RTNH_F_OFFLOAD
 8

	)

345 
	#RTNH_F_LINKDOWN
 16

	)

347 
	#RTNH_COMPARE_MASK
 (
RTNH_F_DEAD
 | 
RTNH_F_LINKDOWN
)

	)

351 
	#RTNH_ALIGNTO
 4

	)

352 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

353 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

354 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

355 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

356 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

357 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

358 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

361 
	sπvü
 {

362 
__kî√l_ß_Ámûy_t
 
	mπvü_Ámûy
;

363 
__u8
 
	mπvü_addr
[0];

368 
	sπa_ˇcheöfo
 {

369 
__u32
 
	mπa_˛¡ªf
;

370 
__u32
 
	mπa_œ°u£
;

371 
__s32
 
	mπa_expúes
;

372 
__u32
 
	mπa_îr‹
;

373 
__u32
 
	mπa_u£d
;

375 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

376 
__u32
 
	mπa_id
;

377 
__u32
 
	mπa_ts
;

378 
__u32
 
	mπa_tßge
;

384 
	mRTAX_UNSPEC
,

385 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

386 
	mRTAX_LOCK
,

387 
	#RTAX_LOCK
 
RTAX_LOCK


	)

388 
	mRTAX_MTU
,

389 
	#RTAX_MTU
 
RTAX_MTU


	)

390 
	mRTAX_WINDOW
,

391 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

392 
	mRTAX_RTT
,

393 
	#RTAX_RTT
 
RTAX_RTT


	)

394 
	mRTAX_RTTVAR
,

395 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

396 
	mRTAX_SSTHRESH
,

397 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

398 
	mRTAX_CWND
,

399 
	#RTAX_CWND
 
RTAX_CWND


	)

400 
	mRTAX_ADVMSS
,

401 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

402 
	mRTAX_REORDERING
,

403 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

404 
	mRTAX_HOPLIMIT
,

405 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

406 
	mRTAX_INITCWND
,

407 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

408 
	mRTAX_FEATURES
,

409 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

410 
	mRTAX_RTO_MIN
,

411 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

412 
	mRTAX_INITRWND
,

413 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

414 
	mRTAX_QUICKACK
,

415 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

416 
	mRTAX_CC_ALGO
,

417 
	#RTAX_CC_ALGO
 
RTAX_CC_ALGO


	)

418 
	m__RTAX_MAX


421 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

423 
	#RTAX_FEATURE_ECN
 (1 << 0)

	)

424 
	#RTAX_FEATURE_SACK
 (1 << 1)

	)

425 
	#RTAX_FEATURE_TIMESTAMP
 (1 << 2)

	)

426 
	#RTAX_FEATURE_ALLFRAG
 (1 << 3)

	)

428 
	#RTAX_FEATURE_MASK
 (
RTAX_FEATURE_ECN
 | 
RTAX_FEATURE_SACK
 | \

429 
RTAX_FEATURE_TIMESTAMP
 | 
RTAX_FEATURE_ALLFRAG
)

	)

431 
	sπa_£ssi⁄
 {

432 
__u8
 
	m¥Ÿo
;

433 
__u8
 
	m∑d1
;

434 
__u16
 
	m∑d2
;

438 
__u16
 
	m•‹t
;

439 
__u16
 
	mdp‹t
;

440 } 
	mp‹ts
;

443 
__u8
 
	mty≥
;

444 
__u8
 
	mcode
;

445 
__u16
 
	midít
;

446 } 
	micm±
;

448 
__u32
 
	m•i
;

449 } 
	mu
;

452 
	sπa_mfc_°©s
 {

453 
__u64
 
	mmfcs_∑ckës
;

454 
__u64
 
	mmfcs_byãs
;

455 
__u64
 
	mmfcs_wr⁄g_if
;

462 
	sπgímsg
 {

463 
	mπgí_Ámûy
;

475 
	siföfomsg
 {

476 
	mifi_Ámûy
;

477 
	m__ifi_∑d
;

478 
	mifi_ty≥
;

479 
	mifi_ödex
;

480 
	mifi_Êags
;

481 
	mifi_ch™ge
;

488 
	s¥efixmsg
 {

489 
	m¥efix_Ámûy
;

490 
	m¥efix_∑d1
;

491 
	m¥efix_∑d2
;

492 
	m¥efix_ifödex
;

493 
	m¥efix_ty≥
;

494 
	m¥efix_Àn
;

495 
	m¥efix_Êags
;

496 
	m¥efix_∑d3
;

501 
	mPREFIX_UNSPEC
,

502 
	mPREFIX_ADDRESS
,

503 
	mPREFIX_CACHEINFO
,

504 
	m__PREFIX_MAX


507 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

509 
	s¥efix_ˇcheöfo
 {

510 
__u32
 
	m¥e„ºed_time
;

511 
__u32
 
	mvÆid_time
;

519 
	stcmsg
 {

520 
	mtcm_Ámûy
;

521 
	mtcm__∑d1
;

522 
	mtcm__∑d2
;

523 
	mtcm_ifödex
;

524 
__u32
 
	mtcm_h™dÀ
;

525 
__u32
 
	mtcm_∑ª¡
;

526 
__u32
 
	mtcm_öfo
;

530 
	mTCA_UNSPEC
,

531 
	mTCA_KIND
,

532 
	mTCA_OPTIONS
,

533 
	mTCA_STATS
,

534 
	mTCA_XSTATS
,

535 
	mTCA_RATE
,

536 
	mTCA_FCNT
,

537 
	mTCA_STATS2
,

538 
	mTCA_STAB
,

539 
	m__TCA_MAX


542 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

544 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

545 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

551 
	sndu£r›tmsg
 {

552 
	mndu£r›t_Ámûy
;

553 
	mndu£r›t_∑d1
;

554 
	mndu£r›t_›ts_Àn
;

555 
	mndu£r›t_ifödex
;

556 
__u8
 
	mndu£r›t_icmp_ty≥
;

557 
__u8
 
	mndu£r›t_icmp_code
;

558 
	mndu£r›t_∑d2
;

559 
	mndu£r›t_∑d3
;

564 
	mNDUSEROPT_UNSPEC
,

565 
	mNDUSEROPT_SRCADDR
,

566 
	m__NDUSEROPT_MAX


569 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

572 
	#RTMGRP_LINK
 1

	)

573 
	#RTMGRP_NOTIFY
 2

	)

574 
	#RTMGRP_NEIGH
 4

	)

575 
	#RTMGRP_TC
 8

	)

577 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

578 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

579 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

580 
	#RTMGRP_IPV4_RULE
 0x80

	)

582 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

583 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

584 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

585 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

587 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

588 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

590 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

593 
	eπ√éök_groups
 {

594 
	mRTNLGRP_NONE
,

595 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

596 
	mRTNLGRP_LINK
,

597 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

598 
	mRTNLGRP_NOTIFY
,

599 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

600 
	mRTNLGRP_NEIGH
,

601 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

602 
	mRTNLGRP_TC
,

603 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

604 
	mRTNLGRP_IPV4_IFADDR
,

605 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

606 
	mRTNLGRP_IPV4_MROUTE
,

607 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

608 
	mRTNLGRP_IPV4_ROUTE
,

609 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

610 
	mRTNLGRP_IPV4_RULE
,

611 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

612 
	mRTNLGRP_IPV6_IFADDR
,

613 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

614 
	mRTNLGRP_IPV6_MROUTE
,

615 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

616 
	mRTNLGRP_IPV6_ROUTE
,

617 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

618 
	mRTNLGRP_IPV6_IFINFO
,

619 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

620 
	mRTNLGRP_DEC√t_IFADDR
,

621 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

622 
	mRTNLGRP_NOP2
,

623 
	mRTNLGRP_DEC√t_ROUTE
,

624 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

625 
	mRTNLGRP_DEC√t_RULE
,

626 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

627 
	mRTNLGRP_NOP4
,

628 
	mRTNLGRP_IPV6_PREFIX
,

629 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

630 
	mRTNLGRP_IPV6_RULE
,

631 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

632 
	mRTNLGRP_ND_USEROPT
,

633 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

634 
	mRTNLGRP_PHONET_IFADDR
,

635 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

636 
	mRTNLGRP_PHONET_ROUTE
,

637 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

638 
	mRTNLGRP_DCB
,

639 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

640 
	mRTNLGRP_IPV4_NETCONF
,

641 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

642 
	mRTNLGRP_IPV6_NETCONF
,

643 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

644 
	mRTNLGRP_MDB
,

645 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

646 
	mRTNLGRP_MPLS_ROUTE
,

647 
	#RTNLGRP_MPLS_ROUTE
 
RTNLGRP_MPLS_ROUTE


	)

648 
	mRTNLGRP_NSID
,

649 
	#RTNLGRP_NSID
 
RTNLGRP_NSID


	)

650 
	m__RTNLGRP_MAX


652 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

655 
	stˇmsg
 {

656 
	mtˇ_Ámûy
;

657 
	mtˇ__∑d1
;

658 
	mtˇ__∑d2
;

660 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

661 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

662 
	#TCA_ACT_TAB
 1

	)

663 
	#TCAA_MAX
 1

	)

666 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

667 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

668 
	#RTEXT_FILTER_BRVLAN_COMPRESSED
 (1 << 2)

	)

669 
	#RTEXT_FILTER_SKIP_STATS
 (1 << 3)

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_NEWCGROUP
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

41 
	#SCHED_DEADLINE
 6

	)

44 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

49 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

129 
	#SIOCGHWTSTAMP
 0x89b1

	)

142 
	#SIOCDEVPRIVATE
 0x89F0

	)

148 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/udp.h

17 #i‚de‡
_LINUX_UDP_H


18 
	#_LINUX_UDP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	sudphdr
 {

23 
__be16
 
	msour˚
;

24 
__be16
 
	mde°
;

25 
__be16
 
	mÀn
;

26 
__sum16
 
	mcheck
;

30 
	#UDP_CORK
 1

	)

31 
	#UDP_ENCAP
 100

	)

32 
	#UDP_NO_CHECK6_TX
 101

	)

33 
	#UDP_NO_CHECK6_RX
 102

	)

36 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

37 
	#UDP_ENCAP_ESPINUDP
 2

	)

38 
	#UDP_ENCAP_L2TPINUDP
 3

	)

	@/usr/include/linux/x25.h

11 #i‚def 
X25_KERNEL_H


12 
	#X25_KERNEL_H


	)

14 
	~<löux/ty≥s.h
>

15 
	~<löux/sockë.h
>

17 
	#SIOCX25GSUBSCRIP
 (
SIOCPROTOPRIVATE
 + 0)

	)

18 
	#SIOCX25SSUBSCRIP
 (
SIOCPROTOPRIVATE
 + 1)

	)

19 
	#SIOCX25GFACILITIES
 (
SIOCPROTOPRIVATE
 + 2)

	)

20 
	#SIOCX25SFACILITIES
 (
SIOCPROTOPRIVATE
 + 3)

	)

21 
	#SIOCX25GCALLUSERDATA
 (
SIOCPROTOPRIVATE
 + 4)

	)

22 
	#SIOCX25SCALLUSERDATA
 (
SIOCPROTOPRIVATE
 + 5)

	)

23 
	#SIOCX25GCAUSEDIAG
 (
SIOCPROTOPRIVATE
 + 6)

	)

24 
	#SIOCX25SCUDMATCHLEN
 (
SIOCPROTOPRIVATE
 + 7)

	)

25 
	#SIOCX25CALLACCPTAPPRV
 (
SIOCPROTOPRIVATE
 + 8)

	)

26 
	#SIOCX25SENDCALLACCPT
 (
SIOCPROTOPRIVATE
 + 9)

	)

27 
	#SIOCX25GDTEFACILITIES
 (
SIOCPROTOPRIVATE
 + 10)

	)

28 
	#SIOCX25SDTEFACILITIES
 (
SIOCPROTOPRIVATE
 + 11)

	)

29 
	#SIOCX25SCAUSEDIAG
 (
SIOCPROTOPRIVATE
 + 12)

	)

34 
	#X25_QBITINCL
 1

	)

39 
	#X25_PS16
 4

	)

40 
	#X25_PS32
 5

	)

41 
	#X25_PS64
 6

	)

42 
	#X25_PS128
 7

	)

43 
	#X25_PS256
 8

	)

44 
	#X25_PS512
 9

	)

45 
	#X25_PS1024
 10

	)

46 
	#X25_PS2048
 11

	)

47 
	#X25_PS4096
 12

	)

53 
	sx25_addªss
 {

54 
	mx25_addr
[16];

60 
	ssockaddr_x25
 {

61 
__kî√l_ß_Ámûy_t
 
	msx25_Ámûy
;

62 
x25_addªss
 
	msx25_addr
;

73 
	sx25_subs¸ù_°ru˘
 {

74 
	mdevi˚
[200-()];

75 
	mglobÆ_Ácû_mask
;

76 
	mexãnded
;

81 
	#X25_MASK_REVERSE
 0x01

	)

82 
	#X25_MASK_THROUGHPUT
 0x02

	)

83 
	#X25_MASK_PACKET_SIZE
 0x04

	)

84 
	#X25_MASK_WINDOW_SIZE
 0x08

	)

86 
	#X25_MASK_CALLING_AE
 0x10

	)

87 
	#X25_MASK_CALLED_AE
 0x20

	)

93 
	sx25_rouã_°ru˘
 {

94 
x25_addªss
 
	maddªss
;

95 
	msigdigôs
;

96 
	mdevi˚
[200];

102 
	sx25_Ácûôõs
 {

103 
	mwösize_ö
, 
	mwösize_out
;

104 
	m∑csize_ö
, 
	m∑csize_out
;

105 
	mthroughput
;

106 
	mªvî£
;

117 
	sx25_dã_Ácûôõs
 {

118 
__u16
 
	mdñay_cumul
;

119 
__u16
 
	mdñay_èrgë
;

120 
__u16
 
	mdñay_max
;

121 
__u8
 
	mmö_throughput
;

122 
__u8
 
	mex≥dôed
;

123 
__u8
 
	mˇŒög_Àn
;

124 
__u8
 
	mˇŒed_Àn
;

125 
__u8
 
	mˇŒög_´
[20];

126 
__u8
 
	mˇŒed_´
[20];

132 
	sx25_ˇŒu£rd©a
 {

133 
	mcudÀngth
;

134 
	mcudd©a
[128];

140 
	sx25_ˇu£düg
 {

141 
	mˇu£
;

142 
	mdügno°ic
;

148 
	sx25_subaddr
 {

149 
	mcudm©chÀngth
;

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

81 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

82 
	~<bôs/m©hˇŒs.h
>

83 #unde‡
_MdoubÀ_


84 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


85 #unde‡
_MdoubÀ_END_NAMESPACE


86 #unde‡
__MATH_PRECNAME


88 #ifde‡
__USE_ISOC99


94 #i‚de‡
_MÊﬂt_


95 
	#_MÊﬂt_
 

	)

97 
	#_MdoubÀ_
 
_MÊﬂt_


	)

98 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

99 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

100 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

101 
	~<bôs/m©hˇŒs.h
>

102 #unde‡
_MdoubÀ_


103 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


104 #unde‡
_MdoubÀ_END_NAMESPACE


105 #unde‡
__MATH_PRECNAME


107 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

108 || 
deföed
 
__LDBL_COMPAT
 \

109 || 
deföed
 
_LIBC_TEST


110 #ifde‡
__LDBL_COMPAT


112 #ifde‡
__USE_ISOC99


113 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

114 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

115 #ifde‡
__REDIRECT_NTH


116 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

117 
__∆dbl_√xâow¨df
)

118 
	`__©åibuã__
 ((
__c⁄°__
));

119 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

120 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

122 (
__x
, 
__y
),

123 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

127 #unde‡
__MATHDECL_1


128 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

129 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

130 
¨gs
, 
Æüs
)

	)

131 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

132 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

138 #i‚de‡
_Ml⁄g_doubÀ_


139 
	#_Ml⁄g_doubÀ_
 

	)

141 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

142 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
 =

206 
	#FP_NAN
 0

	)

207 
FP_NAN
,

208 
FP_INFINITE
 =

209 
	#FP_INFINITE
 1

	)

210 
FP_INFINITE
,

211 
FP_ZERO
 =

212 
	#FP_ZERO
 2

	)

213 
FP_ZERO
,

214 
FP_SUBNORMAL
 =

215 
	#FP_SUBNORMAL
 3

	)

216 
FP_SUBNORMAL
,

217 
FP_NORMAL
 =

218 
	#FP_NORMAL
 4

	)

219 
FP_NORMAL


223 #ifde‡
__NO_LONG_DOUBLE_MATH


224 
	#Â˛assify
(
x
) \

225 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

227 
	#Â˛assify
(
x
) \

228 ( (
x
) ==  () \

229 ? 
	`__Â˛assifyf
 (
x
) \

230 :  (
x
) ==  () \

231 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

235 #ifde‡
__NO_LONG_DOUBLE_MATH


236 
	#signbô
(
x
) \

237 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

239 
	#signbô
(
x
) \

240 ( (
x
) ==  () \

241 ? 
	`__signbôf
 (
x
) \

242 :  (
x
) ==  () \

243 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

247 #ifde‡
__NO_LONG_DOUBLE_MATH


248 
	#isföôe
(
x
) \

249 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

251 
	#isföôe
(
x
) \

252 ( (
x
) ==  () \

253 ? 
	`__föôef
 (
x
) \

254 :  (
x
) ==  () \

255 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

259 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

263 #ifde‡
__NO_LONG_DOUBLE_MATH


264 
	#i¢™
(
x
) \

265 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

267 
	#i¢™
(
x
) \

268 ( (
x
) ==  () \

269 ? 
	`__i¢™f
 (
x
) \

270 :  (
x
) ==  () \

271 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

275 #ifde‡
__NO_LONG_DOUBLE_MATH


276 
	#isöf
(
x
) \

277 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

279 
	#isöf
(
x
) \

280 ( (
x
) ==  () \

281 ? 
	`__isöff
 (
x
) \

282 :  (
x
) ==  () \

283 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

287 
	#MATH_ERRNO
 1

	)

288 
	#MATH_ERREXCEPT
 2

	)

293 #i‚de‡
__FAST_MATH__


294 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

299 #ifde‡
__USE_GNU


301 #ifde‡
__NO_LONG_DOUBLE_MATH


302 
	#issig«lög
(
x
) \

303 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

305 
	#issig«lög
(
x
) \

306 ( (
x
) ==  () \

307 ? 
	`__issig«lögf
 (
x
) \

308 :  (
x
) ==  () \

309 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

313 #ifdef 
__USE_MISC


317 
_IEEE_
 = -1,

318 
_SVID_
,

319 
_XOPEN_
,

320 
_POSIX_
,

321 
_ISOC_


322 } 
	t_LIB_VERSION_TYPE
;

327 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

331 #ifde‡
__USE_MISC


337 #ifde‡
__˝lu•lus


338 
__ex˚±i⁄


340 
ex˚±i⁄


343 
ty≥
;

344 *
«me
;

345 
¨g1
;

346 
¨g2
;

347 
ªtvÆ
;

348 
	}
};

350 #ifde‡
__˝lu•lus


351 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

353 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

356 
	#X_TLOSS
 1.41484755040568800000e+16

	)

359 
	#DOMAIN
 1

	)

360 
	#SING
 2

	)

361 
	#OVERFLOW
 3

	)

362 
	#UNDERFLOW
 4

	)

363 
	#TLOSS
 5

	)

364 
	#PLOSS
 6

	)

367 
	#HUGE
 3.40282347e+38F

	)

371 #ifde‡
__USE_XOPEN


373 
	#MAXFLOAT
 3.40282347e+38F

	)

380 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


381 
	#M_E
 2.7182818284590452354

	)

382 
	#M_LOG2E
 1.4426950408889634074

	)

383 
	#M_LOG10E
 0.43429448190325182765

	)

384 
	#M_LN2
 0.69314718055994530942

	)

385 
	#M_LN10
 2.30258509299404568402

	)

386 
	#M_PI
 3.14159265358979323846

	)

387 
	#M_PI_2
 1.57079632679489661923

	)

388 
	#M_PI_4
 0.78539816339744830962

	)

389 
	#M_1_PI
 0.31830988618379067154

	)

390 
	#M_2_PI
 0.63661977236758134308

	)

391 
	#M_2_SQRTPI
 1.12837916709551257390

	)

392 
	#M_SQRT2
 1.41421356237309504880

	)

393 
	#M_SQRT1_2
 0.70710678118654752440

	)

399 #ifde‡
__USE_GNU


400 
	#M_El
 2.718281828459045235360287471352662498L

	)

401 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

402 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

403 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

404 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

405 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

406 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

407 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

408 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

409 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

410 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

411 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

412 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

419 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


420 
	#__NO_MATH_INLINES
 1

	)

423 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

430 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

431 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

432 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

433 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

434 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

435 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

439 #ifde‡
__USE_EXTERN_INLINES


440 
	~<bôs/m©hölöe.h
>

445 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

446 
	~<bôs/m©h-föôe.h
>

449 #ifde‡
__USE_ISOC99


453 #i‚de‡
isgª©î


454 
	#isgª©î
(
x
, 
y
) \

455 (
__exãnsi⁄__
 \

456 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

457 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

461 #i‚de‡
isgª©îequÆ


462 
	#isgª©îequÆ
(
x
, 
y
) \

463 (
__exãnsi⁄__
 \

464 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

465 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

469 #i‚de‡
i¶ess


470 
	#i¶ess
(
x
, 
y
) \

471 (
__exãnsi⁄__
 \

472 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

473 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

477 #i‚de‡
i¶es£quÆ


478 
	#i¶es£quÆ
(
x
, 
y
) \

479 (
__exãnsi⁄__
 \

480 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

481 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

485 #i‚de‡
i¶essgª©î


486 
	#i¶essgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

493 #i‚de‡
isun‹dîed


494 
	#isun‹dîed
(
u
, 
v
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

497 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

502 
	g__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/net/ethernet.h

21 #i‚de‡
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 
__BEGIN_DECLS


32 
	sëhî_addr


34 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

35 } 
__©åibuã__
 ((
__∑cked__
));

38 
	sëhî_hódî


40 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

41 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

42 
u_öt16_t
 
	mëhî_ty≥
;

43 } 
__©åibuã__
 ((
__∑cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/net/route.h

20 #i‚de‡
_NET_ROUTE_H


21 
	#_NET_ROUTE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

27 
	~<bôs/w‹dsize.h
>

31 
	sπíåy


33 
	mπ_∑d1
;

34 
sockaddr
 
	mπ_d°
;

35 
sockaddr
 
	mπ_g©eway
;

36 
sockaddr
 
	mπ_gímask
;

37 
	mπ_Êags
;

38 
	mπ_∑d2
;

39 
	mπ_∑d3
;

40 
	mπ_tos
;

41 
	mπ_˛ass
;

42 #i‡
__WORDSIZE
 == 64

43 
	mπ_∑d4
[3];

45 
	mπ_∑d4
;

47 
	mπ_mëric
;

48 *
	mπ_dev
;

49 
	mπ_mtu
;

50 
	mπ_wödow
;

51 
	mπ_úâ
;

54 
	#π_mss
 
π_mtu


	)

57 
	sö6_πmsg


59 
ö6_addr
 
	mπmsg_d°
;

60 
ö6_addr
 
	mπmsg_§c
;

61 
ö6_addr
 
	mπmsg_g©eway
;

62 
u_öt32_t
 
	mπmsg_ty≥
;

63 
u_öt16_t
 
	mπmsg_d°_Àn
;

64 
u_öt16_t
 
	mπmsg_§c_Àn
;

65 
u_öt32_t
 
	mπmsg_mëric
;

66 
	mπmsg_öfo
;

67 
u_öt32_t
 
	mπmsg_Êags
;

68 
	mπmsg_ifödex
;

72 
	#RTF_UP
 0x0001

	)

73 
	#RTF_GATEWAY
 0x0002

	)

75 
	#RTF_HOST
 0x0004

	)

76 
	#RTF_REINSTATE
 0x0008

	)

77 
	#RTF_DYNAMIC
 0x0010

	)

78 
	#RTF_MODIFIED
 0x0020

	)

79 
	#RTF_MTU
 0x0040

	)

80 
	#RTF_MSS
 
RTF_MTU


	)

81 
	#RTF_WINDOW
 0x0080

	)

82 
	#RTF_IRTT
 0x0100

	)

83 
	#RTF_REJECT
 0x0200

	)

84 
	#RTF_STATIC
 0x0400

	)

85 
	#RTF_XRESOLVE
 0x0800

	)

86 
	#RTF_NOFORWARD
 0x1000

	)

87 
	#RTF_THROW
 0x2000

	)

88 
	#RTF_NOPMTUDISC
 0x4000

	)

91 
	#RTF_DEFAULT
 0x00010000

	)

92 
	#RTF_ALLONLINK
 0x00020000

	)

93 
	#RTF_ADDRCONF
 0x00040000

	)

95 
	#RTF_LINKRT
 0x00100000

	)

96 
	#RTF_NONEXTHOP
 0x00200000

	)

98 
	#RTF_CACHE
 0x01000000

	)

99 
	#RTF_FLOW
 0x02000000

	)

100 
	#RTF_POLICY
 0x04000000

	)

102 
	#RTCF_VALVE
 0x00200000

	)

103 
	#RTCF_MASQ
 0x00400000

	)

104 
	#RTCF_NAT
 0x00800000

	)

105 
	#RTCF_DOREDIRECT
 0x01000000

	)

106 
	#RTCF_LOG
 0x02000000

	)

107 
	#RTCF_DIRECTSRC
 0x04000000

	)

109 
	#RTF_LOCAL
 0x80000000

	)

110 
	#RTF_INTERFACE
 0x40000000

	)

111 
	#RTF_MULTICAST
 0x20000000

	)

112 
	#RTF_BROADCAST
 0x10000000

	)

113 
	#RTF_NAT
 0x08000000

	)

115 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

116 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

118 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

120 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

121 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

123 
	#RT_CLASS_UNSPEC
 0

	)

124 
	#RT_CLASS_DEFAULT
 253

	)

126 
	#RT_CLASS_MAIN
 254

	)

127 
	#RT_CLASS_LOCAL
 255

	)

128 
	#RT_CLASS_MAX
 255

	)

131 
	#RTMSG_ACK
 
NLMSG_ACK


	)

132 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

134 
	#RTMSG_NEWDEVICE
 0x11

	)

135 
	#RTMSG_DELDEVICE
 0x12

	)

136 
	#RTMSG_NEWROUTE
 0x21

	)

137 
	#RTMSG_DELROUTE
 0x22

	)

138 
	#RTMSG_NEWRULE
 0x31

	)

139 
	#RTMSG_DELRULE
 0x32

	)

140 
	#RTMSG_CONTROL
 0x40

	)

142 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netax25/ax25.h

18 #i‚de‡
_NETAX25_AX25_H


19 
	#_NETAX25_AX25_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/sockaddr.h
>

25 
	#SOL_AX25
 257

	)

28 
	#AX25_WINDOW
 1

	)

29 
	#AX25_T1
 2

	)

30 
	#AX25_T2
 5

	)

31 
	#AX25_T3
 4

	)

32 
	#AX25_N2
 3

	)

33 
	#AX25_BACKOFF
 6

	)

34 
	#AX25_EXTSEQ
 7

	)

35 
	#AX25_PIDINCL
 8

	)

36 
	#AX25_IDLE
 9

	)

37 
	#AX25_PACLEN
 10

	)

38 
	#AX25_IPMAXQUEUE
 11

	)

39 
	#AX25_IAMDIGI
 12

	)

40 
	#AX25_KILL
 99

	)

43 
	#SIOCAX25GETUID
 (
SIOCPROTOPRIVATE
)

	)

44 
	#SIOCAX25ADDUID
 (
SIOCPROTOPRIVATE
+1)

	)

45 
	#SIOCAX25DELUID
 (
SIOCPROTOPRIVATE
+2)

	)

46 
	#SIOCAX25NOUID
 (
SIOCPROTOPRIVATE
+3)

	)

47 
	#SIOCAX25BPQADDR
 (
SIOCPROTOPRIVATE
+4)

	)

48 
	#SIOCAX25GETPARMS
 (
SIOCPROTOPRIVATE
+5)

	)

49 
	#SIOCAX25SETPARMS
 (
SIOCPROTOPRIVATE
+6)

	)

50 
	#SIOCAX25OPTRT
 (
SIOCPROTOPRIVATE
+7)

	)

51 
	#SIOCAX25CTLCON
 (
SIOCPROTOPRIVATE
+8)

	)

52 
	#SIOCAX25GETINFO
 (
SIOCPROTOPRIVATE
+9)

	)

53 
	#SIOCAX25ADDFWD
 (
SIOCPROTOPRIVATE
+10)

	)

54 
	#SIOCAX25DELFWD
 (
SIOCPROTOPRIVATE
+11)

	)

57 
	#AX25_NOUID_DEFAULT
 0

	)

58 
	#AX25_NOUID_BLOCK
 1

	)

59 
	#AX25_SET_RT_IPMODE
 2

	)

62 
	#AX25_DIGI_INBAND
 0x01

	)

63 
	#AX25_DIGI_XBAND
 0x02

	)

66 
	#AX25_MAX_DIGIS
 8

	)

71 
	max25_ˇŒ
[7];

73 
	tax25_addªss
;

75 
	ssockaddr_ax25


77 
ß_Ámûy_t
 
	mßx25_Ámûy
;

78 
ax25_addªss
 
	mßx25_ˇŒ
;

79 
	mßx25_ndigis
;

85 
	sfuŒ_sockaddr_ax25


87 
sockaddr_ax25
 
	mfß_ax25
;

88 
ax25_addªss
 
	mfß_digùóãr
[
AX25_MAX_DIGIS
];

90 
	#ßx25_uid
 
ßx25_ndigis


	)

92 
	sax25_rouãs_°ru˘


94 
ax25_addªss
 
	mp‹t_addr
;

95 
ax25_addªss
 
	mde°_addr
;

96 
	mdigi_cou¡
;

97 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

101 
	sax25_˘l_°ru˘


103 
ax25_addªss
 
	mp‹t_addr
;

104 
ax25_addªss
 
	msour˚_addr
;

105 
ax25_addªss
 
	mde°_addr
;

106 
	mcmd
;

107 
	m¨g
;

108 
	mdigi_cou¡
;

109 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

112 
	sax25_öfo_°ru˘


114 
	mn2
, 
	mn2cou¡
;

115 
	mt1
, 
	mt1timî
;

116 
	mt2
, 
	mt2timî
;

117 
	mt3
, 
	mt3timî
;

118 
	midÀ
, 
	midÀtimî
;

119 
	m°©e
;

120 
	mrcv_q
, 
	m¢d_q
;

123 
	sax25_fwd_°ru˘


125 
ax25_addªss
 
	mp‹t_‰om
;

126 
ax25_addªss
 
	mp‹t_to
;

130 
	sax25_rouã_›t_°ru˘


132 
ax25_addªss
 
	mp‹t_addr
;

133 
ax25_addªss
 
	mde°_addr
;

134 
	mcmd
;

135 
	m¨g
;

139 
	sax25_bpqaddr_°ru˘


141 
	mdev
[16];

142 
ax25_addªss
 
	maddr
;

146 
	#AX25_VALUES_IPDEFMODE
 0

	)

147 
	#AX25_VALUES_AXDEFMODE
 1

	)

148 
	#AX25_VALUES_NETROM
 2

	)

149 
	#AX25_VALUES_TEXT
 3

	)

150 
	#AX25_VALUES_BACKOFF
 4

	)

151 
	#AX25_VALUES_CONMODE
 5

	)

152 
	#AX25_VALUES_WINDOW
 6

	)

153 
	#AX25_VALUES_EWINDOW
 7

	)

154 
	#AX25_VALUES_T1
 8

	)

155 
	#AX25_VALUES_T2
 9

	)

156 
	#AX25_VALUES_T3
 10

	)

157 
	#AX25_VALUES_N2
 11

	)

158 
	#AX25_VALUES_DIGI
 12

	)

159 
	#AX25_VALUES_IDLE
 13

	)

160 
	#AX25_VALUES_PACLEN
 14

	)

161 
	#AX25_VALUES_IPMAXQUEUE
 15

	)

162 
	#AX25_MAX_VALUES
 20

	)

164 
	sax25_∑rms_°ru˘


166 
ax25_addªss
 
	mp‹t_addr
;

167 
	mvÆues
[
AX25_MAX_VALUES
];

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/neteconet/ec.h

19 #i‚de‡
_NETECONET_EC_H


20 
	#_NETECONET_EC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/sockaddr.h
>

25 
	sec_addr


27 
	m°©i⁄
;

28 
	m√t
;

31 
	ssockaddr_ec


33 
__SOCKADDR_COMMON
 (
£c_
);

34 
	mp‹t
;

35 
	mcb
;

36 
	mty≥
;

37 
ec_addr
 
	maddr
;

38 
	mcookõ
;

41 
	#ECTYPE_PACKET_RECEIVED
 0

	)

42 
	#ECTYPE_TRANSMIT_STATUS
 0x10

	)

44 
	#ECTYPE_TRANSMIT_OK
 1

	)

45 
	#ECTYPE_TRANSMIT_NOT_LISTENING
 2

	)

46 
	#ECTYPE_TRANSMIT_NET_ERROR
 3

	)

47 
	#ECTYPE_TRANSMIT_NO_CLOCK
 4

	)

48 
	#ECTYPE_TRANSMIT_LINE_JAMMED
 5

	)

49 
	#ECTYPE_TRANSMIT_NOT_PRESENT
 6

	)

	@/usr/include/netinet/icmp6.h

18 #i‚de‡
_NETINET_ICMP6_H


19 
	#_NETINET_ICMP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
	#ICMP6_FILTER
 1

	)

28 
	#ICMP6_FILTER_BLOCK
 1

	)

29 
	#ICMP6_FILTER_PASS
 2

	)

30 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

31 
	#ICMP6_FILTER_PASSONLY
 4

	)

33 
	sicmp6_fûãr


35 
uöt32_t
 
	micmp6_fût
[8];

38 
	sicmp6_hdr


40 
uöt8_t
 
	micmp6_ty≥
;

41 
uöt8_t
 
	micmp6_code
;

42 
uöt16_t
 
	micmp6_cksum
;

45 
uöt32_t
 
	micmp6_un_d©a32
[1];

46 
uöt16_t
 
	micmp6_un_d©a16
[2];

47 
uöt8_t
 
	micmp6_un_d©a8
[4];

48 } 
	micmp6_d©aun
;

51 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

52 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

53 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

54 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

55 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

57 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

58 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

60 
	#ICMP6_DST_UNREACH
 1

	)

61 
	#ICMP6_PACKET_TOO_BIG
 2

	)

62 
	#ICMP6_TIME_EXCEEDED
 3

	)

63 
	#ICMP6_PARAM_PROB
 4

	)

65 
	#ICMP6_INFOMSG_MASK
 0x80

	)

67 
	#ICMP6_ECHO_REQUEST
 128

	)

68 
	#ICMP6_ECHO_REPLY
 129

	)

69 
	#MLD_LISTENER_QUERY
 130

	)

70 
	#MLD_LISTENER_REPORT
 131

	)

71 
	#MLD_LISTENER_REDUCTION
 132

	)

73 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

74 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

76 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

77 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

78 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

80 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

81 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

83 
	#ICMP6_PARAMPROB_HEADER
 0

	)

84 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

85 
	#ICMP6_PARAMPROB_OPTION
 2

	)

87 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

88 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

90 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

91 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

93 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

94 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

96 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

97 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

99 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

100 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

102 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

103 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

105 
	#ND_ROUTER_SOLICIT
 133

	)

106 
	#ND_ROUTER_ADVERT
 134

	)

107 
	#ND_NEIGHBOR_SOLICIT
 135

	)

108 
	#ND_NEIGHBOR_ADVERT
 136

	)

109 
	#ND_REDIRECT
 137

	)

111 
	snd_rouãr_sﬁicô


113 
icmp6_hdr
 
	mnd_rs_hdr
;

117 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

118 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

119 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

120 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

122 
	snd_rouãr_advît


124 
icmp6_hdr
 
	mnd_ø_hdr
;

125 
uöt32_t
 
	mnd_ø_ªachabÀ
;

126 
uöt32_t
 
	mnd_ø_ªå™smô
;

130 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

131 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

132 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

133 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

134 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

135 
	#ND_RA_FLAG_MANAGED
 0x80

	)

136 
	#ND_RA_FLAG_OTHER
 0x40

	)

137 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

138 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

140 
	snd_√ighb‹_sﬁicô


142 
icmp6_hdr
 
	mnd_ns_hdr
;

143 
ö6_addr
 
	mnd_ns_èrgë
;

147 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

148 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

149 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

150 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

152 
	snd_√ighb‹_advît


154 
icmp6_hdr
 
	mnd_«_hdr
;

155 
ö6_addr
 
	mnd_«_èrgë
;

159 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

160 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

161 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

162 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

163 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


164 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

165 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

166 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

168 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

169 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

170 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

173 
	snd_ªdúe˘


175 
icmp6_hdr
 
	mnd_rd_hdr
;

176 
ö6_addr
 
	mnd_rd_èrgë
;

177 
ö6_addr
 
	mnd_rd_d°
;

181 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

182 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

183 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

184 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

186 
	snd_›t_hdr


188 
uöt8_t
 
	mnd_›t_ty≥
;

189 
uöt8_t
 
	mnd_›t_Àn
;

193 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

194 
	#ND_OPT_TARGET_LINKADDR
 2

	)

195 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

196 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

197 
	#ND_OPT_MTU
 5

	)

198 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

199 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

201 
	snd_›t_¥efix_öfo


203 
uöt8_t
 
	mnd_›t_pi_ty≥
;

204 
uöt8_t
 
	mnd_›t_pi_Àn
;

205 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

207 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

208 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

209 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

210 
ö6_addr
 
	mnd_›t_pi_¥efix
;

213 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

214 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

215 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

217 
	snd_›t_rd_hdr


219 
uöt8_t
 
	mnd_›t_rh_ty≥
;

220 
uöt8_t
 
	mnd_›t_rh_Àn
;

221 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

222 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

226 
	snd_›t_mtu


228 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

229 
uöt8_t
 
	mnd_›t_mtu_Àn
;

230 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

231 
uöt32_t
 
	mnd_›t_mtu_mtu
;

234 
	smld_hdr


236 
icmp6_hdr
 
	mmld_icmp6_hdr
;

237 
ö6_addr
 
	mmld_addr
;

240 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

241 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

242 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

243 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

244 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

246 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

248 
	sicmp6_rouãr_ªnum


250 
icmp6_hdr
 
	mº_hdr
;

251 
uöt8_t
 
	mº_£gnum
;

252 
uöt8_t
 
	mº_Êags
;

253 
uöt16_t
 
	mº_maxdñay
;

254 
uöt32_t
 
	mº_ª£rved
;

257 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

258 
	#º_code
 
º_hdr
.
icmp6_code


	)

259 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

260 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

263 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

264 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

265 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

266 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

267 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

269 
	sº_pco_m©ch


271 
uöt8_t
 
	mΩm_code
;

272 
uöt8_t
 
	mΩm_Àn
;

273 
uöt8_t
 
	mΩm_‹döÆ
;

274 
uöt8_t
 
	mΩm_m©chÀn
;

275 
uöt8_t
 
	mΩm_möÀn
;

276 
uöt8_t
 
	mΩm_maxÀn
;

277 
uöt16_t
 
	mΩm_ª£rved
;

278 
ö6_addr
 
	mΩm_¥efix
;

282 
	#RPM_PCO_ADD
 1

	)

283 
	#RPM_PCO_CHANGE
 2

	)

284 
	#RPM_PCO_SETGLOBAL
 3

	)

286 
	sº_pco_u£


288 
uöt8_t
 
	mΩu_u£Àn
;

289 
uöt8_t
 
	mΩu_kì∂í
;

290 
uöt8_t
 
	mΩu_ømask
;

291 
uöt8_t
 
	mΩu_øÊags
;

292 
uöt32_t
 
	mΩu_v…ime
;

293 
uöt32_t
 
	mΩu_∂time
;

294 
uöt32_t
 
	mΩu_Êags
;

295 
ö6_addr
 
	mΩu_¥efix
;

298 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

301 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


302 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

304 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


305 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

309 
	sº_ªsu…


311 
uöt16_t
 
	mºr_Êags
;

312 
uöt8_t
 
	mºr_‹döÆ
;

313 
uöt8_t
 
	mºr_m©chedÀn
;

314 
uöt32_t
 
	mºr_ifid
;

315 
ö6_addr
 
	mºr_¥efix
;

318 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


319 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

320 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

321 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


322 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

323 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

327 
	snd_›t_adv_öãrvÆ


329 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

331 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

332 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

336 
	snd_›t_home_agít_öfo


338 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

339 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

340 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/if_fddi.h

18 #i‚de‡
_NETINET_IF_FDDI_H


19 
	#_NETINET_IF_FDDI_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<asm/ty≥s.h
>

25 
	~<löux/if_fddi.h
>

27 #ifde‡
__USE_MISC


29 
	sfddi_hódî
 {

30 
u_öt8_t
 
	mfddi_fc
;

31 
u_öt8_t
 
	mfddi_dho°
[
FDDI_K_ALEN
];

32 
u_öt8_t
 
	mfddi_sho°
[
FDDI_K_ALEN
];

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #ifde‡
__USE_MISC


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #ifde‡
__USE_MISC


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #ifde‡
__USE_MISC


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #ifde‡
__USE_MISC


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #ifde‡
__USE_MISC


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

533 #i‚de‡
__USE_KERNEL_IPV6_DEFS


535 
	sö6_pktöfo


537 
ö6_addr
 
ùi6_addr
;

538 
ùi6_ifödex
;

542 
	sù6_mtuöfo


544 
sockaddr_ö6
 
ù6m_addr
;

545 
uöt32_t
 
ù6m_mtu
;

550 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

551 
__THROW
 
__©åibuã_dïªˇãd__
;

552 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

553 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

555 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

556 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

557 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

558 
__mu…x
, 
__∂usy
)

559 
__THROW
 
__©åibuã_dïªˇãd__
;

560 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

561 
uöt8_t
 **
__çåp
)

562 
__THROW
 
__©åibuã_dïªˇãd__
;

563 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

564 
uöt8_t
 **
__çåp
, 
__ty≥
)

565 
__THROW
 
__©åibuã_dïªˇãd__
;

569 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

570 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

571 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

572 **
__d©abuÂ
Ë
__THROW
;

573 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

574 
__THROW
;

575 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

576 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

577 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

578 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

579 **
__d©abuÂ
Ë
__THROW
;

580 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

581 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

582 **
__d©abuÂ
Ë
__THROW
;

583 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

584 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

588 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

589 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

590 
__£gmíts
Ë
__THROW
;

591 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

592 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

593 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

594 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

595 
__THROW
;

601 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

602 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

603 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

604 
__THROW
;

607 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

608 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

609 
uöt32_t
 
__num§c
,

610 c⁄° 
ö_addr
 *
__¶i°
)

611 
__THROW
;

615 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

616 c⁄° 
sockaddr
 *
__group
,

617 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

618 
uöt32_t
 *
__num§c
,

619 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

622 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

623 c⁄° 
sockaddr
 *
__group
,

624 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

625 
uöt32_t
 
__num§c
,

626 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

629 
__END_DECLS


	@/usr/include/netinet/in_systm.h

19 #i‚de‡
_NETINET_IN_SYSTM_H


20 
	#_NETINET_IN_SYSTM_H
 1

	)

22 
	~<sys/cdefs.h
>

23 
	~<sys/ty≥s.h
>

25 
__BEGIN_DECLS


34 
u_öt16_t
 
	tn_sh‹t
;

35 
u_öt32_t
 
	tn_l⁄g
;

36 
u_öt32_t
 
	tn_time
;

38 
	g__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_MISC


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/ip6.h

18 #i‚de‡
_NETINET_IP6_H


19 
	#_NETINET_IP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<√töë/ö.h
>

24 
	sù6_hdr


28 
	sù6_hdr˘l


30 
uöt32_t
 
	mù6_un1_Êow
;

32 
uöt16_t
 
	mù6_un1_∂í
;

33 
uöt8_t
 
	mù6_un1_nxt
;

34 
uöt8_t
 
	mù6_un1_hlim
;

35 } 
	mù6_un1
;

36 
uöt8_t
 
	mù6_un2_vfc
;

37 } 
	mù6_˘lun
;

38 
ö6_addr
 
	mù6_§c
;

39 
ö6_addr
 
	mù6_d°
;

42 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

43 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

44 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

45 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

46 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

47 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

50 
	sù6_ext


52 
uöt8_t
 
	mù6e_nxt
;

53 
uöt8_t
 
	mù6e_Àn
;

57 
	sù6_hbh


59 
uöt8_t
 
	mù6h_nxt
;

60 
uöt8_t
 
	mù6h_Àn
;

65 
	sù6_de°


67 
uöt8_t
 
	mù6d_nxt
;

68 
uöt8_t
 
	mù6d_Àn
;

73 
	sù6_πhdr


75 
uöt8_t
 
	mù6r_nxt
;

76 
uöt8_t
 
	mù6r_Àn
;

77 
uöt8_t
 
	mù6r_ty≥
;

78 
uöt8_t
 
	mù6r_£gÀ·
;

83 
	sù6_πhdr0


85 
uöt8_t
 
	mù6r0_nxt
;

86 
uöt8_t
 
	mù6r0_Àn
;

87 
uöt8_t
 
	mù6r0_ty≥
;

88 
uöt8_t
 
	mù6r0_£gÀ·
;

89 
uöt8_t
 
	mù6r0_ª£rved
;

90 
uöt8_t
 
	mù6r0_¶m≠
[3];

92 
ö6_addr
 
	mù6r0_addr
[0];

96 
	sù6_‰ag


98 
uöt8_t
 
	mù6f_nxt
;

99 
uöt8_t
 
	mù6f_ª£rved
;

100 
uöt16_t
 
	mù6f_ofÊg
;

101 
uöt32_t
 
	mù6f_idít
;

104 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


105 
	#IP6F_OFF_MASK
 0xfff8

	)

106 
	#IP6F_RESERVED_MASK
 0x0006

	)

107 
	#IP6F_MORE_FRAG
 0x0001

	)

109 
	#IP6F_OFF_MASK
 0xf8f‡

	)

110 
	#IP6F_RESERVED_MASK
 0x0600

	)

111 
	#IP6F_MORE_FRAG
 0x0100

	)

115 
	sù6_›t


117 
uöt8_t
 
	mù6o_ty≥
;

118 
uöt8_t
 
	mù6o_Àn
;

125 
	#IP6OPT_TYPE
(
o
Ë((oË& 0xc0)

	)

126 
	#IP6OPT_TYPE_SKIP
 0x00

	)

127 
	#IP6OPT_TYPE_DISCARD
 0x40

	)

128 
	#IP6OPT_TYPE_FORCEICMP
 0x80

	)

129 
	#IP6OPT_TYPE_ICMP
 0xc0

	)

130 
	#IP6OPT_TYPE_MUTABLE
 0x20

	)

133 
	#IP6OPT_PAD1
 0

	)

134 
	#IP6OPT_PADN
 1

	)

136 
	#IP6OPT_JUMBO
 0xc2

	)

137 
	#IP6OPT_NSAP_ADDR
 0xc3

	)

138 
	#IP6OPT_TUNNEL_LIMIT
 0x04

	)

139 
	#IP6OPT_ROUTER_ALERT
 0x05

	)

142 
	sù6_›t_jumbo


144 
uöt8_t
 
	mù6oj_ty≥
;

145 
uöt8_t
 
	mù6oj_Àn
;

146 
uöt8_t
 
	mù6oj_jumbo_Àn
[4];

148 
	#IP6OPT_JUMBO_LEN
 6

	)

151 
	sù6_›t_nßp


153 
uöt8_t
 
	mù6⁄_ty≥
;

154 
uöt8_t
 
	mù6⁄_Àn
;

155 
uöt8_t
 
	mù6⁄_§c_nßp_Àn
;

156 
uöt8_t
 
	mù6⁄_d°_nßp_Àn
;

162 
	sù6_›t_tu¬ñ


164 
uöt8_t
 
	mù6Ÿ_ty≥
;

165 
uöt8_t
 
	mù6Ÿ_Àn
;

166 
uöt8_t
 
	mù6Ÿ_íˇp_limô
;

170 
	sù6_›t_rouãr


172 
uöt8_t
 
	mù6‹_ty≥
;

173 
uöt8_t
 
	mù6‹_Àn
;

174 
uöt8_t
 
	mù6‹_vÆue
[2];

178 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


179 
	#IP6_ALERT_MLD
 0x0000

	)

180 
	#IP6_ALERT_RSVP
 0x0001

	)

181 
	#IP6_ALERT_AN
 0x0002

	)

183 
	#IP6_ALERT_MLD
 0x0000

	)

184 
	#IP6_ALERT_RSVP
 0x0100

	)

185 
	#IP6_ALERT_AN
 0x0200

	)

	@/usr/include/netinet/ip_icmp.h

18 #i‚de‡
__NETINET_IP_ICMP_H


19 
	#__NETINET_IP_ICMP_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
__BEGIN_DECLS


26 
	sicmphdr


28 
u_öt8_t
 
	mty≥
;

29 
u_öt8_t
 
	mcode
;

30 
u_öt16_t
 
	mchecksum
;

35 
u_öt16_t
 
	mid
;

36 
u_öt16_t
 
	m£quí˚
;

37 } 
	mecho
;

38 
u_öt32_t
 
	mg©eway
;

41 
u_öt16_t
 
	m__glibc_ª£rved
;

42 
u_öt16_t
 
	mmtu
;

43 } 
	m‰ag
;

44 } 
	mun
;

47 
	#ICMP_ECHOREPLY
 0

	)

48 
	#ICMP_DEST_UNREACH
 3

	)

49 
	#ICMP_SOURCE_QUENCH
 4

	)

50 
	#ICMP_REDIRECT
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TIME_EXCEEDED
 11

	)

53 
	#ICMP_PARAMETERPROB
 12

	)

54 
	#ICMP_TIMESTAMP
 13

	)

55 
	#ICMP_TIMESTAMPREPLY
 14

	)

56 
	#ICMP_INFO_REQUEST
 15

	)

57 
	#ICMP_INFO_REPLY
 16

	)

58 
	#ICMP_ADDRESS
 17

	)

59 
	#ICMP_ADDRESSREPLY
 18

	)

60 
	#NR_ICMP_TYPES
 18

	)

64 
	#ICMP_NET_UNREACH
 0

	)

65 
	#ICMP_HOST_UNREACH
 1

	)

66 
	#ICMP_PROT_UNREACH
 2

	)

67 
	#ICMP_PORT_UNREACH
 3

	)

68 
	#ICMP_FRAG_NEEDED
 4

	)

69 
	#ICMP_SR_FAILED
 5

	)

70 
	#ICMP_NET_UNKNOWN
 6

	)

71 
	#ICMP_HOST_UNKNOWN
 7

	)

72 
	#ICMP_HOST_ISOLATED
 8

	)

73 
	#ICMP_NET_ANO
 9

	)

74 
	#ICMP_HOST_ANO
 10

	)

75 
	#ICMP_NET_UNR_TOS
 11

	)

76 
	#ICMP_HOST_UNR_TOS
 12

	)

77 
	#ICMP_PKT_FILTERED
 13

	)

78 
	#ICMP_PREC_VIOLATION
 14

	)

79 
	#ICMP_PREC_CUTOFF
 15

	)

80 
	#NR_ICMP_UNREACH
 15

	)

83 
	#ICMP_REDIR_NET
 0

	)

84 
	#ICMP_REDIR_HOST
 1

	)

85 
	#ICMP_REDIR_NETTOS
 2

	)

86 
	#ICMP_REDIR_HOSTTOS
 3

	)

89 
	#ICMP_EXC_TTL
 0

	)

90 
	#ICMP_EXC_FRAGTIME
 1

	)

93 #ifde‡
__USE_MISC


125 
	~<√töë/ö.h
>

126 
	~<√töë/ù.h
>

131 
	sicmp_ø_addr


133 
u_öt32_t
 
	múa_addr
;

134 
u_öt32_t
 
	múa_¥e„ªn˚
;

137 
	sicmp


139 
u_öt8_t
 
	micmp_ty≥
;

140 
u_öt8_t
 
	micmp_code
;

141 
u_öt16_t
 
	micmp_cksum
;

144 
u_ch¨
 
	mih_µå
;

145 
ö_addr
 
	mih_gwaddr
;

146 
	sih_id£q


148 
u_öt16_t
 
	micd_id
;

149 
u_öt16_t
 
	micd_£q
;

150 } 
	mih_id£q
;

151 
u_öt32_t
 
	mih_void
;

154 
	sih_pmtu


156 
u_öt16_t
 
	mùm_void
;

157 
u_öt16_t
 
	mùm_√xtmtu
;

158 } 
	mih_pmtu
;

160 
	sih_πødv


162 
u_öt8_t
 
	mút_num_addrs
;

163 
u_öt8_t
 
	mút_w∑
;

164 
u_öt16_t
 
	mút_li„time
;

165 } 
	mih_πødv
;

166 } 
	micmp_hun
;

167 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

168 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

169 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

170 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

171 
	#icmp_void
 
icmp_hun
.
ih_void


	)

172 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

173 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

174 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

175 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

176 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

181 
u_öt32_t
 
	môs_Ÿime
;

182 
u_öt32_t
 
	môs_πime
;

183 
u_öt32_t
 
	môs_âime
;

184 } 
	mid_ts
;

187 
ù
 
	midi_ù
;

189 } 
	mid_ù
;

190 
icmp_ø_addr
 
	mid_ødv
;

191 
u_öt32_t
 
	mid_mask
;

192 
u_öt8_t
 
	mid_d©a
[1];

193 } 
	micmp_dun
;

194 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

195 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

196 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

197 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

198 
	#icmp_ødv
 
icmp_dun
.
id_ødv


	)

199 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

200 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

211 
	#ICMP_MINLEN
 8

	)

212 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

213 
	#ICMP_MASKLEN
 12

	)

214 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

215 #i‚de‡
_IP_VHL


216 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

219 
	#ICMP_ADVLEN
(
p
Ë(8 + (
	`IP_VHL_HL
(’)->
icmp_ù
.
ù_vhl
Ë<< 2Ë+ 8)

	)

225 
	#ICMP_UNREACH
 3

	)

226 
	#ICMP_SOURCEQUENCH
 4

	)

227 
	#ICMP_ROUTERADVERT
 9

	)

228 
	#ICMP_ROUTERSOLICIT
 10

	)

229 
	#ICMP_TIMXCEED
 11

	)

230 
	#ICMP_PARAMPROB
 12

	)

231 
	#ICMP_TSTAMP
 13

	)

232 
	#ICMP_TSTAMPREPLY
 14

	)

233 
	#ICMP_IREQ
 15

	)

234 
	#ICMP_IREQREPLY
 16

	)

235 
	#ICMP_MASKREQ
 17

	)

236 
	#ICMP_MASKREPLY
 18

	)

238 
	#ICMP_MAXTYPE
 18

	)

241 
	#ICMP_UNREACH_NET
 0

	)

242 
	#ICMP_UNREACH_HOST
 1

	)

243 
	#ICMP_UNREACH_PROTOCOL
 2

	)

244 
	#ICMP_UNREACH_PORT
 3

	)

245 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

246 
	#ICMP_UNREACH_SRCFAIL
 5

	)

247 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

248 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

249 
	#ICMP_UNREACH_ISOLATED
 8

	)

250 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

251 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

252 
	#ICMP_UNREACH_TOSNET
 11

	)

253 
	#ICMP_UNREACH_TOSHOST
 12

	)

254 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

255 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

256 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

259 
	#ICMP_REDIRECT_NET
 0

	)

260 
	#ICMP_REDIRECT_HOST
 1

	)

261 
	#ICMP_REDIRECT_TOSNET
 2

	)

262 
	#ICMP_REDIRECT_TOSHOST
 3

	)

265 
	#ICMP_TIMXCEED_INTRANS
 0

	)

266 
	#ICMP_TIMXCEED_REASS
 1

	)

269 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

271 
	#ICMP_INFOTYPE
(
ty≥
) \

272 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

273 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

274 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

275 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

276 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

280 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 
u_öt32_t
 
	tt˝_£q
;

74 
	st˝hdr


76 
__exãnsi⁄__
 union

80 
u_öt16_t
 
	mth_•‹t
;

81 
u_öt16_t
 
	mth_dp‹t
;

82 
t˝_£q
 
	mth_£q
;

83 
t˝_£q
 
	mth_ack
;

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
u_öt8_t
 
	mth_x2
:4;

86 
u_öt8_t
 
	mth_off
:4;

88 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


89 
u_öt8_t
 
	mth_off
:4;

90 
u_öt8_t
 
	mth_x2
:4;

92 
u_öt8_t
 
	mth_Êags
;

93 
	#TH_FIN
 0x01

	)

94 
	#TH_SYN
 0x02

	)

95 
	#TH_RST
 0x04

	)

96 
	#TH_PUSH
 0x08

	)

97 
	#TH_ACK
 0x10

	)

98 
	#TH_URG
 0x20

	)

99 
u_öt16_t
 
	mth_wö
;

100 
u_öt16_t
 
	mth_sum
;

101 
u_öt16_t
 
	mth_uΩ
;

105 
u_öt16_t
 
	msour˚
;

106 
u_öt16_t
 
	mde°
;

107 
u_öt32_t
 
	m£q
;

108 
u_öt32_t
 
	mack_£q
;

109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mdoff
:4;

112 
u_öt16_t
 
	mfö
:1;

113 
u_öt16_t
 
	msyn
:1;

114 
u_öt16_t
 
	mr°
:1;

115 
u_öt16_t
 
	mpsh
:1;

116 
u_öt16_t
 
	mack
:1;

117 
u_öt16_t
 
	murg
:1;

118 
u_öt16_t
 
	mªs2
:2;

119 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


120 
u_öt16_t
 
	mdoff
:4;

121 
u_öt16_t
 
	mªs1
:4;

122 
u_öt16_t
 
	mªs2
:2;

123 
u_öt16_t
 
	murg
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	mpsh
:1;

126 
u_öt16_t
 
	mr°
:1;

127 
u_öt16_t
 
	msyn
:1;

128 
u_öt16_t
 
	mfö
:1;

132 
u_öt16_t
 
	mwödow
;

133 
u_öt16_t
 
	mcheck
;

134 
u_öt16_t
 
	murg_±r
;

141 
	mTCP_ESTABLISHED
 = 1,

142 
	mTCP_SYN_SENT
,

143 
	mTCP_SYN_RECV
,

144 
	mTCP_FIN_WAIT1
,

145 
	mTCP_FIN_WAIT2
,

146 
	mTCP_TIME_WAIT
,

147 
	mTCP_CLOSE
,

148 
	mTCP_CLOSE_WAIT
,

149 
	mTCP_LAST_ACK
,

150 
	mTCP_LISTEN
,

151 
	mTCP_CLOSING


154 
	#TCPOPT_EOL
 0

	)

155 
	#TCPOPT_NOP
 1

	)

156 
	#TCPOPT_MAXSEG
 2

	)

157 
	#TCPOLEN_MAXSEG
 4

	)

158 
	#TCPOPT_WINDOW
 3

	)

159 
	#TCPOLEN_WINDOW
 3

	)

160 
	#TCPOPT_SACK_PERMITTED
 4

	)

161 
	#TCPOLEN_SACK_PERMITTED
 2

	)

162 
	#TCPOPT_SACK
 5

	)

163 
	#TCPOPT_TIMESTAMP
 8

	)

164 
	#TCPOLEN_TIMESTAMP
 10

	)

165 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

167 
	#TCPOPT_TSTAMP_HDR
 \

168 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

176 
	#TCP_MSS
 512

	)

178 
	#TCP_MAXWIN
 65535

	)

180 
	#TCP_MAX_WINSHIFT
 14

	)

182 
	#SOL_TCP
 6

	)

185 
	#TCPI_OPT_TIMESTAMPS
 1

	)

186 
	#TCPI_OPT_SACK
 2

	)

187 
	#TCPI_OPT_WSCALE
 4

	)

188 
	#TCPI_OPT_ECN
 8

	)

189 
	#TCPI_OPT_ECN_SEEN
 16

	)

190 
	#TCPI_OPT_SYN_DATA
 32

	)

193 
	et˝_ˇ_°©e


195 
	mTCP_CA_O≥n
 = 0,

196 
	mTCP_CA_Dis‹dî
 = 1,

197 
	mTCP_CA_CWR
 = 2,

198 
	mTCP_CA_Recovîy
 = 3,

199 
	mTCP_CA_Loss
 = 4

202 
	st˝_öfo


204 
u_öt8_t
 
	mt˝i_°©e
;

205 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

206 
u_öt8_t
 
	mt˝i_ªå™smôs
;

207 
u_öt8_t
 
	mt˝i_¥obes
;

208 
u_öt8_t
 
	mt˝i_backoff
;

209 
u_öt8_t
 
	mt˝i_›ti⁄s
;

210 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

212 
u_öt32_t
 
	mt˝i_πo
;

213 
u_öt32_t
 
	mt˝i_©o
;

214 
u_öt32_t
 
	mt˝i_¢d_mss
;

215 
u_öt32_t
 
	mt˝i_rcv_mss
;

217 
u_öt32_t
 
	mt˝i_u«cked
;

218 
u_öt32_t
 
	mt˝i_ßcked
;

219 
u_öt32_t
 
	mt˝i_lo°
;

220 
u_öt32_t
 
	mt˝i_ªå™s
;

221 
u_öt32_t
 
	mt˝i_Áckës
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

226 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

227 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

230 
u_öt32_t
 
	mt˝i_pmtu
;

231 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

232 
u_öt32_t
 
	mt˝i_πt
;

233 
u_öt32_t
 
	mt˝i_πtv¨
;

234 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

235 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

236 
u_öt32_t
 
	mt˝i_advmss
;

237 
u_öt32_t
 
	mt˝i_ª‹dîög
;

239 
u_öt32_t
 
	mt˝i_rcv_πt
;

240 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

242 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

247 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

249 
	st˝_md5sig


251 
sockaddr_°‹age
 
	mt˝m_addr
;

252 
u_öt16_t
 
	m__t˝m_∑d1
;

253 
u_öt16_t
 
	mt˝m_keyÀn
;

254 
u_öt32_t
 
	m__t˝m_∑d2
;

255 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

259 
	st˝_ª∑ú_›t


261 
u_öt32_t
 
	m›t_code
;

262 
u_öt32_t
 
	m›t_vÆ
;

268 
	mTCP_NO_QUEUE
,

269 
	mTCP_RECV_QUEUE
,

270 
	mTCP_SEND_QUEUE
,

271 
	mTCP_QUEUES_NR
,

275 
	#TCP_COOKIE_MIN
 8

	)

276 
	#TCP_COOKIE_MAX
 16

	)

277 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

280 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

281 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

285 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

286 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

288 
	#TCP_MSS_DEFAULT
 536U

	)

289 
	#TCP_MSS_DESIRED
 1220U

	)

291 
	st˝_cookõ_å™ß˘i⁄s


293 
u_öt16_t
 
	mt˝˘_Êags
;

294 
u_öt8_t
 
	m__t˝˘_∑d1
;

295 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

296 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

297 
u_öt16_t
 
	mt˝˘_u£d
;

298 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/netinet/udp.h

47 #i‚de‡
__NETINET_UDP_H


48 
	#__NETINET_UDP_H
 1

	)

50 
	~<„©uªs.h
>

51 
	~<sys/ty≥s.h
>

56 
	sudphdr


58 
__exãnsi⁄__
 union

62 
u_öt16_t
 
	muh_•‹t
;

63 
u_öt16_t
 
	muh_dp‹t
;

64 
u_öt16_t
 
	muh_uÀn
;

65 
u_öt16_t
 
	muh_sum
;

69 
u_öt16_t
 
	msour˚
;

70 
u_öt16_t
 
	mde°
;

71 
u_öt16_t
 
	mÀn
;

72 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

81 
	#UDP_NO_CHECK6_TX
 101

	)

83 
	#UDP_NO_CHECK6_RX
 102

	)

87 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

88 
	#UDP_ENCAP_ESPINUDP
 2

	)

89 
	#UDP_ENCAP_L2TPINUDP
 3

	)

91 
	#SOL_UDP
 17

	)

	@/usr/include/netipx/ipx.h

18 #i‚de‡
__NETIPX_IPX_H


19 
	#__NETIPX_IPX_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<bôs/sockaddr.h
>

26 
	g__BEGIN_DECLS


28 
	#SOL_IPX
 256

	)

30 
	#IPX_TYPE
 1

	)

31 
	#IPX_NODE_LEN
 6

	)

32 
	#IPX_MTU
 576

	)

34 
	ssockaddr_ùx


36 
ß_Ámûy_t
 
	msùx_Ámûy
;

37 
u_öt16_t
 
	msùx_p‹t
;

38 
u_öt32_t
 
	msùx_√tw‹k
;

39 
	msùx_node
[
IPX_NODE_LEN
];

40 
u_öt8_t
 
	msùx_ty≥
;

41 
	msùx_zîo
;

48 
	#sùx_•ecül
 
sùx_p‹t


	)

49 
	#sùx_a˘i⁄
 
sùx_zîo


	)

50 
	#IPX_DLTITF
 0

	)

51 
	#IPX_CRTITF
 1

	)

53 
	sùx_rouã_deföôi⁄


55 
	mùx_√tw‹k
;

56 
	mùx_rouãr_√tw‹k
;

57 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

59 
	tùx_rouã_deföôi⁄
;

61 
	sùx_öãrÁ˚_deföôi⁄


63 
	mùx_√tw‹k
;

64 
	mùx_devi˚
[16];

65 
	mùx_dlök_ty≥
;

66 
	#IPX_FRAME_NONE
 0

	)

67 
	#IPX_FRAME_SNAP
 1

	)

68 
	#IPX_FRAME_8022
 2

	)

69 
	#IPX_FRAME_ETHERII
 3

	)

70 
	#IPX_FRAME_8023
 4

	)

71 
	#IPX_FRAME_TR_8022
 5

	)

72 
	mùx_•ecül
;

73 
	#IPX_SPECIAL_NONE
 0

	)

74 
	#IPX_PRIMARY
 1

	)

75 
	#IPX_INTERNAL
 2

	)

76 
	mùx_node
[
IPX_NODE_LEN
];

78 
	tùx_öãrÁ˚_deföôi⁄
;

80 
	sùx_c⁄fig_d©a


82 
	mùxcfg_auto_£À˘_¥im¨y
;

83 
	mùxcfg_auto_¸óã_öãrÁ˚s
;

85 
	tùx_c⁄fig_d©a
;

91 
	sùx_rouã_def


93 
	mùx_√tw‹k
;

94 
	mùx_rouãr_√tw‹k
;

95 
	#IPX_ROUTE_NO_ROUTER
 0

	)

96 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

97 
	mùx_devi˚
[16];

98 
	mùx_Êags
;

99 
	#IPX_RT_SNAP
 8

	)

100 
	#IPX_RT_8022
 4

	)

101 
	#IPX_RT_BLUEBOOK
 2

	)

102 
	#IPX_RT_ROUTED
 1

	)

105 
	#SIOCAIPXITFCRT
 (
SIOCPROTOPRIVATE
)

	)

106 
	#SIOCAIPXPRISLT
 (
SIOCPROTOPRIVATE
 + 1)

	)

107 
	#SIOCIPXCFGDATA
 (
SIOCPROTOPRIVATE
 + 2)

	)

108 
	#SIOCIPXNCPCONN
 (
SIOCPROTOPRIVATE
 + 3)

	)

110 
	g__END_DECLS


	@/usr/include/netpacket/packet.h

19 #i‚de‡
__NETPACKET_PACKET_H


20 
	#__NETPACKET_PACKET_H
 1

	)

22 
	ssockaddr_Œ


24 
	m¶l_Ámûy
;

25 
	m¶l_¥Ÿocﬁ
;

26 
	m¶l_ifödex
;

27 
	m¶l_h©y≥
;

28 
	m¶l_pkây≥
;

29 
	m¶l_hÆí
;

30 
	m¶l_addr
[8];

35 
	#PACKET_HOST
 0

	)

36 
	#PACKET_BROADCAST
 1

	)

37 
	#PACKET_MULTICAST
 2

	)

38 
	#PACKET_OTHERHOST
 3

	)

39 
	#PACKET_OUTGOING
 4

	)

40 
	#PACKET_LOOPBACK
 5

	)

41 
	#PACKET_FASTROUTE
 6

	)

45 
	#PACKET_ADD_MEMBERSHIP
 1

	)

46 
	#PACKET_DROP_MEMBERSHIP
 2

	)

47 
	#PACKET_RECV_OUTPUT
 3

	)

48 
	#PACKET_RX_RING
 5

	)

49 
	#PACKET_STATISTICS
 6

	)

51 
	s∑ckë_mªq


53 
	mmr_ifödex
;

54 
	mmr_ty≥
;

55 
	mmr_Æí
;

56 
	mmr_addªss
[8];

59 
	#PACKET_MR_MULTICAST
 0

	)

60 
	#PACKET_MR_PROMISC
 1

	)

61 
	#PACKET_MR_ALLMULTI
 2

	)

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/db/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 #i‚de‡
__BIND_NOSTATIC


254 
	#Â_nquîy
 
__Â_nquîy


	)

255 
	#Â_quîy
 
__Â_quîy


	)

256 
	#ho°Æüs
 
__ho°Æüs


	)

257 
	#p_quîy
 
__p_quîy


	)

258 
	#ªs_˛o£
 
__ªs_˛o£


	)

259 
	#ªs_öô
 
__ªs_öô


	)

260 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

261 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

262 
	#ªs_quîy
 
__ªs_quîy


	)

263 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

264 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

265 
	#ªs_£nd
 
__ªs_£nd


	)

267 
__BEGIN_DECLS


268 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

269 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

270 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

271 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

272 
	$ªs_˛o£
 (Ë
__THROW
;

273 
	$ªs_öô
 (Ë
__THROW
;

274 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

275 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

276 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

277 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_quîydomaö
 (const *, const *, , ,

279 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

281 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

282 
__END_DECLS


285 
	#b64_¡›
 
__b64_¡›


	)

286 
	#b64_±⁄
 
__b64_±⁄


	)

287 
	#dn_comp
 
__dn_comp


	)

288 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

289 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

290 
	#dn_skù«me
 
__dn_skù«me


	)

291 
	#Â_ªs°©
 
__Â_ªs°©


	)

292 
	#loc_©⁄
 
__loc_©⁄


	)

293 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

294 
	#p_cd«me
 
__p_cd«me


	)

295 
	#p_cd¬ame
 
__p_cd¬ame


	)

296 
	#p_˛ass
 
__p_˛ass


	)

297 
	#p_fq«me
 
__p_fq«me


	)

298 
	#p_fq¬ame
 
__p_fq¬ame


	)

299 
	#p_›ti⁄
 
__p_›ti⁄


	)

300 
	#p_£c°od©e
 
__p_£c°od©e


	)

301 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

302 
	#p_time
 
__p_time


	)

303 
	#p_ty≥
 
__p_ty≥


	)

304 
	#p_rcode
 
__p_rcode


	)

305 
	#pué⁄g
 
__pué⁄g


	)

306 
	#putsh‹t
 
__putsh‹t


	)

307 
	#ªs_dnok
 
__ªs_dnok


	)

308 
	#ªs_hnok
 
__ªs_hnok


	)

309 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

310 
	#ªs_maûok
 
__ªs_maûok


	)

311 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

312 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

313 
	#ªs_nöô
 
__ªs_nöô


	)

314 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

315 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

316 
	#ªs_nquîy
 
__ªs_nquîy


	)

317 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

318 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

319 
	#ªs_n£nd
 
__ªs_n£nd


	)

320 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

321 
	#ªs_ownok
 
__ªs_ownok


	)

322 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

323 
	#ªs_øndomid
 
__ªs_øndomid


	)

324 
	#sym_¡›
 
__sym_¡›


	)

325 
	#sym_¡os
 
__sym_¡os


	)

326 
	#sym_°⁄
 
__sym_°⁄


	)

327 
__BEGIN_DECLS


328 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

330 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

331 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

332 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

333 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

334 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

335 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

336 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

337 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

338 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

339 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

340 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

341 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

342 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

343 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

344 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

345 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

347 
__THROW
;

348 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

350 , *, Ë
__THROW
;

351 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

352 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

353 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

354 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

355 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

356 
__THROW
;

357 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

358 *, Ë
__THROW
;

359 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

360 
	$ªs_«meöquîy
 (const *, , ,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

363 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

364 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

366 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

367 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

368 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

369 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

370 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

371 
__THROW
;

372 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

373 
__THROW
;

374 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

377 
__THROW
;

378 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

379 , 
u_ch¨
 *, Ë
__THROW
;

380 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

381 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

382 Ë
__THROW
;

383 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

384 
__THROW
;

385 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

386 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


	@/usr/include/sys/file.h

18 #i‚def 
_SYS_FILE_H


19 
	#_SYS_FILE_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‚def 
_FCNTL_H


24 
	~<f˙é.h
>

27 
	g__BEGIN_DECLS


32 #i‚de‡
L_SET


33 
	#L_SET
 0

	)

34 
	#L_INCR
 1

	)

35 
	#L_XTND
 2

	)

40 
	#LOCK_SH
 1

	)

41 
	#LOCK_EX
 2

	)

42 
	#LOCK_UN
 8

	)

45 
	#LOCK_NB
 4

	)

50 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

53 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 #i‚de‡
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

81 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

86 #i‚de‡
howm™y


87 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

89 #ifde‡
__GNUC__


90 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

91 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

94 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

96 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

99 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

100 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/prctl.h

18 #i‚de‡
_SYS_PRCTL_H


19 
	#_SYS_PRCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<löux/¥˘l.h
>

24 
__BEGIN_DECLS


27 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

29 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_MISC


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/timex.h

18 #i‚def 
_SYS_TIMEX_H


19 
	#_SYS_TIMEX_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/time.h
>

26 
	~<bôs/timex.h
>

28 
	#NTP_API
 4

	)

30 
	s¡±imevÆ


32 
timevÆ
 
	mtime
;

33 
	mmaxîr‹
;

34 
	me°îr‹
;

35 
	mèi
;

37 
	m__glibc_ª£rved1
;

38 
	m__glibc_ª£rved2
;

39 
	m__glibc_ª£rved3
;

40 
	m__glibc_ª£rved4
;

44 
	#TIME_OK
 0

	)

45 
	#TIME_INS
 1

	)

46 
	#TIME_DEL
 2

	)

47 
	#TIME_OOP
 3

	)

48 
	#TIME_WAIT
 4

	)

49 
	#TIME_ERROR
 5

	)

50 
	#TIME_BAD
 
TIME_ERROR


	)

53 
	#MAXTC
 6

	)

55 
__BEGIN_DECLS


57 
	$__adjtimex
 (
timex
 *
__¡x
Ë
__THROW
;

58 
	$adjtimex
 (
timex
 *
__¡x
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 
	`__REDIRECT_NTH
 (
¡p_gëtime
, (
¡±imevÆ
 *
__¡v
),

62 
¡p_gëtimex
);

64 
	$¡p_gëtimex
 (
¡±imevÆ
 *
__¡v
Ë
__THROW
;

65 
	#¡p_gëtime
 
¡p_gëtimex


	)

67 
	$¡p_adjtime
 (
timex
 *
__ätx
Ë
__THROW
;

69 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/sys/un.h

18 #i‚def 
_SYS_UN_H


19 
	#_SYS_UN_H
 1

	)

21 
	~<sys/cdefs.h
>

24 
	~<bôs/sockaddr.h
>

26 
__BEGIN_DECLS


29 
	ssockaddr_un


31 
__SOCKADDR_COMMON
 (
sun_
);

32 
	msun_∑th
[108];

36 #ifde‡
__USE_MISC


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
	g__END_DECLS


	@/usr/include/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_MISC


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_MISC


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_MISC


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

98 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


101 
	mP_ALL
,

102 
	mP_PID
,

103 
	mP_PGID


104 } 
	tidty≥_t
;

113 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

115 #ifdef 
__USE_MISC


117 
	#WAIT_ANY
 (-1Ë

	)

118 
	#WAIT_MYPGRP
 0

	)

136 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

138 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


139 #i‚de‡
__id_t_deföed


140 
	~<bôs/ty≥s.h
>

141 
__id_t
 
	tid_t
;

142 
	#__id_t_deföed


	)

145 
	#__√ed_sigöfo_t


	)

146 
	~<bôs/sigöfo.h
>

159 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

160 
__›ti⁄s
);

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


166 
	grußge
;

173 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

174 
rußge
 * 
__ußge
Ë
__THROWNL
;

177 #ifde‡
__USE_MISC


179 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

180 
rußge
 *
__ußge
Ë
__THROWNL
;

184 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ptrace.h

1 #i‚de‡
_ASM_X86_PTRACE_H


2 
	#_ASM_X86_PTRACE_H


	)

5 
	~<asm/±ø˚-abi.h
>

6 
	~<asm/¥o˚ss‹-Êags.h
>

9 #i‚de‡
__ASSEMBLY__


11 #ifde‡
__i386__


16 
	s±_ªgs
 {

17 
	mebx
;

18 
	mecx
;

19 
	medx
;

20 
	mesi
;

21 
	medi
;

22 
	mebp
;

23 
	móx
;

24 
	mxds
;

25 
	mxes
;

26 
	mxfs
;

27 
	mxgs
;

28 
	m‹ig_óx
;

29 
	meù
;

30 
	mxcs
;

31 
	meÊags
;

32 
	me•
;

33 
	mxss
;

40 
	s±_ªgs
 {

45 
	mr15
;

46 
	mr14
;

47 
	mr13
;

48 
	mr12
;

49 
	mrbp
;

50 
	mrbx
;

52 
	mr11
;

53 
	mr10
;

54 
	mr9
;

55 
	mr8
;

56 
	møx
;

57 
	mrcx
;

58 
	mrdx
;

59 
	mrsi
;

60 
	mrdi
;

65 
	m‹ig_øx
;

67 
	mrù
;

68 
	mcs
;

69 
	meÊags
;

70 
	mr•
;

71 
	mss
;

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/error.h

19 #i‚def 
_ERROR_H


24 
__REDIRECT
 (
__îr‹_Æüs
, (
__°©us
, 
__î∫um
,

25 c⁄° *
__f‹m©
, ...),

26 
îr‹
)

27 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 
__REDIRECT
 (
__îr‹_n‹ëu∫
, (
__°©us
, 
__î∫um
,

29 c⁄° *
__f‹m©
, ...),

30 
îr‹
)

31 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 3, 4)));

36 
__exã∫_Æways_ölöe
 

37 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

39 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

40 
	`__îr‹_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

42 
	`__îr‹_Æüs
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

43 
	}
}

46 
__REDIRECT
 (
__îr‹_©_löe_Æüs
, (
__°©us
, 
__î∫um
,

47 c⁄° *
__‚ame
,

48 
__löe
,

49 c⁄° *
__f‹m©
, ...),

50 
îr‹_©_löe
)

51 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 5, 6)));

52 
__REDIRECT
 (
__îr‹_©_löe_n‹ëu∫
, (
__°©us
, 
__î∫um
,

53 c⁄° *
__‚ame
,

54 
__löe
,

55 c⁄° *
__f‹m©
,

57 
îr‹_©_löe
)

58 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 5, 6)));

63 
__exã∫_Æways_ölöe
 

64 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

65 
__löe
, c⁄° *
__f‹m©
, ...)

67 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

68 
	`__îr‹_©_löe_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
, 
__f‹m©
,

69 
	`__va_¨g_∑ck
 ());

71 
	`__îr‹_©_löe_Æüs
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
,

72 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

73 
	}
}

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 || deföed 
_UAPI_IPV6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #ifde‡
__USE_MISC


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

93 
	#IP_NODEFRAG
 22

	)

94 
	#IP_CHECKSUM
 23

	)

97 
	#IP_PMTUDISC_DONT
 0

	)

98 
	#IP_PMTUDISC_WANT
 1

	)

99 
	#IP_PMTUDISC_DO
 2

	)

100 
	#IP_PMTUDISC_PROBE
 3

	)

104 
	#IP_PMTUDISC_INTERFACE
 4

	)

106 
	#IP_PMTUDISC_OMIT
 5

	)

108 
	#IP_MULTICAST_IF
 32

	)

109 
	#IP_MULTICAST_TTL
 33

	)

110 
	#IP_MULTICAST_LOOP
 34

	)

111 
	#IP_ADD_MEMBERSHIP
 35

	)

112 
	#IP_DROP_MEMBERSHIP
 36

	)

113 
	#IP_UNBLOCK_SOURCE
 37

	)

114 
	#IP_BLOCK_SOURCE
 38

	)

115 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

116 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

117 
	#IP_MSFILTER
 41

	)

118 
	#IP_MULTICAST_ALL
 49

	)

119 
	#IP_UNICAST_IF
 50

	)

122 
	#SOL_IP
 0

	)

124 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

125 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

126 
	#IP_MAX_MEMBERSHIPS
 20

	)

128 #ifde‡
__USE_MISC


132 
	sù_›ts


134 
ö_addr
 
	mù_d°
;

135 
	mù_›ts
[40];

139 
	sù_mªqn


141 
ö_addr
 
	mimr_mu…üddr
;

142 
ö_addr
 
	mimr_addªss
;

143 
	mimr_ifödex
;

147 
	sö_pktöfo


149 
	mùi_ifödex
;

150 
ö_addr
 
	mùi_•ec_d°
;

151 
ö_addr
 
	mùi_addr
;

158 
	#IPV6_ADDRFORM
 1

	)

159 
	#IPV6_2292PKTINFO
 2

	)

160 
	#IPV6_2292HOPOPTS
 3

	)

161 
	#IPV6_2292DSTOPTS
 4

	)

162 
	#IPV6_2292RTHDR
 5

	)

163 
	#IPV6_2292PKTOPTIONS
 6

	)

164 
	#IPV6_CHECKSUM
 7

	)

165 
	#IPV6_2292HOPLIMIT
 8

	)

167 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

169 
	#IPV6_NEXTHOP
 9

	)

170 
	#IPV6_AUTHHDR
 10

	)

171 
	#IPV6_UNICAST_HOPS
 16

	)

172 
	#IPV6_MULTICAST_IF
 17

	)

173 
	#IPV6_MULTICAST_HOPS
 18

	)

174 
	#IPV6_MULTICAST_LOOP
 19

	)

175 
	#IPV6_JOIN_GROUP
 20

	)

176 
	#IPV6_LEAVE_GROUP
 21

	)

177 
	#IPV6_ROUTER_ALERT
 22

	)

178 
	#IPV6_MTU_DISCOVER
 23

	)

179 
	#IPV6_MTU
 24

	)

180 
	#IPV6_RECVERR
 25

	)

181 
	#IPV6_V6ONLY
 26

	)

182 
	#IPV6_JOIN_ANYCAST
 27

	)

183 
	#IPV6_LEAVE_ANYCAST
 28

	)

184 
	#IPV6_IPSEC_POLICY
 34

	)

185 
	#IPV6_XFRM_POLICY
 35

	)

188 
	#IPV6_RECVPKTINFO
 49

	)

189 
	#IPV6_PKTINFO
 50

	)

190 
	#IPV6_RECVHOPLIMIT
 51

	)

191 
	#IPV6_HOPLIMIT
 52

	)

192 
	#IPV6_RECVHOPOPTS
 53

	)

193 
	#IPV6_HOPOPTS
 54

	)

194 
	#IPV6_RTHDRDSTOPTS
 55

	)

195 
	#IPV6_RECVRTHDR
 56

	)

196 
	#IPV6_RTHDR
 57

	)

197 
	#IPV6_RECVDSTOPTS
 58

	)

198 
	#IPV6_DSTOPTS
 59

	)

199 
	#IPV6_RECVPATHMTU
 60

	)

200 
	#IPV6_PATHMTU
 61

	)

201 
	#IPV6_DONTFRAG
 62

	)

204 
	#IPV6_RECVTCLASS
 66

	)

205 
	#IPV6_TCLASS
 67

	)

208 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

209 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

210 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

211 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

214 
	#IPV6_PMTUDISC_DONT
 0

	)

215 
	#IPV6_PMTUDISC_WANT
 1

	)

216 
	#IPV6_PMTUDISC_DO
 2

	)

217 
	#IPV6_PMTUDISC_PROBE
 3

	)

218 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

219 
	#IPV6_PMTUDISC_OMIT
 5

	)

222 
	#SOL_IPV6
 41

	)

223 
	#SOL_ICMPV6
 58

	)

226 
	#IPV6_RTHDR_LOOSE
 0

	)

227 
	#IPV6_RTHDR_STRICT
 1

	)

229 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

255 && 
deföed
 
	g__exã∫_Æways_ölöe
)

257 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

259 #ifde‡
__USE_ISOC99


260 
__loˇl_signgam
 = 0;

261  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

263  
	`lgamma_r
 (
__d
, &
signgam
);

265 
	}
}

266 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

268 #ifde‡
__USE_ISOC99


269 
__loˇl_signgam
 = 0;

270  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

272  
	`lgammaf_r
 (
__d
, &
signgam
);

274 
	}
}

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

278 #ifde‡
__USE_ISOC99


279 
__loˇl_signgam
 = 0;

280  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

282  
	`lgammÆ_r
 (
__d
, &
signgam
);

284 
	}
}

288 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
) \

289 && 
deföed
 
	g__exã∫_Æways_ölöe
)

291 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

293 #ifde‡
__USE_ISOC99


294 
__loˇl_signgam
 = 0;

295  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

297  
	`lgamma_r
 (
__d
, &
signgam
);

299 
	}
}

300 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

302 #ifde‡
__USE_ISOC99


303 
__loˇl_signgam
 = 0;

304  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

306  
	`lgammaf_r
 (
__d
, &
signgam
);

308 
	}
}

309 #ifde‡
__MATH_DECLARE_LDOUBLE


310 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

312 #ifde‡
__USE_ISOC99


313 
__loˇl_signgam
 = 0;

314  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

316  
	`lgammÆ_r
 (
__d
, &
signgam
);

318 
	}
}

323 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

324 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

325 #ifde‡
__MATH_DECLARE_LDOUBLE


326 #ifde‡
__NO_LONG_DOUBLE_MATH


327 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

329 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

334 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

335 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

336 #ifde‡
__MATH_DECLARE_LDOUBLE


337 #ifde‡
__NO_LONG_DOUBLE_MATH


338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

340 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

344 #ifde‡
__USE_ISOC99


346 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

347 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

348 #ifde‡
__MATH_DECLARE_LDOUBLE


349 #ifde‡
__NO_LONG_DOUBLE_MATH


350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

352 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

358 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

359 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

360 #ifde‡
__MATH_DECLARE_LDOUBLE


361 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

365 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

366 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

367 #ifde‡
__MATH_DECLARE_LDOUBLE


368 #ifde‡
__NO_LONG_DOUBLE_MATH


369 
__REDIRECT_NTH
 (
powl
, (, ),

370 
__pow_föôe
);

372 
__REDIRECT_NTH
 (
powl
, (, ),

373 
__powl_föôe
);

378 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

379 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

380 #ifde‡
__MATH_DECLARE_LDOUBLE


381 #ifde‡
__NO_LONG_DOUBLE_MATH


382 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

383 
__ªmaödî_föôe
);

385 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

386 
__ªmaödîl_föôe
);

390 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


392 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

393 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

394 #ifde‡
__MATH_DECLARE_LDOUBLE


395 #ifde‡
__NO_LONG_DOUBLE_MATH


396 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

397 
__sˇlb_föôe
);

399 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

400 
__sˇlbl_föôe
);

406 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

407 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

408 #ifde‡
__MATH_DECLARE_LDOUBLE


409 #ifde‡
__NO_LONG_DOUBLE_MATH


410 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

412 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

417 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

418 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

419 #ifde‡
__MATH_DECLARE_LDOUBLE


420 #ifde‡
__NO_LONG_DOUBLE_MATH


421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

423 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

427 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


429 
__gamma_r_föôe
 (, *);

430 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

432 
__loˇl_signgam
 = 0;

433 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

434  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

435 
	}
}

436 
__gammaf_r_föôe
 (, *);

437 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

439 
__loˇl_signgam
 = 0;

440 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

441  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

442 
	}
}

443 #ifde‡
__MATH_DECLARE_LDOUBLE


444 
__gammÆ_r_föôe
 (, *);

445 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

447 
__loˇl_signgam
 = 0;

448 #ifde‡
__NO_LONG_DOUBLE_MATH


449 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

451 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

453  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

454 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #unde‡
__DECL_SIMD_cos


32 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

33 #unde‡
__DECL_SIMD_cosf


34 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

35 #unde‡
__DECL_SIMD_sö


36 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

37 #unde‡
__DECL_SIMD_söf


38 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_söcos


40 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_söcosf


42 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_log


44 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_logf


46 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_exp


48 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_expf


50 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_pow


52 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_powf


54 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

60 
__asm__
 ("_ZGVbN2v___log_finite = _ZGVbN2v_log");

61 
__asm__
 ("_ZGVcN4v___log_finite = _ZGVcN4v_log");

62 
__asm__
 ("_ZGVdN4v___log_finite = _ZGVdN4v_log");

63 
__asm__
 ("_ZGVeN8v___log_finite = _ZGVeN8v_log");

64 
__asm__
 ("_ZGVbN4v___logf_finite = _ZGVbN4v_logf");

65 
__asm__
 ("_ZGVcN8v___logf_finite = _ZGVcN8v_logf");

66 
__asm__
 ("_ZGVdN8v___logf_finite = _ZGVdN8v_logf");

67 
__asm__
 ("_ZGVeN16v___logf_finite = _ZGVeN16v_logf");

68 
__asm__
 ("_ZGVbN2v___exp_finite = _ZGVbN2v_exp");

69 
__asm__
 ("_ZGVcN4v___exp_finite = _ZGVcN4v_exp");

70 
__asm__
 ("_ZGVdN4v___exp_finite = _ZGVdN4v_exp");

71 
__asm__
 ("_ZGVeN8v___exp_finite = _ZGVeN8v_exp");

72 
__asm__
 ("_ZGVbN4v___expf_finite = _ZGVbN4v_expf");

73 
__asm__
 ("_ZGVcN8v___expf_finite = _ZGVcN8v_expf");

74 
__asm__
 ("_ZGVdN8v___expf_finite = _ZGVdN8v_expf");

75 
__asm__
 ("_ZGVeN16v___expf_finite = _ZGVeN16v_expf");

76 
__asm__
 ("_ZGVbN2vv___pow_finite = _ZGVbN2vv_pow");

77 
__asm__
 ("_ZGVcN4vv___pow_finite = _ZGVcN4vv_pow");

78 
__asm__
 ("_ZGVdN4vv___pow_finite = _ZGVdN4vv_pow");

79 
__asm__
 ("_ZGVeN8vv___pow_finite = _ZGVeN8vv_pow");

80 
__asm__
 ("_ZGVbN4vv___powf_finite = _ZGVbN4vv_powf");

81 
__asm__
 ("_ZGVcN8vv___powf_finite = _ZGVcN8vv_powf");

82 
__asm__
 ("_ZGVdN8vv___powf_finite = _ZGVdN8vv_powf");

83 
__asm__
 ("_ZGVeN16vv___powf_finite = _ZGVeN16vv_powf");

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #ifde‡
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #ifde‡
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__glibc_ª£rved1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__glibc_ª£rved2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__glibc_ª£rved3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

69 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved1
;

92 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved2
;

93 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved3
;

94 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

33 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

34 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

35 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

36 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

37 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

38 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

39 || 
deföed
 
	g__btvî2__
)

43 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

44 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

46 #i‚de‡
__STRING_INLINE


47 #i‚de‡
__exã∫_ölöe


48 
	#__STRING_INLINE
 
ölöe


	)

50 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

55 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

56 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(
§c
))[
idx
])

	)

66 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

67 
	#mem˝y
(
de°
, 
§c
, 
n
) \

68 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

69 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

70 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

71 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

72 ((
n
) == 0 \

73 ? (
de°
) \

74 : (((
n
) % 4 == 0) \

75 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

76 : (((
n
) % 2 == 0) \

77 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

78 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

80 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

81 
size_t
 
__n
);

83 
__STRING_INLINE
 *

84 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

86 
__d0
, 
__d1
;

87 *
__tmp
 = 
__de°
;

88 
__asm__
 
__vﬁ©ûe__


96 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

97 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

99  
__de°
;

100 
	}
}

102 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

103 
size_t
 
__n
);

105 
__STRING_INLINE
 *

106 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

108 
__d0
, 
__d1
;

109 *
__tmp
 = 
__de°
;

110 
__asm__
 
__vﬁ©ûe__


123 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

124 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

126  
__de°
;

127 
	}
}

129 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

131 
__STRING_INLINE
 *

132 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

134 
__d0
, 
__d1
, 
__d2
;

135 *
__tmp
 = 
__de°
;

136 
__asm__
 
__vﬁ©ûe__


147 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

148 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

149 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

150 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

152  
__de°
;

153 
	}
}

155 
	#_HAVE_STRING_ARCH_memmove
 1

	)

156 #i‚de‡
_FORCE_INLINES


159 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

161 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

162 
	`__asm__
 ("memmove");

164 
__STRING_INLINE
 *

165 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

167 
__d0
, 
__d1
, 
__d2
;

168 *
__tmp
 = 
__de°
;

169 i‡(
__de°
 < 
__§c
)

170 
__asm__
 
__vﬁ©ûe__


173 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

174 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

175 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

176 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

178 
__asm__
 
__vﬁ©ûe__


184 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

185 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

186 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

187 "2" (
__n
 + (*Ë
__tmp
),

188 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

189  
__de°
;

190 
	}
}

194 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

195 #i‚de‡
_FORCE_INLINES


196 #i‚de‡
__PIC__


198 
__STRING_INLINE
 

199 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

201 
__d0
, 
__d1
, 
__d2
;

202 
__ªs
;

203 
__asm__
 
__vﬁ©ûe__


211 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

212 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

213 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

214 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

216  
__ªs
;

217 
	}
}

222 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

223 
	#_USE_STRING_ARCH_mem£t
 1

	)

224 
	#mem£t
(
s
, 
c
, 
n
) \

225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

226 ? ((
n
) == 1 \

227 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

228 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

229 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

230 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

231 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

232 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

233 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

237 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

238 *((*Ë
__s
Ë(Ë(
c
); \

239 
__s
; })

	)

241 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

242 ({ *
__s
 = (
s
); \

244 
__ui
; \

245 
__usi
; \

246 
__uc
; \

247 } *
__u
 = 
__s
; \

248 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

254 i‡((
n
) == 3 || (n) >= 5) \

255 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

258 
n
) \

261 
__u
->
__ui
 = 
__c
; \

262 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__usi
 = (Ë
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

272 
__u
->
__uc
 = (Ë
__c
; \

276 
__u
->
__ui
 = 
__c
; \

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__usi
 = (Ë
__c
; \

289 
__u
->
__ui
 = 
__c
; \

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__uc
 = (Ë
__c
; \

302 
__u
->
__ui
 = 
__c
; \

303 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

316 
__s
; })

	)

318 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

319 (((
n
) % 4 == 0) \

320 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

321 
n
) \

322 : (((
n
) % 2 == 0) \

323 ? 
	`__mem£t_c˙_by2
 (
s
, \

324 ((Ë((Ë(
c
))) * 0x01010101,\

325 
n
) \

326 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

328 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

329 
size_t
 
__n
);

331 
__STRING_INLINE
 *

332 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

334 *
__tmp
 = 
__s
;

335 
__d0
;

336 #ifde‡
__i686__


337 
__asm__
 
__vﬁ©ûe__


340 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

341 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

342 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

345 
__asm__
 
__vﬁ©ûe__


351 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

352 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

353 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

356  
__s
;

357 
	}
}

359 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

360 
size_t
 
__n
);

362 
__STRING_INLINE
 *

363 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

365 
__d0
, 
__d1
;

366 *
__tmp
 = 
__s
;

367 #ifde‡
__i686__


368 
__asm__
 
__vﬁ©ûe__


372 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

373 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

374 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

377 
__asm__
 
__vﬁ©ûe__


383 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

384 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

385 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

388  
__s
;

389 
	}
}

391 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

392 (((
n
) % 4 == 0) \

393 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

394 : (((
n
) % 2 == 0) \

395 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

396 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

398 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

400 
__STRING_INLINE
 *

401 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

403 *
__tmp
 = 
__s
;

404 
__d0
;

405 
__asm__
 
__vﬁ©ûe__


415 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

416 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

417 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

419  
__s
;

420 
	}
}

422 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

424 
__STRING_INLINE
 *

425 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

427 
__d0
, 
__d1
;

428 *
__tmp
 = 
__s
;

429 
__asm__
 
__vﬁ©ûe__


440 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

441 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

442 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

444  
__s
;

445 
	}
}

449 
	#_HAVE_STRING_ARCH_memchr
 1

	)

450 #i‚de‡
_FORCE_INLINES


451 
__STRING_INLINE
 *

452 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

454 
__d0
;

455 #ifde‡
__i686__


456 
__d1
;

458 *
__ªs
;

459 i‡(
__n
 == 0)

460  
NULL
;

461 #ifde‡
__i686__


462 
__asm__
 
__vﬁ©ûe__


466 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

467 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

468 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

471 
__asm__
 
__vﬁ©ûe__


477 : "=D" (
__ªs
), "=&c" (
__d0
)

478 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

479 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

482  
__ªs
 - 1;

483 
	}
}

486 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

487 #i‚de‡
_FORCE_INLINES


488 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

490 
__STRING_INLINE
 *

491 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

493 
__d0
;

494 #ifde‡
__i686__


495 
__d1
;

497 *
__ªs
;

498 i‡(
__n
 == 0)

499  
NULL
;

500 #ifde‡
__i686__


501 
__asm__
 
__vﬁ©ûe__


507 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

508 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

509 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

512 
__asm__
 
__vﬁ©ûe__


519 : "=D" (
__ªs
), "=&c" (
__d0
)

520 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

521 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

524  
__ªs
;

525 
	}
}

526 #ifde‡
__USE_GNU


527 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

532 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

533 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

535 #i‚de‡
_FORCE_INLINES


536 
__STRING_INLINE
 *

537 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

539 
__d0
;

540 *
__ªs
;

541 
__asm__
 
__vﬁ©ûe__


544 : "=D" (
__ªs
), "=&c" (
__d0
)

545 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

546 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

548  
__ªs
 - 1;

549 
	}
}

550 #ifde‡
__USE_GNU


551 
__STRING_INLINE
 *

552 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

554  
	`__øwmemchr
 (
__s
, 
__c
);

555 
	}
}

561 
	#_HAVE_STRING_ARCH_°æí
 1

	)

562 
	#°æí
(
°r
) \

563 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

564 ? 
	`__buûtö_°æí
 (
°r
) \

565 : 
	`__°æí_g
 (
°r
)))

	)

566 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

568 
__STRING_INLINE
 
size_t


569 
	$__°æí_g
 (c⁄° *
__°r
)

571 
__dummy
;

572 c⁄° *
__tmp
 = 
__°r
;

573 
__asm__
 
__vﬁ©ûe__


579 : "Ù" (
__tmp
), "=&q" (
__dummy
)

580 : "0" (
__°r
),

581 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

583  
__tmp
 - 
__°r
 - 1;

584 
	}
}

588 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

589 
	#°r˝y
(
de°
, 
§c
) \

590 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

591 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

592 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

593 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

594 (c⁄° *Ë(
§c
), \

595 
	`°æí
 (
§c
) + 1)) \

596 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

598 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

599 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

601 
__ui
; \

602 
__usi
; \

603 
__uc
; \

604 
__c
; \

605 } *
__u
 = (*Ë
__de°
; \

606 
§˛í
) \

609 
__u
->
__uc
 = '\0'; \

612 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

616 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

617 
__u
->
__uc
 = '\0'; \

620 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

624 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

625 
__u
->
__uc
 = '\0'; \

628 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

630 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

637 
__u
->
__uc
 = '\0'; \

640 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

641 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

642 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

645 (*Ë
__de°
; }))

	)

647 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

649 
__STRING_INLINE
 *

650 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

652 *
__tmp
 = 
__de°
;

653 
__dummy
;

654 
__asm__
 
__vﬁ©ûe__


663 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

664 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

665 : "0" (
__§c
), "1" (
__tmp
),

666 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

668  
__de°
;

669 
	}
}

672 #ifde‡
__USE_GNU


673 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

675 
	#__°p˝y
(
de°
, 
§c
) \

676 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

677 ? (
	`°æí
 (
§c
) + 1 <= 8 \

678 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

679 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

680 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

681 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

682 ((
§˛í
) % 4 == 0 \

683 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

684 : ((
§˛í
) % 2 == 0 \

685 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

686 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

689 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

691 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

692 (
	`__exãnsi⁄__
 ({ union { \

693 
__ui
; \

694 
__usi
; \

695 
__uc
; \

696 
__c
; \

697 } *
__u
 = (*Ë(
de°
); \

698 
§˛í
) \

701 
__u
->
__uc
 = '\0'; \

704 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

705 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

708 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

709 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

710 
__u
->
__uc
 = '\0'; \

713 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

714 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

717 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

719 
__u
->
__uc
 = '\0'; \

722 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

723 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

724 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

725 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

732 
__u
->
__uc
 = '\0'; \

735 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

736 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

737 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

738 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

741 (*Ë
__u
; }))

	)

743 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

744 
size_t
 
__§˛í
);

746 
__STRING_INLINE
 *

747 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

749 *
__tmp
 = 
__de°
;

750 
__d0
, 
__d1
;

751 
__asm__
 
__vﬁ©ûe__


759 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

760 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

762  
__tmp
;

763 
	}
}

765 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

766 
size_t
 
__§˛í
);

768 
__STRING_INLINE
 *

769 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

771 *
__tmp
 = 
__de°
;

772 
__d0
, 
__d1
;

773 
__asm__
 
__vﬁ©ûe__


786 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

787 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

788 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

789 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

791  
__tmp
 + 2;

792 
	}
}

794 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

795 
size_t
 
__§˛í
);

797 
__STRING_INLINE
 *

798 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

800 
__d0
, 
__d1
;

801 *
__tmp
 = 
__de°
;

802 
__asm__
 
__vﬁ©ûe__


813 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

814 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

815 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

816 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

818  
__tmp
;

819 
	}
}

821 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

823 
__STRING_INLINE
 *

824 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

826 *
__tmp
 = 
__de°
;

827 
__dummy
;

828 
__asm__
 
__vﬁ©ûe__


837 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

838 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

839 : "0" (
__§c
), "1" (
__tmp
),

840 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

842  
__tmp
 - 1;

843 
	}
}

848 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

849 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

850 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

851 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

852 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

853 (c⁄° *Ë(
§c
), 
n
) \

854 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

855 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

856 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

857 (((
§˛í
) % 4 == 0) \

858 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

859 : (((
§˛í
) % 2 == 0) \

860 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

861 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

863 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

864 
size_t
 
__§˛í
, size_à
__n
);

866 
__STRING_INLINE
 *

867 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

869 *
__tmp
 = 
__de°
;

870 
__dummy1
, 
__dummy2
;

871 
__asm__
 
__vﬁ©ûe__


879 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

880 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

881 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

882 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

884 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

885  
__de°
;

886 
	}
}

888 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

889 
size_t
 
__§˛í
, size_à
__n
);

891 
__STRING_INLINE
 *

892 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

894 *
__tmp
 = 
__de°
;

895 
__dummy1
, 
__dummy2
;

896 
__asm__
 
__vﬁ©ûe__


909 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

910 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

911 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

912 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

914 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

915  
__de°
;

916 
	}
}

918 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

919 
size_t
 
__§˛í
, size_à
__n
);

921 
__STRING_INLINE
 *

922 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

924 
__d0
, 
__d1
;

925 *
__tmp
 = 
__de°
;

926 
__asm__
 
__vﬁ©ûe__


937 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

938 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

939 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

940 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

942 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

943  
__de°
;

944 
	}
}

946 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

947 
size_t
 
__n
);

949 
__STRING_INLINE
 *

950 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

952 *
__tmp
 = 
__de°
;

953 
__dummy
;

954 i‡(
__n
 > 0)

955 
__asm__
 
__vﬁ©ûe__


971 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

972 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

975  
__de°
;

976 
	}
}

980 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

981 
	#°rˇt
(
de°
, 
§c
) \

982 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

983 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

984 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

986 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

987 
size_t
 
__§˛í
);

989 
__STRING_INLINE
 *

990 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

992 #ifde‡
__i686__


993 
__d0
;

994 *
__tmp
;

995 
__asm__
 
__vﬁ©ûe__


997 : "=D" (
__tmp
), "=&c" (
__d0
),

998 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

999 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1000 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1002 --
__tmp
;

1004 *
__tmp
 = 
__de°
;

1005 
__asm__
 
__vﬁ©ûe__


1011 : "Ù" (
__tmp
),

1012 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1013 : "0" (
__tmp
),

1014 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1017 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1018  
__de°
;

1019 
	}
}

1021 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1023 
__STRING_INLINE
 *

1024 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1026 *
__tmp
 = 
__de°
;

1027 
__dummy
;

1028 
__asm__
 
__vﬁ©ûe__


1041 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1042 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1043 : "1" (
__tmp
), "2" (
__§c
),

1044 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1046  
__de°
;

1047 
	}
}

1051 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1052 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1053 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1054 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1055 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1056 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1057 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1058 (c⁄° *Ë(
§c
), \

1059 (
n
)Ë0, 
__de°
)) \

1060 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1062 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1063 
size_t
 
__n
);

1065 
__STRING_INLINE
 *

1066 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1068 *
__tmp
 = 
__de°
;

1069 
__dummy
;

1070 #ifde‡
__i686__


1071 
__asm__
 
__vﬁ©ûe__


1085 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1086 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1089 --
__tmp
;

1090 
__asm__
 
__vﬁ©ûe__


1107 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1108 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1111  
__de°
;

1112 
	}
}

1116 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1117 
	#°rcmp
(
s1
, 
s2
) \

1118 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1119 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1120 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1121 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1122 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1123 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s1
)) \

1130 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
))) \

1133 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1134 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1135 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1136 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1137 (c⁄° *Ë(
s2
), \

1138 
	`°æí
 (
s2
)) \

1139 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
))) \

1142 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1144 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1145 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1146 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1148 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1149 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1152 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1156 
__ªsu…
; }))

	)

1158 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1159 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1160 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1161 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1163 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1164 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1167 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1171 
__ªsu…
; }))

	)

1173 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1174 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1175 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1176 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1178 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1179 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1182 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1183 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1186 
__ªsu…
; }))

	)

1188 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1190 
__STRING_INLINE
 

1191 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1193 
__ªs
;

1194 
__asm__
 
__vﬁ©ûe__


1210 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1211 : "1" (
__s1
), "2" (
__s2
),

1212 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1213 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1215  
__ªs
;

1216 
	}
}

1220 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1221 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1222 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1223 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1224 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1225 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1226 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1228 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1229 
size_t
 
__n
);

1231 
__STRING_INLINE
 

1232 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1234 
__ªs
;

1235 
__asm__
 
__vﬁ©ûe__


1254 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1255 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1256 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1257 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1259  
__ªs
;

1260 
	}
}

1264 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1265 
	#_USE_STRING_ARCH_°rchr
 1

	)

1266 
	#°rchr
(
s
, 
c
) \

1267 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1268 ? ((
c
) == '\0' \

1269 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1270 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1271 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1273 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1275 
__STRING_INLINE
 *

1276 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1278 
__d0
;

1279 *
__ªs
;

1280 
__asm__
 
__vﬁ©ûe__


1290 : "Ù" (
__ªs
), "=&a" (
__d0
)

1291 : "0" (
__s
), "1" (
__c
),

1292 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1294  
__ªs
;

1295 
	}
}

1297 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1299 
__STRING_INLINE
 *

1300 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1302 
__d0
;

1303 *
__ªs
;

1304 
__asm__
 
__vﬁ©ûe__


1315 : "Ù" (
__ªs
), "=&a" (
__d0
)

1316 : "0" (
__s
), "1" (
__c
),

1317 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1319  
__ªs
;

1320 
	}
}

1324 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1325 
	#__°rch∫ul
(
s
, 
c
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1327 ? ((
c
) == '\0' \

1328 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1329 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1330 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1332 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1334 
__STRING_INLINE
 *

1335 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1337 
__d0
;

1338 *
__ªs
;

1339 
__asm__
 
__vﬁ©ûe__


1349 : "Ù" (
__ªs
), "=&a" (
__d0
)

1350 : "0" (
__s
), "1" (
__c
),

1351 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1353  
__ªs
;

1354 
	}
}

1356 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1358 
__STRING_INLINE
 *

1359 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1361 
__d0
;

1362 *
__ªs
;

1363 
__asm__
 
__vﬁ©ûe__


1374 : "Ù" (
__ªs
), "=&a" (
__d0
)

1375 : "0" (
__s
), "1" (
__c
),

1376 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1378  
__ªs
;

1379 
	}
}

1380 #ifde‡
__USE_GNU


1381 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1387 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1388 
	#ödex
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1396 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1397 
	#°ºchr
(
s
, 
c
) \

1398 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1399 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1400 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1402 #ifde‡
__i686__


1403 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1405 
__STRING_INLINE
 *

1406 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1408 
__d0
, 
__d1
;

1409 *
__ªs
;

1410 
__asm__
 
__vﬁ©ûe__


1418 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1419 : "0" (1), "1" (
__s
), "2" (
__c
),

1420 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1422  
__ªs
 - 1;

1423 
	}
}

1425 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1427 
__STRING_INLINE
 *

1428 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1430 
__d0
, 
__d1
;

1431 *
__ªs
;

1432 
__asm__
 
__vﬁ©ûe__


1441 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1442 : "0" (1), "1" (
__s
), "2" (
__c
),

1443 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1445  
__ªs
 - 1;

1446 
	}
}

1448 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1450 
__STRING_INLINE
 *

1451 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1453 
__d0
, 
__d1
;

1454 *
__ªs
;

1455 
__asm__
 
__vﬁ©ûe__


1465 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1466 : "0" (0), "1" (
__s
), "2" (
__c
),

1467 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1469  
__ªs
;

1470 
	}
}

1472 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1474 
__STRING_INLINE
 *

1475 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1477 
__d0
, 
__d1
;

1478 *
__ªs
;

1479 
__asm__
 
__vﬁ©ûe__


1490 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1491 : "0" (0), "1" (
__s
), "2" (
__c
),

1492 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1494  
__ªs
;

1495 
	}
}

1499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1501 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1502 
	#rödex
(
s
, 
c
) \

1503 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1504 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1505 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1511 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1512 
	#°rc•n
(
s
, 
ªje˘
) \

1513 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1514 ? ((
ªje˘
)[0] == '\0' \

1515 ? 
	`°æí
 (
s
) \

1516 : ((
ªje˘
)[1] == '\0' \

1517 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1518 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1519 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1521 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1523 #i‚de‡
_FORCE_INLINES


1524 
__STRING_INLINE
 
size_t


1525 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1527 
__d0
;

1528 *
__ªs
;

1529 
__asm__
 
__vﬁ©ûe__


1538 : "Ù" (
__ªs
), "=&a" (
__d0
)

1539 : "0" (
__s
), "1" (
__ªje˘
),

1540 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1542  (
__ªs
 - 1Ë- 
__s
;

1543 
	}
}

1546 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1547 
size_t
 
__ªje˘_Àn
);

1549 
__STRING_INLINE
 
size_t


1550 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1552 
__d0
, 
__d1
, 
__d2
;

1553 c⁄° *
__ªs
;

1554 
__asm__
 
__vﬁ©ûe__


1565 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1566 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1568  (
__ªs
 - 1Ë- 
__s
;

1569 
	}
}

1571 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1572 #ifde‡
__PIC__


1574 
__STRING_INLINE
 
size_t


1575 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1577 
__d0
, 
__d1
, 
__d2
;

1578 c⁄° *
__ªs
;

1579 
__asm__
 
__vﬁ©ûe__


1596 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1597 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1599  (
__ªs
 - 1Ë- 
__s
;

1600 
	}
}

1602 
__STRING_INLINE
 
size_t


1603 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1605 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1606 c⁄° *
__ªs
;

1607 
__asm__
 
__vﬁ©ûe__


1621 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1622 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1625  (
__ªs
 - 1Ë- 
__s
;

1626 
	}
}

1632 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1633 
	#°r•n
(
s
, 
ac˚±
) \

1634 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1635 ? ((
ac˚±
)[0] == '\0' \

1636 ? ((Ë(
s
), 0) \

1637 : ((
ac˚±
)[1] == '\0' \

1638 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1639 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1640 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1642 #i‚de‡
_FORCE_INLINES


1643 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1645 
__STRING_INLINE
 
size_t


1646 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1648 
__d0
;

1649 *
__ªs
;

1651 
__asm__
 
__vﬁ©ûe__


1657 : "Ù" (
__ªs
), "=&q" (
__d0
)

1658 : "0" (
__s
), "1" (
__ac˚±
),

1659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1661  (
__ªs
 - 1Ë- 
__s
;

1662 
	}
}

1665 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1666 
size_t
 
__ac˚±_Àn
);

1668 
__STRING_INLINE
 
size_t


1669 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1671 
__d0
, 
__d1
, 
__d2
;

1672 c⁄° *
__ªs
;

1673 
__asm__
 
__vﬁ©ûe__


1684 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1685 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1688 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1689 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1691  (
__ªs
 - 1Ë- 
__s
;

1692 
	}
}

1694 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1695 #ifde‡
__PIC__


1697 
__STRING_INLINE
 
size_t


1698 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1700 
__d0
, 
__d1
, 
__d2
;

1701 c⁄° *
__ªs
;

1702 
__asm__
 
__vﬁ©ûe__


1718 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1719 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1721  (
__ªs
 - 1Ë- 
__s
;

1722 
	}
}

1724 
__STRING_INLINE
 
size_t


1725 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1727 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1728 c⁄° *
__ªs
;

1729 
__asm__
 
__vﬁ©ûe__


1743 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1744 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1746  (
__ªs
 - 1Ë- 
__s
;

1747 
	}
}

1752 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1753 
	#°Ωbrk
(
s
, 
ac˚±
) \

1754 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1755 ? ((
ac˚±
)[0] == '\0' \

1756 ? ((Ë(
s
), (*) 0) \

1757 : ((
ac˚±
)[1] == '\0' \

1758 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1759 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1760 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1762 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1763 
size_t
 
__ac˚±_Àn
);

1765 
__STRING_INLINE
 *

1766 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1768 
__d0
, 
__d1
, 
__d2
;

1769 *
__ªs
;

1770 
__asm__
 
__vﬁ©ûe__


1785 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1786 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1788  
__ªs
;

1789 
	}
}

1791 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1792 #ifde‡
__PIC__


1794 
__STRING_INLINE
 *

1795 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1797 
__d0
, 
__d1
, 
__d2
;

1798 *
__ªs
;

1799 
__asm__
 
__vﬁ©ûe__


1820 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1821 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1823  
__ªs
;

1824 
	}
}

1826 
__STRING_INLINE
 *

1827 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1829 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1830 *
__ªs
;

1831 
__asm__
 
__vﬁ©ûe__


1850 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1851 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1853  
__ªs
;

1854 
	}
}

1859 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1860 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1861 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1862 ? ((
√edÀ
)[0] == '\0' \

1863 ? (
hay°ack
) \

1864 : ((
√edÀ
)[1] == '\0' \

1865 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1866 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1867 
	`°æí
 (
√edÀ
)))) \

1868 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1872 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1873 c⁄° 
__√edÀ
[],

1874 
size_t
 
__√edÀ_Àn
);

1876 
__STRING_INLINE
 *

1877 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1878 
size_t
 
__√edÀ_Àn
)

1880 
__d0
, 
__d1
, 
__d2
;

1881 *
__ªs
;

1882 
__asm__
 
__vﬁ©ûe__


1895 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1896 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1898  
__ªs
;

1899 
	}
}

1901 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1902 c⁄° *
__√edÀ
);

1903 #ifde‡
__PIC__


1905 
__STRING_INLINE
 *

1906 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1908 
__d0
, 
__d1
, 
__d2
;

1909 *
__ªs
;

1910 
__asm__
 
__vﬁ©ûe__


1929 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1930 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1931 "d" (
__√edÀ
)

1933  
__ªs
;

1934 
	}
}

1936 
__STRING_INLINE
 *

1937 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1939 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1940 *
__ªs
;

1941 
__asm__
 
__vﬁ©ûe__


1958 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1959 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1960 "b" (
__√edÀ
)

1962  
__ªs
;

1963 
	}
}

1969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1970 #ifde‡
__i686__


1971 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1972 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1973 ? 
	`__buûtö_ffs
 (
w‹d
) \

1974 : ({ 
__˙t
, 
__tmp
; \

1975 
__asm__
 
__vﬁ©ûe__
 \

1978 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1979 : "rm" (
w‹d
), "1" (-1)); \

1980 
__˙t
 + 1; }))

	)

1982 #i‚de‡
ff¶


1983 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1988 #i‚de‡
_FORCE_INLINES


1989 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_MISC


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_MISC


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_MISC


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_MISC


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/bpf_common.h

1 #i‚de‡
__LINUX_BPF_COMMON_H__


2 
	#__LINUX_BPF_COMMON_H__


	)

5 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

6 
	#BPF_LD
 0x00

	)

7 
	#BPF_LDX
 0x01

	)

8 
	#BPF_ST
 0x02

	)

9 
	#BPF_STX
 0x03

	)

10 
	#BPF_ALU
 0x04

	)

11 
	#BPF_JMP
 0x05

	)

12 
	#BPF_RET
 0x06

	)

13 
	#BPF_MISC
 0x07

	)

16 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

17 
	#BPF_W
 0x00

	)

18 
	#BPF_H
 0x08

	)

19 
	#BPF_B
 0x10

	)

20 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

21 
	#BPF_IMM
 0x00

	)

22 
	#BPF_ABS
 0x20

	)

23 
	#BPF_IND
 0x40

	)

24 
	#BPF_MEM
 0x60

	)

25 
	#BPF_LEN
 0x80

	)

26 
	#BPF_MSH
 0xa0

	)

29 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

30 
	#BPF_ADD
 0x00

	)

31 
	#BPF_SUB
 0x10

	)

32 
	#BPF_MUL
 0x20

	)

33 
	#BPF_DIV
 0x30

	)

34 
	#BPF_OR
 0x40

	)

35 
	#BPF_AND
 0x50

	)

36 
	#BPF_LSH
 0x60

	)

37 
	#BPF_RSH
 0x70

	)

38 
	#BPF_NEG
 0x80

	)

39 
	#BPF_MOD
 0x90

	)

40 
	#BPF_XOR
 0xa0

	)

42 
	#BPF_JA
 0x00

	)

43 
	#BPF_JEQ
 0x10

	)

44 
	#BPF_JGT
 0x20

	)

45 
	#BPF_JGE
 0x30

	)

46 
	#BPF_JSET
 0x40

	)

47 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

48 
	#BPF_K
 0x00

	)

49 
	#BPF_X
 0x08

	)

51 #i‚de‡
BPF_MAXINSNS


52 
	#BPF_MAXINSNS
 4096

	)

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__Æways_ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__Æways_ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__Æways_ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__Æways_ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__Æways_ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__Æways_ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__Æways_ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__Æways_ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__Æways_ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__Æways_ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__Æways_ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__Æways_ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

26 
	mIFA_UNSPEC
,

27 
	mIFA_ADDRESS
,

28 
	mIFA_LOCAL
,

29 
	mIFA_LABEL
,

30 
	mIFA_BROADCAST
,

31 
	mIFA_ANYCAST
,

32 
	mIFA_CACHEINFO
,

33 
	mIFA_MULTICAST
,

34 
	mIFA_FLAGS
,

35 
	m__IFA_MAX
,

38 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

41 
	#IFA_F_SECONDARY
 0x01

	)

42 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

44 
	#IFA_F_NODAD
 0x02

	)

45 
	#IFA_F_OPTIMISTIC
 0x04

	)

46 
	#IFA_F_DADFAILED
 0x08

	)

47 
	#IFA_F_HOMEADDRESS
 0x10

	)

48 
	#IFA_F_DEPRECATED
 0x20

	)

49 
	#IFA_F_TENTATIVE
 0x40

	)

50 
	#IFA_F_PERMANENT
 0x80

	)

51 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

52 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

53 
	#IFA_F_MCAUTOJOIN
 0x400

	)

54 
	#IFA_F_STABLE_PRIVACY
 0x800

	)

56 
	siÁ_ˇcheöfo
 {

57 
__u32
 
	miÁ_¥e„ªd
;

58 
__u32
 
	miÁ_vÆid
;

59 
__u32
 
	mc°amp
;

60 
__u32
 
	mt°amp
;

64 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

65 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

39 
__u32
 
	mrx_noh™dÀr
;

43 
	sπ∆_lök_°©s64
 {

44 
__u64
 
	mrx_∑ckës
;

45 
__u64
 
	mtx_∑ckës
;

46 
__u64
 
	mrx_byãs
;

47 
__u64
 
	mtx_byãs
;

48 
__u64
 
	mrx_îr‹s
;

49 
__u64
 
	mtx_îr‹s
;

50 
__u64
 
	mrx_dr›≥d
;

51 
__u64
 
	mtx_dr›≥d
;

52 
__u64
 
	mmu…iˇ°
;

53 
__u64
 
	mcﬁlisi⁄s
;

56 
__u64
 
	mrx_Àngth_îr‹s
;

57 
__u64
 
	mrx_ovî_îr‹s
;

58 
__u64
 
	mrx_¸c_îr‹s
;

59 
__u64
 
	mrx_‰ame_îr‹s
;

60 
__u64
 
	mrx_fifo_îr‹s
;

61 
__u64
 
	mrx_mis£d_îr‹s
;

64 
__u64
 
	mtx_ab‹ãd_îr‹s
;

65 
__u64
 
	mtx_ˇºõr_îr‹s
;

66 
__u64
 
	mtx_fifo_îr‹s
;

67 
__u64
 
	mtx_hóπbót_îr‹s
;

68 
__u64
 
	mtx_wödow_îr‹s
;

71 
__u64
 
	mrx_com¥es£d
;

72 
__u64
 
	mtx_com¥es£d
;

74 
__u64
 
	mrx_noh™dÀr
;

78 
	sπ∆_lök_ifm≠
 {

79 
__u64
 
	mmem_°¨t
;

80 
__u64
 
	mmem_íd
;

81 
__u64
 
	mba£_addr
;

82 
__u16
 
	múq
;

83 
__u8
 
	mdma
;

84 
__u8
 
	mp‹t
;

106 
	mIFLA_UNSPEC
,

107 
	mIFLA_ADDRESS
,

108 
	mIFLA_BROADCAST
,

109 
	mIFLA_IFNAME
,

110 
	mIFLA_MTU
,

111 
	mIFLA_LINK
,

112 
	mIFLA_QDISC
,

113 
	mIFLA_STATS
,

114 
	mIFLA_COST
,

115 
	#IFLA_COST
 
IFLA_COST


	)

116 
	mIFLA_PRIORITY
,

117 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

118 
	mIFLA_MASTER
,

119 
	#IFLA_MASTER
 
IFLA_MASTER


	)

120 
	mIFLA_WIRELESS
,

121 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

122 
	mIFLA_PROTINFO
,

123 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

124 
	mIFLA_TXQLEN
,

125 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

126 
	mIFLA_MAP
,

127 
	#IFLA_MAP
 
IFLA_MAP


	)

128 
	mIFLA_WEIGHT
,

129 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

130 
	mIFLA_OPERSTATE
,

131 
	mIFLA_LINKMODE
,

132 
	mIFLA_LINKINFO
,

133 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

134 
	mIFLA_NET_NS_PID
,

135 
	mIFLA_IFALIAS
,

136 
	mIFLA_NUM_VF
,

137 
	mIFLA_VFINFO_LIST
,

138 
	mIFLA_STATS64
,

139 
	mIFLA_VF_PORTS
,

140 
	mIFLA_PORT_SELF
,

141 
	mIFLA_AF_SPEC
,

142 
	mIFLA_GROUP
,

143 
	mIFLA_NET_NS_FD
,

144 
	mIFLA_EXT_MASK
,

145 
	mIFLA_PROMISCUITY
,

146 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

147 
	mIFLA_NUM_TX_QUEUES
,

148 
	mIFLA_NUM_RX_QUEUES
,

149 
	mIFLA_CARRIER
,

150 
	mIFLA_PHYS_PORT_ID
,

151 
	mIFLA_CARRIER_CHANGES
,

152 
	mIFLA_PHYS_SWITCH_ID
,

153 
	mIFLA_LINK_NETNSID
,

154 
	mIFLA_PHYS_PORT_NAME
,

155 
	mIFLA_PROTO_DOWN
,

156 
	mIFLA_GSO_MAX_SEGS
,

157 
	mIFLA_GSO_MAX_SIZE
,

158 
	m__IFLA_MAX


162 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

165 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

166 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

169 
	mIFLA_INET_UNSPEC
,

170 
	mIFLA_INET_CONF
,

171 
	m__IFLA_INET_MAX
,

174 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

207 
	mIFLA_INET6_UNSPEC
,

208 
	mIFLA_INET6_FLAGS
,

209 
	mIFLA_INET6_CONF
,

210 
	mIFLA_INET6_STATS
,

211 
	mIFLA_INET6_MCAST
,

212 
	mIFLA_INET6_CACHEINFO
,

213 
	mIFLA_INET6_ICMP6STATS
,

214 
	mIFLA_INET6_TOKEN
,

215 
	mIFLA_INET6_ADDR_GEN_MODE
,

216 
	m__IFLA_INET6_MAX


219 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

221 
	eö6_addr_gí_mode
 {

222 
	mIN6_ADDR_GEN_MODE_EUI64
,

223 
	mIN6_ADDR_GEN_MODE_NONE
,

224 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

225 
	mIN6_ADDR_GEN_MODE_RANDOM
,

231 
	mIFLA_BR_UNSPEC
,

232 
	mIFLA_BR_FORWARD_DELAY
,

233 
	mIFLA_BR_HELLO_TIME
,

234 
	mIFLA_BR_MAX_AGE
,

235 
	mIFLA_BR_AGEING_TIME
,

236 
	mIFLA_BR_STP_STATE
,

237 
	mIFLA_BR_PRIORITY
,

238 
	mIFLA_BR_VLAN_FILTERING
,

239 
	mIFLA_BR_VLAN_PROTOCOL
,

240 
	mIFLA_BR_GROUP_FWD_MASK
,

241 
	mIFLA_BR_ROOT_ID
,

242 
	mIFLA_BR_BRIDGE_ID
,

243 
	mIFLA_BR_ROOT_PORT
,

244 
	mIFLA_BR_ROOT_PATH_COST
,

245 
	mIFLA_BR_TOPOLOGY_CHANGE
,

246 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

247 
	mIFLA_BR_HELLO_TIMER
,

248 
	mIFLA_BR_TCN_TIMER
,

249 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

250 
	mIFLA_BR_GC_TIMER
,

251 
	mIFLA_BR_GROUP_ADDR
,

252 
	mIFLA_BR_FDB_FLUSH
,

253 
	mIFLA_BR_MCAST_ROUTER
,

254 
	mIFLA_BR_MCAST_SNOOPING
,

255 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

256 
	mIFLA_BR_MCAST_QUERIER
,

257 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

258 
	mIFLA_BR_MCAST_HASH_MAX
,

259 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

260 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

261 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

262 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

263 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

264 
	mIFLA_BR_MCAST_QUERY_INTVL
,

265 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

266 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

267 
	mIFLA_BR_NF_CALL_IPTABLES
,

268 
	mIFLA_BR_NF_CALL_IP6TABLES
,

269 
	mIFLA_BR_NF_CALL_ARPTABLES
,

270 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

271 
	m__IFLA_BR_MAX
,

274 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

276 
	siÊa_bridge_id
 {

277 
__u8
 
	m¥io
[2];

278 
__u8
 
	maddr
[6];

282 
	mBRIDGE_MODE_UNSPEC
,

283 
	mBRIDGE_MODE_HAIRPIN
,

287 
	mIFLA_BRPORT_UNSPEC
,

288 
	mIFLA_BRPORT_STATE
,

289 
	mIFLA_BRPORT_PRIORITY
,

290 
	mIFLA_BRPORT_COST
,

291 
	mIFLA_BRPORT_MODE
,

292 
	mIFLA_BRPORT_GUARD
,

293 
	mIFLA_BRPORT_PROTECT
,

294 
	mIFLA_BRPORT_FAST_LEAVE
,

295 
	mIFLA_BRPORT_LEARNING
,

296 
	mIFLA_BRPORT_UNICAST_FLOOD
,

297 
	mIFLA_BRPORT_PROXYARP
,

298 
	mIFLA_BRPORT_LEARNING_SYNC
,

299 
	mIFLA_BRPORT_PROXYARP_WIFI
,

300 
	mIFLA_BRPORT_ROOT_ID
,

301 
	mIFLA_BRPORT_BRIDGE_ID
,

302 
	mIFLA_BRPORT_DESIGNATED_PORT
,

303 
	mIFLA_BRPORT_DESIGNATED_COST
,

304 
	mIFLA_BRPORT_ID
,

305 
	mIFLA_BRPORT_NO
,

306 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

307 
	mIFLA_BRPORT_CONFIG_PENDING
,

308 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

309 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

310 
	mIFLA_BRPORT_HOLD_TIMER
,

311 
	mIFLA_BRPORT_FLUSH
,

312 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

313 
	m__IFLA_BRPORT_MAX


315 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

317 
	siÊa_ˇcheöfo
 {

318 
__u32
 
	mmax_ªasm_Àn
;

319 
__u32
 
	mt°amp
;

320 
__u32
 
	mªachabÀ_time
;

321 
__u32
 
	mªå™s_time
;

325 
	mIFLA_INFO_UNSPEC
,

326 
	mIFLA_INFO_KIND
,

327 
	mIFLA_INFO_DATA
,

328 
	mIFLA_INFO_XSTATS
,

329 
	mIFLA_INFO_SLAVE_KIND
,

330 
	mIFLA_INFO_SLAVE_DATA
,

331 
	m__IFLA_INFO_MAX
,

334 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

339 
	mIFLA_VLAN_UNSPEC
,

340 
	mIFLA_VLAN_ID
,

341 
	mIFLA_VLAN_FLAGS
,

342 
	mIFLA_VLAN_EGRESS_QOS
,

343 
	mIFLA_VLAN_INGRESS_QOS
,

344 
	mIFLA_VLAN_PROTOCOL
,

345 
	m__IFLA_VLAN_MAX
,

348 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

350 
	siÊa_vœn_Êags
 {

351 
__u32
 
	mÊags
;

352 
__u32
 
	mmask
;

356 
	mIFLA_VLAN_QOS_UNSPEC
,

357 
	mIFLA_VLAN_QOS_MAPPING
,

358 
	m__IFLA_VLAN_QOS_MAX


361 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

363 
	siÊa_vœn_qos_m≠pög
 {

364 
__u32
 
	m‰om
;

365 
__u32
 
	mto
;

370 
	mIFLA_MACVLAN_UNSPEC
,

371 
	mIFLA_MACVLAN_MODE
,

372 
	mIFLA_MACVLAN_FLAGS
,

373 
	mIFLA_MACVLAN_MACADDR_MODE
,

374 
	mIFLA_MACVLAN_MACADDR
,

375 
	mIFLA_MACVLAN_MACADDR_DATA
,

376 
	mIFLA_MACVLAN_MACADDR_COUNT
,

377 
	m__IFLA_MACVLAN_MAX
,

380 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

382 
	emacvœn_mode
 {

383 
	mMACVLAN_MODE_PRIVATE
 = 1,

384 
	mMACVLAN_MODE_VEPA
 = 2,

385 
	mMACVLAN_MODE_BRIDGE
 = 4,

386 
	mMACVLAN_MODE_PASSTHRU
 = 8,

387 
	mMACVLAN_MODE_SOURCE
 = 16,

390 
	emacvœn_maˇddr_mode
 {

391 
	mMACVLAN_MACADDR_ADD
,

392 
	mMACVLAN_MACADDR_DEL
,

393 
	mMACVLAN_MACADDR_FLUSH
,

394 
	mMACVLAN_MACADDR_SET
,

397 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

401 
	mIFLA_VRF_UNSPEC
,

402 
	mIFLA_VRF_TABLE
,

403 
	m__IFLA_VRF_MAX


406 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

409 
	mIFLA_VRF_PORT_UNSPEC
,

410 
	mIFLA_VRF_PORT_TABLE
,

411 
	m__IFLA_VRF_PORT_MAX


414 
	#IFLA_VRF_PORT_MAX
 (
__IFLA_VRF_PORT_MAX
 - 1)

	)

418 
	mIFLA_MACSEC_UNSPEC
,

419 
	mIFLA_MACSEC_SCI
,

420 
	mIFLA_MACSEC_PORT
,

421 
	mIFLA_MACSEC_ICV_LEN
,

422 
	mIFLA_MACSEC_CIPHER_SUITE
,

423 
	mIFLA_MACSEC_WINDOW
,

424 
	mIFLA_MACSEC_ENCODING_SA
,

425 
	mIFLA_MACSEC_ENCRYPT
,

426 
	mIFLA_MACSEC_PROTECT
,

427 
	mIFLA_MACSEC_INC_SCI
,

428 
	mIFLA_MACSEC_ES
,

429 
	mIFLA_MACSEC_SCB
,

430 
	mIFLA_MACSEC_REPLAY_PROTECT
,

431 
	mIFLA_MACSEC_VALIDATION
,

432 
	m__IFLA_MACSEC_MAX
,

435 
	#IFLA_MACSEC_MAX
 (
__IFLA_MACSEC_MAX
 - 1)

	)

437 
	emac£c_vÆid©i⁄_ty≥
 {

438 
	mMACSEC_VALIDATE_DISABLED
 = 0,

439 
	mMACSEC_VALIDATE_CHECK
 = 1,

440 
	mMACSEC_VALIDATE_STRICT
 = 2,

441 
	m__MACSEC_VALIDATE_END
,

442 
	mMACSEC_VALIDATE_MAX
 = 
__MACSEC_VALIDATE_END
 - 1,

447 
	mIFLA_IPVLAN_UNSPEC
,

448 
	mIFLA_IPVLAN_MODE
,

449 
	m__IFLA_IPVLAN_MAX


452 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

454 
	eùvœn_mode
 {

455 
	mIPVLAN_MODE_L2
 = 0,

456 
	mIPVLAN_MODE_L3
,

457 
	mIPVLAN_MODE_MAX


462 
	mIFLA_VXLAN_UNSPEC
,

463 
	mIFLA_VXLAN_ID
,

464 
	mIFLA_VXLAN_GROUP
,

465 
	mIFLA_VXLAN_LINK
,

466 
	mIFLA_VXLAN_LOCAL
,

467 
	mIFLA_VXLAN_TTL
,

468 
	mIFLA_VXLAN_TOS
,

469 
	mIFLA_VXLAN_LEARNING
,

470 
	mIFLA_VXLAN_AGEING
,

471 
	mIFLA_VXLAN_LIMIT
,

472 
	mIFLA_VXLAN_PORT_RANGE
,

473 
	mIFLA_VXLAN_PROXY
,

474 
	mIFLA_VXLAN_RSC
,

475 
	mIFLA_VXLAN_L2MISS
,

476 
	mIFLA_VXLAN_L3MISS
,

477 
	mIFLA_VXLAN_PORT
,

478 
	mIFLA_VXLAN_GROUP6
,

479 
	mIFLA_VXLAN_LOCAL6
,

480 
	mIFLA_VXLAN_UDP_CSUM
,

481 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

482 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

483 
	mIFLA_VXLAN_REMCSUM_TX
,

484 
	mIFLA_VXLAN_REMCSUM_RX
,

485 
	mIFLA_VXLAN_GBP
,

486 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

487 
	mIFLA_VXLAN_COLLECT_METADATA
,

488 
	mIFLA_VXLAN_LABEL
,

489 
	m__IFLA_VXLAN_MAX


491 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

493 
	siÊa_vxœn_p‹t_ønge
 {

494 
__be16
 
	mlow
;

495 
__be16
 
	mhigh
;

500 
	mIFLA_GENEVE_UNSPEC
,

501 
	mIFLA_GENEVE_ID
,

502 
	mIFLA_GENEVE_REMOTE
,

503 
	mIFLA_GENEVE_TTL
,

504 
	mIFLA_GENEVE_TOS
,

505 
	mIFLA_GENEVE_PORT
,

506 
	mIFLA_GENEVE_COLLECT_METADATA
,

507 
	mIFLA_GENEVE_REMOTE6
,

508 
	mIFLA_GENEVE_UDP_CSUM
,

509 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

510 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

511 
	mIFLA_GENEVE_LABEL
,

512 
	m__IFLA_GENEVE_MAX


514 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

519 
	mIFLA_BOND_UNSPEC
,

520 
	mIFLA_BOND_MODE
,

521 
	mIFLA_BOND_ACTIVE_SLAVE
,

522 
	mIFLA_BOND_MIIMON
,

523 
	mIFLA_BOND_UPDELAY
,

524 
	mIFLA_BOND_DOWNDELAY
,

525 
	mIFLA_BOND_USE_CARRIER
,

526 
	mIFLA_BOND_ARP_INTERVAL
,

527 
	mIFLA_BOND_ARP_IP_TARGET
,

528 
	mIFLA_BOND_ARP_VALIDATE
,

529 
	mIFLA_BOND_ARP_ALL_TARGETS
,

530 
	mIFLA_BOND_PRIMARY
,

531 
	mIFLA_BOND_PRIMARY_RESELECT
,

532 
	mIFLA_BOND_FAIL_OVER_MAC
,

533 
	mIFLA_BOND_XMIT_HASH_POLICY
,

534 
	mIFLA_BOND_RESEND_IGMP
,

535 
	mIFLA_BOND_NUM_PEER_NOTIF
,

536 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

537 
	mIFLA_BOND_MIN_LINKS
,

538 
	mIFLA_BOND_LP_INTERVAL
,

539 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

540 
	mIFLA_BOND_AD_LACP_RATE
,

541 
	mIFLA_BOND_AD_SELECT
,

542 
	mIFLA_BOND_AD_INFO
,

543 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

544 
	mIFLA_BOND_AD_USER_PORT_KEY
,

545 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

546 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

547 
	m__IFLA_BOND_MAX
,

550 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

553 
	mIFLA_BOND_AD_INFO_UNSPEC
,

554 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

555 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

556 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

557 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

558 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

559 
	m__IFLA_BOND_AD_INFO_MAX
,

562 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

565 
	mIFLA_BOND_SLAVE_UNSPEC
,

566 
	mIFLA_BOND_SLAVE_STATE
,

567 
	mIFLA_BOND_SLAVE_MII_STATUS
,

568 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

569 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

570 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

571 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

572 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

573 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

574 
	m__IFLA_BOND_SLAVE_MAX
,

577 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

582 
	mIFLA_VF_INFO_UNSPEC
,

583 
	mIFLA_VF_INFO
,

584 
	m__IFLA_VF_INFO_MAX
,

587 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

590 
	mIFLA_VF_UNSPEC
,

591 
	mIFLA_VF_MAC
,

592 
	mIFLA_VF_VLAN
,

593 
	mIFLA_VF_TX_RATE
,

594 
	mIFLA_VF_SPOOFCHK
,

595 
	mIFLA_VF_LINK_STATE
,

596 
	mIFLA_VF_RATE
,

597 
	mIFLA_VF_RSS_QUERY_EN
,

600 
	mIFLA_VF_STATS
,

601 
	mIFLA_VF_TRUST
,

602 
	mIFLA_VF_IB_NODE_GUID
,

603 
	mIFLA_VF_IB_PORT_GUID
,

604 
	m__IFLA_VF_MAX
,

607 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

609 
	siÊa_vf_mac
 {

610 
__u32
 
	mvf
;

611 
__u8
 
	mmac
[32];

614 
	siÊa_vf_vœn
 {

615 
__u32
 
	mvf
;

616 
__u32
 
	mvœn
;

617 
__u32
 
	mqos
;

620 
	siÊa_vf_tx_øã
 {

621 
__u32
 
	mvf
;

622 
__u32
 
	møã
;

625 
	siÊa_vf_øã
 {

626 
__u32
 
	mvf
;

627 
__u32
 
	mmö_tx_øã
;

628 
__u32
 
	mmax_tx_øã
;

631 
	siÊa_vf_•oofchk
 {

632 
__u32
 
	mvf
;

633 
__u32
 
	m£âög
;

636 
	siÊa_vf_guid
 {

637 
__u32
 
	mvf
;

638 
__u64
 
	mguid
;

642 
	mIFLA_VF_LINK_STATE_AUTO
,

643 
	mIFLA_VF_LINK_STATE_ENABLE
,

644 
	mIFLA_VF_LINK_STATE_DISABLE
,

645 
	m__IFLA_VF_LINK_STATE_MAX
,

648 
	siÊa_vf_lök_°©e
 {

649 
__u32
 
	mvf
;

650 
__u32
 
	mlök_°©e
;

653 
	siÊa_vf_rss_quîy_í
 {

654 
__u32
 
	mvf
;

655 
__u32
 
	m£âög
;

659 
	mIFLA_VF_STATS_RX_PACKETS
,

660 
	mIFLA_VF_STATS_TX_PACKETS
,

661 
	mIFLA_VF_STATS_RX_BYTES
,

662 
	mIFLA_VF_STATS_TX_BYTES
,

663 
	mIFLA_VF_STATS_BROADCAST
,

664 
	mIFLA_VF_STATS_MULTICAST
,

665 
	m__IFLA_VF_STATS_MAX
,

668 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

670 
	siÊa_vf_åu°
 {

671 
__u32
 
	mvf
;

672 
__u32
 
	m£âög
;

691 
	mIFLA_VF_PORT_UNSPEC
,

692 
	mIFLA_VF_PORT
,

693 
	m__IFLA_VF_PORT_MAX
,

696 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

699 
	mIFLA_PORT_UNSPEC
,

700 
	mIFLA_PORT_VF
,

701 
	mIFLA_PORT_PROFILE
,

702 
	mIFLA_PORT_VSI_TYPE
,

703 
	mIFLA_PORT_INSTANCE_UUID
,

704 
	mIFLA_PORT_HOST_UUID
,

705 
	mIFLA_PORT_REQUEST
,

706 
	mIFLA_PORT_RESPONSE
,

707 
	m__IFLA_PORT_MAX
,

710 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

712 
	#PORT_PROFILE_MAX
 40

	)

713 
	#PORT_UUID_MAX
 16

	)

714 
	#PORT_SELF_VF
 -1

	)

717 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

718 
	mPORT_REQUEST_PREASSOCIATE_RR
,

719 
	mPORT_REQUEST_ASSOCIATE
,

720 
	mPORT_REQUEST_DISASSOCIATE
,

724 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

725 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

726 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

727 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

728 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

729 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

730 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

732 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

733 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

734 
	mPORT_PROFILE_RESPONSE_INVALID
,

735 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

736 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

737 
	mPORT_PROFILE_RESPONSE_ERROR
,

740 
	siÊa_p‹t_vsi
 {

741 
__u8
 
	mvsi_mgr_id
;

742 
__u8
 
	mvsi_ty≥_id
[3];

743 
__u8
 
	mvsi_ty≥_vîsi⁄
;

744 
__u8
 
	m∑d
[3];

751 
	mIFLA_IPOIB_UNSPEC
,

752 
	mIFLA_IPOIB_PKEY
,

753 
	mIFLA_IPOIB_MODE
,

754 
	mIFLA_IPOIB_UMCAST
,

755 
	m__IFLA_IPOIB_MAX


759 
	mIPOIB_MODE_DATAGRAM
 = 0,

760 
	mIPOIB_MODE_CONNECTED
 = 1,

763 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

769 
	mIFLA_HSR_UNSPEC
,

770 
	mIFLA_HSR_SLAVE1
,

771 
	mIFLA_HSR_SLAVE2
,

772 
	mIFLA_HSR_MULTICAST_SPEC
,

773 
	mIFLA_HSR_SUPERVISION_ADDR
,

774 
	mIFLA_HSR_SEQ_NR
,

775 
	m__IFLA_HSR_MAX
,

778 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

60 
	#__UAPI_DEF_IF_IFCONF
 0

	)

61 
	#__UAPI_DEF_IF_IFMAP
 0

	)

62 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

63 
	#__UAPI_DEF_IF_IFREQ
 0

	)

65 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

67 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


68 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

77 
	#__UAPI_DEF_IF_IFCONF
 1

	)

78 
	#__UAPI_DEF_IF_IFMAP
 1

	)

79 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

80 
	#__UAPI_DEF_IF_IFREQ
 1

	)

82 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

84 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

89 #i‡
deföed
(
_NETINET_IN_H
)

93 
	#__UAPI_DEF_IN_ADDR
 0

	)

94 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

95 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

96 
	#__UAPI_DEF_IP_MREQ
 0

	)

97 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

98 
	#__UAPI_DEF_IN_CLASS
 0

	)

100 
	#__UAPI_DEF_IN6_ADDR
 0

	)

105 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

106 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

108 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

110 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

111 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

112 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

113 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

114 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

115 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

122 
	#__UAPI_DEF_IN_ADDR
 1

	)

123 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

124 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

125 
	#__UAPI_DEF_IP_MREQ
 1

	)

126 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

127 
	#__UAPI_DEF_IN_CLASS
 1

	)

129 
	#__UAPI_DEF_IN6_ADDR
 1

	)

132 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

133 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

134 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

135 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

136 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

137 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

138 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

143 #i‡
deföed
(
_SYS_XATTR_H
)

144 
	#__UAPI_DEF_XATTR
 0

	)

146 
	#__UAPI_DEF_XATTR
 1

	)

155 
	#__UAPI_DEF_IF_IFCONF
 1

	)

156 
	#__UAPI_DEF_IF_IFMAP
 1

	)

157 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

158 
	#__UAPI_DEF_IF_IFREQ
 1

	)

160 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

162 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

165 
	#__UAPI_DEF_IN_ADDR
 1

	)

166 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

167 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

168 
	#__UAPI_DEF_IP_MREQ
 1

	)

169 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

170 
	#__UAPI_DEF_IN_CLASS
 1

	)

173 
	#__UAPI_DEF_IN6_ADDR
 1

	)

174 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

175 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

176 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

177 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

178 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

179 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

180 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

183 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	mNDA_MASTER
,

28 
	mNDA_LINK_NETNSID
,

29 
	m__NDA_MAX


32 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

38 
	#NTF_USE
 0x01

	)

39 
	#NTF_SELF
 0x02

	)

40 
	#NTF_MASTER
 0x04

	)

41 
	#NTF_PROXY
 0x08

	)

42 
	#NTF_EXT_LEARNED
 0x10

	)

43 
	#NTF_ROUTER
 0x80

	)

49 
	#NUD_INCOMPLETE
 0x01

	)

50 
	#NUD_REACHABLE
 0x02

	)

51 
	#NUD_STALE
 0x04

	)

52 
	#NUD_DELAY
 0x08

	)

53 
	#NUD_PROBE
 0x10

	)

54 
	#NUD_FAILED
 0x20

	)

57 
	#NUD_NOARP
 0x40

	)

58 
	#NUD_PERMANENT
 0x80

	)

59 
	#NUD_NONE
 0x00

	)

66 
	snda_ˇcheöfo
 {

67 
__u32
 
	mndm_c⁄fúmed
;

68 
__u32
 
	mndm_u£d
;

69 
__u32
 
	mndm_upd©ed
;

70 
__u32
 
	mndm_ªf˙t
;

98 
	sndt_°©s
 {

99 
__u64
 
	mndts_Ælocs
;

100 
__u64
 
	mndts_de°roys
;

101 
__u64
 
	mndts_hash_grows
;

102 
__u64
 
	mndts_ªs_Áûed
;

103 
__u64
 
	mndts_lookups
;

104 
__u64
 
	mndts_hôs
;

105 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

106 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

107 
__u64
 
	mndts_≥riodic_gc_runs
;

108 
__u64
 
	mndts_f‹˚d_gc_runs
;

109 
__u64
 
	mndts_èbÀ_fuŒs
;

113 
	mNDTPA_UNSPEC
,

114 
	mNDTPA_IFINDEX
,

115 
	mNDTPA_REFCNT
,

116 
	mNDTPA_REACHABLE_TIME
,

117 
	mNDTPA_BASE_REACHABLE_TIME
,

118 
	mNDTPA_RETRANS_TIME
,

119 
	mNDTPA_GC_STALETIME
,

120 
	mNDTPA_DELAY_PROBE_TIME
,

121 
	mNDTPA_QUEUE_LEN
,

122 
	mNDTPA_APP_PROBES
,

123 
	mNDTPA_UCAST_PROBES
,

124 
	mNDTPA_MCAST_PROBES
,

125 
	mNDTPA_ANYCAST_DELAY
,

126 
	mNDTPA_PROXY_DELAY
,

127 
	mNDTPA_PROXY_QLEN
,

128 
	mNDTPA_LOCKTIME
,

129 
	mNDTPA_QUEUE_LENBYTES
,

130 
	mNDTPA_MCAST_REPROBES
,

131 
	m__NDTPA_MAX


133 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

135 
	sndtmsg
 {

136 
__u8
 
	mndtm_Ámûy
;

137 
__u8
 
	mndtm_∑d1
;

138 
__u16
 
	mndtm_∑d2
;

141 
	sndt_c⁄fig
 {

142 
__u16
 
	mndtc_key_Àn
;

143 
__u16
 
	mndtc_íåy_size
;

144 
__u32
 
	mndtc_íåõs
;

145 
__u32
 
	mndtc_œ°_Êush
;

146 
__u32
 
	mndtc_œ°_ønd
;

147 
__u32
 
	mndtc_hash_∫d
;

148 
__u32
 
	mndtc_hash_mask
;

149 
__u32
 
	mndtc_hash_chaö_gc
;

150 
__u32
 
	mndtc_¥oxy_qÀn
;

154 
	mNDTA_UNSPEC
,

155 
	mNDTA_NAME
,

156 
	mNDTA_THRESH1
,

157 
	mNDTA_THRESH2
,

158 
	mNDTA_THRESH3
,

159 
	mNDTA_CONFIG
,

160 
	mNDTA_PARMS
,

161 
	mNDTA_STATS
,

162 
	mNDTA_GC_INTERVAL
,

163 
	m__NDTA_MAX


165 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_STD_HEADER_SIZEOF
 64

	)

30 
	#PCI_VENDOR_ID
 0x00

	)

31 
	#PCI_DEVICE_ID
 0x02

	)

32 
	#PCI_COMMAND
 0x04

	)

33 
	#PCI_COMMAND_IO
 0x1

	)

34 
	#PCI_COMMAND_MEMORY
 0x2

	)

35 
	#PCI_COMMAND_MASTER
 0x4

	)

36 
	#PCI_COMMAND_SPECIAL
 0x8

	)

37 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

38 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

39 
	#PCI_COMMAND_PARITY
 0x40

	)

40 
	#PCI_COMMAND_WAIT
 0x80

	)

41 
	#PCI_COMMAND_SERR
 0x100

	)

42 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

43 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

45 
	#PCI_STATUS
 0x06

	)

46 
	#PCI_STATUS_INTERRUPT
 0x08

	)

47 
	#PCI_STATUS_CAP_LIST
 0x10

	)

48 
	#PCI_STATUS_66MHZ
 0x20

	)

49 
	#PCI_STATUS_UDF
 0x40

	)

50 
	#PCI_STATUS_FAST_BACK
 0x80

	)

51 
	#PCI_STATUS_PARITY
 0x100

	)

52 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

53 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

54 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

55 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

56 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

57 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

58 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

59 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

60 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

62 
	#PCI_CLASS_REVISION
 0x08

	)

63 
	#PCI_REVISION_ID
 0x08

	)

64 
	#PCI_CLASS_PROG
 0x09

	)

65 
	#PCI_CLASS_DEVICE
 0x0®

	)

67 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

68 
	#PCI_LATENCY_TIMER
 0x0d

	)

69 
	#PCI_HEADER_TYPE
 0x0ê

	)

70 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

71 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

72 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

74 
	#PCI_BIST
 0x0‡

	)

75 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

76 
	#PCI_BIST_START
 0x40

	)

77 
	#PCI_BIST_CAPABLE
 0x80

	)

85 
	#PCI_BASE_ADDRESS_0
 0x10

	)

86 
	#PCI_BASE_ADDRESS_1
 0x14

	)

87 
	#PCI_BASE_ADDRESS_2
 0x18

	)

88 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

89 
	#PCI_BASE_ADDRESS_4
 0x20

	)

90 
	#PCI_BASE_ADDRESS_5
 0x24

	)

91 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

93 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

97 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

98 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

99 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

100 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

104 
	#PCI_CARDBUS_CIS
 0x28

	)

105 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

106 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

107 
	#PCI_ROM_ADDRESS
 0x30

	)

108 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

109 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

111 
	#PCI_CAPABILITY_LIST
 0x34

	)

114 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

115 
	#PCI_INTERRUPT_PIN
 0x3d

	)

116 
	#PCI_MIN_GNT
 0x3ê

	)

117 
	#PCI_MAX_LAT
 0x3‡

	)

120 
	#PCI_PRIMARY_BUS
 0x18

	)

121 
	#PCI_SECONDARY_BUS
 0x19

	)

122 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

123 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

124 
	#PCI_IO_BASE
 0x1¯

	)

125 
	#PCI_IO_LIMIT
 0x1d

	)

126 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

127 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

128 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

129 
	#PCI_IO_RANGE_MASK
 (~0x0fULË

	)

130 
	#PCI_IO_1K_RANGE_MASK
 (~0x03ULË

	)

131 
	#PCI_SEC_STATUS
 0x1ê

	)

132 
	#PCI_MEMORY_BASE
 0x20

	)

133 
	#PCI_MEMORY_LIMIT
 0x22

	)

134 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

135 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

136 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

137 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

138 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

139 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

140 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

141 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

142 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

143 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

144 
	#PCI_IO_BASE_UPPER16
 0x30

	)

145 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

148 
	#PCI_ROM_ADDRESS1
 0x38

	)

150 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

151 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

152 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

153 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

154 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

155 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

156 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

157 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

160 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

162 
	#PCI_CB_SEC_STATUS
 0x16

	)

163 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

164 
	#PCI_CB_CARD_BUS
 0x19

	)

165 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

166 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

167 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

168 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

169 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

170 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

171 
	#PCI_CB_IO_BASE_0
 0x2c

	)

172 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

173 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

174 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

175 
	#PCI_CB_IO_BASE_1
 0x34

	)

176 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

177 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

178 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

179 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

181 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

182 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

183 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

184 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

185 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

186 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

187 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

188 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

189 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

190 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

191 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

192 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

193 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

194 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

199 
	#PCI_CAP_LIST_ID
 0

	)

200 
	#PCI_CAP_ID_PM
 0x01

	)

201 
	#PCI_CAP_ID_AGP
 0x02

	)

202 
	#PCI_CAP_ID_VPD
 0x03

	)

203 
	#PCI_CAP_ID_SLOTID
 0x04

	)

204 
	#PCI_CAP_ID_MSI
 0x05

	)

205 
	#PCI_CAP_ID_CHSWP
 0x06

	)

206 
	#PCI_CAP_ID_PCIX
 0x07

	)

207 
	#PCI_CAP_ID_HT
 0x08

	)

208 
	#PCI_CAP_ID_VNDR
 0x09

	)

209 
	#PCI_CAP_ID_DBG
 0x0A

	)

210 
	#PCI_CAP_ID_CCRC
 0x0B

	)

211 
	#PCI_CAP_ID_SHPC
 0x0C

	)

212 
	#PCI_CAP_ID_SSVID
 0x0D

	)

213 
	#PCI_CAP_ID_AGP3
 0x0E

	)

214 
	#PCI_CAP_ID_SECDEV
 0x0F

	)

215 
	#PCI_CAP_ID_EXP
 0x10

	)

216 
	#PCI_CAP_ID_MSIX
 0x11

	)

217 
	#PCI_CAP_ID_SATA
 0x12

	)

218 
	#PCI_CAP_ID_AF
 0x13

	)

219 
	#PCI_CAP_ID_EA
 0x14

	)

220 
	#PCI_CAP_ID_MAX
 
PCI_CAP_ID_EA


	)

221 
	#PCI_CAP_LIST_NEXT
 1

	)

222 
	#PCI_CAP_FLAGS
 2

	)

223 
	#PCI_CAP_SIZEOF
 4

	)

227 
	#PCI_PM_PMC
 2

	)

228 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

229 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

230 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

231 
	#PCI_PM_CAP_DSI
 0x0020

	)

232 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

233 
	#PCI_PM_CAP_D1
 0x0200

	)

234 
	#PCI_PM_CAP_D2
 0x0400

	)

235 
	#PCI_PM_CAP_PME
 0x0800

	)

236 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

237 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

238 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

239 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

240 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

241 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

242 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

243 
	#PCI_PM_CTRL
 4

	)

244 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

245 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

246 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

247 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

248 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

249 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

250 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

251 
	#PCI_PM_PPB_B2_B3
 0x40

	)

252 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

253 
	#PCI_PM_DATA_REGISTER
 7

	)

254 
	#PCI_PM_SIZEOF
 8

	)

258 
	#PCI_AGP_VERSION
 2

	)

259 
	#PCI_AGP_RFU
 3

	)

260 
	#PCI_AGP_STATUS
 4

	)

261 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

262 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

263 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

264 
	#PCI_AGP_STATUS_FW
 0x0010

	)

265 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

266 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

267 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

268 
	#PCI_AGP_COMMAND
 8

	)

269 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

270 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

271 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

272 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

273 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

274 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

275 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

276 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

277 
	#PCI_AGP_SIZEOF
 12

	)

281 
	#PCI_VPD_ADDR
 2

	)

282 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

283 
	#PCI_VPD_ADDR_F
 0x8000

	)

284 
	#PCI_VPD_DATA
 4

	)

285 
	#PCI_CAP_VPD_SIZEOF
 8

	)

289 
	#PCI_SID_ESR
 2

	)

290 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

291 
	#PCI_SID_ESR_FIC
 0x20

	)

292 
	#PCI_SID_CHASSIS_NR
 3

	)

296 
	#PCI_MSI_FLAGS
 2

	)

297 
	#PCI_MSI_FLAGS_ENABLE
 0x0001

	)

298 
	#PCI_MSI_FLAGS_QMASK
 0x000ê

	)

299 
	#PCI_MSI_FLAGS_QSIZE
 0x0070

	)

300 
	#PCI_MSI_FLAGS_64BIT
 0x0080

	)

301 
	#PCI_MSI_FLAGS_MASKBIT
 0x0100

	)

302 
	#PCI_MSI_RFU
 3

	)

303 
	#PCI_MSI_ADDRESS_LO
 4

	)

304 
	#PCI_MSI_ADDRESS_HI
 8

	)

305 
	#PCI_MSI_DATA_32
 8

	)

306 
	#PCI_MSI_MASK_32
 12

	)

307 
	#PCI_MSI_PENDING_32
 16

	)

308 
	#PCI_MSI_DATA_64
 12

	)

309 
	#PCI_MSI_MASK_64
 16

	)

310 
	#PCI_MSI_PENDING_64
 20

	)

313 
	#PCI_MSIX_FLAGS
 2

	)

314 
	#PCI_MSIX_FLAGS_QSIZE
 0x07FF

	)

315 
	#PCI_MSIX_FLAGS_MASKALL
 0x4000

	)

316 
	#PCI_MSIX_FLAGS_ENABLE
 0x8000

	)

317 
	#PCI_MSIX_TABLE
 4

	)

318 
	#PCI_MSIX_TABLE_BIR
 0x00000007

	)

319 
	#PCI_MSIX_TABLE_OFFSET
 0xfffffff8

	)

320 
	#PCI_MSIX_PBA
 8

	)

321 
	#PCI_MSIX_PBA_BIR
 0x00000007

	)

322 
	#PCI_MSIX_PBA_OFFSET
 0xfffffff8

	)

323 
	#PCI_MSIX_FLAGS_BIRMASK
 
PCI_MSIX_PBA_BIR


	)

324 
	#PCI_CAP_MSIX_SIZEOF
 12

	)

327 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

328 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

329 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

330 
	#PCI_MSIX_ENTRY_DATA
 8

	)

331 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

332 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 1

	)

336 
	#PCI_CHSWP_CSR
 2

	)

337 
	#PCI_CHSWP_DHA
 0x01

	)

338 
	#PCI_CHSWP_EIM
 0x02

	)

339 
	#PCI_CHSWP_PIE
 0x04

	)

340 
	#PCI_CHSWP_LOO
 0x08

	)

341 
	#PCI_CHSWP_PI
 0x30

	)

342 
	#PCI_CHSWP_EXT
 0x40

	)

343 
	#PCI_CHSWP_INS
 0x80

	)

347 
	#PCI_AF_LENGTH
 2

	)

348 
	#PCI_AF_CAP
 3

	)

349 
	#PCI_AF_CAP_TP
 0x01

	)

350 
	#PCI_AF_CAP_FLR
 0x02

	)

351 
	#PCI_AF_CTRL
 4

	)

352 
	#PCI_AF_CTRL_FLR
 0x01

	)

353 
	#PCI_AF_STATUS
 5

	)

354 
	#PCI_AF_STATUS_TP
 0x01

	)

355 
	#PCI_CAP_AF_SIZEOF
 6

	)

359 
	#PCI_EA_NUM_ENT
 2

	)

360 
	#PCI_EA_NUM_ENT_MASK
 0x3‡

	)

361 
	#PCI_EA_FIRST_ENT
 4

	)

362 
	#PCI_EA_FIRST_ENT_BRIDGE
 8

	)

363 
	#PCI_EA_ES
 0x00000007

	)

364 
	#PCI_EA_BEI
 0x000000f0

	)

366 
	#PCI_EA_BEI_BAR0
 0

	)

367 
	#PCI_EA_BEI_BAR5
 5

	)

368 
	#PCI_EA_BEI_BRIDGE
 6

	)

369 
	#PCI_EA_BEI_ENI
 7

	)

370 
	#PCI_EA_BEI_ROM
 8

	)

372 
	#PCI_EA_BEI_VF_BAR0
 9

	)

373 
	#PCI_EA_BEI_VF_BAR5
 14

	)

374 
	#PCI_EA_BEI_RESERVED
 15

	)

375 
	#PCI_EA_PP
 0x0000ff00

	)

376 
	#PCI_EA_SP
 0x00ff0000

	)

377 
	#PCI_EA_P_MEM
 0x00

	)

378 
	#PCI_EA_P_MEM_PREFETCH
 0x01

	)

379 
	#PCI_EA_P_IO
 0x02

	)

380 
	#PCI_EA_P_VF_MEM_PREFETCH
 0x03

	)

381 
	#PCI_EA_P_VF_MEM
 0x04

	)

382 
	#PCI_EA_P_BRIDGE_MEM
 0x05

	)

383 
	#PCI_EA_P_BRIDGE_MEM_PREFETCH
 0x06

	)

384 
	#PCI_EA_P_BRIDGE_IO
 0x07

	)

386 
	#PCI_EA_P_MEM_RESERVED
 0xfd

	)

387 
	#PCI_EA_P_IO_RESERVED
 0x„

	)

388 
	#PCI_EA_P_UNAVAILABLE
 0xf‡

	)

389 
	#PCI_EA_WRITABLE
 0x40000000

	)

390 
	#PCI_EA_ENABLE
 0x80000000

	)

391 
	#PCI_EA_BASE
 4

	)

392 
	#PCI_EA_MAX_OFFSET
 8

	)

394 
	#PCI_EA_IS_64
 0x00000002

	)

395 
	#PCI_EA_FIELD_MASK
 0xfffffff¯

	)

399 
	#PCI_X_CMD
 2

	)

400 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

401 
	#PCI_X_CMD_ERO
 0x0002

	)

402 
	#PCI_X_CMD_READ_512
 0x0000

	)

403 
	#PCI_X_CMD_READ_1K
 0x0004

	)

404 
	#PCI_X_CMD_READ_2K
 0x0008

	)

405 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

406 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

408 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

409 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

410 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

411 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

412 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

413 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

414 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

415 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

416 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

417 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

418 
	#PCI_X_STATUS
 4

	)

419 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

420 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

421 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

422 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

423 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

424 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

425 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

426 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

427 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

428 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

429 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

430 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

431 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

432 
	#PCI_X_ECC_CSR
 8

	)

433 
	#PCI_CAP_PCIX_SIZEOF_V0
 8

	)

434 
	#PCI_CAP_PCIX_SIZEOF_V1
 24

	)

435 
	#PCI_CAP_PCIX_SIZEOF_V2
 
PCI_CAP_PCIX_SIZEOF_V1


	)

439 
	#PCI_X_BRIDGE_SSTATUS
 2

	)

440 
	#PCI_X_SSTATUS_64BIT
 0x0001

	)

441 
	#PCI_X_SSTATUS_133MHZ
 0x0002

	)

442 
	#PCI_X_SSTATUS_FREQ
 0x03c0

	)

443 
	#PCI_X_SSTATUS_VERS
 0x3000

	)

444 
	#PCI_X_SSTATUS_V1
 0x1000

	)

445 
	#PCI_X_SSTATUS_V2
 0x2000

	)

446 
	#PCI_X_SSTATUS_266MHZ
 0x4000

	)

447 
	#PCI_X_SSTATUS_533MHZ
 0x8000

	)

448 
	#PCI_X_BRIDGE_STATUS
 4

	)

452 
	#PCI_SSVID_VENDOR_ID
 4

	)

453 
	#PCI_SSVID_DEVICE_ID
 6

	)

457 
	#PCI_EXP_FLAGS
 2

	)

458 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

459 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

460 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

461 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

462 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

463 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

464 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

465 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

466 
	#PCI_EXP_TYPE_PCIE_BRIDGE
 0x8

	)

467 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

468 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

469 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

470 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

471 
	#PCI_EXP_DEVCAP
 4

	)

472 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x00000007

	)

473 
	#PCI_EXP_DEVCAP_PHANTOM
 0x00000018

	)

474 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x00000020

	)

475 
	#PCI_EXP_DEVCAP_L0S
 0x000001c0

	)

476 
	#PCI_EXP_DEVCAP_L1
 0x00000e00

	)

477 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x00001000

	)

478 
	#PCI_EXP_DEVCAP_ATN_IND
 0x00002000

	)

479 
	#PCI_EXP_DEVCAP_PWR_IND
 0x00004000

	)

480 
	#PCI_EXP_DEVCAP_RBER
 0x00008000

	)

481 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x03fc0000

	)

482 
	#PCI_EXP_DEVCAP_PWR_SCL
 0x0c000000

	)

483 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

484 
	#PCI_EXP_DEVCTL
 8

	)

485 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

486 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

487 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

488 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

489 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

490 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

491 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

492 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

493 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

494 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

495 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

496 
	#PCI_EXP_DEVCTL_READRQ_128B
 0x0000

	)

497 
	#PCI_EXP_DEVCTL_READRQ_256B
 0x1000

	)

498 
	#PCI_EXP_DEVCTL_READRQ_512B
 0x2000

	)

499 
	#PCI_EXP_DEVCTL_READRQ_1024B
 0x3000

	)

500 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

501 
	#PCI_EXP_DEVSTA
 10

	)

502 
	#PCI_EXP_DEVSTA_CED
 0x0001

	)

503 
	#PCI_EXP_DEVSTA_NFED
 0x0002

	)

504 
	#PCI_EXP_DEVSTA_FED
 0x0004

	)

505 
	#PCI_EXP_DEVSTA_URD
 0x0008

	)

506 
	#PCI_EXP_DEVSTA_AUXPD
 0x0010

	)

507 
	#PCI_EXP_DEVSTA_TRPND
 0x0020

	)

508 
	#PCI_EXP_LNKCAP
 12

	)

509 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

510 
	#PCI_EXP_LNKCAP_SLS_2_5GB
 0x00000001

	)

511 
	#PCI_EXP_LNKCAP_SLS_5_0GB
 0x00000002

	)

512 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

513 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

514 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

515 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

516 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

517 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

518 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

519 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

520 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

521 
	#PCI_EXP_LNKCTL
 16

	)

522 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

523 
	#PCI_EXP_LNKCTL_ASPM_L0S
 0x0001

	)

524 
	#PCI_EXP_LNKCTL_ASPM_L1
 0x0002

	)

525 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

526 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

527 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

528 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

529 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

530 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x0100

	)

531 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

532 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

533 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

534 
	#PCI_EXP_LNKSTA
 18

	)

535 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

536 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x0001

	)

537 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x0002

	)

538 
	#PCI_EXP_LNKSTA_CLS_8_0GB
 0x0003

	)

539 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

540 
	#PCI_EXP_LNKSTA_NLW_X1
 0x0010

	)

541 
	#PCI_EXP_LNKSTA_NLW_X2
 0x0020

	)

542 
	#PCI_EXP_LNKSTA_NLW_X4
 0x0040

	)

543 
	#PCI_EXP_LNKSTA_NLW_X8
 0x0080

	)

544 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

545 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

546 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

547 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

548 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

549 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

550 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V1
 20

	)

551 
	#PCI_EXP_SLTCAP
 20

	)

552 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

553 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

554 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

555 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

556 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

557 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

558 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

559 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

560 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

561 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

562 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

563 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

564 
	#PCI_EXP_SLTCTL
 24

	)

565 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

566 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

567 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

568 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

569 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

570 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

571 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

572 
	#PCI_EXP_SLTCTL_ATTN_IND_ON
 0x0040

	)

573 
	#PCI_EXP_SLTCTL_ATTN_IND_BLINK
 0x0080

	)

574 
	#PCI_EXP_SLTCTL_ATTN_IND_OFF
 0x00c0

	)

575 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

576 
	#PCI_EXP_SLTCTL_PWR_IND_ON
 0x0100

	)

577 
	#PCI_EXP_SLTCTL_PWR_IND_BLINK
 0x0200

	)

578 
	#PCI_EXP_SLTCTL_PWR_IND_OFF
 0x0300

	)

579 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

580 
	#PCI_EXP_SLTCTL_PWR_ON
 0x0000

	)

581 
	#PCI_EXP_SLTCTL_PWR_OFF
 0x0400

	)

582 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

583 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

584 
	#PCI_EXP_SLTSTA
 26

	)

585 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

586 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

587 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

588 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

589 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

590 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

591 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

592 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

593 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

594 
	#PCI_EXP_RTCTL
 28

	)

595 
	#PCI_EXP_RTCTL_SECEE
 0x0001

	)

596 
	#PCI_EXP_RTCTL_SENFEE
 0x0002

	)

597 
	#PCI_EXP_RTCTL_SEFEE
 0x0004

	)

598 
	#PCI_EXP_RTCTL_PMEIE
 0x0008

	)

599 
	#PCI_EXP_RTCTL_CRSSVE
 0x0010

	)

600 
	#PCI_EXP_RTCAP
 30

	)

601 
	#PCI_EXP_RTCAP_CRSVIS
 0x0001

	)

602 
	#PCI_EXP_RTSTA
 32

	)

603 
	#PCI_EXP_RTSTA_PME
 0x00010000

	)

604 
	#PCI_EXP_RTSTA_PENDING
 0x00020000

	)

613 
	#PCI_EXP_DEVCAP2
 36

	)

614 
	#PCI_EXP_DEVCAP2_ARI
 0x00000020

	)

615 
	#PCI_EXP_DEVCAP2_LTR
 0x00000800

	)

616 
	#PCI_EXP_DEVCAP2_OBFF_MASK
 0x000c0000

	)

617 
	#PCI_EXP_DEVCAP2_OBFF_MSG
 0x00040000

	)

618 
	#PCI_EXP_DEVCAP2_OBFF_WAKE
 0x00080000

	)

619 
	#PCI_EXP_DEVCTL2
 40

	)

620 
	#PCI_EXP_DEVCTL2_COMP_TIMEOUT
 0x000‡

	)

621 
	#PCI_EXP_DEVCTL2_ARI
 0x0020

	)

622 
	#PCI_EXP_DEVCTL2_IDO_REQ_EN
 0x0100

	)

623 
	#PCI_EXP_DEVCTL2_IDO_CMP_EN
 0x0200

	)

624 
	#PCI_EXP_DEVCTL2_LTR_EN
 0x0400

	)

625 
	#PCI_EXP_DEVCTL2_OBFF_MSGA_EN
 0x2000

	)

626 
	#PCI_EXP_DEVCTL2_OBFF_MSGB_EN
 0x4000

	)

627 
	#PCI_EXP_DEVCTL2_OBFF_WAKE_EN
 0x6000

	)

628 
	#PCI_EXP_DEVSTA2
 42

	)

629 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V2
 44

	)

630 
	#PCI_EXP_LNKCAP2
 44

	)

631 
	#PCI_EXP_LNKCAP2_SLS_2_5GB
 0x00000002

	)

632 
	#PCI_EXP_LNKCAP2_SLS_5_0GB
 0x00000004

	)

633 
	#PCI_EXP_LNKCAP2_SLS_8_0GB
 0x00000008

	)

634 
	#PCI_EXP_LNKCAP2_CROSSLINK
 0x00000100

	)

635 
	#PCI_EXP_LNKCTL2
 48

	)

636 
	#PCI_EXP_LNKSTA2
 50

	)

637 
	#PCI_EXP_SLTCAP2
 52

	)

638 
	#PCI_EXP_SLTCTL2
 56

	)

639 
	#PCI_EXP_SLTSTA2
 58

	)

642 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

643 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

644 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

646 
	#PCI_EXT_CAP_ID_ERR
 0x01

	)

647 
	#PCI_EXT_CAP_ID_VC
 0x02

	)

648 
	#PCI_EXT_CAP_ID_DSN
 0x03

	)

649 
	#PCI_EXT_CAP_ID_PWR
 0x04

	)

650 
	#PCI_EXT_CAP_ID_RCLD
 0x05

	)

651 
	#PCI_EXT_CAP_ID_RCILC
 0x06

	)

652 
	#PCI_EXT_CAP_ID_RCEC
 0x07

	)

653 
	#PCI_EXT_CAP_ID_MFVC
 0x08

	)

654 
	#PCI_EXT_CAP_ID_VC9
 0x09

	)

655 
	#PCI_EXT_CAP_ID_RCRB
 0x0A

	)

656 
	#PCI_EXT_CAP_ID_VNDR
 0x0B

	)

657 
	#PCI_EXT_CAP_ID_CAC
 0x0C

	)

658 
	#PCI_EXT_CAP_ID_ACS
 0x0D

	)

659 
	#PCI_EXT_CAP_ID_ARI
 0x0E

	)

660 
	#PCI_EXT_CAP_ID_ATS
 0x0F

	)

661 
	#PCI_EXT_CAP_ID_SRIOV
 0x10

	)

662 
	#PCI_EXT_CAP_ID_MRIOV
 0x11

	)

663 
	#PCI_EXT_CAP_ID_MCAST
 0x12

	)

664 
	#PCI_EXT_CAP_ID_PRI
 0x13

	)

665 
	#PCI_EXT_CAP_ID_AMD_XXX
 0x14

	)

666 
	#PCI_EXT_CAP_ID_REBAR
 0x15

	)

667 
	#PCI_EXT_CAP_ID_DPA
 0x16

	)

668 
	#PCI_EXT_CAP_ID_TPH
 0x17

	)

669 
	#PCI_EXT_CAP_ID_LTR
 0x18

	)

670 
	#PCI_EXT_CAP_ID_SECPCI
 0x19

	)

671 
	#PCI_EXT_CAP_ID_PMUX
 0x1A

	)

672 
	#PCI_EXT_CAP_ID_PASID
 0x1B

	)

673 
	#PCI_EXT_CAP_ID_MAX
 
PCI_EXT_CAP_ID_PASID


	)

675 
	#PCI_EXT_CAP_DSN_SIZEOF
 12

	)

676 
	#PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF
 40

	)

679 
	#PCI_ERR_UNCOR_STATUS
 4

	)

680 
	#PCI_ERR_UNC_UND
 0x00000001

	)

681 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

682 
	#PCI_ERR_UNC_SURPDN
 0x00000020

	)

683 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

684 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

685 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

686 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

687 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

688 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

689 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

690 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

691 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

692 
	#PCI_ERR_UNC_ACSV
 0x00200000

	)

693 
	#PCI_ERR_UNC_INTN
 0x00400000

	)

694 
	#PCI_ERR_UNC_MCBTLP
 0x00800000

	)

695 
	#PCI_ERR_UNC_ATOMEG
 0x01000000

	)

696 
	#PCI_ERR_UNC_TLPPRE
 0x02000000

	)

697 
	#PCI_ERR_UNCOR_MASK
 8

	)

699 
	#PCI_ERR_UNCOR_SEVER
 12

	)

701 
	#PCI_ERR_COR_STATUS
 16

	)

702 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

703 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

704 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

705 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

706 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

707 
	#PCI_ERR_COR_ADV_NFAT
 0x00002000

	)

708 
	#PCI_ERR_COR_INTERNAL
 0x00004000

	)

709 
	#PCI_ERR_COR_LOG_OVER
 0x00008000

	)

710 
	#PCI_ERR_COR_MASK
 20

	)

712 
	#PCI_ERR_CAP
 24

	)

713 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

714 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

715 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

716 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

717 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

718 
	#PCI_ERR_HEADER_LOG
 28

	)

719 
	#PCI_ERR_ROOT_COMMAND
 44

	)

721 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

723 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

725 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

726 
	#PCI_ERR_ROOT_STATUS
 48

	)

727 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

729 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

731 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

733 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

734 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

735 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

736 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

737 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

740 
	#PCI_VC_PORT_CAP1
 4

	)

741 
	#PCI_VC_CAP1_EVCC
 0x00000007

	)

742 
	#PCI_VC_CAP1_LPEVCC
 0x00000070

	)

743 
	#PCI_VC_CAP1_ARB_SIZE
 0x00000c00

	)

744 
	#PCI_VC_PORT_CAP2
 8

	)

745 
	#PCI_VC_CAP2_32_PHASE
 0x00000002

	)

746 
	#PCI_VC_CAP2_64_PHASE
 0x00000004

	)

747 
	#PCI_VC_CAP2_128_PHASE
 0x00000008

	)

748 
	#PCI_VC_CAP2_ARB_OFF
 0xff000000

	)

749 
	#PCI_VC_PORT_CTRL
 12

	)

750 
	#PCI_VC_PORT_CTRL_LOAD_TABLE
 0x00000001

	)

751 
	#PCI_VC_PORT_STATUS
 14

	)

752 
	#PCI_VC_PORT_STATUS_TABLE
 0x00000001

	)

753 
	#PCI_VC_RES_CAP
 16

	)

754 
	#PCI_VC_RES_CAP_32_PHASE
 0x00000002

	)

755 
	#PCI_VC_RES_CAP_64_PHASE
 0x00000004

	)

756 
	#PCI_VC_RES_CAP_128_PHASE
 0x00000008

	)

757 
	#PCI_VC_RES_CAP_128_PHASE_TB
 0x00000010

	)

758 
	#PCI_VC_RES_CAP_256_PHASE
 0x00000020

	)

759 
	#PCI_VC_RES_CAP_ARB_OFF
 0xff000000

	)

760 
	#PCI_VC_RES_CTRL
 20

	)

761 
	#PCI_VC_RES_CTRL_LOAD_TABLE
 0x00010000

	)

762 
	#PCI_VC_RES_CTRL_ARB_SELECT
 0x000e0000

	)

763 
	#PCI_VC_RES_CTRL_ID
 0x07000000

	)

764 
	#PCI_VC_RES_CTRL_ENABLE
 0x80000000

	)

765 
	#PCI_VC_RES_STATUS
 26

	)

766 
	#PCI_VC_RES_STATUS_TABLE
 0x00000001

	)

767 
	#PCI_VC_RES_STATUS_NEGO
 0x00000002

	)

768 
	#PCI_CAP_VC_BASE_SIZEOF
 0x10

	)

769 
	#PCI_CAP_VC_PER_VC_SIZEOF
 0x0C

	)

772 
	#PCI_PWR_DSR
 4

	)

773 
	#PCI_PWR_DATA
 8

	)

774 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

775 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

776 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

777 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

778 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

779 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

780 
	#PCI_PWR_CAP
 12

	)

781 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

782 
	#PCI_EXT_CAP_PWR_SIZEOF
 16

	)

785 
	#PCI_VNDR_HEADER
 4

	)

786 
	#PCI_VNDR_HEADER_ID
(
x
Ë((xË& 0xffff)

	)

787 
	#PCI_VNDR_HEADER_REV
(
x
Ë(((xË>> 16Ë& 0xf)

	)

788 
	#PCI_VNDR_HEADER_LEN
(
x
Ë(((xË>> 20Ë& 0xfff)

	)

798 
	#HT_3BIT_CAP_MASK
 0xE0

	)

799 
	#HT_CAPTYPE_SLAVE
 0x00

	)

800 
	#HT_CAPTYPE_HOST
 0x20

	)

802 
	#HT_5BIT_CAP_MASK
 0xF8

	)

803 
	#HT_CAPTYPE_IRQ
 0x80

	)

804 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

805 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

806 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

807 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

808 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

809 
	#HT_MSI_FLAGS
 0x02

	)

810 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

811 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

812 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

813 
	#HT_MSI_ADDR_LO
 0x04

	)

814 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

815 
	#HT_MSI_ADDR_HI
 0x08

	)

816 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

817 
	#HT_CAPTYPE_VCSET
 0xB8

	)

818 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

819 
	#HT_CAPTYPE_GEN3
 0xD0

	)

820 
	#HT_CAPTYPE_PM
 0xE0

	)

821 
	#HT_CAP_SIZEOF_LONG
 28

	)

822 
	#HT_CAP_SIZEOF_SHORT
 24

	)

825 
	#PCI_ARI_CAP
 0x04

	)

826 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

827 
	#PCI_ARI_CAP_ACS
 0x0002

	)

828 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

829 
	#PCI_ARI_CTRL
 0x06

	)

830 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

831 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

832 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

833 
	#PCI_EXT_CAP_ARI_SIZEOF
 8

	)

836 
	#PCI_ATS_CAP
 0x04

	)

837 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

838 
	#PCI_ATS_MAX_QDEP
 32

	)

839 
	#PCI_ATS_CTRL
 0x06

	)

840 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

841 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

842 
	#PCI_ATS_MIN_STU
 12

	)

843 
	#PCI_EXT_CAP_ATS_SIZEOF
 8

	)

846 
	#PCI_PRI_CTRL
 0x04

	)

847 
	#PCI_PRI_CTRL_ENABLE
 0x01

	)

848 
	#PCI_PRI_CTRL_RESET
 0x02

	)

849 
	#PCI_PRI_STATUS
 0x06

	)

850 
	#PCI_PRI_STATUS_RF
 0x001

	)

851 
	#PCI_PRI_STATUS_UPRGI
 0x002

	)

852 
	#PCI_PRI_STATUS_STOPPED
 0x100

	)

853 
	#PCI_PRI_MAX_REQ
 0x08

	)

854 
	#PCI_PRI_ALLOC_REQ
 0x0¯

	)

855 
	#PCI_EXT_CAP_PRI_SIZEOF
 16

	)

858 
	#PCI_PASID_CAP
 0x04

	)

859 
	#PCI_PASID_CAP_EXEC
 0x02

	)

860 
	#PCI_PASID_CAP_PRIV
 0x04

	)

861 
	#PCI_PASID_CTRL
 0x06

	)

862 
	#PCI_PASID_CTRL_ENABLE
 0x01

	)

863 
	#PCI_PASID_CTRL_EXEC
 0x02

	)

864 
	#PCI_PASID_CTRL_PRIV
 0x04

	)

865 
	#PCI_EXT_CAP_PASID_SIZEOF
 8

	)

868 
	#PCI_SRIOV_CAP
 0x04

	)

869 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

870 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

871 
	#PCI_SRIOV_CTRL
 0x08

	)

872 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

873 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

874 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

875 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

876 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

877 
	#PCI_SRIOV_STATUS
 0x0®

	)

878 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

879 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

880 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

881 
	#PCI_SRIOV_NUM_VF
 0x10

	)

882 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

883 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

884 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

885 
	#PCI_SRIOV_VF_DID
 0x1®

	)

886 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

887 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

888 
	#PCI_SRIOV_BAR
 0x24

	)

889 
	#PCI_SRIOV_NUM_BARS
 6

	)

890 
	#PCI_SRIOV_VFM
 0x3¯

	)

891 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

892 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

893 
	#PCI_SRIOV_VFM_UA
 0x0

	)

894 
	#PCI_SRIOV_VFM_MI
 0x1

	)

895 
	#PCI_SRIOV_VFM_MO
 0x2

	)

896 
	#PCI_SRIOV_VFM_AV
 0x3

	)

897 
	#PCI_EXT_CAP_SRIOV_SIZEOF
 64

	)

899 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

900 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

901 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

902 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

903 
	#PCI_LTR_SCALE_SHIFT
 10

	)

904 
	#PCI_EXT_CAP_LTR_SIZEOF
 8

	)

907 
	#PCI_ACS_CAP
 0x04

	)

908 
	#PCI_ACS_SV
 0x01

	)

909 
	#PCI_ACS_TB
 0x02

	)

910 
	#PCI_ACS_RR
 0x04

	)

911 
	#PCI_ACS_CR
 0x08

	)

912 
	#PCI_ACS_UF
 0x10

	)

913 
	#PCI_ACS_EC
 0x20

	)

914 
	#PCI_ACS_DT
 0x40

	)

915 
	#PCI_ACS_EGRESS_BITS
 0x05

	)

916 
	#PCI_ACS_CTRL
 0x06

	)

917 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

919 
	#PCI_VSEC_HDR
 4

	)

920 
	#PCI_VSEC_HDR_LEN_SHIFT
 20

	)

923 
	#PCI_SATA_REGS
 4

	)

924 
	#PCI_SATA_REGS_MASK
 0xF

	)

925 
	#PCI_SATA_REGS_INLINE
 0xF

	)

926 
	#PCI_SATA_SIZEOF_SHORT
 8

	)

927 
	#PCI_SATA_SIZEOF_LONG
 16

	)

930 
	#PCI_REBAR_CTRL
 8

	)

931 
	#PCI_REBAR_CTRL_NBAR_MASK
 (7 << 5Ë

	)

932 
	#PCI_REBAR_CTRL_NBAR_SHIFT
 5

	)

935 
	#PCI_DPA_CAP
 4

	)

936 
	#PCI_DPA_CAP_SUBSTATE_MASK
 0x1F

	)

937 
	#PCI_DPA_BASE_SIZEOF
 16

	)

940 
	#PCI_TPH_CAP
 4

	)

941 
	#PCI_TPH_CAP_LOC_MASK
 0x600

	)

942 
	#PCI_TPH_LOC_NONE
 0x000

	)

943 
	#PCI_TPH_LOC_CAP
 0x200

	)

944 
	#PCI_TPH_LOC_MSIX
 0x400

	)

945 
	#PCI_TPH_CAP_ST_MASK
 0x07FF0000

	)

946 
	#PCI_TPH_CAP_ST_SHIFT
 16

	)

947 
	#PCI_TPH_BASE_SIZEOF
 12

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#PR_SET_PDEATHSIG
 1

	)

9 
	#PR_GET_PDEATHSIG
 2

	)

12 
	#PR_GET_DUMPABLE
 3

	)

13 
	#PR_SET_DUMPABLE
 4

	)

16 
	#PR_GET_UNALIGN
 5

	)

17 
	#PR_SET_UNALIGN
 6

	)

18 
	#PR_UNALIGN_NOPRINT
 1

	)

19 
	#PR_UNALIGN_SIGBUS
 2

	)

23 
	#PR_GET_KEEPCAPS
 7

	)

24 
	#PR_SET_KEEPCAPS
 8

	)

27 
	#PR_GET_FPEMU
 9

	)

28 
	#PR_SET_FPEMU
 10

	)

29 
	#PR_FPEMU_NOPRINT
 1

	)

30 
	#PR_FPEMU_SIGFPE
 2

	)

33 
	#PR_GET_FPEXC
 11

	)

34 
	#PR_SET_FPEXC
 12

	)

35 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

36 
	#PR_FP_EXC_DIV
 0x010000

	)

37 
	#PR_FP_EXC_OVF
 0x020000

	)

38 
	#PR_FP_EXC_UND
 0x040000

	)

39 
	#PR_FP_EXC_RES
 0x080000

	)

40 
	#PR_FP_EXC_INV
 0x100000

	)

41 
	#PR_FP_EXC_DISABLED
 0

	)

42 
	#PR_FP_EXC_NONRECOV
 1

	)

43 
	#PR_FP_EXC_ASYNC
 2

	)

44 
	#PR_FP_EXC_PRECISE
 3

	)

48 
	#PR_GET_TIMING
 13

	)

49 
	#PR_SET_TIMING
 14

	)

50 
	#PR_TIMING_STATISTICAL
 0

	)

52 
	#PR_TIMING_TIMESTAMP
 1

	)

55 
	#PR_SET_NAME
 15

	)

56 
	#PR_GET_NAME
 16

	)

59 
	#PR_GET_ENDIAN
 19

	)

60 
	#PR_SET_ENDIAN
 20

	)

61 
	#PR_ENDIAN_BIG
 0

	)

62 
	#PR_ENDIAN_LITTLE
 1

	)

63 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

66 
	#PR_GET_SECCOMP
 21

	)

67 
	#PR_SET_SECCOMP
 22

	)

70 
	#PR_CAPBSET_READ
 23

	)

71 
	#PR_CAPBSET_DROP
 24

	)

74 
	#PR_GET_TSC
 25

	)

75 
	#PR_SET_TSC
 26

	)

76 
	#PR_TSC_ENABLE
 1

	)

77 
	#PR_TSC_SIGSEGV
 2

	)

80 
	#PR_GET_SECUREBITS
 27

	)

81 
	#PR_SET_SECUREBITS
 28

	)

87 
	#PR_SET_TIMERSLACK
 29

	)

88 
	#PR_GET_TIMERSLACK
 30

	)

90 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

91 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

97 
	#PR_MCE_KILL
 33

	)

98 
	#PR_MCE_KILL_CLEAR
 0

	)

99 
	#PR_MCE_KILL_SET
 1

	)

101 
	#PR_MCE_KILL_LATE
 0

	)

102 
	#PR_MCE_KILL_EARLY
 1

	)

103 
	#PR_MCE_KILL_DEFAULT
 2

	)

105 
	#PR_MCE_KILL_GET
 34

	)

110 
	#PR_SET_MM
 35

	)

111 
	#PR_SET_MM_START_CODE
 1

	)

112 
	#PR_SET_MM_END_CODE
 2

	)

113 
	#PR_SET_MM_START_DATA
 3

	)

114 
	#PR_SET_MM_END_DATA
 4

	)

115 
	#PR_SET_MM_START_STACK
 5

	)

116 
	#PR_SET_MM_START_BRK
 6

	)

117 
	#PR_SET_MM_BRK
 7

	)

118 
	#PR_SET_MM_ARG_START
 8

	)

119 
	#PR_SET_MM_ARG_END
 9

	)

120 
	#PR_SET_MM_ENV_START
 10

	)

121 
	#PR_SET_MM_ENV_END
 11

	)

122 
	#PR_SET_MM_AUXV
 12

	)

123 
	#PR_SET_MM_EXE_FILE
 13

	)

124 
	#PR_SET_MM_MAP
 14

	)

125 
	#PR_SET_MM_MAP_SIZE
 15

	)

133 
	s¥˘l_mm_m≠
 {

134 
__u64
 
	m°¨t_code
;

135 
__u64
 
	míd_code
;

136 
__u64
 
	m°¨t_d©a
;

137 
__u64
 
	míd_d©a
;

138 
__u64
 
	m°¨t_brk
;

139 
__u64
 
	mbrk
;

140 
__u64
 
	m°¨t_°ack
;

141 
__u64
 
	m¨g_°¨t
;

142 
__u64
 
	m¨g_íd
;

143 
__u64
 
	mív_°¨t
;

144 
__u64
 
	mív_íd
;

145 
__u64
 *
	mauxv
;

146 
__u32
 
	mauxv_size
;

147 
__u32
 
	mexe_fd
;

154 
	#PR_SET_PTRACER
 0x59616d61

	)

155 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

157 
	#PR_SET_CHILD_SUBREAPER
 36

	)

158 
	#PR_GET_CHILD_SUBREAPER
 37

	)

174 
	#PR_SET_NO_NEW_PRIVS
 38

	)

175 
	#PR_GET_NO_NEW_PRIVS
 39

	)

177 
	#PR_GET_TID_ADDRESS
 40

	)

179 
	#PR_SET_THP_DISABLE
 41

	)

180 
	#PR_GET_THP_DISABLE
 42

	)

185 
	#PR_MPX_ENABLE_MANAGEMENT
 43

	)

186 
	#PR_MPX_DISABLE_MANAGEMENT
 44

	)

188 
	#PR_SET_FP_MODE
 45

	)

189 
	#PR_GET_FP_MODE
 46

	)

190 
	#PR_FP_MODE_FR
 (1 << 0Ë

	)

191 
	#PR_FP_MODE_FRE
 (1 << 1Ë

	)

194 
	#PR_CAP_AMBIENT
 47

	)

195 
	#PR_CAP_AMBIENT_IS_SET
 1

	)

196 
	#PR_CAP_AMBIENT_RAISE
 2

	)

197 
	#PR_CAP_AMBIENT_LOWER
 3

	)

198 
	#PR_CAP_AMBIENT_CLEAR_ALL
 4

	)

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/bitypes.h

3 
	~<sys/ty≥s.h
>

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/processor-flags.h

1 #i‚de‡
_ASM_X86_PROCESSOR_FLAGS_H


2 
	#_ASM_X86_PROCESSOR_FLAGS_H


	)

5 
	~<löux/c⁄°.h
>

10 
	#X86_EFLAGS_CF_BIT
 0

	)

11 
	#X86_EFLAGS_CF
 
	`_BITUL
(
X86_EFLAGS_CF_BIT
)

	)

12 
	#X86_EFLAGS_FIXED_BIT
 1

	)

13 
	#X86_EFLAGS_FIXED
 
	`_BITUL
(
X86_EFLAGS_FIXED_BIT
)

	)

14 
	#X86_EFLAGS_PF_BIT
 2

	)

15 
	#X86_EFLAGS_PF
 
	`_BITUL
(
X86_EFLAGS_PF_BIT
)

	)

16 
	#X86_EFLAGS_AF_BIT
 4

	)

17 
	#X86_EFLAGS_AF
 
	`_BITUL
(
X86_EFLAGS_AF_BIT
)

	)

18 
	#X86_EFLAGS_ZF_BIT
 6

	)

19 
	#X86_EFLAGS_ZF
 
	`_BITUL
(
X86_EFLAGS_ZF_BIT
)

	)

20 
	#X86_EFLAGS_SF_BIT
 7

	)

21 
	#X86_EFLAGS_SF
 
	`_BITUL
(
X86_EFLAGS_SF_BIT
)

	)

22 
	#X86_EFLAGS_TF_BIT
 8

	)

23 
	#X86_EFLAGS_TF
 
	`_BITUL
(
X86_EFLAGS_TF_BIT
)

	)

24 
	#X86_EFLAGS_IF_BIT
 9

	)

25 
	#X86_EFLAGS_IF
 
	`_BITUL
(
X86_EFLAGS_IF_BIT
)

	)

26 
	#X86_EFLAGS_DF_BIT
 10

	)

27 
	#X86_EFLAGS_DF
 
	`_BITUL
(
X86_EFLAGS_DF_BIT
)

	)

28 
	#X86_EFLAGS_OF_BIT
 11

	)

29 
	#X86_EFLAGS_OF
 
	`_BITUL
(
X86_EFLAGS_OF_BIT
)

	)

30 
	#X86_EFLAGS_IOPL_BIT
 12

	)

31 
	#X86_EFLAGS_IOPL
 (
	`_AC
(3,
UL
Ë<< 
X86_EFLAGS_IOPL_BIT
)

	)

32 
	#X86_EFLAGS_NT_BIT
 14

	)

33 
	#X86_EFLAGS_NT
 
	`_BITUL
(
X86_EFLAGS_NT_BIT
)

	)

34 
	#X86_EFLAGS_RF_BIT
 16

	)

35 
	#X86_EFLAGS_RF
 
	`_BITUL
(
X86_EFLAGS_RF_BIT
)

	)

36 
	#X86_EFLAGS_VM_BIT
 17

	)

37 
	#X86_EFLAGS_VM
 
	`_BITUL
(
X86_EFLAGS_VM_BIT
)

	)

38 
	#X86_EFLAGS_AC_BIT
 18

	)

39 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

40 
	#X86_EFLAGS_VIF_BIT
 19

	)

41 
	#X86_EFLAGS_VIF
 
	`_BITUL
(
X86_EFLAGS_VIF_BIT
)

	)

42 
	#X86_EFLAGS_VIP_BIT
 20

	)

43 
	#X86_EFLAGS_VIP
 
	`_BITUL
(
X86_EFLAGS_VIP_BIT
)

	)

44 
	#X86_EFLAGS_ID_BIT
 21

	)

45 
	#X86_EFLAGS_ID
 
	`_BITUL
(
X86_EFLAGS_ID_BIT
)

	)

50 
	#X86_CR0_PE_BIT
 0

	)

51 
	#X86_CR0_PE
 
	`_BITUL
(
X86_CR0_PE_BIT
)

	)

52 
	#X86_CR0_MP_BIT
 1

	)

53 
	#X86_CR0_MP
 
	`_BITUL
(
X86_CR0_MP_BIT
)

	)

54 
	#X86_CR0_EM_BIT
 2

	)

55 
	#X86_CR0_EM
 
	`_BITUL
(
X86_CR0_EM_BIT
)

	)

56 
	#X86_CR0_TS_BIT
 3

	)

57 
	#X86_CR0_TS
 
	`_BITUL
(
X86_CR0_TS_BIT
)

	)

58 
	#X86_CR0_ET_BIT
 4

	)

59 
	#X86_CR0_ET
 
	`_BITUL
(
X86_CR0_ET_BIT
)

	)

60 
	#X86_CR0_NE_BIT
 5

	)

61 
	#X86_CR0_NE
 
	`_BITUL
(
X86_CR0_NE_BIT
)

	)

62 
	#X86_CR0_WP_BIT
 16

	)

63 
	#X86_CR0_WP
 
	`_BITUL
(
X86_CR0_WP_BIT
)

	)

64 
	#X86_CR0_AM_BIT
 18

	)

65 
	#X86_CR0_AM
 
	`_BITUL
(
X86_CR0_AM_BIT
)

	)

66 
	#X86_CR0_NW_BIT
 29

	)

67 
	#X86_CR0_NW
 
	`_BITUL
(
X86_CR0_NW_BIT
)

	)

68 
	#X86_CR0_CD_BIT
 30

	)

69 
	#X86_CR0_CD
 
	`_BITUL
(
X86_CR0_CD_BIT
)

	)

70 
	#X86_CR0_PG_BIT
 31

	)

71 
	#X86_CR0_PG
 
	`_BITUL
(
X86_CR0_PG_BIT
)

	)

76 
	#X86_CR3_PWT_BIT
 3

	)

77 
	#X86_CR3_PWT
 
	`_BITUL
(
X86_CR3_PWT_BIT
)

	)

78 
	#X86_CR3_PCD_BIT
 4

	)

79 
	#X86_CR3_PCD
 
	`_BITUL
(
X86_CR3_PCD_BIT
)

	)

80 
	#X86_CR3_PCID_MASK
 
	`_AC
(0x00000fff,
UL
Ë

	)

85 
	#X86_CR4_VME_BIT
 0

	)

86 
	#X86_CR4_VME
 
	`_BITUL
(
X86_CR4_VME_BIT
)

	)

87 
	#X86_CR4_PVI_BIT
 1

	)

88 
	#X86_CR4_PVI
 
	`_BITUL
(
X86_CR4_PVI_BIT
)

	)

89 
	#X86_CR4_TSD_BIT
 2

	)

90 
	#X86_CR4_TSD
 
	`_BITUL
(
X86_CR4_TSD_BIT
)

	)

91 
	#X86_CR4_DE_BIT
 3

	)

92 
	#X86_CR4_DE
 
	`_BITUL
(
X86_CR4_DE_BIT
)

	)

93 
	#X86_CR4_PSE_BIT
 4

	)

94 
	#X86_CR4_PSE
 
	`_BITUL
(
X86_CR4_PSE_BIT
)

	)

95 
	#X86_CR4_PAE_BIT
 5

	)

96 
	#X86_CR4_PAE
 
	`_BITUL
(
X86_CR4_PAE_BIT
)

	)

97 
	#X86_CR4_MCE_BIT
 6

	)

98 
	#X86_CR4_MCE
 
	`_BITUL
(
X86_CR4_MCE_BIT
)

	)

99 
	#X86_CR4_PGE_BIT
 7

	)

100 
	#X86_CR4_PGE
 
	`_BITUL
(
X86_CR4_PGE_BIT
)

	)

101 
	#X86_CR4_PCE_BIT
 8

	)

102 
	#X86_CR4_PCE
 
	`_BITUL
(
X86_CR4_PCE_BIT
)

	)

103 
	#X86_CR4_OSFXSR_BIT
 9

	)

104 
	#X86_CR4_OSFXSR
 
	`_BITUL
(
X86_CR4_OSFXSR_BIT
)

	)

105 
	#X86_CR4_OSXMMEXCPT_BIT
 10

	)

106 
	#X86_CR4_OSXMMEXCPT
 
	`_BITUL
(
X86_CR4_OSXMMEXCPT_BIT
)

	)

107 
	#X86_CR4_VMXE_BIT
 13

	)

108 
	#X86_CR4_VMXE
 
	`_BITUL
(
X86_CR4_VMXE_BIT
)

	)

109 
	#X86_CR4_SMXE_BIT
 14

	)

110 
	#X86_CR4_SMXE
 
	`_BITUL
(
X86_CR4_SMXE_BIT
)

	)

111 
	#X86_CR4_FSGSBASE_BIT
 16

	)

112 
	#X86_CR4_FSGSBASE
 
	`_BITUL
(
X86_CR4_FSGSBASE_BIT
)

	)

113 
	#X86_CR4_PCIDE_BIT
 17

	)

114 
	#X86_CR4_PCIDE
 
	`_BITUL
(
X86_CR4_PCIDE_BIT
)

	)

115 
	#X86_CR4_OSXSAVE_BIT
 18

	)

116 
	#X86_CR4_OSXSAVE
 
	`_BITUL
(
X86_CR4_OSXSAVE_BIT
)

	)

117 
	#X86_CR4_SMEP_BIT
 20

	)

118 
	#X86_CR4_SMEP
 
	`_BITUL
(
X86_CR4_SMEP_BIT
)

	)

119 
	#X86_CR4_SMAP_BIT
 21

	)

120 
	#X86_CR4_SMAP
 
	`_BITUL
(
X86_CR4_SMAP_BIT
)

	)

121 
	#X86_CR4_PKE_BIT
 22

	)

122 
	#X86_CR4_PKE
 
	`_BITUL
(
X86_CR4_PKE_BIT
)

	)

127 
	#X86_CR8_TPR
 
	`_AC
(0x0000000f,
UL
Ë

	)

136 
	#CX86_PCR0
 0x20

	)

137 
	#CX86_GCR
 0xb8

	)

138 
	#CX86_CCR0
 0xc0

	)

139 
	#CX86_CCR1
 0xc1

	)

140 
	#CX86_CCR2
 0xc2

	)

141 
	#CX86_CCR3
 0xc3

	)

142 
	#CX86_CCR4
 0xe8

	)

143 
	#CX86_CCR5
 0xe9

	)

144 
	#CX86_CCR6
 0xó

	)

145 
	#CX86_CCR7
 0xeb

	)

146 
	#CX86_PCR1
 0xf0

	)

147 
	#CX86_DIR0
 0x„

	)

148 
	#CX86_DIR1
 0xff

	)

149 
	#CX86_ARR_BASE
 0xc4

	)

150 
	#CX86_RCR_BASE
 0xdc

	)

	@/usr/include/asm/ptrace-abi.h

1 #i‚de‡
_ASM_X86_PTRACE_ABI_H


2 
	#_ASM_X86_PTRACE_ABI_H


	)

4 #ifde‡
__i386__


6 
	#EBX
 0

	)

7 
	#ECX
 1

	)

8 
	#EDX
 2

	)

9 
	#ESI
 3

	)

10 
	#EDI
 4

	)

11 
	#EBP
 5

	)

12 
	#EAX
 6

	)

13 
	#DS
 7

	)

14 
	#ES
 8

	)

15 
	#FS
 9

	)

16 
	#GS
 10

	)

17 
	#ORIG_EAX
 11

	)

18 
	#EIP
 12

	)

19 
	#CS
 13

	)

20 
	#EFL
 14

	)

21 
	#UESP
 15

	)

22 
	#SS
 16

	)

23 
	#FRAME_SIZE
 17

	)

27 #i‡
deföed
(
__ASSEMBLY__
Ë|| deföed(
__FRAME_OFFSETS
)

32 
	#R15
 0

	)

33 
	#R14
 8

	)

34 
	#R13
 16

	)

35 
	#R12
 24

	)

36 
	#RBP
 32

	)

37 
	#RBX
 40

	)

39 
	#R11
 48

	)

40 
	#R10
 56

	)

41 
	#R9
 64

	)

42 
	#R8
 72

	)

43 
	#RAX
 80

	)

44 
	#RCX
 88

	)

45 
	#RDX
 96

	)

46 
	#RSI
 104

	)

47 
	#RDI
 112

	)

52 
	#ORIG_RAX
 120

	)

54 
	#RIP
 128

	)

55 
	#CS
 136

	)

56 
	#EFLAGS
 144

	)

57 
	#RSP
 152

	)

58 
	#SS
 160

	)

62 
	#FRAME_SIZE
 168

	)

67 
	#PTRACE_GETREGS
 12

	)

68 
	#PTRACE_SETREGS
 13

	)

69 
	#PTRACE_GETFPREGS
 14

	)

70 
	#PTRACE_SETFPREGS
 15

	)

71 
	#PTRACE_GETFPXREGS
 18

	)

72 
	#PTRACE_SETFPXREGS
 19

	)

74 
	#PTRACE_OLDSETOPTIONS
 21

	)

77 
	#PTRACE_GET_THREAD_AREA
 25

	)

78 
	#PTRACE_SET_THREAD_AREA
 26

	)

80 #ifde‡
__x86_64__


81 
	#PTRACE_ARCH_PRCTL
 30

	)

84 
	#PTRACE_SYSEMU
 31

	)

85 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

87 
	#PTRACE_SINGLEBLOCK
 33

	)

89 #i‚de‡
__ASSEMBLY__


90 
	~<löux/ty≥s.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

345 
	g__BEGIN_DECLS


347 #ifde‡
__USE_GNU


350 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

351 
__THROW
;

358 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

359 
__Êags
);

366 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

367 
size_t
 
__cou¡
, 
__Êags
);

373 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

374 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

375 
__Êags
);

381 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

382 
__Êags
);

388 #i‚de‡
__USE_FILE_OFFSET64


389 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

391 #ifde‡
__REDIRECT


392 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

393 
__off64_t
 
__Àn
),

394 
ÁŒoˇã64
);

396 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

399 #ifde‡
__USE_LARGEFILE64


400 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

401 
__off64_t
 
__Àn
);

406 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

407 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

408 
__Êags
Ë
__THROW
;

414 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

415 
__Êags
);

419 
__END_DECLS


	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && 
	tIS_IN
 (
	tlibc
)

48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #i‡
	`deföed
 (
__¨ch_swab16
)

49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #i‡
	`deföed
(
__¨ch_swab32
)

58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #i‡
	`deföed
 (
__¨ch_swab64
)

67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 #ifde‡
__HAVE_BUILTIN_BSWAP16__


100 
	#__swab16
(
x
Ë(
__u16
)
	`__buûtö_bsw≠16
((__u16)(x))

	)

102 
	#__swab16
(
x
) \

103 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

104 
	`___c⁄°™t_swab16
(
x
) : \

105 
	`__fswab16
(
x
))

	)

112 #ifde‡
__HAVE_BUILTIN_BSWAP32__


113 
	#__swab32
(
x
Ë(
__u32
)
	`__buûtö_bsw≠32
((__u32)(x))

	)

115 
	#__swab32
(
x
) \

116 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

117 
	`___c⁄°™t_swab32
(
x
) : \

118 
	`__fswab32
(
x
))

	)

125 #ifde‡
__HAVE_BUILTIN_BSWAP64__


126 
	#__swab64
(
x
Ë(
__u64
)
	`__buûtö_bsw≠64
((__u64)(x))

	)

128 
	#__swab64
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

130 
	`___c⁄°™t_swab64
(
x
) : \

131 
	`__fswab64
(
x
))

	)

140 
	#__swahw32
(
x
) \

141 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

142 
	`___c⁄°™t_swahw32
(
x
) : \

143 
	`__fswahw32
(
x
))

	)

151 
	#__swahb32
(
x
) \

152 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

153 
	`___c⁄°™t_swahb32
(
x
) : \

154 
	`__fswahb32
(
x
))

	)

160 
__Æways_ölöe
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

162 #ifde‡
__¨ch_swab16p


163  
	`__¨ch_swab16p
(
p
);

165  
	`__swab16
(*
p
);

167 
	}
}

173 
__Æways_ölöe
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

175 #ifde‡
__¨ch_swab32p


176  
	`__¨ch_swab32p
(
p
);

178  
	`__swab32
(*
p
);

180 
	}
}

186 
__Æways_ölöe
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

188 #ifde‡
__¨ch_swab64p


189  
	`__¨ch_swab64p
(
p
);

191  
	`__swab64
(*
p
);

193 
	}
}

201 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

203 #ifde‡
__¨ch_swahw32p


204  
	`__¨ch_swahw32p
(
p
);

206  
	`__swahw32
(*
p
);

208 
	}
}

216 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

218 #ifde‡
__¨ch_swahb32p


219  
	`__¨ch_swahb32p
(
p
);

221  
	`__swahb32
(*
p
);

223 
	}
}

229 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

231 #ifde‡
__¨ch_swab16s


232 
	`__¨ch_swab16s
(
p
);

234 *
p
 = 
	`__swab16p
(p);

236 
	}
}

241 
__Æways_ölöe
 
	$__swab32s
(
__u32
 *
p
)

243 #ifde‡
__¨ch_swab32s


244 
	`__¨ch_swab32s
(
p
);

246 *
p
 = 
	`__swab32p
(p);

248 
	}
}

254 
__Æways_ölöe
 
	$__swab64s
(
__u64
 *
p
)

256 #ifde‡
__¨ch_swab64s


257 
	`__¨ch_swab64s
(
p
);

259 *
p
 = 
	`__swab64p
(p);

261 
	}
}

269 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

271 #ifde‡
__¨ch_swahw32s


272 
	`__¨ch_swahw32s
(
p
);

274 *
p
 = 
	`__swahw32p
(p);

276 
	}
}

284 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

286 #ifde‡
__¨ch_swahb32s


287 
	`__¨ch_swahb32s
(
p
);

289 *
p
 = 
	`__swahb32p
(p);

291 
	}
}

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SO_INCOMING_CPU
 49

	)

87 
	#SO_ATTACH_BPF
 50

	)

88 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

90 
	#SO_ATTACH_REUSEPORT_CBPF
 51

	)

91 
	#SO_ATTACH_REUSEPORT_EBPF
 52

	)

93 
	#SO_CNX_ADVICE
 53

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/const.h

3 #i‚de‡
_LINUX_CONST_H


4 
	#_LINUX_CONST_H


	)

15 #ifde‡
__ASSEMBLY__


16 
	#_AC
(
X
,
Y
Ë
	)
X

17 
	#_AT
(
T
,
X
Ë
	)
X

19 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

20 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

21 
	#_AT
(
T
,
X
Ë((T)(X))

	)

24 
	#_BITUL
(
x
Ë(
	`_AC
(1,
UL
Ë<< (x))

	)

25 
	#_BITULL
(
x
Ë(
	`_AC
(1,
ULL
Ë<< (x))

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

160 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

162 
__THROW
;

165 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

166 
__THROW
 
__©åibuã_puª__
;

168 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

169 
__THROW
 
__©åibuã_puª__
;

170 
__END_NAMESPACE_STD


172 #ifde‡
__USE_XOPEN2K8


174 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

177 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

178 
size_t
 
__n
Ë
__THROW
;

182 
	~<xloˇÀ.h
>

184 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

185 
__loˇÀ_t
 
__loc
Ë
__THROW
;

187 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

188 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


194 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

199 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

200 
__END_NAMESPACE_STD


202 #ifde‡
__USE_XOPEN2K8


208 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

209 
__loˇÀ_t
 
__loc
Ë
__THROW
;

214 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

215 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

218 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

221 
__BEGIN_NAMESPACE_STD


223 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


224 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

226 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

227 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

229 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
__©åibuã_puª__
;

233 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


234 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

236 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

237 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

239 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

240 
__THROW
 
__©åibuã_puª__
;

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_GNU


247 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

248 
__THROW
 
__©åibuã_puª__
;

251 
__BEGIN_NAMESPACE_STD


254 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

255 
__THROW
 
__©åibuã_puª__
;

258 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

259 
__THROW
 
__©åibuã_puª__
;

261 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


262 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

263 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

264 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

265 c⁄° 
wch¨_t
 *
__ac˚±
)

266 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

268 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

269 
__THROW
 
__©åibuã_puª__
;

272 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


273 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

274 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

275 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

276 c⁄° 
wch¨_t
 *
__√edÀ
)

277 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

280 
__THROW
 
__©åibuã_puª__
;

284 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

285 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

286 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

289 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

290 
__END_NAMESPACE_STD


292 #ifde‡
__USE_XOPEN


294 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


295 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

296 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

297 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

298 c⁄° 
wch¨_t
 *
__√edÀ
)

299 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

301 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

302 
__THROW
 
__©åibuã_puª__
;

306 #ifde‡
__USE_XOPEN2K8


308 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

309 
__THROW
 
__©åibuã_puª__
;

313 
__BEGIN_NAMESPACE_STD


315 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


316 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

317 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

318 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

319 
size_t
 
__n
)

320 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

322 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

327 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

328 
__THROW
 
__©åibuã_puª__
;

331 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

336 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

337 
__THROW
;

340 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

341 
__END_NAMESPACE_STD


343 #ifde‡
__USE_GNU


346 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

347 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

348 
__THROW
;

352 
__BEGIN_NAMESPACE_STD


355 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

359 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

363 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

367 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

368 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

369 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

372 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

379 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #ifde‡
__USE_EXTERN_INLINES


388 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

389 
__exã∫_ölöe
 
wöt_t


390 
	`__NTH
 (
	$btowc
 (
__c
))

391 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

392 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

394 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

395 
__exã∫_ölöe
 

396 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

397 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

398 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

400 
__exã∫_ölöe
 
size_t


401 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

402 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

403 {  (
__ps
 !
NULL


404 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

407 
__BEGIN_NAMESPACE_STD


410 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

411 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

412 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

416 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

417 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

418 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

419 
__END_NAMESPACE_STD


422 #ifdef 
__USE_XOPEN2K8


425 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

426 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

427 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

431 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

432 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

433 
size_t
 
__nwc
, size_à
__Àn
,

434 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

439 #ifde‡
__USE_XOPEN


441 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

445 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

449 
__BEGIN_NAMESPACE_STD


452 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

453 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

454 
__END_NAMESPACE_STD


456 #ifde‡
__USE_ISOC99


457 
__BEGIN_NAMESPACE_C99


459 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

462 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

463 
__END_NAMESPACE_C99


467 
__BEGIN_NAMESPACE_STD


470 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

475 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

476 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

477 
__THROW
;

478 
__END_NAMESPACE_STD


480 #ifde‡
__USE_ISOC99


481 
__BEGIN_NAMESPACE_C99


484 
__exãnsi⁄__


485 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

486 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

487 
__THROW
;

491 
__exãnsi⁄__


492 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

493 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

494 
__ba£
Ë
__THROW
;

495 
__END_NAMESPACE_C99


498 #ifde‡
__USE_GNU


501 
__exãnsi⁄__


502 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

503 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

504 
__THROW
;

508 
__exãnsi⁄__


509 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

510 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

511 
__ba£
Ë
__THROW
;

514 #ifde‡
__USE_GNU


528 
	~<xloˇÀ.h
>

532 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

534 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

545 
__exãnsi⁄__


546 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

548 
__ba£
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

557 
__THROW
;

559 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

560 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

561 
__loˇÀ_t
 
__loc
Ë
__THROW
;

565 #ifde‡
__USE_XOPEN2K8


568 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

573 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

574 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
;

582 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

585 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


586 
__BEGIN_NAMESPACE_STD


589 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

596 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

597 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

607 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

608 
__THROW
 ;

614 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

615 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

616 
__gnuc_va_li°
 
__¨g
)

622 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

623 
__gnuc_va_li°
 
__¨g
)

627 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

628 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

629 
__gnuc_va_li°
 
__¨g
)

630 
__THROW
 ;

637 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

638 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

648 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

649 
__THROW
 ;

651 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

652 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

653 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

654 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

659 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

660 
__isoc99_fwsˇnf
)

662 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_wsˇnf
)

665 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

666 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

667 ...), 
__isoc99_swsˇnf
)

670 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

671 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

672 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

674 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

675 
__THROW
;

676 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

677 
	#wsˇnf
 
__isoc99_wsˇnf


	)

678 
	#swsˇnf
 
__isoc99_swsˇnf


	)

682 
__END_NAMESPACE_STD


685 #ifde‡
__USE_ISOC99


686 
__BEGIN_NAMESPACE_C99


691 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

692 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

693 
__gnuc_va_li°
 
__¨g
)

699 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

703 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

704 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

705 
__gnuc_va_li°
 
__¨g
)

706 
__THROW
 ;

708 #i‡!
deföed
 
__USE_GNU
 \

709 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

710 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

711 #ifde‡
__REDIRECT


712 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

713 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

714 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

716 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

719 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

720 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

724 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

725 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

728 
__gnuc_va_li°
 
__¨g
);

729 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

730 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

731 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

732 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

733 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

734 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

738 
__END_NAMESPACE_C99


742 
__BEGIN_NAMESPACE_STD


747 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

748 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

754 
wöt_t
 
	`gëwch¨
 ();

761 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

762 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

768 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

776 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

777 
__FILE
 *
__ª°ri˘
 
__°ªam
);

783 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

784 
__FILE
 *
__ª°ri˘
 
__°ªam
);

791 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

792 
__END_NAMESPACE_STD


795 #ifde‡
__USE_GNU


803 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

804 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

812 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

820 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

829 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

839 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

840 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

849 
__FILE
 *
__ª°ri˘
 
__°ªam
);

853 
__BEGIN_NAMESPACE_C99


857 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

858 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

859 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

860 
__END_NAMESPACE_C99


862 #ifde‡
__USE_GNU


863 
	~<xloˇÀ.h
>

867 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

868 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

869 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

870 
__loˇÀ_t
 
__loc
Ë
__THROW
;

879 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


880 
	#__√ed_iswxxx


	)

881 
	~<w˘y≥.h
>

885 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


886 
	~<bôs/wch¨2.h
>

889 #ifde‡
__LDBL_COMPAT


890 
	~<bôs/wch¨-ldbl.h
>

893 
__END_DECLS


901 #unde‡
__√ed_mb°©e_t


902 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
526
14327
cksum/testcksum.c
endian/endian.c
euler/misc.c
euler/misc.h
euler/test0.c
euler/test10.c
euler/test11.c
euler/test12.c
euler/test13.c
euler/test14.c
euler/test15.c
euler/test16.c
euler/test17.c
euler/test18.c
euler/test19.c
euler/test20.c
euler/test21.c
euler/test22.c
euler/test23.c
euler/test24.c
euler/test25.c
euler/test26.c
euler/test27.c
euler/test28.c
euler/test29.c
euler/test30.c
euler/test31.c
euler/test32.c
euler/test33.c
euler/test34.c
euler/test35.c
euler/test36.c
euler/test37.c
euler/test38.c
euler/test39.c
euler/test40.c
euler/test41.c
euler/test42.c
euler/test43.c
euler/test44.c
euler/test45.c
euler/test46.c
euler/test47.c
euler/test48.c
euler/test49.c
euler/test50.c
euler/test51.c
euler/test52.c
euler/test53.c
euler/test54.c
euler/test55.c
euler/test56.c
euler/test57.c
euler/test58.c
euler/test59.c
euler/test60.c
euler/test61.c
euler/test62.c
euler/test63.c
euler/test64.c
euler/test65.c
euler/test66.c
euler/test69.c
euler/test8.c
euler/test9.c
euler/test97.c
gprof/test.c
hash/ip_hash/dlist.h
hash/ip_hash/ghash_bucket.c
hash/ip_hash/ghash_bucket.h
hash/ip_hash/iptest.c
hash/ip_hash/jhash.c
hash/ip_hash/jhash.h
iputils-s20140519/Modules/pg3.c
iputils-s20140519/SNAPSHOT.h
iputils-s20140519/arping.c
iputils-s20140519/clockdiff.c
iputils-s20140519/in6_flowlabel.h
iputils-s20140519/ninfod/icmp6_nodeinfo.h
iputils-s20140519/ninfod/ni_ifaddrs.c
iputils-s20140519/ninfod/ni_ifaddrs.h
iputils-s20140519/ninfod/ninfod.c
iputils-s20140519/ninfod/ninfod.h
iputils-s20140519/ninfod/ninfod_addrs.c
iputils-s20140519/ninfod/ninfod_core.c
iputils-s20140519/ninfod/ninfod_name.c
iputils-s20140519/ping.c
iputils-s20140519/ping6.c
iputils-s20140519/ping6_niquery.h
iputils-s20140519/ping_common.c
iputils-s20140519/ping_common.h
iputils-s20140519/rarpd.c
iputils-s20140519/rdisc.c
iputils-s20140519/tftp.h
iputils-s20140519/tftpd.c
iputils-s20140519/tftpsubs.c
iputils-s20140519/tracepath.c
iputils-s20140519/tracepath6.c
iputils-s20140519/traceroute6.c
lib_test/lib.h
lib_test/lib1.c
lib_test/lib2.c
lib_test/program1.c
lib_test/program2.c
lib_test/runsosimple.c
module_test/kernel_mod/mymod.c
module_test/kernel_mod/mymod.mod.c
module_test/netlink/testnetlink.c
module_test/netlink/testnetlink.mod.c
module_test/netlink/user.c
module_test/proc_fs/myproc.c
module_test/proc_fs/myproc.mod.c
module_test/rtnetlink/mon_ip.c
module_test/rtnetlink/rtnetlink.c
net-tools-1.60/arp.c
net-tools-1.60/config.h
net-tools-1.60/hostname.c
net-tools-1.60/ifconfig.c
net-tools-1.60/include/interface.h
net-tools-1.60/include/ipx.h
net-tools-1.60/include/mii.h
net-tools-1.60/include/sockets.h
net-tools-1.60/include/util-ank.h
net-tools-1.60/intl.h
net-tools-1.60/ipmaddr.c
net-tools-1.60/iptunnel.c
net-tools-1.60/lib/activate.c
net-tools-1.60/lib/af.c
net-tools-1.60/lib/arcnet.c
net-tools-1.60/lib/ash.c
net-tools-1.60/lib/ax25.c
net-tools-1.60/lib/ax25_gr.c
net-tools-1.60/lib/ddp.c
net-tools-1.60/lib/ddp_gr.c
net-tools-1.60/lib/ec_hw.c
net-tools-1.60/lib/econet.c
net-tools-1.60/lib/ether.c
net-tools-1.60/lib/fddi.c
net-tools-1.60/lib/frame.c
net-tools-1.60/lib/getargs.c
net-tools-1.60/lib/getroute.c
net-tools-1.60/lib/hdlclapb.c
net-tools-1.60/lib/hippi.c
net-tools-1.60/lib/hw.c
net-tools-1.60/lib/inet.c
net-tools-1.60/lib/inet6.c
net-tools-1.60/lib/inet6_gr.c
net-tools-1.60/lib/inet6_sr.c
net-tools-1.60/lib/inet_gr.c
net-tools-1.60/lib/inet_sr.c
net-tools-1.60/lib/interface.c
net-tools-1.60/lib/ipx.c
net-tools-1.60/lib/ipx_gr.c
net-tools-1.60/lib/ipx_sr.c
net-tools-1.60/lib/irda.c
net-tools-1.60/lib/loopback.c
net-tools-1.60/lib/masq_info.c
net-tools-1.60/lib/net-features.h
net-tools-1.60/lib/net-support.h
net-tools-1.60/lib/netrom.c
net-tools-1.60/lib/netrom_gr.c
net-tools-1.60/lib/netrom_sr.c
net-tools-1.60/lib/nstrcmp.c
net-tools-1.60/lib/pathnames.h
net-tools-1.60/lib/ppp.c
net-tools-1.60/lib/ppp_ac.c
net-tools-1.60/lib/proc.c
net-tools-1.60/lib/proc.h
net-tools-1.60/lib/rose.c
net-tools-1.60/lib/rose_gr.c
net-tools-1.60/lib/setroute.c
net-tools-1.60/lib/sit.c
net-tools-1.60/lib/slip.c
net-tools-1.60/lib/slip_ac.c
net-tools-1.60/lib/sockets.c
net-tools-1.60/lib/strip.c
net-tools-1.60/lib/tr.c
net-tools-1.60/lib/tunnel.c
net-tools-1.60/lib/unix.c
net-tools-1.60/lib/util-ank.c
net-tools-1.60/lib/util.c
net-tools-1.60/lib/util.h
net-tools-1.60/lib/x25.c
net-tools-1.60/lib/x25_gr.c
net-tools-1.60/lib/x25_sr.c
net-tools-1.60/mii-tool.c
net-tools-1.60/nameif.c
net-tools-1.60/netstat.c
net-tools-1.60/plipconfig.c
net-tools-1.60/rarp.c
net-tools-1.60/route.c
net-tools-1.60/slattach.c
net-tools-1.60/statistics.c
net-tools-1.60/version.h
perf/foo.c
perf/test.c
sctp-tools/config.h
sctp-tools/doc/template.c
sctp-tools/src/apps/bindx_test.c
sctp-tools/src/apps/myftp.c
sctp-tools/src/apps/nagle_rcv.c
sctp-tools/src/apps/nagle_snd.c
sctp-tools/src/apps/peel_client.c
sctp-tools/src/apps/peel_server.c
sctp-tools/src/apps/sctp_darn.c
sctp-tools/src/apps/sctp_darn.h
sctp-tools/src/apps/sctp_status.c
sctp-tools/src/apps/sctp_test.c
sctp-tools/src/apps/sctp_xconnect.c
sctp-tools/src/func_tests/test_1_to_1_accept_close.c
sctp-tools/src/func_tests/test_1_to_1_addrs.c
sctp-tools/src/func_tests/test_1_to_1_connect.c
sctp-tools/src/func_tests/test_1_to_1_connectx.c
sctp-tools/src/func_tests/test_1_to_1_events.c
sctp-tools/src/func_tests/test_1_to_1_initmsg_connect.c
sctp-tools/src/func_tests/test_1_to_1_nonblock.c
sctp-tools/src/func_tests/test_1_to_1_recvfrom.c
sctp-tools/src/func_tests/test_1_to_1_recvmsg.c
sctp-tools/src/func_tests/test_1_to_1_rtoinfo.c
sctp-tools/src/func_tests/test_1_to_1_send.c
sctp-tools/src/func_tests/test_1_to_1_sendmsg.c
sctp-tools/src/func_tests/test_1_to_1_sendto.c
sctp-tools/src/func_tests/test_1_to_1_shutdown.c
sctp-tools/src/func_tests/test_1_to_1_socket_bind_listen.c
sctp-tools/src/func_tests/test_1_to_1_sockopt.c
sctp-tools/src/func_tests/test_1_to_1_threads.c
sctp-tools/src/func_tests/test_assoc_abort.c
sctp-tools/src/func_tests/test_assoc_shutdown.c
sctp-tools/src/func_tests/test_autoclose.c
sctp-tools/src/func_tests/test_basic.c
sctp-tools/src/func_tests/test_connect.c
sctp-tools/src/func_tests/test_connectx.c
sctp-tools/src/func_tests/test_fragments.c
sctp-tools/src/func_tests/test_getname.c
sctp-tools/src/func_tests/test_inaddr_any.c
sctp-tools/src/func_tests/test_peeloff.c
sctp-tools/src/func_tests/test_recvmsg.c
sctp-tools/src/func_tests/test_sctp_sendrecvmsg.c
sctp-tools/src/func_tests/test_sockopt.c
sctp-tools/src/func_tests/test_tcp_style.c
sctp-tools/src/func_tests/test_timetolive.c
sctp-tools/src/include/netinet/sctp.h
sctp-tools/src/lib/addrs.c
sctp-tools/src/lib/bindx.c
sctp-tools/src/lib/connectx.c
sctp-tools/src/lib/opt_info.c
sctp-tools/src/lib/peeloff.c
sctp-tools/src/lib/recvmsg.c
sctp-tools/src/lib/sendmsg.c
sctp-tools/src/testlib/sctputil.c
sctp-tools/src/testlib/sctputil.h
sctp-tools/src/withsctp/checksctp.c
sctp-tools/src/withsctp/sctp_bind.c
sctp-tools/src/withsctp/sctp_load_libs.c
sctp-tools/src/withsctp/sctp_socket.c
sctp-tools/src/withsctp/sctp_socket.h
sctp-tools/src/withsctp/sctp_sockopt.c
select_worker.c
shm_test/shm_client.c
shm_test/shm_main.c
sighandler/sighandler.c
socket/ioctl/ioctl_test.c
socket/multicast/client-old.c
socket/multicast/client.c
socket/multicast/server.c
socket/tcp/client.c
socket/tcp/server.c
socket/udp/client.c
socket/udp/server.c
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/asm/byteorder.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/atalk.h
/usr/include/linux/ax25.h
/usr/include/linux/errno.h
/usr/include/linux/errqueue.h
/usr/include/linux/filter.h
/usr/include/linux/fs.h
/usr/include/linux/if.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_fddi.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_plip.h
/usr/include/linux/if_slip.h
/usr/include/linux/if_tunnel.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/ip.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/netdevice.h
/usr/include/linux/netlink.h
/usr/include/linux/param.h
/usr/include/linux/pci.h
/usr/include/linux/ptrace.h
/usr/include/linux/rose.h
/usr/include/linux/route.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sched.h
/usr/include/linux/socket.h
/usr/include/linux/sockios.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/linux/udp.h
/usr/include/linux/x25.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/route.h
/usr/include/netax25/ax25.h
/usr/include/netdb.h
/usr/include/neteconet/ec.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/if_fddi.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip6.h
/usr/include/netinet/ip_icmp.h
/usr/include/netinet/tcp.h
/usr/include/netinet/udp.h
/usr/include/netipx/ipx.h
/usr/include/netpacket/packet.h
/usr/include/paths.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/resolv.h
/usr/include/sched.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/file.h
/usr/include/sys/ioctl.h
/usr/include/sys/param.h
/usr/include/sys/poll.h
/usr/include/sys/prctl.h
/usr/include/sys/resource.h
/usr/include/sys/shm.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syslog.h
/usr/include/sys/time.h
/usr/include/sys/timex.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/utsname.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/arpa/nameser_compat.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/ptrace.h
/usr/include/asm/sockios.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/error.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/param.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/timex.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs.h
/usr/include/libio.h
/usr/include/linux/bpf_common.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/ioctl.h
/usr/include/linux/libc-compat.h
/usr/include/linux/neighbour.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/linux/prctl.h
/usr/include/linux/sysinfo.h
/usr/include/rpc/netdb.h
/usr/include/stdc-predef.h
/usr/include/sys/bitypes.h
/usr/include/sys/cdefs.h
/usr/include/sys/ipc.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/asm/processor-flags.h
/usr/include/asm/ptrace-abi.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/swab.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/linux/const.h
/usr/include/wchar.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/posix_types.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
